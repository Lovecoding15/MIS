rem ' ****************************************************
rem ' * Build the Marriott SN -- MARSHA Code Xref
rem ' ****************************************************
rem ' program name: marriottSNSearch.build

begin

seterr errmsg

rem ' ****************************************************
rem ' * declares
rem ' ****************************************************
declare BBjStoredProcedureData sp!
declare BBjRecordSet rs!
declare BBjRecordData data!

rem ' ****************************************************
rem ' * open files
rem ' ****************************************************
call "ec_open::SNM01"

outfile = unt
open(outfile)"marr_sn_marsha.dat"
dim sn_marsha$:"SERIAL_NBR:C(20),MARSHA_CODE:C(5)"

rem ' -----------------------------------------------------------------
rem ' buildDBURL
rem ' -----------------------------------------------------------------

USE java.io.File
USE java.io.FileInputStream
USE java.io.BufferedInputStream
USE java.util.Properties
USE java.lang.StringBuffer

DECLARE File file!
DECLARE FileInputStream fis!
DECLARE BufferedInputStream bis!
DECLARE Properties props!
DECLARE StringBuffer sqlBuilder!

rem ' locate the properties file
props=unt
open(props)"ec_sql.properties"
props$=fid(props), props$=props$(9)
close(props)

file!= new java.io.File(props$)
fis!=new java.io.FileInputStream(file!)
bis!=new java.io.BufferedInputStream(fis!)
props!=new java.util.Properties()
props!.load(bis!)

sqlBuilder!= new StringBuffer(props!.getProperty("sqlURL.urlprefix") + props!.getProperty("sqlURL.server")+":")
sqlBuilder!.append(props!.getProperty("sqlURL.port")+"?database=")
sqlBuilder!.append(props!.getProperty("sqlURL.database")+"&user="+props!.getProperty("sqlURL.user")+"&password=")
sqlBuilder!.append(props!.getProperty("sqlURL.password"))
ourDbUrl$ = sqlBuilder!.toString()

bbjapi! = BBjAPI()

DECLARE BBjRecordSet serialNbrRecordSet!
DECLARE BBjRecordData serialNbrRecordData!

DECLARE BBjRecordSet marshaCodeRecordSet!
DECLARE BBjRecordData marshaCodeRecordData!

notFoundCnt = 0
dupeCnt = 0
count = 0
msg$ = "Begin Message" + $0A$

rem ' ****************************************************
rem ' * set the main query
rem ' ****************************************************

sql$ = "SELECT SERIAL_NBR FROM SNM01 where (customer_nbr = '002786' or customer_nbr = '008450') "
sql$ = sql$ + "and active_flag = 'Y' and len(rtrim(SERIAL_NBR)) = 9"

serialNbrRecordSet! = cast(BBjRecordSet, bbjapi!.createSQLRecordSet(ourDbUrl$,"",sql$))

if !serialNbrRecordSet!.isEmpty() then 
	serialNbrRecordSet!.first()
	while 1
		serialNbrRecordData! = serialNbrRecordSet!.getCurrentRecordData()
		
		SerialNbr$ = cvs(serialNbrRecordData!.getFieldValue("SERIAL_NBR"),3)
		
		rem ' find the MARSHA Code from the PO of the Purchase Invoice
        sql1$ = "SELECT t2.ar_po_number FROM SNT01 t1 " 
        sql1$ = sql1$ + "INNER JOIN ART03 t2 on t1.firm_id = t2.firm_id and t1.customer_nbr = t2.customer_nbr and t1.ar_inv_nbr = t2.ar_inv_nbr "
        sql1$ = sql1$ + "where t1.serial_nbr = '" + SerialNbr$ + "'" 

		marshaCodeRecordSet! = cast(BBjRecordSet, bbjapi!.createSQLRecordSet(ourDbUrl$,"",sql1$))

		if marshaCodeRecordSet!.isEmpty() then
			gosub alternateMARSHA
		else
		    marshaCodeRecordSet!.first()
			marshaCodeRecordData! = marshaCodeRecordSet!.getCurrentRecordData()
			MARSHACode$ = cvs(marshaCodeRecordData!.getFieldValue("AR_PO_NUMBER"),3)
			if len(MARSHACode$) > 5 then
			    gosub alternateMARSHA
			fi
		fi
		marshaCodeRecordSet!.close()
		
		rem ' ****************************************************
		rem ' * output data
		rem ' ****************************************************
		if MARSHACode$ = "" then
		    notFoundCnt = notFoundCnt + 1
		    MARSHACode$ = "NF" + str(notFoundCnt:"000")
		    msg$ = msg$ + "Not Found " + MARSHACode$ + " " + SerialNbr$ + $0A$
		fi
		dim sn_marsha$:"SERIAL_NBR:C(20),MARSHA_CODE:C(5)"
		sn_marsha.serial_nbr$ = SerialNbr$ 
		sn_marsha.marsha_code$ = MARSHACode$
		
		duplicate = 1
		write record(outfile, dom=*next)sn_marsha$; duplicate = 0
		if duplicate then dupeCnt = dupeCnt + 1
		rem ' msg$ = msg$ + "Duplicate " + sn_marsha.marsha_code$ + " " + sn_marsha.serial_nbr$ + $0A$

		serialNbrRecordSet!.next(err=*break)

		count = count + 1
		if count = 6000 then break
		rem ' if mod(count,500) = 0 then print count,

	wend
	
fi

serialNbrRecordSet!.close()

rem ' print count
rem ' print notFoundCnt
rem ' print dupeCnt

rem ' from$ = "customer-service@basis.cloud"
rem ' to$ = "misdev@basis.cloud"
rem ' cc$ = ""
rem ' bcc$ = ""
rem ' subject$ = "marriottReset.build Report"
rem ' msgtxt$ = "Count: " + str(count) + " Not Found: " + str(notFoundCnt) + " Dupes: " + str(dupeCnt)
rem ' msgtxt$ = msgtxt$ + $0a$ + msg$

rem ' call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msgtxt$, ""

release

end

rem ' ****************************************************
rem ' * look up the MARSHA Code from and alternate source
rem ' ****************************************************

alternateMARSHA:
    MARSHACode$ = ""
    searchSN$ = SerialNbr$ + fill(20," ")
    searchSN$ = searchSN$(1,20)
    
    found = 0
    read record(snm01, key = searchSN$, dom=*next)snm01$; found = 1
    if found then
        snComment$ = cvs(snm01.comment$,7)
        if pos("MARSHA CODE "= snComment$) = 1 then
            snComment$ = snComment$(len("MARSHA CODE ") + 1)
            if len(snComment$) >= 5 then
                MARSHACode$ = snComment$(1,5)
            fi
        fi
    fi

return

errmsg:
    from$ = "customer-service@basis.cloud"
    to$ = "misdev@basis.cloud"
    cc$ = ""
    bcc$ = ""
    subject$ = "marriottRest.build Error" 
    msgtxt$ = "Error " + str(err) + " in " + str(tcb(5)) + " in " + pgm(-1) + $0a$ + errmes(-1)
    msgtxt$ = msgtxt$ + $0a$ + $0a$ + "Timestamp: " + date(0:"%Y%Mz%Dz %Hz%mz%sz") + $0A$
    call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msgtxt$, ""
    release

end