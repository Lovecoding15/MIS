   rem ' Program Name: C:\CVS\basisaon\EC\editEndUserData.src
   rem ' Resource File: editEndUserData.arc
   rem ' Generated by GUIBuilder 4.0 (February 29, 2008 at 15:21:40)
   rem ' Portions Copyright (C) 1997-2008 BASIS International Ltd.  All rights reserved.

   seterr gb__no_arg
   enter gb__arg$; gb__args=-1,gb__args=pos($0a$=fattr(gb__arg$,$$),1,0)
gb__no_arg:
   seterr 0

   precision 99
   gb__show_forms=2; rem ' Create all forms at the beginning

   rem ' gb_ini.cod - GUIBuilder generated programs: Initialization
   rem ' Copyright (C) 1998-2007 BASIS International Ltd.  All rights reserved.
   rem
   rem ' ***** I N I T I A L I Z A T I O N *****
   rem ' The first part of the initialization section ensures that the
   rem ' environment will support the requirements of the generated 
   rem ' program.  These requirements are:
   rem '     1.  The interpreter supports GUI
   rem '     2.  The interpreter is Visual PRO/5 2.0 or above
   rem '     3.  A SYSGUI device is defined in config.bbx
   rem

   rem ' 1. Make sure the interpreter in use supports GUI
   if info(6,0)="" then
:     print 'cs',;
:     print "This interpreter does not support GUI.";
:     print "Press any key to continue.",;
:     read record(0,siz=1);
:     stop
   rem

   rem ' 2. Make sure the interpreter in use is Visual PRO/5 2.0 or above
   if sys<"LEVEL 5" or (cvs(sys,3)="LEVEL 5" and cvs(rev,3)<"REV 2.0") then
:     input(0,err=gb__eoj)
:      	'ask'("",4,"Requires at least Visual PRO/5 Rev. 2.0.  "+
:      	"This program will now terminate.","&Terminate:Y"+$0a$),
:      	'ee',gb__temp$,'be',;
:     goto gb__eoj
   rem

   seterr gb__err; setesc gb__esc

   rem ' 3. Check config.bbx for SYSGUI and SYSPRINT devices
   gb__alias=0,gb__sysgui$="",gb__sysprint$=""
   dim gb__tsk$:"type:u(1),opens:u(1),name:c(1*=0),dname:c(1*=0),pname:c(1*=0),modes:c(1*=0)"

gb__check_tsk:
   gb__tsk$=tsk(gb__alias,err=gb__done_with_tsk)

   if gb__sysgui$="" and cvs(gb__tsk.pname$,7)="SYSGUI" then
:     gb__sysgui$=gb__tsk.name$

   if gb__sysprint$="" and cvs(gb__tsk.pname$,7)="SYSPRINT" then
:     gb__sysprint$=gb__tsk.name$

   if gb__sysgui$="" or gb__sysprint$="" then
:     gb__alias=gb__alias+1;
:     goto gb__check_tsk

gb__done_with_tsk:
   if gb__sysgui$="" then
:     gb__sysgui$="not defined in config.bbx";
:     goto gb__cannot_open_sysgui

   rem ' Open SYSGUI device
   gb__sysgui=unt; open (gb__sysgui,err=gb__cannot_open_sysgui)gb__sysgui$
   goto gb__opened_sysgui

gb__cannot_open_sysgui:
   gb__err$="Unable to open the SYSGUI device (alias "+gb__sysgui$+
:    ") in program "+pgm(-2)+".  Visual PRO/5 cannot maintain a graphical "+
:    "user interface without this device.  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"SYSGUI error")
   goto gb__eoj

gb__opened_sysgui:
   dim gb__sysgui_fin$:tmpl(gb__sysgui,ind=0)
   gb__sysgui_fin$=fin(gb__sysgui)

   rem ' splash screen, if any, can go here
   rem ' splash=gb__sysgui_fin.available_context
   rem ' print (gb__sysgui)'context'(splash),'window'(0,0,500,400,$$,$01000000$),'image'(0,0,500,400,"mysplash.gif")

   dim gb__event$:tmpl(gb__sysgui)
   gb__event=len(gb__event$)

   rem ' Open the resource file (try both .arc and .brc if necessary)
   gb__resource$="editEndUserData.arc"
   if pos("ec.bbj"= pgm(-2)) then gosub prep_routine 
   gb__handle=resopen(gb__resource$,err=gb__resource_fallback);
:  goto gb__opened_resource

gb__resource_fallback:
   gb__temp=pos(".brc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"arc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

   gb__temp=pos(".arc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"brc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

gb__cannot_open_resource:
   gb__err$="Unable to open resource file editEndUserData.arc"+
:    " in program "+pgm(-2)+".  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"Resource file error")
   goto gb__eoj

   rem ' ------------------------------------------------------------------------
   rem ' Functions to manipulate screens and data
   rem ' ------------------------------------------------------------------------

   rem ' Get data from screen into template record
   def fngb__get_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put data from template record to screen
   def fngb__put_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Get fields from screen into template record
   def fngb__get_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put fields from template record to screen
   def fngb__put_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Set focus to specified Window ID
   def fngb__focus_win_id(xx__win_id$)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui,err=gb__focus_win_id)'context'(xx__context),'focus'(0),'raise',
      return xx__context
   gb__focus_win_id:
      xx__form=fngb__form(xx__win_id$)
      print (gb__sysgui)'context'(xx__context),
:                       'resource'(len(gb__resource$[xx__form])),gb__resource$[xx__form],
      return xx__context
   fnend


   rem ' Get form number given Window ID
   def fngb__form(xx__win_id$)
       gb__form=-1,xx__form_id$=xx__win_id$
       xx__form=pos("."=xx__form_id$)
       if xx__form then
:         xx__form_id$=xx__form_id$(1,xx__form-1)
       for xx__form=1 to gb__forms
           if gb__form.id$[xx__form]=xx__form_id$ then
:             gb__form=xx__form;
:             break
       next xx__form
       return gb__form
   fnend


   rem ' Set focus to specified Window ID + Control ID
   def fngb__focus_ctl_id(xx__win_id$,xx__ctl_id)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Set focus to specified Window ID + Control Name
   def fngb__focus_ctl_name(xx__win_id$,xx__ctl_name$)
      dim xx__rec$:fngb__template$(xx__win_id$)
      xx__ctl_id=num(fattr(xx__rec$,xx__ctl_name$,"ID"))
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Get Window ID given Context
   def fngb__win_id$(xx__context)
       xx__win_id$=""
       for xx__window=1 to gb__windows
           if gb__window.context[xx__window]=xx__context then
:             xx__win_id$=gb__window.win_id$[xx__window];
:             break
       next xx__window
       return xx__win_id$
   fnend


   rem ' Get Context given Window ID
   def fngb__context(xx__win_id$)
      gb__window=-1,gb__context=-1
      for xx__window=1 to gb__windows
          if gb__window.win_id$[xx__window]=xx__win_id$ then
:            gb__window=xx__window,gb__context=gb__window.context[gb__window];
:            break
      next xx__window
      if gb__context>=0 or gb__window<0 then
:        return gb__context
      return fngb__window(xx__win_id$)
   fnend


   rem ' Get Window Information given Window ID
   def fngb__win_info$(xx__win_id$)
      dim gb__win_info$(0)
      xx__context=fngb__context(xx__win_id$)
      if xx__context<0 then
:        return gb__win_info$
      dim gb__win_info$:"class:u(1),type:u(1),hidden:u(1),disabled:u(1),"
:                      +"context:u(2),eventmask:u(4),flags:u(4),focus:u(2),"
:                      +"x:i(2),y:i(2),w:u(2),h:u(2),title:c(16*=)"
      gb__win_info$=ctrl(gb__sysgui,0,4,xx__context)
:                  +ctrl(gb__sysgui,0,8,xx__context)
:                  +bin(xx__context,2)
:                  +sendmsg(gb__sysgui,0,21,0,"",xx__context)
:                  +sendmsg(gb__sysgui,0,22,0,"",xx__context)
:                  +ctrl(gb__sysgui,0,2,xx__context)
:                  +ctrl(gb__sysgui,0,0,xx__context)
:                  +ctrl(gb__sysgui,0,1,xx__context)
      return gb__win_info$
   fnend

gb__opened_resource:

   rem ==================== End of gb_ini.cod ====================

rem ' Instantiate form(s)

gb__forms = 1
dim gb__form_context[gb__forms],gb__resource$[gb__forms],gb__form$:"id[1]:c(4*=10)"

gb__windows=1; rem ' includes child windows, if any
gb__win_id$ = "101"

dim gb__win$:"END_USER_EDIT:I(2)"

gb__win.END_USER_EDIT=-1

dim gb__window$:"win_id[1]:c(8*=10),win_name[1]:c(16*=10),context[1]:n(4*=10)"
gb__window.win_id$[1]="101",gb__window.win_name$[1]="END_USER_EDIT",gb__window.context[1]=-1,gb__form.id$[1]="101"

gb__context = fngb__window("101"); rem ' end_user_edit

rem ' Instantiate the form corresponding to a given window

   def fngb__window(xx__win_id$)
      gb__window = 0
      for xx__window=1 to gb__windows
         if gb__window.win_id$[xx__window]=xx__win_id$ then
:           gb__window = xx__window;
:           break
      next xx__window
      if gb__window = 0 then 
:        return -1
      if gb__window.context[gb__window] >= 0 then
:        return gb__window.context[gb__window]

      switch fngb__form(xx__win_id$)

         case 1; rem ' Load Form ID 101 (END_USER_EDIT)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[1]=gb__sysgui_fin.available_context
         gb__resource$[1]=resget(gb__handle,1,101)
         print (gb__sysgui)'context'(gb__form_context[1]),'resource'(len(gb__resource$[1])),gb__resource$[1]
         gb__win.END_USER_EDIT=gb__form_context[1]
         gb__window.context[1]=gb__win.END_USER_EDIT
         break
      swend

      return gb__window.context[gb__window]
   fnend

rem ' Get template for controls on a given window

   def fngb__template$(xx__win_id$)
      if xx__win_id$="101" then return "FILEMENU:N(1*=0):ID=101 TYPE=100 X=0 Y=0 W=0 H=0:,SAVECURENDUSER:N(1*=0):ID=103 TYPE=100 X=0 Y=0 W=0 H=0:,EXITPROGRAM:N(1*=0):ID=102 TYPE=100 X=0 Y=0 W=0 H=0:,EDITMENU:N(1*=0):ID=104 TYPE=100 X=0 Y=0 W=0 H=0:,CLEARFORM:N(1*=0):ID=105 TYPE=100 X=0 Y=0 W=0 H=0:,TOOLSMENU:N(1*=0):ID=106 TYPE=100 X=0 Y=0 W=0 H=0:,PREPFILE:N(1*=0):ID=107 TYPE=100 X=0 Y=0 W=0 H=0:,TOGGLELISTORDER:N(1*=0):ID=108 TYPE=100 X=0 Y=0 W=0 H=0:,LANGUAGEMENU:N(1*=0):ID=109 TYPE=100 X=0 Y=0 W=0 H=0:,MENUENGLISH:N(1*=0):ID=110 TYPE=100 X=0 Y=0 W=0 H=0:,MENUGERMAN:N(1*=0):ID=111 TYPE=100 X=0 Y=0 W=0 H=0:,MENUFRENCH:N(1*=0):ID=112 TYPE=100 X=0 Y=0 W=0 H=0:,UPLOADMENU:N(1*=0):ID=113 TYPE=100 X=0 Y=0 W=0 H=0:,UPLOADINSTRUCTIONS:N(1*=0):ID=114 TYPE=100 X=0 Y=0 W=0 H=0:,REFERENCENBR:C(64*=0):ID=101 TYPE=16 X=160 Y=70 W=330 H=20:,COMPNAME:C(64*=0):ID=102 TYPE=16 X=160 Y=90 W=330 H=20:,CONTACTNAME:C(64*=0):ID=103 TYPE=16 X=160 Y=110 W=330 H=20:,ADDRLNONE:C(64*=0):ID=104 TYPE=16 X=160 Y=130 W=330 H=20:,ADDRLNTWO:C(64*=0):ID=105 TYPE=16 X=160 Y=150 W=330 H=20:,ADDRLNTHREE:C(64*=0):ID=106 TYPE=16 X=160 Y=170 W=330 H=20:,CITY:C(64*=0):ID=107 TYPE=16 X=160 Y=190 W=260 H=20:,STATE:C(255*=0):ID=108 TYPE=19 X=160 Y=210 W=60 H=130:,POSTALCODE:C(64*=0):ID=109 TYPE=16 X=300 Y=210 W=120 H=20:,COUNTRY:C(255*=0):ID=110 TYPE=19 X=160 Y=230 W=150 H=130:,EMAILADDRESS:C(64*=0):ID=111 TYPE=16 X=160 Y=250 W=330 H=20:,PHONENUMBER:C(64*=0):ID=112 TYPE=16 X=160 Y=270 W=150 H=20:,INDUSTRY:C(255*=0):ID=113 TYPE=19 X=160 Y=300 W=330 H=130:,OTHERDESC:C(64*=0):ID=114 TYPE=16 X=160 Y=320 W=330 H=20:,BASISPRODUCT:C(255*=0):ID=115 TYPE=19 X=160 Y=340 W=150 H=130:,APPMODULESUSED:C(64*=0):ID=116 TYPE=22 X=160 Y=370 W=330 H=60:,ADVANTAGE:N(1*=0):ID=117 TYPE=13 X=160 Y=430 W=240 H=30:,ANNOUNCEMENTS:N(1*=0):ID=118 TYPE=13 X=160 Y=460 W=270 H=25:,SAVE:C(1*=0):ID=119 TYPE=11 X=340 Y=600 W=90 H=25:,COMPANYNAMEFLAG:C(64*=0):ID=121 TYPE=17 X=140 Y=90 W=20 H=20:,LABEL1:C(64*=0):ID=126 TYPE=17 X=10 Y=90 W=140 H=20:,LABEL2:C(64*=0):ID=127 TYPE=17 X=10 Y=110 W=140 H=20:,LABEL3:C(64*=0):ID=128 TYPE=17 X=10 Y=130 W=140 H=20:,LABEL4:C(64*=0):ID=129 TYPE=17 X=10 Y=150 W=140 H=20:,LABEL5:C(64*=0):ID=130 TYPE=17 X=10 Y=170 W=140 H=20:,LABEL6:C(64*=0):ID=131 TYPE=17 X=10 Y=190 W=140 H=20:,LABEL7:C(64*=0):ID=132 TYPE=17 X=10 Y=210 W=140 H=20:,LABEL8:C(64*=0):ID=133 TYPE=17 X=220 Y=210 W=70 H=20:,COUNTRYFLAG:C(64*=0):ID=120 TYPE=17 X=140 Y=230 W=20 H=20:,LABEL9:C(64*=0):ID=134 TYPE=17 X=10 Y=230 W=140 H=20:,LABEL10:C(64*=0):ID=135 TYPE=17 X=10 Y=250 W=140 H=20:,LABEL11:C(64*=0):ID=136 TYPE=17 X=10 Y=270 W=140 H=20:,LABEL12:C(64*=0):ID=137 TYPE=17 X=10 Y=300 W=140 H=20:,LABEL13:C(64*=0):ID=138 TYPE=17 X=10 Y=320 W=140 H=20:,LABEL14:C(64*=0):ID=139 TYPE=17 X=10 Y=340 W=140 H=20:,LABEL15:C(64*=0):ID=140 TYPE=17 X=10 Y=370 W=140 H=50:,ENDUSERLIST:C(255*=0):ID=100 TYPE=19 X=160 Y=10 W=330 H=110:,LABEL_16:C(64*=0):ID=141 TYPE=17 X=10 Y=10 W=140 H=30:,LABEL18:C(64*=0):ID=143 TYPE=17 X=10 Y=70 W=140 H=20:,CLEAR:C(1*=0):ID=123 TYPE=11 X=220 Y=600 W=90 H=25:,COMPNAMEREQ:C(64*=0):ID=147 TYPE=17 X=500 Y=90 W=50 H=25:,COUNTRYREQ:C(64*=0):ID=148 TYPE=17 X=320 Y=230 W=50 H=20:,TOGGLEORDER:C(1*=0):ID=125 TYPE=11 X=230 Y=40 W=170 H=25:,LINKEDSERIALNBRS:C(255*=0):ID=142 TYPE=18 X=160 Y=510 W=120 H=80:,UNLINKEDSERIALNBRS:C(255*=0):ID=144 TYPE=18 X=370 Y=510 W=120 H=80:,ADDSERIALNBRS:C(1*=0):ID=145 TYPE=11 X=300 Y=520 W=50 H=25:,REMOVESERIALNBRS:C(1*=0):ID=146 TYPE=11 X=300 Y=550 W=50 H=25:,LABEL19:C(64*=0):ID=149 TYPE=17 X=160 Y=490 W=190 H=20:,LABEL20:C(64*=0):ID=150 TYPE=17 X=370 Y=490 W=180 H=20:,ENDUSERNUMBER:C(64*=0):ID=122 TYPE=16 X=20 Y=610 W=120 H=20:"
      return ""
   fnend

ourAPI!=BBjAPI()
ourSysGui!=ourAPI!.getSysGui()
ourSystemMetrics!=ourSysGui!.getSystemMetrics()
scrDimension!=ourSystemMetrics!.getScreenSize()
ourContext=ourSysGui!.getContext()
ourWindow!=ourSysGui!.getWindow(ourContext)
ourWinID=num(gb__win_id$)
gosub open_files
translator!.translateWindow(ourWindow!)
gosub center_window
ourWindow!.setVisible(1)

rem ' set cursor to hour glass
ourWindow!.setCursor(3)

rem ' controls the order of end user selection
usingCompanyOrder=1

gosub transfer_controls_to_hashmap
gosub load_lists
gosub set_form_clean

endUserSerialNbrs!=ourAPI!.makeVector()

ourWindow!.setText(ourWindow!.getText() + " - " + customerNbr$)

rem ' all done with init return cursor to standard pointer
ourWindow!.setCursor(0)

def FNgetSelectedEndUserNbr$(endUserNbrList$,selected)
    wrkList$=endUserNbrList$
    for x = 0 to selected
        rpos=pos($0A$=wrkList$)
        selected$=wrkList$(1,rpos-1)
        wrkList$=wrkList$(rpos+1)
    next x
    endUserNbr$=selected$
    return endUserNbr$
fnend

rem ' get index of an item from $0A$ delimited list 
def FNgetIndex(target$, in_list$)
    wrkList$=in_list$
    out_index=-1
    while 1
        rpos=pos($0A$=wrklist$)
        if rpos then
            out_index=out_index+1
            this_target$=wrkList$(1,rpos-1)
            wrkList$=wrkList$(rpos+1)
            if target$=this_target$ then 
                break
            fi
        else
            out_index=-1
            break
        fi
    wend
    return out_index
fnend

rem ' get index of an item from a BBjVector!
def FNfindSelectedIndexForListButton(target$, itemVector!)
    if itemVector!.size() > 0 then
        for testIdx=0 to itemVector!.size()-1
            if cvs(target$,3)=cvs(cast(BBjString, itemVector!.getItem(testIdx)),3) then
                break
            fi
        next testIdx
        if testIdx >= itemVector!.size() then testIdx=-1
    else
        testIdx=-1
    fi
    return testIdx
fnend

rem ' replace \n with $0A$
def FNunescLf$(xx_inStr$)
    sgb_temp$=xx_inStr$,xx_outStr$=""
    while len(sgb_temp$)
        sgb_pos=pos("\n"=sgb_temp$)
        if sgb_pos=0 then
            xx_outStr$=xx_outStr$+sgb_temp$+$0A$,sgb_temp$=""
        else
            xx_outStr$=xx_outStr$+sgb_temp$(1,sgb_pos-1)+$0A$,sgb_temp$=sgb_temp$(sgb_pos+2)
        fi
    wend
    return xx_outStr$
fnend

rem ' replace $0A$ with \n
def FNescLf$(xx_inStr$)
    sgb_temp$=xx_inStr$,xx_outStr$=""
    while len(sgb_temp$)
        sgb_pos=pos($0A$=sgb_temp$)
        if sgb_pos=0 Then
            xx_outStr$=xx_outStr$+sgb_temp$+"\n",sgb_temp$=""
        else
            xx_outStr$=xx_outStr$+sgb_temp$(1,sgb_pos-1)+"\n",sgb_temp$=sgb_temp$(sgb_pos+1)
        fi
    wend
    return xx_outStr$
fnend

def FNgetMathcingItem$(List1$, List2$, xMatch$)
    wrkList1$=List1$, wrkList2$=List2$
    xresult$=""
    xOffset=0
    while len(wrkList1$)
        xOffset=xOffset+1
        rpos=pos($0a$=wrkList1$)
        xtarget$=wrkList1$(1,rpos-1)
        wrkList1$=wrkList1$(rpos+1)
        if xtarget$=xMatch$ then
            for x = 1 to xOffset
                dpos=pos($0a$=wrkList2$)
                xresult$=wrkList2$(1,dpos-1)
                wrkList2$=wrkList2$(dpos+1)
            next x
            break
        fi
    wend
    return xresult$
fnend
rem ' ---------------------------------------------------------------
rem ' Event Loop
rem ' ---------------------------------------------------------------

dim gb__closed[gb__windows]; rem ' track window status
dim gb__generic$:noticetpl(0,0); rem ' generic notice template
gb__eoj=0
goto gb__event

rem ' Load gb__notice$ string only if we're handling the event

gb__notice:
   gb__generic$=notice(gb__sysgui,gb__event.x%)
   dim gb__notice$:noticetpl(gb__generic.objtype%,gb__event.flags%)
   gb__notice$=gb__generic$
return

gb__event: repeat
   read record (gb__sysgui,siz=gb__event,err=gb__event_loop_end)gb__event$

   rem ' Get Window ID or Popup ID
   gb__win_id$=$$,gb__popup_id=gb__event.x*(gb__event.code$="P")
   if gb__popup_id=0 then gb__win_id$=fngb__win_id$(gb__event.context)

   rem ' Track whether event was handled
   gb__event_handled=0

   rem ' Handle events for Window ID 101 (end_user_edit)
   while gb__win_id$="101"
      if gb__event.code$="X" then
:        gosub W101_C0_WIN_CLOSE;
:        gb__closed[1]=1;
:        gb__event_handled=1;
:        break
      if gb__event.id=100 and gb__event.code$="N" and gb__event.flags=2 then
:        gosub gb__notice;
:        gosub W101_C100_LIST_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=101 and gb__event.code$="e" then
:        gosub W101_C101_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=102 and gb__event.code$="C" then
:        gosub W101_C102_MENU_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=102 and gb__event.code$="e" then
:        gosub W101_C102_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=103 and gb__event.code$="C" then
:        gosub W101_C103_MENU_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=103 and gb__event.code$="e" then
:        gosub W101_C103_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=104 and gb__event.code$="e" then
:        gosub W101_C104_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=105 and gb__event.code$="C" then
:        gosub W101_C105_MENU_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=105 and gb__event.code$="e" then
:        gosub W101_C105_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=106 and gb__event.code$="e" then
:        gosub W101_C106_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=107 and gb__event.code$="C" then
:        gosub W101_C107_MENU_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=107 and gb__event.code$="e" then
:        gosub W101_C107_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=108 and gb__event.code$="C" then
:        gosub W101_C108_MENU_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=108 and gb__event.code$="N" and gb__event.flags=2 then
:        gosub gb__notice;
:        gosub W101_C108_LIST_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=109 and gb__event.code$="e" then
:        gosub W101_C109_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=110 and gb__event.code$="C" then
:        gosub W101_C110_MENU_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=110 and gb__event.code$="N" and gb__event.flags=2 then
:        gosub gb__notice;
:        gosub W101_C110_LIST_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=111 and gb__event.code$="C" then
:        gosub W101_C111_MENU_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=111 and gb__event.code$="e" then
:        gosub W101_C111_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=112 and gb__event.code$="C" then
:        gosub W101_C112_MENU_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=112 and gb__event.code$="e" then
:        gosub W101_C112_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=113 and gb__event.code$="N" and gb__event.flags=2 then
:        gosub gb__notice;
:        gosub W101_C113_LIST_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=114 and gb__event.code$="C" then
:        gosub W101_C114_MENU_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=114 and gb__event.code$="e" then
:        gosub W101_C114_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=115 and gb__event.code$="N" and gb__event.flags=2 then
:        gosub gb__notice;
:        gosub W101_C115_LIST_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=116 and gb__event.code$="e" then
:        gosub W101_C116_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=117 and gb__event.code$="c" and gb__event.flags=0 then
:        gosub W101_C117_CHECK_OFF;
:        gb__event_handled=1;
:        break
      if gb__event.id=117 and gb__event.code$="c" and gb__event.flags=1 then
:        gosub W101_C117_CHECK_ON;
:        gb__event_handled=1;
:        break
      if gb__event.id=118 and gb__event.code$="c" and gb__event.flags=0 then
:        gosub W101_C118_CHECK_OFF;
:        gb__event_handled=1;
:        break
      if gb__event.id=118 and gb__event.code$="c" and gb__event.flags=1 then
:        gosub W101_C118_CHECK_ON;
:        gb__event_handled=1;
:        break
      if gb__event.id=119 and gb__event.code$="B" then
:        gosub W101_C119_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=123 and gb__event.code$="B" then
:        gosub W101_C123_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=125 and gb__event.code$="B" then
:        gosub W101_C125_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=145 and gb__event.code$="B" then
:        gosub W101_C145_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=146 and gb__event.code$="B" then
:        gosub W101_C146_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      break; rem ' Catch unhandled events
   wend; rem ' End of Window ID 101

   rem ' We're done when all windows have been closed.
   rem ' Developer can terminate event loop by setting
   rem ' gb__eoj=1 in any event handler.

   if !(gb__eoj) then
:     gb__eoj=1;
:     for gb__window=1 to gb__windows;
:        gb__eoj=(gb__eoj and gb__closed[gb__window]);
:     next gb__window

until gb__eoj

gb__event_loop_end: rem ' -------------------------------------

rem gb_eoj.cod - GUIBuilder generated programs: End of Job
rem Copyright (C) 1998-2007 BASIS International Ltd.  All rights reserved.
rem
rem ***** P R O G R A M   E X I T **************************************
rem
gb__eoj:
   if gb__forms and gb__sysgui then
:     for gb__temp=1 to gb__forms;
:        print (gb__sysgui)'context'(gb__form_context[gb__temp]),'destroy'(0);
:     next gb__temp

   if ec__ChannelList then
:	gosub close_files

   if gb__sysgui then
:     close (gb__sysgui)

   resclose (gb__handle,err=gb__eoj_final)

gb__eoj_final:
if pos("ec.bbj" = pgm(-2)) and (info(3,2)="thines" or info(3,2)="kwilliam") then escape
   if tcb(13) then
:     exit
:  else
:     release

rem gb_err.cod - GUIBuilder generated programs: Error handler
rem Copyright (C) 1998-2007 BASIS International Ltd.  All rights reserved.
rem
rem ***** E R R O R   H A N D L E R ************************************
rem
gb__err:
   gb__temp=msgbox(errmes(err)+" ("+str(err)+")"+
:      " occurred at line "+str(tcb(5))+
:      " in program "+pgm(-2),5+48,"Error handler")

   if gb__temp=4 then
:     retry
:  else
:     goto gb__eoj

rem gb_esc.cod - GUIBuilder generated programs: Escape handler
rem Copyright (C) 1998-2007 BASIS International Ltd.  All rights reserved.
rem
rem ***** E S C A P E   H A N D L E R ***********************************
rem
gb__esc:
   gb__temp=msgbox("An ESCAPE has been detected.  Do you want to end this "+
:     "program?",4+32+256,"ESCAPE handler")
   if gb__temp=7 then
:     return
:  else
:     goto gb__eoj

rem ' -----------------------------------------------------------------rem ' Declarationsrem ' -----------------------------------------------------------------

Declarations:

USE java.util.HashMap
USE ::LanguageTranslator.src::LanguageTranslator

rem ' general objects
DECLARE BBjAPI ourAPI!
DECLARE BBjSysGui ourSysGui!
DECLARE BBjWindow ourWindow!
DECLARE BBjFileInfo fileInfo!
DECLARE BBjVector itemVector!
DECLARE LanguageTranslator translator!

rem ' control objects
DECLARE BBjVector ourControlVector!
DECLARE BBjControl control!

DECLARE BBjFileInfo statesFileInfo!
DECLARE BBjRecordSet statesRecordSet!
DECLARE BBjFileInfo countriesFileInfo!
DECLARE BBjRecordSet countriesRecordSet!
DECLARE BBjFileInfo productsFileInfo!
DECLARE BBjRecordSet productsRecordSet!
DECLARE BBjFileInfo industriesFileInfo!
DECLARE BBjRecordSet industriesRecordSet!
DECLARE BBjFileInfo endUserFileInfo!
DECLARE BBjRecordSet endUserRecordSet!
DECLARE BBjFileInfo serialNbrFileInfo!
DECLARE BBjRecordData recordData!

DECLARE BBjVector wrkVector1!
DECLARE BBjVector wrkVector2!
DECLARE BBjVector endUserSerialNbrs!
DECLARE BBjVector params!
DECLARE BBjInt index!

DECLARE HashMap controls!

return
rem ' -----------------------------------------------------------------rem ' add_serial_numbersrem ' -----------------------------------------------------------------

add_serial_numbers:

wrkVector1!=cast(BBjListBox, controls!.get("unlinkedSerialNbrs")).getSelectedIndices()
wrkVector2!=cast(BBjListBox, controls!.get("unlinkedSerialNbrs")).getAllItems()

if wrkVector1!.size() then
    for x = 0 to wrkVector1!.size()-1
        index!=cast(BBjInt, wrkVector1!.getItem(x))
        wrkString$=cast(BBjString, wrkVector2!.getItem(index!))
        if endUserSerialNbrs!.size() > 0 then
            rem ' put it in the right order
            inserted=0
            for y = 0 to endUserSerialNbrs!.size()-1
                targetStr$=cast(BBjString, endUserSerialNbrs!.getItem(y))
                if wrkString$ <= targetStr$ then
                    endUserSerialNbrs!.insertItem(y, wrkString$)
                    inserted=1
                    break
                fi
            next y
            if !inserted then
                endUserSerialNbrs!.insertItem(endUserSerialNbrs!.size(), wrkString$)
            fi
        else
            endUserSerialNbrs!.addItem(wrkString$)
        fi
    next x

    rem ' remove the serial numbers
    for x = wrkVector1!.size()-1 to 0 step -1
        index!=cast(BBjInt, wrkVector1!.getItem(x))
        wrkVector2!.removeItem(index!)
    next x
    cast(BBjListBox, controls!.get("linkedSerialNbrs")).removeAllItems()
    cast(BBjListBox, controls!.get("linkedSerialNbrs")).insertItems(0, endUserSerialNbrs!)
    cast(BBjListBox, controls!.get("unlinkedSerialNbrs")).removeAllItems()
    cast(BBjListBox, controls!.get("unlinkedSerialNbrs")).insertItems(0, wrkVector2!)

fi

return
rem ' -----------------------------------------------------------------rem ' center_windowrem ' -----------------------------------------------------------------

center_window:

width = scrDimension!.width
height = scrDimension!.height
winWidth = ourWindow!.getWidth()
winHeight = ourWindow!.getHeight()

x = int((width-winWidth)/2)
y = int((height-winHeight)/2)

ourWindow!.setLocation(x,y)

return
rem ' -----------------------------------------------------------------
rem ' change_language
rem ' -----------------------------------------------------------------

change_language:

rem ' destroy the existing window
ourWindow!.destroy()

rem ' create a new one
ourWindow!=ourSysGui!.createTopLevelWindow(gb__handle, ourWinID)

rem ' translate the window
gosub open_language_properties
translator!.translateWindow(ourWindow!)
ourWindow!.setText(ourWindow!.getText() + " - " + customerNbr$)

rem ' position it
gosub center_window

rem ' other housekeeping
gosub transfer_controls_to_hashmap
gosub load_lists
gosub set_form_clean

ourWindow!.setVisible(1)

return
rem ' -----------------------------------------------------------------rem ' change_list_select_orderrem ' -----------------------------------------------------------------

change_list_select_order:

if usingCompanyOrder then
    usingCompanyOrder=0
    cast(BBjListButton, controls!.get("endUserList")).removeAllItems()
    cast(BBjListButton, controls!.get("endUserList")).insertItems(0,endUserListRef$)
else
    usingCompanyOrder=1
    cast(BBjListButton, controls!.get("endUserList")).removeAllItems()
    cast(BBjListButton, controls!.get("endUserList")).insertItems(0,endUserListComp$)
fi

return
rem ' -----------------------------------------------------------------rem ' clear_formrem ' -----------------------------------------------------------------

clear_form:

rem ' need to ask if save needed when dirty flag set
wasCleared=1
if formDirty then
    msg$=translator!.getMessage("save.changes.msg")
    title$=translator!.getMessage("save.changes.title")
    response=msgbox(msg$, 4+32, title$)
    if response=6 then
       gosub save_form
       if !wasSaved then
            wasCleared=0
            return
       fi
    fi
fi

ourWindow!.setCursor(3)

endUserNbr$=""

cast(BBjEditBox, controls!.get("referenceNbr")).setText("")
cast(BBjEditBox, controls!.get("CompName")).setText("")
cast(BBjEditBox, controls!.get("endUserNumber")).setText("")
cast(BBjEditBox, controls!.get("ContactName")).setText("")
cast(BBjEditBox, controls!.get("AddrLnOne")).setText("")
cast(BBjEditBox, controls!.get("AddrLnTwo")).setText("")
cast(BBjEditBox, controls!.get("AddrLnThree")).setText("")
cast(BBjEditBox, controls!.get("City")).setText("")
cast(BBjListButton, controls!.get("State")).deselect()
cast(BBjEditBox, controls!.get("PostalCode")).setText("")
cast(BBjListButton, controls!.get("Country")).deselect()
cast(BBjEditBox, controls!.get("EmailAddress")).setText("")
cast(BBjEditBox, controls!.get("PhoneNumber")).setText("")
cast(BBjListButton, controls!.get("Industry")).deselect()
cast(BBjEditBox, controls!.get("OtherDesc")).setText("")
cast(BBjEditBox, controls!.get("OtherDesc")).setEnabled(0)
cast(BBjListButton, controls!.get("BasisProduct")).deselect()
cast(BBjCEdit, controls!.get("AppModulesUsed")).setText("")
cast(BBjCheckBox, controls!.get("Advantage")).setSelected(0)
cast(BBjCheckBox, controls!.get("Announcements")).setSelected(0)


cast(BBjStaticText, controls!.get("compNameReq")).setVisible(0)
cast(BBjStaticText, controls!.get("countryReq")).setVisible(0)

endUserSerialNbrs!.clear()
cast(BBjListBox, controls!.get("linkedSerialNbrs")).removeAllItems()

ourWindow!.setCursor(0)
cast(BBjEditBox, controls!.get("referenceNbr")).focus()

gosub set_form_clean

return
rem ' -----------------------------------------------------------------rem ' get_end_user_listrem ' -----------------------------------------------------------------

get_end_user_list:

endUserListComp$=""
endUserListRef$=""
endUserNbrListComp$=""
endUserNbrListRef$=""

read record(endUser,key="",err=*next)
dim endUser$:endUserFileInfo!.getText()

read (endUser,key="",knum=2,dom=*next)junk$
while 1
    read record(endUser,end=*break)endUser$
    wrk$=cvs(endUser.company_name$,3)
    if cvs(endUser.contact$,3)<>"" then wrk$=wrk$+", "+cvs(endUser.contact$,3)
    if cvs(endUser.reference_nbr$,3)<>"" then wrk$=wrk$+", "+cvs(endUser.reference_nbr$,3)
    wrk$=wrk$+" (" + str(num(cvs(endUser.end_user_nbr$(2),3)))+")"
    endUserListComp$=endUserListComp$+wrk$+$0A$
    endUserNbrListComp$=endUserNbrListComp$+endUser.end_user_nbr$+$0A$
wend

read (endUser,key="",knum=1,dom=*next)junk$
while 1
    read record(endUser,end=*break)endUser$
    if cvs(endUser.reference_nbr$,3)<>"" then 
        wrk$=cvs(endUser.reference_nbr$,3)
    else
        wrk$="No Ref"
    fi
    wrk$=wrk$+", "+cvs(endUser.company_name$,3)
    if cvs(endUser.contact$,3)<>"" then wrk$=wrk$+", "+cvs(endUser.contact$,3)
    wrk$=wrk$+" (" + str(num(cvs(endUser.end_user_nbr$(2),3)))+")"
    endUserListRef$=endUserListRef$+wrk$+$0A$
    endUserNbrListRef$=endUserNbrListRef$+endUser.end_user_nbr$+$0A$
wend

rem ' put channel back on knum 0
read(endUser,key="",knum=0,dom=*next)junk$

if usingCompanyOrder then
    cast(BBjListButton, controls!.get("endUserList")).removeAllItems()
    cast(BBjListButton, controls!.get("endUserList")).insertItems(0,endUserListComp$)
else
    cast(BBjListButton, controls!.get("endUserList")).removeAllItems()
    cast(BBjListButton, controls!.get("endUserList")).insertItems(0,endUserListRef$)
fi

return
rem ' -----------------------------------------------------------------rem ' get_unlinked_serial_numbersrem ' -----------------------------------------------------------------

get_unlinked_serial_numbers:

unlinkedSerialNbrList$=""

read record(serialNbr,key="",err=*next)
dim serialNbr$:serialNbrFileInfo!.getText()

read (serialNbr,key="",dom=*next)junk$
while 1
    read record(serialNbr,end=*break)serialNbr$
    if cvs(serialNbr.end_user_nbr$,3)="" then 
        unlinkedSerialNbrList$=unlinkedSerialNbrList$+cvs(serialNbr.serial_nbr$,3)+$0A$
    fi
wend

cast(BBjListBox, controls!.get("unlinkedSerialNbrs")).removeAllItems()
if len(unlinkedSerialNbrList$)>0 then
    cast(BBjListBox, controls!.get("unlinkedSerialNbrs")).insertItems(0,unlinkedSerialNbrList$)
fi

return
rem ' -----------------------------------------------------------------rem ' load_listsrem ' -----------------------------------------------------------------

load_lists:

modes$=""

statesRecordSet!=ourAPI!.createFileRecordSet(statesFileInfo!.getFilename(),modes$,statesFileInfo!.getText())
cast(BBjListButton, controls!.get("State")).fillFromRecordSet(statesRecordSet!,"state")
statesRecordSet!.close()

countriesRecordSet!=ourAPI!.createFileRecordSet(countriesFileInfo!.getFilename(),modes$,countriesFileInfo!.getText())
cast(BBjListButton, controls!.get("Country")).fillFromRecordSet(countriesRecordSet!,"country")
countriesRecordSet!.close()

productsRecordSet!=ourAPI!.createFileRecordSet(productsFileInfo!.getFilename(),modes$,productsFileInfo!.getText())
cast(BBjListButton, controls!.get("BasisProduct")).fillFromRecordSet(productsRecordSet!,"product")
productsRecordSet!.close()

industriesRecordSet!=ourAPI!.createFileRecordSet(industriesFileInfo!.getFilename(),modes$,industriesFileInfo!.getText())
cast(BBjListButton, controls!.get("Industry")).fillFromRecordSet(industriesRecordSet!,"industry")
industriesRecordSet!.close()

industryIdList$=""
industryList$=""
dim indRec$:industriesFileInfo!.getText()
read record(industries,key="",err=*next)indRec$
while 1
    read record(industries,end=*break)indRec$
    industryList$=industryList$+indRec.industry$+$0A$
    industryIdList$=industryIdList$+indRec.industry_id$+$0A$
wend

gosub get_end_user_list
gosub get_unlinked_serial_numbers

return
rem ' -----------------------------------------------------------------rem ' no_recordsrem ' -----------------------------------------------------------------

no_records:

msg$=translator!.getMessage("no.records.msg")
title$=translator!.getMessage("no.records.title")
response=msgbox(msg$,48,title$)

return
rem ' -----------------------------------------------------------------rem ' open_filesrem ' -----------------------------------------------------------------

open_files:

ecConfig=unt
open(ecConfig)"ECconfig"
read(ecConfig)customerNbr$
read(ecConfig)usingLanguage$
prefix$="EC"+customerNbr$

gosub open_language_properties

states=unt
open(states)prefix$+"VALIDSTATES.vky"
statesFileInfo!=ourAPI!.getFileSystem().getFileInfo(states)

countries=unt
open(countries)prefix$+"VALIDCOUNTRIES.vky"
countriesFileInfo!=ourAPI!.getFileSystem().getFileInfo(countries)

products=unt
open(products)prefix$+"VALIDPRODUCTS.vky"
productsFileInfo!=ourAPI!.getFileSystem().getFileInfo(products)

industries=unt
open(industries)prefix$+"VALIDINDUSTRIES.vky"
industriesFileInfo!=ourAPI!.getFileSystem().getFileInfo(industries)

endUser=unt
open(endUser)prefix$+"ENDUSERS.vky"
endUserFileInfo!=ourAPI!.getFileSystem().getFileInfo(endUser)
dim endUser$:endUserFileInfo!.getText()

serialNbr=unt
open(serialNbr)prefix$+"SERIALNUMBERS.vky"
serialNbrFileInfo!=ourAPI!.getFileSystem().getFileInfo(serialNbr)

return
rem ' -----------------------------------------------------------------rem ' open_language_propertiesrem ' -----------------------------------------------------------------

open_language_properties:

translator! = new LanguageTranslator("editEndUserData."+usingLanguage$+".properties")

return
rem ' -----------------------------------------------------------------rem ' prep_file_for_uploadrem ' -----------------------------------------------------------------

prep_file_for_upload:

rem ' gosub clear_form

rem ' if wasCleared then

rem '     if endUserFileInfo!.getCurrentRecords()=0 then

rem '         gosub no_records

rem '     else
rem '         params! = ourAPI!.makeVector()
rem '         params!.add(prefix$+"SERIALNUMBERS.vky")
rem '         msg$=translator!.getMessage("prep.file.notice", params!)
rem '         title$=translator!.getMessage("notice.title")
rem '         response = msgbox(msg$,3+32+256,title$)

rem '         rem ' set cursor to hour glass
rem '         ourWindow!.setCursor(3)

rem '         if response = 6 then

rem '             read record(serialNbr,key="",knum=0,err=*next)

rem '             while 1
rem '                 thisKey$=key(serialNbr,end=*break)
rem '                 read record(serialNbr,key=thisKey$)serialNbr$
rem '                 rem ' the required fields are
rem '                 if cvs(serialNbr.end_user_nbr$,3)="" then
rem '                     remove(serialNbr,key=thisKey$)
rem '                 fi
rem '             wend

            params! = ourAPI!.makeVector()
            params!.add(0, prefix$+"SERIALNUMBERS.vky")
            params!.add(1, prefix$+"ENDUSERS.vky")
            msg$=translator!.getMessage("ready.upload.message", params!)
            title$=translator!.getMessage("ready.title")
            response = msgbox(msg$,64,title$)

            gosub get_unlinked_serial_numbers
        fi

        ourWindow!.setCursor(0)

    fi

fi

cast(BBjEditBox, controls!.get("referenceNbr")).focus()

return
rem ' -----------------------------------------------------------------rem ' remove_serial_numbersrem ' -----------------------------------------------------------------

remove_serial_numbers:

wrkVector1!=cast(BBjListBox, controls!.get("linkedSerialNbrs")).getSelectedIndices()
wrkVector2!=cast(BBjListBox, controls!.get("unlinkedSerialNbrs")).getAllItems()

if wrkVector1!.size() then
    for x = 0 to wrkVector1!.size()-1
        index!=cast(BBjInt, wrkVector1!.getItem(x))
        wrkString$=cast(BBjString, endUserSerialNbrs!.getItem(index!))
        if wrkVector2!.size() > 0 then
            rem ' put it in the right order
            inserted=0
            for y = 0 to wrkVector2!.size()-1
                targetStr$=cast(BBjString, wrkVector2!.getItem(y))
                if wrkString$ <= targetStr$ then
                    wrkVector2!.insertItem(y, wrkString$)
                    inserted=1
                    break
                fi
            next y
            if !inserted then
                wrkVector2!.insertItem(wrkVector2!.size(), wrkString$)
            fi
        else
            wrkVector2!.addItem(wrkString$)
        fi
    next x

    rem ' remove the serial numbers
    for x = wrkVector1!.size()-1 to 0 step -1
        index!=cast(BBjInt, wrkVector1!.getItem(x))
        endUserSerialNbrs!.removeItem(index!)
    next x
    cast(BBjListBox, controls!.get("linkedSerialNbrs")).removeAllItems()
    cast(BBjListBox, controls!.get("linkedSerialNbrs")).insertItems(0, endUserSerialNbrs!)
    cast(BBjListBox, controls!.get("unlinkedSerialNbrs")).removeAllItems()
    cast(BBjListBox, controls!.get("unlinkedSerialNbrs")).insertItems(0, wrkVector2!)
    formDirty=1
fi

return
rem ' -----------------------------------------------------------------rem ' reset_formrem ' -----------------------------------------------------------------

reset_form:

gosub clear_form
cast(BBjEditBox, controls!.get("referenceNbr")).focus()  

return
rem ' -----------------------------------------------------------------rem ' retrieve_and_load_enduserrem ' -----------------------------------------------------------------

retrieve_and_load_enduser:

ourWindow!.setCursor(3)

cast(BBjListButton, controls!.get("endUserList")).deselect()

read record(endUser,key=endUserNbr$)endUser$

cast(BBjEditBox, controls!.get("referenceNbr")).setText(cvs(endUser.reference_nbr$,3))
cast(BBjEditBox, controls!.get("CompName")).setText(endUser.company_name$)
cast(BBjEditBox, controls!.get("endUserNumber")).setText(cvs(endUser.end_user_nbr$,3))
cast(BBjEditBox, controls!.get("ContactName")).setText(endUser.contact$)
cast(BBjEditBox, controls!.get("AddrLnOne")).setText(endUser.addr_1$)
cast(BBjEditBox, controls!.get("AddrLnTwo")).setText(endUser.addr_2$)
cast(BBjEditBox, controls!.get("AddrLnThree")).setText(endUser.addr_3$)
cast(BBjEditBox, controls!.get("City")).setText(endUser.city$)

if cvs(endUser.state$,3)<>"" then
    selectedIdx=FNfindSelectedIndexForListButton(cvs(endUser.state$,3),cast(BBjListButton, controls!.get("State")).getAllItems())
    if selectedIdx > -1 then
        cast(BBjListButton, controls!.get("State")).selectIndex(selectedIdx)
    else
        cast(BBjListButton, controls!.get("State")).deselect()
    fi
else
    cast(BBjListButton, controls!.get("State")).deselect()
fi

cast(BBjEditBox, controls!.get("PostalCode")).setText(endUser.postal_code$)

if cvs(endUser.country$,3)<>"" then
    selectedIdx=FNfindSelectedIndexForListButton(cvs(endUser.country$,3),cast(BBjListButton, controls!.get("Country")).getAllItems())
    if selectedIdx > -1 then
        cast(BBjListButton, controls!.get("Country")).selectIndex(selectedIdx)
    else
        cast(BBjListButton, controls!.get("Country")).deselect()
    fi
else
    cast(BBjListButton, controls!.get("Country")).deselect()
fi

cast(BBjEditBox, controls!.get("EmailAddress")).setText(endUser.email_address$)
cast(BBjEditBox, controls!.get("PhoneNumber")).setText(endUser.phone_number$)

theIndustry$=FNgetMathcingItem$(industryIdList$, industryList$, endUser.industry$)
industryIndex=FNgetIndex(theIndustry$, industryList$)
if industryIndex > -1 then
    cast(BBjListButton, controls!.get("Industry")).selectIndex(industryIndex)
else
    cast(BBjListButton, controls!.get("Industry")).deselect()
fi

rem ' old way
rem 'if cvs(endUser.industry$,3)<>"" then
rem '    selectedIdx=FNfindSelectedIndexForListButton(cvs(endUser.industry$,3),cast(BBjListButton, controls!.get("Industry")).getAllItems())
rem '    if selectedIdx > -1 then
rem '        cast(BBjListButton, controls!.get("Industry")).selectIndex(selectedIdx)
rem '    else
rem '        cast(BBjListButton, controls!.get("Industry")).deselect()
rem '    fi
rem 'else
rem '    cast(BBjListButton, controls!.get("Industry")).deselect()
rem 'fi

cast(BBjEditBox, controls!.get("OtherDesc")).setText(endUser.other_industry$)
if cvs(endUser.industry$,3)="Other" then
    cast(BBjEditBox, controls!.get("OtherDesc")).setEnabled(1)
else
    cast(BBjEditBox, controls!.get("OtherDesc")).setEnabled(0)
    cast(BBjEditBox, controls!.get("OtherDesc")).setText("")
fi

if cvs(endUser.basis_prod$,3)<>"" then
    selectedIdx=FNfindSelectedIndexForListButton(cvs(endUser.basis_prod$,3),cast(BBjListButton, controls!.get("BasisProduct")).getAllItems())
    if selectedIdx > -1 then
        cast(BBjListButton, controls!.get("BasisProduct")).selectIndex(selectedIdx)
    else
        cast(BBjListButton, controls!.get("BasisProduct")).deselect()
    fi
else
    cast(BBjListButton, controls!.get("BasisProduct")).deselect()
fi

cast(BBjCEdit, controls!.get("AppModulesUsed")).setText(FNunescLf$(endUser.app_modules_used$))

if endUser.advantage$="Y" then
    cast(BBjCheckBox, controls!.get("Advantage")).setSelected(1)
else
    cast(BBjCheckBox, controls!.get("Advantage")).setSelected(0)
fi

if endUser.announcements$="Y" then
    cast(BBjCheckBox, controls!.get("Announcements")).setSelected(1)
else
    cast(BBjCheckBox, controls!.get("Announcements")).setSelected(0)
fi

rem ' load linked serial numbers
read (serialNbr,key=endUserNbr$,knum=1,dom=*next)
endUserSerialNbrs!.clear()
while 1
    read record(serialNbr,end=*break)serialNbr$
    if serialNbr.end_user_nbr$<>endUserNbr$ then break
    endUserSerialNbrs!.add(cvs(serialNbr.serial_nbr$,3))
wend
if endUserSerialNbrs!.size() > 0 then
    cast(BBjListBox, controls!.get("linkedSerialNbrs")).insertItems(0,endUserSerialNbrs!)
fi

ourWindow!.setCursor(0)
cast(BBjEditBox, controls!.get("referenceNbr")).focus()

gosub set_form_clean

return
rem ' -----------------------------------------------------------------rem ' save_formrem ' -----------------------------------------------------------------

save_form:

rem ' validate the data we are saving
gosub validate_form

wasSaved=0
if isValid then
    
    dim endUser$:endUserFileInfo!.getText()

    endUser.end_user_nbr$=endUserNbr$
    
    endUser.reference_nbr$=cvs(cast(BBjEditBox, controls!.get("referenceNbr")).getText(),3)
    endUser.company_name$=cvs(cast(BBjEditBox, controls!.get("CompName")).getText(),3)
    endUser.contact$=cvs(cast(BBjEditBox, controls!.get("ContactName")).getText(),3)
    endUser.addr_1$=cvs(cast(BBjEditBox, controls!.get("AddrLnOne")).getText(),3)
    endUser.addr_2$=cvs(cast(BBjEditBox, controls!.get("AddrLnTwo")).getText(),3)
    endUser.addr_3$=cvs(cast(BBjEditBox, controls!.get("AddrLnThree")).getText(),3)
    endUser.city$=cvs(cast(BBjEditBox, controls!.get("City")).getText(),3)
    
    idx=cast(BBjListButton, controls!.get("State")).getSelectedIndex()
    if idx > -1 then endUser.state$=cast(BBjListButton, controls!.get("State")).getItemAt(idx)

    endUser.postal_code$=cvs(cast(BBjEditBox, controls!.get("PostalCode")).getText(),3)

    idx=cast(BBjListButton, controls!.get("Country")).getSelectedIndex()
    if idx > -1 endUser.country$=cast(BBjListButton, controls!.get("Country")).getItemAt(idx)

    endUser.email_address$=cvs(cast(BBjEditBox, controls!.get("EmailAddress")).getText(),3)
    endUser.phone_number$=cvs(cast(BBjEditBox, controls!.get("PhoneNumber")).getText(),3)

    idx=cast(BBjListButton, controls!.get("Industry")).getSelectedIndex()
    if idx > -1 then
        theIndustry$=cvs(cast(BBjListButton, controls!.get("Industry")).getItemAt(idx),3)
        endUser.industry$=FNgetMathcingItem$(industryList$, industryIDList$, theIndustry$)
    fi

    rem ' old way
    rem 'idx=cast(BBjListButton, controls!.get("Industry")).getSelectedIndex()
    rem 'if idx > -1 then endUser.industry$=cvs(cast(BBjListButton, controls!.get("Industry")).getItemAt(idx),3)

    endUser.other_industry$=cvs(cast(BBjEditBox, controls!.get("OtherDesc")).getText(),3)
    
    idx=cast(BBjListButton, controls!.get("BasisProduct")).getSelectedIndex()
    if idx > -1 endUser.basis_prod$=cast(BBjListButton, controls!.get("BasisProduct")).getItemAt(idx)

    endUser.app_modules_used$=FNescLf$(cvs(cast(BBjCEdit, controls!.get("AppModulesUsed")).getText(),3))

    if cast(BBjCheckBox, controls!.get("Advantage")).isSelected() then
        endUser.advantage$="Y"
    else
        endUser.advantage$="N"
    fi

    if cast(BBjCheckBox, controls!.get("Announcements")).isSelected() then
        endUser.announcements$="Y"
    else
        endUser.announcements$="N"
    fi

    rem ' write the record
    if cvs(endUser.end_user_nbr$,3)<>"" then
        rem ' existing
        write record (endUser)endUser$
    else
        if endUserFileInfo!.getCurrentRecords() > 0 then
            hkey$=keyl(endUser)
        else
            hkey$="0"
        fi
        hkey$="N" + str(num(hkey$(2))+1:"0000000000"); endUser.end_user_nbr$=hkey$; write record(endUser,dom=*same)endUser$
    fi
    wasSaved=1

    rem ' remove the current links
    read (serialNbr,key=endUser.end_user_nbr$,knum=1,dom=*next)
    dim serialNbr$:serialNbrFileInfo!.getText()
    while 1
        thiskey$=key(serialNbr,end=*break,knum=1)
        read record(serialNbr,key=thiskey$,knum=1)serialNbr$
        if serialNbr.end_user_nbr$<>endUser.end_user_nbr$ then break
        remove(serialNbr,key=serialNbr.serial_nbr$)
    wend

    rem ' write the link file
    wrkVector1!=cast(BBjListBox, controls!.get("linkedSerialNbrs")).getAllItems()
    if wrkVector1!.size() > 0 then
        for x = 0 to wrkVector1!.size() - 1
            sfSerialNbr$=cast(BBjString, wrkVector1!.get(x))
            dim serialNbr$:fattr(serialNbr$)
            serialNbr.serial_nbr$=sfSerialNbr$
            serialNbr.active$="Y"
            serialNbr.end_user_nbr$=endUser.end_user_nbr$
            write record(serialNbr)serialNbr$
        next x
    fi

    gosub set_form_clean
    gosub clear_form

    gosub get_end_user_list

    cast(BBjEditBox, controls!.get("referenceNbr")).focus()

fi

return
rem ' -----------------------------------------------------------------rem ' set_form_cleanrem ' -----------------------------------------------------------------

set_form_clean:

formDirty=0
cast(BBjButton, controls!.get("Save")).setEnabled(0)
cast(BBjMenuItem,controls!.get("SaveCurEndUser")).setEnabled(0)

return
rem ' -----------------------------------------------------------------rem ' set_form_dirtyrem ' -----------------------------------------------------------------

set_form_dirty:

formDirty=1
cast(BBjButton, controls!.get("Save")).setEnabled(1)
cast(BBjMenuItem,controls!.get("SaveCurEndUser")).setEnabled(1)

return
rem ' -----------------------------------------------------------------rem ' transfer_controls_to_hashmaprem ' -----------------------------------------------------------------

transfer_controls_to_hashmap:

ourControlVector! = ourWindow!.getAllControls()
controls! = new HashMap()

for i=0 to ourControlVector!.size() - 1
    control!= cast(BBjControl, ourControlVector!.getItem(i))
    controls!.put(control!.getName(), control!)
next i

return
rem ' -----------------------------------------------------------------rem ' validate_formrem ' -----------------------------------------------------------------

validate_form:

isValid=1

rem ' must at least enter a company name
vCompName$=cvs(cast(BBjEditBox, controls!.get("CompName")).getText(),3)
if len(vCompName$)=0 then
    isValid=0
    cast(BBjStaticText, controls!.get("compNameReq")).setVisible(1)
else
    cast(BBjStaticText, controls!.get("compNameReq")).setVisible(0)
fi

rem ' there must be a country selection
index=cast(BBjListButton, controls!.get("Country")).getSelectedIndex()
if index < 0 then 
    isValid=0
    cast(BBjStaticText, controls!.get("countryReq")).setVisible(1)
else
    cast(BBjStaticText, controls!.get("countryReq")).setVisible(0)
fi

if !isValid then
    title$=translator!.getMessage("requried.missing.title")
    msg$=translator!.getMessage("required.missing.msg")
    response=msgbox(msg$, 0+64, title$)
fi

return

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit (Window) WIN_CLOSE (X)
rem ' ---------------------------------------------------------------

W101_C0_WIN_CLOSE:
rem ' Window Closed
rem ' gb__event! = cast(BBjCloseEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__window! = gb__event!.getControl()

rem ' this will give them the oppurtunity to save an unsaved work
gosub clear_form

if wasCleared then
    goto gb__eoj
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=100 endUserList (List Button) LIST_SELECT (N2:19)
rem ' ---------------------------------------------------------------

W101_C100_LIST_SELECT:
rem ' Notify Event - List Control - List Selection (2)
rem ' gb__event! = cast(BBjListSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

selected = cast(BBjListButton, controls!.get("endUserList")).getSelectedIndex()
gosub clear_form
if wasCleared then
    if usingCompanyOrder then
        endUserNbr$=FNgetSelectedEndUserNbr$(endUserNbrListComp$,selected)
    else
        endUserNbr$=FNgetSelectedEndUserNbr$(endUserNbrListRef$,selected)
    fi
    gosub retrieve_and_load_enduser
else
    cast(BBjListButton, controls!.get("endUserList")).deselect()
    cast(BBjEditBox, controls!.get("referenceNbr")).focus()
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=101 FileMenu (Menu Item) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C101_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=102 ExitProgram (Menu Item) MENU_SELECT (C)
rem ' ---------------------------------------------------------------

W101_C102_MENU_SELECT:
rem ' Menu selection made
rem ' gb__event! = cast(BBjMenuItemSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()
rem ' Shift pressed: gb__event!.isShiftDown()
rem ' Ctrl pressed: gb__event!.isControlDown()
rem ' Item is checked: gb__event!.isSelected()

rem ' this will give them the oppurtunity to save an unsaved work
gosub clear_form
if wasCleared then
    goto gb__eoj
else
    cast(BBjEditBox, controls!.get("referenceNbr")).focus()
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=102 ExitProgram (Menu Item) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C102_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=103 SaveCurEndUser (Menu Item) MENU_SELECT (C)
rem ' ---------------------------------------------------------------

W101_C103_MENU_SELECT:
rem ' Menu selection made
rem ' gb__event! = cast(BBjMenuItemSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()
rem ' Shift pressed: gb__event!.isShiftDown()
rem ' Ctrl pressed: gb__event!.isControlDown()
rem ' Item is checked: gb__event!.isSelected()

gosub save_form
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=103 SaveCurEndUser (Menu Item) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C103_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=104 EditMenu (Menu Item) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C104_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=105 ClearForm (Menu Item) MENU_SELECT (C)
rem ' ---------------------------------------------------------------

W101_C105_MENU_SELECT:
rem ' Menu selection made
rem ' gb__event! = cast(BBjMenuItemSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()
rem ' Shift pressed: gb__event!.isShiftDown()
rem ' Ctrl pressed: gb__event!.isControlDown()
rem ' Item is checked: gb__event!.isSelected()

gosub reset_form
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=105 ClearForm (Menu Item) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C105_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=106 ToolsMenu (Menu Item) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C106_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=107 PrepFile (Menu Item) MENU_SELECT (C)
rem ' ---------------------------------------------------------------

W101_C107_MENU_SELECT:
rem ' Menu selection made
rem ' gb__event! = cast(BBjMenuItemSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()
rem ' Shift pressed: gb__event!.isShiftDown()
rem ' Ctrl pressed: gb__event!.isControlDown()
rem ' Item is checked: gb__event!.isSelected()

gosub prep_file_for_upload
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=107 PrepFile (Menu Item) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C107_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=108 toggleListOrder (Menu Item) MENU_SELECT (C)
rem ' ---------------------------------------------------------------

W101_C108_MENU_SELECT:
rem ' Menu selection made
rem ' gb__event! = cast(BBjMenuItemSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()
rem ' Shift pressed: gb__event!.isShiftDown()
rem ' Ctrl pressed: gb__event!.isControlDown()
rem ' Item is checked: gb__event!.isSelected()


gosub change_list_select_order
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=108 toggleListOrder (Menu Item) LIST_SELECT (N2:19)
rem ' ---------------------------------------------------------------

W101_C108_LIST_SELECT:
rem ' Notify Event - List Control - List Selection (2)
rem ' gb__event! = cast(BBjListSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=109 LanguageMenu (Menu Item) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C109_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=110 menuEnglish (Menu Item) MENU_SELECT (C)
rem ' ---------------------------------------------------------------

W101_C110_MENU_SELECT:
rem ' Menu selection made
rem ' gb__event! = cast(BBjMenuItemSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()
rem ' Shift pressed: gb__event!.isShiftDown()
rem ' Ctrl pressed: gb__event!.isControlDown()
rem ' Item is checked: gb__event!.isSelected()

if usingLanguage$<>"EN" then
    gosub clear_form
    if wasCleared then
        usingLanguage$="EN"
        gosub change_language
    fi
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=110 menuEnglish (Menu Item) LIST_SELECT (N2:19)
rem ' ---------------------------------------------------------------

W101_C110_LIST_SELECT:
rem ' Notify Event - List Control - List Selection (2)
rem ' gb__event! = cast(BBjListSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=111 menuGerman (Menu Item) MENU_SELECT (C)
rem ' ---------------------------------------------------------------

W101_C111_MENU_SELECT:
rem ' Menu selection made
rem ' gb__event! = cast(BBjMenuItemSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()
rem ' Shift pressed: gb__event!.isShiftDown()
rem ' Ctrl pressed: gb__event!.isControlDown()
rem ' Item is checked: gb__event!.isSelected()

if usingLanguage$<>"DE" then
    gosub clear_form
    if wasCleared then
        usingLanguage$="DE"
        gosub change_language
    fi
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=111 menuGerman (Menu Item) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C111_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=112 menuFrench (Menu Item) MENU_SELECT (C)
rem ' ---------------------------------------------------------------

W101_C112_MENU_SELECT:
rem ' Menu selection made
rem ' gb__event! = cast(BBjMenuItemSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()
rem ' Shift pressed: gb__event!.isShiftDown()
rem ' Ctrl pressed: gb__event!.isControlDown()
rem ' Item is checked: gb__event!.isSelected()

if usingLanguage$<>"FR" then
    gosub clear_form
    if wasCleared then
        usingLanguage$="FR"
        gosub change_language
    fi
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=112 menuFrench (Menu Item) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C112_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=113 UploadMenu (Menu Item) LIST_SELECT (N2:19)
rem ' ---------------------------------------------------------------

W101_C113_LIST_SELECT:
rem ' Notify Event - List Control - List Selection (2)
rem ' gb__event! = cast(BBjListSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty


idx=cast(BBjListButton, controls!.get("Industry")).getSelectedIndex()
selIndustry$=cast(BBjListButton, controls!.get("Industry")).getItemAt(idx)

if selIndustry$="Other" then
    cast(BBjEditBox, controls!.get("OtherDesc")).setEnabled(1)
else
    cast(BBjEditBox, controls!.get("OtherDesc")).setEnabled(0)
    cast(BBjEditBox, controls!.get("OtherDesc")).setText("")
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=114 uploadInstructions (Menu Item) MENU_SELECT (C)
rem ' ---------------------------------------------------------------

W101_C114_MENU_SELECT:
rem ' Menu selection made
rem ' gb__event! = cast(BBjMenuItemSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()
rem ' Shift pressed: gb__event!.isShiftDown()
rem ' Ctrl pressed: gb__event!.isControlDown()
rem ' Item is checked: gb__event!.isSelected()

gosub prep_file_for_upload
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=114 uploadInstructions (Menu Item) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C114_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=115 BasisProduct (List Button) LIST_SELECT (N2:19)
rem ' ---------------------------------------------------------------

W101_C115_LIST_SELECT:
rem ' Notify Event - List Control - List Selection (2)
rem ' gb__event! = cast(BBjListSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=116 AppModulesUsed (Custom Edit) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C116_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=117 Advantage (Check Box) CHECK_OFF (c0)
rem ' ---------------------------------------------------------------

W101_C117_CHECK_OFF:
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=117 Advantage (Check Box) CHECK_ON (c1)
rem ' ---------------------------------------------------------------

W101_C117_CHECK_ON:
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=118 Announcements (Check Box) CHECK_OFF (c0)
rem ' ---------------------------------------------------------------

W101_C118_CHECK_OFF:
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=118 Announcements (Check Box) CHECK_ON (c1)
rem ' ---------------------------------------------------------------

W101_C118_CHECK_ON:
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=119 Save (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C119_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub save_form
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=123 Clear (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C123_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub reset_form
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=125 toggleOrder (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C125_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub change_list_select_order
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=145 addSerialNbrs (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C145_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub add_serial_numbers

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=146 removeSerialNbrs (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C146_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub remove_serial_numbers

rem ' set the form dirty
gosub set_form_dirty
RETURN


rem gb_std.cod - Put your standard subroutines/functions/etc. here.

END
