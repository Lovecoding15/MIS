   rem ' Program Name: ccCustServInterface.src
   rem ' Resource File: ccCustServInterface.arc
   rem ' Generated by GUIBuilder 4.0 (November 10, 2022 at 11:32:11)
   rem ' Portions Copyright (C) 1997-2022 BASIS International Ltd.  All rights reserved.

   seterr gb__no_arg
   enter gb__arg$; gb__args=-1,gb__args=pos($0a$=fattr(gb__arg$,$$),1,0)
gb__no_arg:
   seterr 0

   precision 99
   gb__show_forms=2; rem ' Create all forms at the beginning

   rem ' gb_ini.cod - GUIBuilder generated programs: Initialization
   rem ' Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
   rem
   rem ' ***** I N I T I A L I Z A T I O N *****
   rem ' The first part of the initialization section ensures that the
   rem ' environment will support the requirements of the generated 
   rem ' program.  These requirements are:
   rem '     1.  The interpreter supports GUI
   rem '     2.  The interpreter is Visual PRO/5 2.0 or above
   rem '     3.  A SYSGUI device is defined in config.bbx
   rem

   rem ' 1. Make sure the interpreter in use supports GUI
   if info(6,0)="" then
:     print 'cs',;
:     print "This interpreter does not support GUI.";
:     print "Press any key to continue.",;
:     read record(0,siz=1);
:     stop
   rem

   rem ' 2. Make sure the interpreter in use is Visual PRO/5 2.0 or above
   if sys<"LEVEL 5" or (cvs(sys,3)="LEVEL 5" and cvs(rev,3)<"REV 2.0") then
:     input(0,err=gb__eoj)
:      	'ask'("",4,"Requires at least Visual PRO/5 Rev. 2.0.  "+
:      	"This program will now terminate.","&Terminate:Y"+$0a$),
:      	'ee',gb__temp$,'be',;
:     goto gb__eoj
   rem

   seterr gb__err; setesc gb__esc

   rem ' 3. Check config.bbx for SYSGUI and SYSPRINT devices
   gb__alias=0,gb__sysgui$="",gb__sysprint$=""
   dim gb__tsk$:"type:u(1),opens:u(1),name:c(1*=0),dname:c(1*=0),pname:c(1*=0),modes:c(1*=0)"

gb__check_tsk:
   gb__tsk$=tsk(gb__alias,err=gb__done_with_tsk)

   if gb__sysgui$="" and cvs(gb__tsk.pname$,7)="SYSGUI" then
:     gb__sysgui$=gb__tsk.name$

   if gb__sysprint$="" and cvs(gb__tsk.pname$,7)="SYSPRINT" then
:     gb__sysprint$=gb__tsk.name$

   if gb__sysgui$="" or gb__sysprint$="" then
:     gb__alias=gb__alias+1;
:     goto gb__check_tsk

gb__done_with_tsk:
   if gb__sysgui$="" then
:     gb__sysgui$="not defined in config.bbx";
:     goto gb__cannot_open_sysgui

   rem ' Open SYSGUI device
   gb__sysgui=unt; open (gb__sysgui,err=gb__cannot_open_sysgui)gb__sysgui$
   goto gb__opened_sysgui

gb__cannot_open_sysgui:
   gb__err$="Unable to open the SYSGUI device (alias "+gb__sysgui$+
:    ") in program "+pgm(-2)+".  Visual PRO/5 cannot maintain a graphical "+
:    "user interface without this device.  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"SYSGUI error")
   goto gb__eoj

gb__opened_sysgui:
   dim gb__sysgui_fin$:tmpl(gb__sysgui,ind=0)
   gb__sysgui_fin$=fin(gb__sysgui)

   rem ' splash screen, if any, can go here
   rem ' splash=gb__sysgui_fin.available_context
   rem ' print (gb__sysgui)'context'(splash),'window'(0,0,500,400,$$,$01000000$),'image'(0,0,500,400,"mysplash.gif")

   dim gb__event$:tmpl(gb__sysgui)
   gb__event=len(gb__event$)

   rem ' Open the resource file (try both .arc and .brc if necessary)
   gb__resource$="ccCustServInterface.arc"
   if pos("ec.bbj"= pgm(-2)) then gosub prep_routine
   gb__handle=resopen(gb__resource$,err=gb__resource_fallback);
:  goto gb__opened_resource

gb__resource_fallback:
   gb__temp=pos(".brc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"arc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

   gb__temp=pos(".arc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"brc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

gb__cannot_open_resource:
   gb__err$="Unable to open resource file ccCustServInterface.arc"+
:    " in program "+pgm(-2)+".  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"Resource file error")
   goto gb__eoj

   rem ' ------------------------------------------------------------------------
   rem ' Functions to manipulate screens and data
   rem ' ------------------------------------------------------------------------

   rem ' Get data from screen into template record
   def fngb__get_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put data from template record to screen
   def fngb__put_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Get fields from screen into template record
   def fngb__get_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put fields from template record to screen
   def fngb__put_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Set focus to specified Window ID
   def fngb__focus_win_id(xx__win_id$)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui,err=gb__focus_win_id)'context'(xx__context),'focus'(0),'raise',
      return xx__context
   gb__focus_win_id:
      xx__form=fngb__form(xx__win_id$)
      print (gb__sysgui)'context'(xx__context),
:                       'resource'(len(gb__resource$[xx__form])),gb__resource$[xx__form],
      return xx__context
   fnend


   rem ' Get form number given Window ID
   def fngb__form(xx__win_id$)
       gb__form=-1,xx__form_id$=xx__win_id$
       xx__form=pos("."=xx__form_id$)
       if xx__form then
:         xx__form_id$=xx__form_id$(1,xx__form-1)
       for xx__form=1 to gb__forms
           if gb__form.id$[xx__form]=xx__form_id$ then
:             gb__form=xx__form;
:             break
       next xx__form
       return gb__form
   fnend


   rem ' Set focus to specified Window ID + Control ID
   def fngb__focus_ctl_id(xx__win_id$,xx__ctl_id)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Set focus to specified Window ID + Control Name
   def fngb__focus_ctl_name(xx__win_id$,xx__ctl_name$)
      dim xx__rec$:fngb__template$(xx__win_id$)
      xx__ctl_id=num(fattr(xx__rec$,xx__ctl_name$,"ID"))
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Get Window ID given Context
   def fngb__win_id$(xx__context)
       xx__win_id$=""
       for xx__window=1 to gb__windows
           if gb__window.context[xx__window]=xx__context then
:             xx__win_id$=gb__window.win_id$[xx__window];
:             break
       next xx__window
       return xx__win_id$
   fnend


   rem ' Get Context given Window ID
   def fngb__context(xx__win_id$)
      gb__window=-1,gb__context=-1
      for xx__window=1 to gb__windows
          if gb__window.win_id$[xx__window]=xx__win_id$ then
:            gb__window=xx__window,gb__context=gb__window.context[gb__window];
:            break
      next xx__window
      if gb__context>=0 or gb__window<0 then
:        return gb__context
      return fngb__window(xx__win_id$)
   fnend


   rem ' Get Window Information given Window ID
   def fngb__win_info$(xx__win_id$)
      dim gb__win_info$(0)
      xx__context=fngb__context(xx__win_id$)
      if xx__context<0 then
:        return gb__win_info$
      dim gb__win_info$:"class:u(1),type:u(1),hidden:u(1),disabled:u(1),"
:                      +"context:u(2),eventmask:u(4),flags:u(4),focus:u(2),"
:                      +"x:i(2),y:i(2),w:u(2),h:u(2),title:c(16*=)"
      gb__win_info$=ctrl(gb__sysgui,0,4,xx__context)
:                  +ctrl(gb__sysgui,0,8,xx__context)
:                  +bin(xx__context,2)
:                  +sendmsg(gb__sysgui,0,21,0,"",xx__context)
:                  +sendmsg(gb__sysgui,0,22,0,"",xx__context)
:                  +ctrl(gb__sysgui,0,2,xx__context)
:                  +ctrl(gb__sysgui,0,0,xx__context)
:                  +ctrl(gb__sysgui,0,1,xx__context)
      return gb__win_info$
   fnend

gb__opened_resource:

   rem ==================== End of gb_ini.cod ====================

rem ' Instantiate form(s)

gb__forms = 1
dim gb__form_context[gb__forms],gb__resource$[gb__forms],gb__form$:"id[1]:c(4*=10)"

gb__windows=1; rem ' includes child windows, if any
gb__win_id$ = "101"

dim gb__win$:"ENTERACHARGE:I(2)"

gb__win.ENTERACHARGE=-1

dim gb__window$:"win_id[1]:c(8*=10),win_name[1]:c(16*=10),context[1]:n(4*=10)"
gb__window.win_id$[1]="101",gb__window.win_name$[1]="ENTERACHARGE",gb__window.context[1]=-1,gb__form.id$[1]="101"

gb__context = fngb__window("101"); rem ' enterACharge

rem ' Instantiate the form corresponding to a given window

   def fngb__window(xx__win_id$)
      gb__window = 0
      for xx__window=1 to gb__windows
         if gb__window.win_id$[xx__window]=xx__win_id$ then
:           gb__window = xx__window;
:           break
      next xx__window
      if gb__window = 0 then 
:        return -1
      if gb__window.context[gb__window] >= 0 then
:        return gb__window.context[gb__window]

      switch fngb__form(xx__win_id$)

         case 1; rem ' Load Form ID 101 (ENTERACHARGE)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[1]=gb__sysgui_fin.available_context
         gb__resource$[1]=resget(gb__handle,1,101)
         print (gb__sysgui)'context'(gb__form_context[1]),'resource'(len(gb__resource$[1])),gb__resource$[1]
         gb__win.ENTERACHARGE=gb__form_context[1]
         gb__window.context[1]=gb__win.ENTERACHARGE
         break
      swend

      return gb__window.context[gb__window]
   fnend

rem ' Get template for controls on a given window

   def fngb__template$(xx__win_id$)
      if xx__win_id$="101" then return "CUSTNUMBER:C(64*=0):ID=100 TYPE=16 X=140 Y=10 W=70 H=20:,STATIC_TEXT:C(64*=0):ID=125 TYPE=17 X=10 Y=10 W=120 H=20:,CREDITCARDNUMBER:C(64*=0):ID=104 TYPE=16 X=140 Y=70 W=290 H=20:,VISA:N(1*=0):ID=108 TYPE=12 X=160 Y=180 W=60 H=25:,MASTERCARD:N(1*=0):ID=109 TYPE=12 X=240 Y=180 W=90 H=25:,AMEX:N(1*=0):ID=110 TYPE=12 X=340 Y=180 W=60 H=25:,CREDITCARDLIST:C(255*=0):ID=103 TYPE=19 X=140 Y=40 W=290 H=105:,STATIC_TEXT_126:C(64*=0):ID=126 TYPE=17 X=40 Y=40 W=90 H=20:,STATIC_TEXT_127:C(64*=0):ID=127 TYPE=17 X=40 Y=70 W=90 H=20:,STATIC_TEXT_128:C(64*=0):ID=128 TYPE=17 X=40 Y=100 W=90 H=20:,NAME:C(64*=0):ID=107 TYPE=16 X=140 Y=130 W=290 H=20:,STATIC_TEXT_129:C(64*=0):ID=129 TYPE=17 X=40 Y=130 W=90 H=20:,CUSTNAME:C(64*=0):ID=102 TYPE=16 X=260 Y=10 W=180 H=20:,GROUP_CONTROL:C(1*=0):ID=137 TYPE=21 X=140 Y=160 W=280 H=50:,BALANCE:C(64*=0):ID=115 TYPE=16 X=140 Y=400 W=90 H=20:,STATIC_TEXT_130:C(64*=0):ID=130 TYPE=17 X=50 Y=400 W=80 H=20:,VERIFICATION:N(1*=0):ID=117 TYPE=12 X=140 Y=430 W=130 H=25:,AVSADDRESS:C(64*=0):ID=118 TYPE=16 X=140 Y=460 W=290 H=20:,AVSZIPCODE:C(64*=0):ID=119 TYPE=16 X=140 Y=490 W=90 H=20:,CARDSECCODE:C(64*=0):ID=120 TYPE=16 X=140 Y=520 W=90 H=20:,STATIC_TEXT_131:C(64*=0):ID=131 TYPE=17 X=40 Y=460 W=90 H=20:,STATIC_TEXT_132:C(64*=0):ID=132 TYPE=17 X=40 Y=490 W=90 H=20:,STATIC_TEXT_133:C(64*=0):ID=133 TYPE=17 X=20 Y=520 W=110 H=20:,EXIT:C(1*=0):ID=122 TYPE=11 X=140 Y=550 W=100 H=25:,CLEAR:C(1*=0):ID=123 TYPE=11 X=250 Y=550 W=100 H=25:,PROCESSCARD:C(1*=0):ID=124 TYPE=11 X=360 Y=550 W=100 H=25:,SELECTANINVOICE:C(255*=0):ID=113 TYPE=18 X=140 Y=280 W=280 H=80:,GETBUTTON:C(1*=0):ID=101 TYPE=11 X=220 Y=10 W=30 H=25:,PAYMENT:C(64*=0):ID=116 TYPE=16 X=330 Y=400 W=90 H=20:,STATIC_TEXT_135:C(64*=0):ID=135 TYPE=17 X=260 Y=400 W=60 H=25:,PAYINVOICES:N(1*=0):ID=111 TYPE=12 X=160 Y=240 W=90 H=25:,GROUP_CONTROL_138:C(1*=0):ID=138 TYPE=21 X=140 Y=220 W=280 H=50:,PAYORDER:N(1*=0):ID=112 TYPE=12 X=290 Y=240 W=120 H=25:,ORDERREFERENCE:C(64*=0):ID=114 TYPE=16 X=140 Y=370 W=90 H=20:,STATIC_TEXT_136:C(64*=0):ID=136 TYPE=17 X=40 Y=370 W=90 H=25:,MONTH:C(255*=0):ID=105 TYPE=19 X=140 Y=100 W=50 H=130:,YEAR:C(255*=0):ID=106 TYPE=19 X=200 Y=100 W=60 H=130:,EMAILADDRESS:C(64*=0):ID=121 TYPE=16 X=285 Y=520 W=170 H=20:,STATIC_TEXT134:C(64*=0):ID=134 TYPE=17 X=240 Y=520 W=40 H=20:"
      return ""
   fnend

ourAPI!=BBjAPI()
ourSysGui!=ourAPI!.getSysGui()
ourSystemMetrics!=ourSysGui!.getSystemMetrics()
scrDimension!=ourSystemMetrics!.getScreenSize()
ourContext=ourSysGui!.getContext()
ourWindow!=ourSysGui!.getWindow(ourContext)
topLevelWindow!=cast(BBjTopLevelWindow, ourSysGui!.getWindow(ourContext))

ourWindow!.setCursor(3)

gosub center_window
gosub get_objects
gosub openFiles
gosub loadExpiration
payInvoices!.setSelected(1)
gosub payingInvoices
gosub resetVerification

ourWindow!.setCursor(0)
ourWindow!.setVisible(1)
rem ' ---------------------------------------------------------------
rem ' Event Loop
rem ' ---------------------------------------------------------------

dim gb__closed[gb__windows]; rem ' track window status
dim gb__generic$:noticetpl(0,0); rem ' generic notice template
gb__eoj=0
goto gb__event

rem ' Load gb__notice$ string only if we're handling the event

gb__notice:
   gb__generic$=notice(gb__sysgui,gb__event.x%)
   dim gb__notice$:noticetpl(gb__generic.objtype%,gb__event.flags%)
   gb__notice$=gb__generic$
return

gb__event: repeat
   read record (gb__sysgui,siz=gb__event,err=gb__event_loop_end)gb__event$

   rem ' Get Window ID or Popup ID
   gb__win_id$=$$,gb__popup_id=gb__event.x*(gb__event.code$="P")
   if gb__popup_id=0 then gb__win_id$=fngb__win_id$(gb__event.context)

   rem ' Track whether event was handled
   gb__event_handled=0

   rem ' Handle events for Window ID 101 (enterACharge)
   while gb__win_id$="101"
      if gb__event.code$="X" then
:        gosub W101_C0_WIN_CLOSE;
:        gb__closed[1]=1;
:        gb__event_handled=1;
:        break
      if gb__event.id=101 and gb__event.code$="B" then
:        gosub W101_C101_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=103 and gb__event.code$="N" and gb__event.flags=2 then
:        gosub gb__notice;
:        gosub W101_C103_LIST_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=108 and gb__event.code$="c" and gb__event.flags=0 then
:        gosub W101_C108_CHECK_OFF;
:        gb__event_handled=1;
:        break
      if gb__event.id=108 and gb__event.code$="c" and gb__event.flags=1 then
:        gosub W101_C108_CHECK_ON;
:        gb__event_handled=1;
:        break
      if gb__event.id=109 and gb__event.code$="c" and gb__event.flags=0 then
:        gosub W101_C109_CHECK_OFF;
:        gb__event_handled=1;
:        break
      if gb__event.id=109 and gb__event.code$="c" and gb__event.flags=1 then
:        gosub W101_C109_CHECK_ON;
:        gb__event_handled=1;
:        break
      if gb__event.id=110 and gb__event.code$="c" and gb__event.flags=0 then
:        gosub W101_C110_CHECK_OFF;
:        gb__event_handled=1;
:        break
      if gb__event.id=110 and gb__event.code$="c" and gb__event.flags=1 then
:        gosub W101_C110_CHECK_ON;
:        gb__event_handled=1;
:        break
      if gb__event.id=111 and gb__event.code$="c" and gb__event.flags=0 then
:        gosub W101_C111_CHECK_OFF;
:        gb__event_handled=1;
:        break
      if gb__event.id=111 and gb__event.code$="c" and gb__event.flags=1 then
:        gosub W101_C111_CHECK_ON;
:        gb__event_handled=1;
:        break
      if gb__event.id=112 and gb__event.code$="c" and gb__event.flags=0 then
:        gosub W101_C112_CHECK_OFF;
:        gb__event_handled=1;
:        break
      if gb__event.id=112 and gb__event.code$="c" and gb__event.flags=1 then
:        gosub W101_C112_CHECK_ON;
:        gb__event_handled=1;
:        break
      if gb__event.id=113 and gb__event.code$="l" and gb__event.flags=0 then
:        gosub W101_C113_LIST_CLICK;
:        gb__event_handled=1;
:        break
      if gb__event.id=117 and gb__event.code$="c" and gb__event.flags=0 then
:        gosub W101_C117_CHECK_OFF;
:        gb__event_handled=1;
:        break
      if gb__event.id=117 and gb__event.code$="c" and gb__event.flags=1 then
:        gosub W101_C117_CHECK_ON;
:        gb__event_handled=1;
:        break
      if gb__event.id=122 and gb__event.code$="B" then
:        gosub W101_C122_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=123 and gb__event.code$="B" then
:        gosub W101_C123_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=124 and gb__event.code$="B" then
:        gosub W101_C124_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      break; rem ' Catch unhandled events
   wend; rem ' End of Window ID 101

   rem ' We're done when all windows have been closed.
   rem ' Developer can terminate event loop by setting
   rem ' gb__eoj=1 in any event handler.

   if !(gb__eoj) then
:     gb__eoj=1;
:     for gb__window=1 to gb__windows;
:        gb__eoj=(gb__eoj and gb__closed[gb__window]);
:     next gb__window

until gb__eoj

gb__event_loop_end: rem ' -------------------------------------

close(ARM01,err=*next)
close(ART01,err=*next)
close(ART11,err=*next)
close(ARE01,err=*next)
close(ARE11,err=*next)
close(ECM02,err=*next)
rem gb_eoj.cod - GUIBuilder generated programs: End of Job
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** P R O G R A M   E X I T **************************************
rem
gb__eoj:
   if gb__forms and gb__sysgui then
:     for gb__temp=1 to gb__forms;
:        print (gb__sysgui)'context'(gb__form_context[gb__temp]),'destroy'(0);
:     next gb__temp

   if gb__sysgui then
:     close (gb__sysgui)

   resclose (gb__handle,err=gb__eoj_final)

gb__eoj_final:

   if tcb(13) then
:     exit
:  else
:     release

rem gb_err.cod - GUIBuilder generated programs: Error handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E R R O R   H A N D L E R ************************************
rem
gb__err:
   
   rem ' terminate on Network Lost Errors
   if err = 71 or err = 72 then goto gb__eoj

   gb__temp=msgbox(errmes(-1)+" ("+str(err)+")"+
:      " occurred at line "+str(tcb(5))+
:      " in program "+pgm(-2),5+48,"Error handler")

   if gb__temp=4 then
:     retry
:  else
:     goto gb__eoj

rem gb_esc.cod - GUIBuilder generated programs: Escape handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E S C A P E   H A N D L E R ***********************************
rem
gb__esc:
   
   rem ' terminate program when ESCAPE detected.
   goto gb__eoj
   
   gb__temp=msgbox("An ESCAPE has been detected.  Do you want to end this "+
:     "program?",4+32+256,"ESCAPE handler")
   if gb__temp=7 then
:     return
:  else
:     goto gb__eoj

rem ' -----------------------------------------------------------------
rem ' center_window
rem ' -----------------------------------------------------------------

center_window:

rem running as an applet
if info(3,6)="2" then
    topLevelWindow!.setTitleBarVisible(0)
    applet!=ourAPI!.getAppletProxy()
    applet!.setBounds(0,0,100,500)
else
    width = scrDimension!.width
    height = scrDimension!.height
    winWidth = ourWindow!.getWidth()
    winHeight = ourWindow!.getHeight()

    x = int((width-winWidth)/2)
    y = int((height-winHeight)/2)

    ourWindow!.setLocation(x,y)
fi

return
rem ' -----------------------------------------------------------------
rem ' clearForm
rem ' -----------------------------------------------------------------

clearForm:

custNumber!.setText("")
custName!.setText("")

creditCardList!.removeAllItems()

creditCardNumber!.setText("")
name!.setText("")
month!.selectIndex(0)
year!.selectIndex(0)
visa!.setSelected(0)
mastercard!.setSelected(0)
amex!.setSelected(0)

payInvoices!.setSelected(1)
payOrder!.setSelected(0)

selectAnInvoice!.removeAllItems()
selectAnInvoice!.setEnabled(1)

orderReference!.setText("")
orderReference!.setEditable(0)

balance!.setText("")
balance!.setEditable(0)

payment!.setText("")
payment!.setEditable(0)

gosub resetVerification
avsAddress!.setText("")
avsZipCode!.setText("")
cardSecCode!.setText("")

return
rem ' -----------------------------------------------------------------
rem ' closeARE01
rem ' -----------------------------------------------------------------

closeARE01:

close(ARE01,err=*next)

return
rem ' -----------------------------------------------------------------
rem ' closeFiles
rem ' -----------------------------------------------------------------

closeFiles:

close(ARM01,err=*next)
close(ART01,err=*next)
close(ART11,err=*next)
close(ARE01,err=*next)
close(ARE11,err=*next)
close(ECM02,err=*next)

return
rem ' -----------------------------------------------------------------
rem ' declarations
rem ' -----------------------------------------------------------------

declarations:

USE java.awt.Dimension
USE com.basis.creditCard.CreditCardAuthorization

DECLARE BBjAPI ourAPI!
DECLARE BBjSysGui ourSysGui!
DECLARE BBjSystemMetrics ourSystemMetrics!
DECLARE Dimension scrDimension!
DECLARE BBjWindow ourWindow!
DECLARE BBjTopLevelWindow topLevelWindow!

DECLARE BBjVector ourControlVector!
DECLARE BBjControl control!
DECLARE BBjEditBox custNumber!
DECLARE BBjEditBox custName!
DECLARE BBjEditBox emailAddress!
DECLARE BBjListBox selectAnInvoice!
DECLARE BBjEditBox orderReference!
DECLARE BBjEditBox balance!
DECLARE BBjEditBox payment!
DECLARE BBjListButton creditCardList!
DECLARE BBjEditBox creditCardNumber!
DECLARE BBjEditBox name!
DECLARE BBjListButton month!
DECLARE BBjListButton year!
DECLARE BBjRadioButton visa!
DECLARE BBjRadioButton mastercard!
DECLARE BBjRadioButton amex!

DECLARE BBjRadioButton verification!
DECLARE BBjEditBox avsAddress!
DECLARE BBjEditBox avsZipCode!
DECLARE BBjEditBox cardSecCode!
DECLARE BBjRadioButton payInvoices!
DECLARE BBjRadioButton payOrder!

DECLARE BBjVector invoices!
DECLARE BBjVector invList!
DECLARE BBjString invAmount!

DECLARE BBjFileInfo fileInfo!
DECLARE BBjString fileLocation!

DECLARE CreditCardAuthorization ccAuth!
DECLARE BBjString response!
DECLARE BBjString tempDef!

DECLARE BBjString cardNumber!
DECLARE BBjString expDate!
DECLARE BBjString amount!
DECLARE BBjString ccName!
DECLARE BBjString uniqueID!
DECLARE BBjString cvv2!
DECLARE BBjString ccType!
DECLARE BBjString ccStreet!
DECLARE BBjString ccZip!
DECLARE BBjString comment1!


return
rem ' -----------------------------------------------------------------
rem ' deselectInvoices
rem ' -----------------------------------------------------------------

deselectInvoices:

if invoices! <> null() and  invoices!.size() > 0
    for x = 0 to invoices!.size() - 1

        invLine$ = invoices!.get(x)

        if invLine$(len(invLine$)-3) = " Pay" then
           invLine$ = invLine$(1, len(invLine$)-4)
           invoices!.set(x, invLine$)
        fi

    next x

    selectAnInvoice!.deselectAll()
    selectAnInvoice!.removeAllItems()
    selectAnInvoice!.insertItems(0, invoices!)
fi

return
rem ' -----------------------------------------------------------------
rem ' getAuthorization
rem ' -----------------------------------------------------------------

getAuthorization:

rem '----<get the properties file location>----
propfile = unt
open(propfile)"ec_creditcardProcessing.properties"
fileInfo! = bbjapi().getFileSystem().getFileInfo(propfile)
fileLocation! = fileInfo!.getFilename()
close(propfile)

rem '----<prep data>----
cardNumber! = str(useCCNum$)

if visa!.isSelected() then
    ccType! = "V"
else
    if mastercard!.isSelected() then
        ccType! = "M"
    else
        ccType! = "A"
    fi
fi

expDate! = month!.getText() + str(year!.getText())(3,2)
paymentAmt = fngetNumber(payment!.getText())
amount! = str(paymentAmt)
ccName! = name!.getText()

if payInvoices!.isSelected() then
     uniqueID! = date(0:"%Y%Mz%Dz%Hz%mz%sz") + cust$ + "B"
else
    rem ' prepay an order
    reference$ = orderReference!.getText()
    reference$ = reference$ + "0000000"
    uniqueID! = date(0:"%Y%Mz%Dz%Hz%mz%sz") + reference$(1,7)
fi

if verification!.isSelected() then
    cvv2! = cvs(cardSecCode!.getText(), 3)
    ccStreet! = cvs(avsAddress!.getText(), 3)
    ccZip! = cvs(avsZipCode!.getText(), 3)
fi

if payInvoices!.isSelected() then
    comment1! = firm$ + cust$ +"/" + commentInv$
else
    comment1! = firm$ + cust$ +"/" + orderReference!.getText()
fi

rem '----<get the authorization object>----
ccAuth! = new CreditCardAuthorization(fileLocation!)

if verification!.isSelected()
    response! = ccAuth!.processAuthorization(cardNumber!, ccType!, expDate!, amount!, ccName!, uniqueID! ,cvv2!, ccStreet!, ccZip!, comment1!)
else
    response! = ccAuth!.processAuthorizationWithoutAVSandCSC(cardNumber!, ccType!, expDate!, amount!, ccName!, uniqueID!, comment1!)
fi

rem '----<prep the results >----
tempDef! = ccAuth!.getReponseStringTemplateDefinition()
dim auth$:tempDef!
auth$=response!

return
rem ' -----------------------------------------------------------------
rem ' getConfirmation
rem ' -----------------------------------------------------------------

getConfirmation:

ccConfirmed = 0
invNumber$ = ""
commentInv$ = ""
payList$ = ""

rem ' build the message
msg$ = "Please confirm that you are charging " + cvs(str(fngetNumber(payment!.getText()):"($###,##0.00)"),3)
msg$ = msg$ + " to the card " + creditCardNumber!.getText()

if payOrder!.isSelected() then
    msg$ = msg$ + " to prepay an order."
else
    msg$ = msg$ + " to pay invoice(s) "

    invoices! = selectAnInvoice!.getAllItems()

    for x = 0 to invoices!.size() - 1
        
        invLine$ = invoices!.get(x)

        if invLine$(len(invLine$)-3) = " Pay" then
            ppos = pos(" " = invLine$)
            invNumber$ = invNumber$ + invLine$(1, ppos - 1) + ", "
            commentInv$ = commentInv$ + invLine$(1, ppos - 1) + "-"
            invAmount! = cast(BBjString, invList!.get(x))
            payAmount = num(invAmount!)
            payList$ = payList$ + invLine$(1, ppos - 1) + ":" + str(payAmount) + $0A$
        fi
            
    next x
    invNumber$ = cvs(invNumber$,3)
    invNumber$ = invNumber$(1, len(invNumber$)-1)
    commentInv$ = commentInv$(1, len(commentInv$)-1)

    msg$ = msg$ + invNumber$ + "."

fi

title$ = "Confirmation"

resp = msgbox(msg$, 4 + 32, title$)

if resp = 6 then
    ccConfirmed = 1
fi

return
rem ' -----------------------------------------------------------------
rem ' getEmailAddress
rem ' -----------------------------------------------------------------

getEmailAddress:

read record(tmm03, key = custNum$, err=*next)tmm03$

email_add$ = ""
while 1
    read record(tmm03, end=*break)tmm03$
    if pos(custNum$ = tmm03$) <> 1 then break
    
    if tmm03.ap_contact$ = "Y" then 
        email_add$ = cvs(tmm03.e_mail$,3)
        break
    fi
    
    if tmm03.primary_contact$ = "Y" then
        email_add$ = cvs(tmm03.e_mail$,3)
    fi
    
wend
if cvs(email_add$,3) = "" then 
    email_add$ = "customer-service@basis.cloud"
fi

emailAddress!.setText(email_add$)

return
rem ' -----------------------------------------------------------------
rem ' get_objects
rem ' -----------------------------------------------------------------

get_objects:

ourControlVector! = ourWindow!.getAllControls()

for i=0 to ourControlVector!.size() - 1
    control!= cast(BBjControl, ourControlVector!.getItem(i))

    if control!.getName().equals("custNumber") then custNumber! = cast(BBjEditBox, control!)
    if control!.getName().equals("custName") then custName! = cast(BBjEditBox, control!)

    if control!.getName().equals("creditCardList") then creditCardList! = cast(BBjListButton, control!)

    if control!.getName().equals("creditCardNumber") then creditCardNumber! = cast(BBjEditBox, control!)
    if control!.getName().equals("name") then name! = cast(BBjEditBox, control!)
    if control!.getName().equals("month") then month! = cast(BBjListButton, control!)
    if control!.getName().equals("year") then year! = cast(BBjListButton, control!)
    if control!.getName().equals("visa") then visa! = cast(BBjRadioButton, control!)
    if control!.getName().equals("mastercard") then mastercard! = cast(BBjRadioButton, control!)
    if control!.getName().equals("amex") then amex! = cast(BBjRadioButton, control!)

    if control!.getName().equals("payInvoices") then payInvoices! = cast(BBjRadioButton, control!)
    if control!.getName().equals("payOrder") then payOrder! = cast(BBjRadioButton, control!)

    if control!.getName().equals("selectAnInvoice") then selectAnInvoice! = cast(BBjListBox, control!)
    if control!.getName().equals("orderReference") then orderReference! = cast(BBjEditBox, control!)

    if control!.getName().equals("balance") then balance! = cast(BBjEditBox, control!)
    if control!.getName().equals("payment") then payment! = cast(BBjEditBox, control!)

    if control!.getName().equals("verification") then verification! = cast(BBjRadioButton, control!)

    if control!.getName().equals("avsAddress") then avsAddress! = cast(BBjEditBox, control!)
    if control!.getName().equals("avsZipCode") then avsZipCode! = cast(BBjEditBox, control!)
    if control!.getName().equals("cardSecCode") then cardSecCode! = cast(BBjEditBox, control!)
    if control!.getName().equals("emailAddress") then emailAddress! = cast(BBjEditBox, control!)
    
next i

return
rem ' -----------------------------------------------------------------
rem ' loadCreditCards
rem ' -----------------------------------------------------------------

loadCreditCards:

ourWindow!.setCursor(3)

year$=date(0:"%Y")
month$=date(0:"%Mz")

creditCardList$=""
ccNumberList$=""

READ (ecm02,KEY=firm$+cust$,DOM=*next)

while 1
  READ RECORD (ecm02,END=*break)ecm02$

  if ecm02.firm_id$<>firm$ OR ecm02.customer_nbr$<>cust$ then break

  if ecm02.cc_expires_yr$ < year$ then continue
  if ecm02.cc_expires_yr$ = year$ and ecm02.cc_expires_mo$ < month$ then continue
  if ecm02.user_code$="**" continue

  ccu$="",cce$=CVS(ecm02.credit_card_num$,3)
  CALL "BCC.11",ccu$,cce$

  if cce$="" THEN ccu$ = cce$

  creditCardList$ = creditCardList$ + fnobscure_cc$(ccu$) + " " + ecm02.cc_expires_mo$ + " " + ecm02.cc_expires_yr$ + $0A$
  ccNumberList$ = ccNumberList$ + CVS(ecm02.cc_type$,7) + ecm02.cc_expires_mo$ + ecm02.cc_expires_yr$ + ecm02.cc_name$ + ccu$ + $0a$
wend

if len(creditCardList$) > 0
    creditCardList!.insertItems(0, creditCardList$)
    creditCardList!.deselect()
fi

ourWindow!.setCursor(0)

return
rem ' -----------------------------------------------------------------
rem ' loadCustomer
rem ' -----------------------------------------------------------------

loadCustomer:

found = 0
read record(ARM01, key=custNum$, err=*next)arm01$; found = 1

if !found then
    msg$ = "There is no customer on file with that customer number."
    title$ = "Customer Not Found"
    resp = msgbox(msg$,16,title$)
else
    custName!.setText(cvs(arm01.CUST_NAME$,3))
    avsAddress!.setText(cvs(arm01.ADDR_LINE_1$,3))
    avsZipCode!.setText(cvs(arm01.ZIP_CODE$,3))

    gosub loadInvoiceList
    gosub loadCreditCards
    gosub getEmailAddress
fi

return
rem ' -----------------------------------------------------------------
rem ' loadExpiration
rem ' -----------------------------------------------------------------

loadExpiration:

rem ' month

month$ = $0A$
for x = 1 to 12
    month$ = month$ + str(x:"00") + $0A$
next x
month!.removeAllItems()
month!.insertItems(0, month$)

rem ' year

thisYear = num(date(0:"%Y"))
year$ = $0A$
for x = thisYear to thisYear + 20
    year$ = year$ + str(x) + $0A$
next x
year!.removeAllItems()
year!.insertItems(0, year$)

return
rem ' -----------------------------------------------------------------
rem ' loadInvoiceList
rem ' -----------------------------------------------------------------

loadInvoiceList:

ourWindow!.setCursor(3)

startKey$=custNum$(1,2) + "  " + custNum$(3)
invList$=""
invList! = ourAPI!.makeVector()
selectAnInvoice!.removeAllItems()

read(art01,key=startKey$,err=*next)

rem ' we will only look at invoices within the last year
today = jul(0,0,0)
oneYear = today - 365

balance = 0

while 1
    rem ' open invoice header
    read record(art01, end=*break)art01$

    if pos(startKey$=art01$)<>1 then break

    rem ' invoice older than one year skip it
    if fnaonjul(art01.invoice_date$) < oneYear then continue

    invAmount = art01.invoice_amt
    invBalance = 0
    pmt = 0

    rem ' sum any payments
    read(art11,key=art01$(1,17),dom=*next)
    while 2
        read record(art11,end=*break)art11$
        if pos(art01$(1,17)=art11$)<>1 then break
        if art11.AR_TRAN_CODE$="C" then
            pmt=pmt+art11.trans_amt

        fi
    wend
    invBalance = invAmount + pmt

    rem ' sum any unposted payments
    pmt = 0
    read(are11,key=firm$,dom=*next)
    while invBalance
        read record(are11,end=*break)are11$
        if firm$<>are11.firm_id$ then break
        if cust$<>are11.customer_nbr$ or art01.ar_inv_nbr$<>are11.ar_inv_nbr$ then continue
        pmt = pmt + (are11.apply_amt * (-1))
    wend
    invBalance = invBalance + pmt   
    
    if invBalance <> 0 then
        invBalance$ = str(invBalance:"($###,##0.00)")
        while len(invBalance$) < 11
            invBalance$ = " " + invBalance$
         wend
        invList$ = invList$ + art01.ar_inv_nbr$ + "  " + fnaondate$(art01.invoice_date$) + " " + invBalance$ + $0a$
        invList!.add(str(invBalance))
        balance = balance + invBalance
    fi

wend

if invList$<>"" then
    selectAnInvoice!.insertItems(0, invList$)
    balance!.setText(str(balance:"($###,##0.00)"))
fi

ourWindow!.setCursor(0)

return
rem ' -----------------------------------------------------------------
rem ' maskCCNbr
rem ' -----------------------------------------------------------------

maskCCNbr:

maskedCCNbr$ = cvs(creditCardNumber!.getText(),3)

for x = 1 to len(maskedCCNbr$) - 4
    maskedCCNbr$(x,1) = "X"
next x

return
rem ' -----------------------------------------------------------------
rem ' openARE01
rem ' -----------------------------------------------------------------

openARE01:

call "templates.pgm::ARE01"
ARE01 = unt
OPEN(ARE01)"ARE-01"

return
rem ' -----------------------------------------------------------------
rem ' openFiles
rem ' -----------------------------------------------------------------

openFiles:

call "templates.pgm::ARM01"
ARM01 = unt
OPEN(ARM01)"ARM-01"

call "templates.pgm::ART01"
ART01 = unt
OPEN(ART01)"ART-01"

call "templates.pgm::ART11"
ART11 = unt
OPEN(ART11)"ART-11"

call "templates.pgm::ARE11"
ARE11 = unt
OPEN(ARE11)"ARE-11"

call "ec_open::TMM03"

rem ' ecm02 is encrypted
call "ec_open::ECM02"

return
rem ' -----------------------------------------------------------------
rem ' payingInvoices
rem ' -----------------------------------------------------------------

payingInvoices:

orderReference!.setText("")
orderReference!.setEditable(0)

selectAnInvoice!.setEnabled(1)
payment!.setText("")
payment!.setEditable(0)

return
rem ' -----------------------------------------------------------------
rem ' payingOrder
rem ' -----------------------------------------------------------------

payingOrder:

selectAnInvoice!.setEnabled(0)
gosub deselectInvoices

payment!.setText("")
payment!.setEditable(1)

orderReference!.setEditable(1)

return
rem ' -----------------------------------------------------------------
rem ' postCashReceipts
rem ' -----------------------------------------------------------------

postCashReceipts:

while 1

    rem ' the list of invoices an amount is contained in paylist$
    rem ' in the form of invoice_nbr$ + ":" + invoice_amt$ + $0A$

    rem ' open the cash receipts header file
    gosub openARE01

    p=pos($0a$=paylist$)
    if p=0 then break

    invoice$=paylist$(1,p-1)
    paylist$=paylist$(p+1)

    p=pos(":"=invoice$)
    payment=num(invoice$(p+1))
    invoice$=invoice$(1,p-1)  

    dim are01$:fattr(are01$)

    are01.firm_id$=firm$
    are01.customer_nbr$=cust$
    are01.receipt_date$=fndate$(today_jul)
    are01.cash_rec_cd$ = "WF "
    are01.cash_or_chk$="C"

    are01.ar_check_nbr$="CC"+date(today_jul:"%M/%D")
    if payment<=0 then are01.ar_check_nbr$="APPLY C"

    are01.RESERVED_STR_3$=fill(4)
    are01.payment_amt=0

    readrecord(are01,key=are01$(1,25),dom=*next)are01$
    are01.payment_amt=are01.payment_amt+payment
    are01$=field(are01$)
    writerecord(are01,key=are01$(1,25))are01$

    rem ' close the cash receipts header file
    gosub closeARE01

    dim are11$:fattr(are11$)

    are11.firm_id$=firm$
    are11.customer_nbr$=cust$
    are11.receipt_date$=are01.receipt_date$
    are11.cash_rec_cd$ = "WF "
    are11.ar_check_nbr$=are01.ar_check_nbr$
    are11.ar_inv_nbr$=invoice$
    are11.apply_amt=0

    readrecord(are11,key=are11$(1,32),dom=*next)are11$
    are11.apply_amt=are11.apply_amt+payment
    are11$=field(are11$)
    writerecord(are11,key=are11$(1,32))are11$

wend

return
rem ' -----------------------------------------------------------------
rem ' processTransaction
rem ' -----------------------------------------------------------------

processTransaction:

gosub validateCreditCard

if ccValid then

    rem ' validate type and amount of payment
    gosub validatePaymentTypeAndAmount

    if payValid then

        rem ' validate avs and card security code data
        gosub validateAvsCsc

        if avsCscValid then
                
            rem ' present the transaction details confirmation message
            gosub getConfirmation
        
            if ccConfirmed then

                rem ' process the credit card
                gosub getAuthorization
                if !auth.is_Approved then

                    msg$ = "The charge was declined." + $0A$ + auth.message$ + "."
                    title$ = "Charge Declined"
                    resp = msgbox(msg$, 16, title$)

                else
                    gosub updateFiles
                    
                    msg$ = "The transaction was approved."
                    if payInvoices!.isSelected() then
                        msg$ = msg$ + " The data has been written to cash receipts."
                    else
                        msg$ = msg$ + " You must post the payment to cash receipts once an invoice has been created."
                    fi
                    title$ = "Transaction Complete"
                    resp = msgbox(msg$, 64, title$)
                    
                    gosub sendEmail
                    
                    gosub clearForm
                    custNumber!.setText(firm$ + cust$)
                    gosub loadCustomer

                fi
            fi
        fi
    fi
fi

return
rem ' -----------------------------------------------------------------
rem ' resetVerification
rem ' -----------------------------------------------------------------

resetVerification:

verification!.setSelected(1)
avsAddress!.setEditable(1)
avsZipCode!.setEditable(1)
cardSecCode!.setEditable(1)

return
rem ' -----------------------------------------------------------------
rem ' sendEmail
rem ' -----------------------------------------------------------------

sendEmail:

from$ = "customer-service@basis.cloud"

rem ' live email addresses
to$ = cvs(emailAddress!.getText(),3)
if to$ = "" then 
    to$ = "customer-service@basis.cloud"
    cc$ = ""
else
    cc$ = "customer-service@basis.cloud"
fi
bcc$ = "kw5121151@gmail.com"

subject$ = "Payment Receipt"

gosub maskCCNbr

if payOrder!.isSelected()
    msgtxt$ = "Order # " + cvs(orderReference!.getText() ,3) + " in the amount of " + payment!.getText() + " paid by credit card # " + maskedCCNbr$
else
    msgtxt$ = "Invoice Number(s) " + invNumber$ + " in the amount of " + payment!.getText() + " paid by credit card # " + maskedCCNbr$
fi

call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msgtxt$, ""

xresp = msgbox("Receipt sent via email to " + to$, 0, "Email Sent")

return
rem ' -----------------------------------------------------------------
rem ' turnOffVerification
rem ' -----------------------------------------------------------------

turnOffVerification:

verification!.setSelected(0)
avsAddress!.setEditable(0)
avsZipCode!.setEditable(0)
cardSecCode!.setEditable(0)

return
rem ' -----------------------------------------------------------------
rem ' updateFiles
rem ' -----------------------------------------------------------------

updateFiles:

if payInvoices!.isSelected() then
    gosub postCashReceipts
fi

return
rem ' -----------------------------------------------------------------
rem ' userDefinedFunctions
rem ' -----------------------------------------------------------------

userDefinedFunctions:

def fnaonjul(ymd$)
  y=1900+asc(ymd$(1))-32,m=asc(ymd$(2))-32,d=asc(ymd$(3))-32
  IF m<1 OR d<1 THEN LET jd=0 ELSE LET jd=JUL(y,m,d)
  return jd
fnend

def fnaondate$(ymd$)
    y=1900+asc(ymd$(1))-32,m=asc(ymd$(2))-32,d=asc(ymd$(3))-32
    if m<1 or d<1 then d$="Unknown" else d$=date(jul(y,m,d):"%Mz/%Dz/%Y")
    return d$
fnend

DEF fnobscure_cc$(temp_cc$)
    IF LEN(temp_cc$)=16 THEN
        temp_cc$=STR(temp_cc$:"XXXX XXXX XXXX XXXX")
        temp_cc$(1,15)="**** **** ****" 
    ELSE
        IF LEN(temp_cc$)=15 THEN
            temp_cc$=STR(temp_cc$:"XXXX XXXXXX XXXXX")
            temp_cc$(1,11)="**** ******"
        ELSE 
            IF LEN(temp_cc$)=13 THEN 
                temp_cc$=STR(temp_cc$:"XXXX XXX XXX XXX")
                temp_cc$(1,12)="******* ***"
            fi
        fi  
    fi
    RETURN temp_cc$
FNEND

def fndate$(julian)
    d$=chr(asc(date(julian:"%Yp"))+32) + chr(asc(date(julian:"%Mp"))+32) + chr(asc(date(julian:"%Dp"))+32)
    return d$
fnend

def fngetNumber(num$)
    wrk$ = num$
    if len(wrk$) = 0 then
        number = 0
    else
        number$ = ""
        for x = 1 to len(wrk$)
            if pos(wrk$(x,1) = "0123456789.-") <> 0 then
                number$ = number$ + wrk$(x,1)
            fi
        next x
        isNumeric = 0
        number = num(number$, err=*next); isNumeric = 1
        if !isNumeric then
            number = 0
        fi
    return number
fnend
return
rem ' -----------------------------------------------------------------
rem ' validateAvsCsc
rem ' -----------------------------------------------------------------

validateAvsCsc:

avsCscValid = 0

if verification!.isSelected()
    if avsAddress!.getText() = "" or avsZipCode!.getText() = "" or cardSecCode!.getText() = "" then
        msg$ = "To use AVS and Card Security Code checkin you must enter a street address, a zip code and the card security code."
        title$ = "Verification Data"
        resp = msgbox(msg$, 16, title$)
    else
        avsCscValid = 1
    fi
else
    rem ' not used avs and csc
    avsCscValid = 1
fi

return
rem ' -----------------------------------------------------------------
rem ' validateCreditCard
rem ' -----------------------------------------------------------------

validateCreditCard:

rem ' for valid cards ccValid will be set to 1 and useCCNum$ will contain the
rem ' credit card number

ccValid = 0
useCCNum$ = ""

if visa!.isSelected() then
    cc_type$ = "V"
else
    if mastercard!.isSelected()
        cc_type$ = "M"
    else
        if amex!.isSelected()
            cc_type$ = "A"
        else
            msg$ = "You must select a credit card type."
            title$ = "Credit Card Type"
            resp = msgbox(msg$, 16, title$)
            return
        fi
    fi
fi

wrkCC$ = creditCardNumber!.getText() 
if wrkCC$ = "" then
    msg$ = "You must enter a credit card number."
    title$ = "Credit Card Number"
    resp = msgbox(msg$, 16, title$)
    return
else
    if wrkCC$(1,1) = "*" then
        useCCNum$ = ccNumSelected$
    else
        useCCNum$ = creditCardNumber!.getText()
    fi
fi

cclen=LEN(useCCNum$)

ccFailed = 0
if cclen = 0 OR cclen > 16 then
    ccFailed = 1
else
    if useCCNum$(1,1) <> "2" and useCCNum$(1,1) <> "3" and useCCNum$(1,1) <> "4" and useCCNum$(1,1) <> "5" then
        ccFailed = 1
        rem ' not Amex (3), Visa (4), or MasterCard (5 and 2)
    else
        if useCCNum$(1,1) = "3" and (cclen <> 15 or cc_type$ <> "A") then
            ccFailed = 1
            rem ' Invalid Amex
        else
            if useCCNum$(1,1) = "4" and cclen <> 16 and cclen <> 13 then
                ccFailed = 1
                rem ' Invalid Visa
            else
                if useCCNum$(1,1) = "4" and cc_type$ <> "V" then
                    ccFailed = 1
                    rem ' invalid Visa
                else
                    if (useCCNum$(1,1) = "2" or useCCNum$(1,1) = "5") and (cclen <> 16 or cc_type$ <> "M") then
                        ccFailed = 1
                        rem ' Invalid MasterCard
                    else
                        for x = 1 to cclen
                            numeric = 0
                            let text=NUM(useCCNum$(x, 1),err=*next); numeric = 1
                            if !numeric then
                                ccFailed = 1
                                break
                            fi
                        next x
                        if !ccFailed then
                            rem ' Luhn Formula
                            let sum = num(useCCNum$(cclen, 1))
                            for c = cclen - 1 TO 1 STEP -1
                                let digit=num(useCCNum$(c,1))
                                if mod(cclen - c, 2) = 1 then 
                                    double = digit * 2
                                    sum = sum + int(double/10) + mod(double,10) 
                                else
                                    sum = sum + digit
                                fi
                            next c
                            let valid = (mod(sum,10) = 0)
                            if !valid then
                                ccFailed = 1
                            fi
                        fi
                    fi
                fi
            fi
        fi
    fi
fi

if ccFailed then
    msg$ = "The credit card number enterd is invalid."
    title$ = "Invalid Number"
    resp = msgbox(msg$, 16, title$)
    return
fi

if month!.getText() = "" or year!.getText() = "" then
    msg$ = "You must select an expiration date."
    title$ = "Expiration Date"
    resp = msgbox(msg$, 16, title$)
    return
fi
    
if name!.getText() = "" then
    msg$ = "You must enter a name for the credit card."
    title$ = "Credit Card Name"
    resp = msgbox(msg$, 16, title$)
    return
fi

rem ' we are valid
ccValid = 1
return
rem ' -----------------------------------------------------------------
rem ' validatePaymentTypeAndAmount
rem ' -----------------------------------------------------------------

validatePaymentTypeAndAmount:

payValid = 0

if payInvoices!.isSelected() and payment!.getText() = "" then
    msg$ = "You must selected one or more invoices for payment."
    title$ = "Select Invoices"
    resp = msgbox(msg$, 16, title$)
else
    if payOrder!.isSelected() and payment!.getText() = "" then
        msg$ = "You must enter the amount of the prepayment."
        title$ = "Enter Payment Amount"
        resp = msgbox(msg$, 16, title$)
    else
        if payOrder!.isSelected() then
            paymentAmt$ = payment!.getText()
            isNumeric = 0
            paymentAmt = num(paymentAmt$,err=*next); isNumeric = 1
            if !isNumeric then
                msg$ = "The payment amount must be numeric."
                title$ = "Payment Amount"
                resp = msgbox(msg$, 16, title$)
            else
                payValid = 1
            fi
        else
            payValid = 1
        fi
    fi
fi

return

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge (Window) WIN_CLOSE (X)
rem ' ---------------------------------------------------------------

W101_C0_WIN_CLOSE:
rem ' Window Closed
rem ' gb__event! = cast(BBjCloseEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__window! = gb__event!.getControl()

gosub closeFiles
goto gb__eoj
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge Ctl=101 getButton (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C101_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

custNum$ = custNumber!.getText()

isNumeric = 0
custNum = num(custNum$,err=*next); isNumeric = 1
if !isNumeric then
    custNumber!.focus()
else
    if len(custNum$) > 8 then
        custNumber!.focus()
    else
        while len(custNum$) < 6
            custNum$ = "0" + custNum$
        wend
        if len(custNum$) = 6 then custNum$ = "01" + custNum$
        if len(custNum$) = 7 then custNum$ = "0" + custNum$ 

        gosub clearForm
        custNumber!.setText(custNum$)
        firm$=custNum$(1,2)
        cust$=custNum$(3)
        gosub loadCustomer

    fi
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge Ctl=103 creditCardList (List Button) LIST_SELECT (N2:19)
rem ' ---------------------------------------------------------------

W101_C103_LIST_SELECT:
rem ' Notify Event - List Control - List Selection (2)
rem ' gb__event! = cast(BBjListSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

if creditCardList!.getItemCount() > 0 then

    index = creditCardList!.getSelectedIndex()
    wrkList$ = ccNumberList$
    while 1
        for x = 0 to index
            ppos = pos($0A$ = wrkList$)
            selection$ = wrkList$(1, ppos - 1)
            wrkList$ = wrkList$(ppos + 1)
        next x
        break
    wend

    type$ = selection$(1,1)
    expire_month$ = selection$(2,2)
    expire_year$ = selection$(4,4)
    ccName$ = cvs(selection$(8,30),3)
    ccNumSelected$ = selection$(38)

    if type$ = "V" then
        visa!.setSelected(1)
        mastercard!.setSelected(0)
        amex!.setSelected(0)
    else
        if type$ = "M" then
            visa!.setSelected(0)
            mastercard!.setSelected(1)
            amex!.setSelected(0)
        else
            visa!.setSelected(0)
            mastercard!.setSelected(0)
            amex!.setSelected(1)
        fi
    fi

    month!.setText(expire_month$)
    year!.setText(expire_year$)
    name!.setText(ccName$)
    creditCardNumber!.setText(fnobscure_cc$(ccNumSelected$))

fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge Ctl=108 visa (Radio Button) CHECK_OFF (c0)
rem ' ---------------------------------------------------------------

W101_C108_CHECK_OFF:
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

mastercard!.setSelected(1)
amex!.setSelected(0)
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge Ctl=108 visa (Radio Button) CHECK_ON (c1)
rem ' ---------------------------------------------------------------

W101_C108_CHECK_ON:
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

mastercard!.setSelected(0)
amex!.setSelected(0)
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge Ctl=109 mastercard (Radio Button) CHECK_OFF (c0)
rem ' ---------------------------------------------------------------

W101_C109_CHECK_OFF:
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

visa!.setSelected(0)
amex!.setSelected(1)
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge Ctl=109 mastercard (Radio Button) CHECK_ON (c1)
rem ' ---------------------------------------------------------------

W101_C109_CHECK_ON:
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

visa!.setSelected(0)
amex!.setSelected(0)
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge Ctl=110 amex (Radio Button) CHECK_OFF (c0)
rem ' ---------------------------------------------------------------

W101_C110_CHECK_OFF:
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

visa!.setSelected(1)
mastercard!.setSelected(0)
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge Ctl=110 amex (Radio Button) CHECK_ON (c1)
rem ' ---------------------------------------------------------------

W101_C110_CHECK_ON:
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

visa!.setSelected(0)
mastercard!.setSelected(0)
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge Ctl=111 payInvoices (Radio Button) CHECK_OFF (c0)
rem ' ---------------------------------------------------------------

W101_C111_CHECK_OFF:
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

payOrder!.setSelected(1)
gosub payingOrder
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge Ctl=111 payInvoices (Radio Button) CHECK_ON (c1)
rem ' ---------------------------------------------------------------

W101_C111_CHECK_ON:
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

payOrder!.setSelected(0)
gosub payingInvoices
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge Ctl=112 payOrder (Radio Button) CHECK_OFF (c0)
rem ' ---------------------------------------------------------------

W101_C112_CHECK_OFF:
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

payInvoices!.setSelected(1)
gosub payingInvoices
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge Ctl=112 payOrder (Radio Button) CHECK_ON (c1)
rem ' ---------------------------------------------------------------

W101_C112_CHECK_ON:
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

payInvoices!.setSelected(0)
gosub payingOrder
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge Ctl=113 selectAnInvoice (List Box) LIST_CLICK (l0)
rem ' ---------------------------------------------------------------

W101_C113_LIST_CLICK:
rem ' Click in list box
rem ' gb__event! = cast(BBjListClickEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

payment = 0

selection = selectAnInvoice!.getSelectedIndex()
invoices! = selectAnInvoice!.getAllItems()

if invoices!.size() >0 then
      for x = 0 to invoices!.size() - 1
              
          invLine$ = invoices!.get(x)
      
          if x = selection then
              if invLine$(len(invLine$)-3) = " Pay" then
                  invLine$ = invLine$(1, len(invLine$)-4)
                  invoices!.set(x, invLine$)
              else
                  invLine$ = invLine$ + " Pay"
                  invoices!.set(x, invLine$)
                  invAmount! = cast(BBjString, invList!.get(x))
                  payment = payment + num(invAmount!)
              fi
          else
              if invLine$(len(invLine$)-3) = " Pay" then
                  invAmount! = cast(BBjString, invList!.get(x))
                  payment = payment + num(invAmount!)
              fi
          fi
      next x

else
      payment = 0
fi

selectAnInvoice!.deselectAll()
selectAnInvoice!.removeAllItems()
selectAnInvoice!.insertItems(0, invoices!)

if payment <> 0 then
    payment!.setText(str(payment:"($###,##0.00)"))
else
    payment!.setText("")
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge Ctl=117 verification (Radio Button) CHECK_OFF (c0)
rem ' ---------------------------------------------------------------

W101_C117_CHECK_OFF:
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub turnOffVerification
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge Ctl=117 verification (Radio Button) CHECK_ON (c1)
rem ' ---------------------------------------------------------------

W101_C117_CHECK_ON:
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub resetVerification
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge Ctl=122 exit (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C122_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub closeFiles
goto gb__eoj
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge Ctl=123 clear (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C123_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub clearForm
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 enterACharge Ctl=124 processCard (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C124_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub processTransaction
RETURN


rem gb_std.cod - Put your standard subroutines/functions/etc. here.

END
