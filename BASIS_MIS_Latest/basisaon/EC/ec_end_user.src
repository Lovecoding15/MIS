   rem ' Program Name: C:\eclipse201812r\workspace\B_Commerce\ec_end_user.src
   rem ' Resource File: ec_end_user.arc
   rem ' Generated by GUIBuilder 4.0 (October 23, 2019 at 14:06:50)
   rem ' Portions Copyright (C) 1997-2019 BASIS International Ltd.  All rights reserved.

   seterr gb__no_arg
   enter gb__arg$; gb__args=-1,gb__args=pos($0a$=fattr(gb__arg$,$$),1,0)
gb__no_arg:
   seterr 0

   precision 99
   gb__show_forms=2; rem ' Create all forms at the beginning

   rem ' gb_ini.cod - GUIBuilder generated programs: Initialization
   rem ' Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
   rem
   rem ' ***** I N I T I A L I Z A T I O N *****
   rem ' The first part of the initialization section ensures that the
   rem ' environment will support the requirements of the generated 
   rem ' program.  These requirements are:
   rem '     1.  The interpreter supports GUI
   rem '     2.  The interpreter is Visual PRO/5 2.0 or above
   rem '     3.  A SYSGUI device is defined in config.bbx
   rem

   rem ' 1. Make sure the interpreter in use supports GUI
   if info(6,0)="" then
:     print 'cs',;
:     print "This interpreter does not support GUI.";
:     print "Press any key to continue.",;
:     read record(0,siz=1);
:     stop
   rem

   rem ' 2. Make sure the interpreter in use is Visual PRO/5 2.0 or above
   if sys<"LEVEL 5" or (cvs(sys,3)="LEVEL 5" and cvs(rev,3)<"REV 2.0") then
:     input(0,err=gb__eoj)
:      	'ask'("",4,"Requires at least Visual PRO/5 Rev. 2.0.  "+
:      	"This program will now terminate.","&Terminate:Y"+$0a$),
:      	'ee',gb__temp$,'be',;
:     goto gb__eoj
   rem

   seterr gb__err; setesc gb__esc

   rem ' 3. Check config.bbx for SYSGUI and SYSPRINT devices
   gb__alias=0,gb__sysgui$="",gb__sysprint$=""
   dim gb__tsk$:"type:u(1),opens:u(1),name:c(1*=0),dname:c(1*=0),pname:c(1*=0),modes:c(1*=0)"

gb__check_tsk:
   gb__tsk$=tsk(gb__alias,err=gb__done_with_tsk)

   if gb__sysgui$="" and cvs(gb__tsk.pname$,7)="SYSGUI" then
:     gb__sysgui$=gb__tsk.name$

   if gb__sysprint$="" and cvs(gb__tsk.pname$,7)="SYSPRINT" then
:     gb__sysprint$=gb__tsk.name$

   if gb__sysgui$="" or gb__sysprint$="" then
:     gb__alias=gb__alias+1;
:     goto gb__check_tsk

gb__done_with_tsk:
   if gb__sysgui$="" then
:     gb__sysgui$="not defined in config.bbx";
:     goto gb__cannot_open_sysgui

   rem ' Open SYSGUI device
   gb__sysgui=unt; open (gb__sysgui,err=gb__cannot_open_sysgui)gb__sysgui$
   goto gb__opened_sysgui

gb__cannot_open_sysgui:
   gb__err$="Unable to open the SYSGUI device (alias "+gb__sysgui$+
:    ") in program "+pgm(-2)+".  Visual PRO/5 cannot maintain a graphical "+
:    "user interface without this device.  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"SYSGUI error")
   goto gb__eoj

gb__opened_sysgui:
   dim gb__sysgui_fin$:tmpl(gb__sysgui,ind=0)
   gb__sysgui_fin$=fin(gb__sysgui)

   rem ' splash screen, if any, can go here
   rem ' splash=gb__sysgui_fin.available_context
   rem ' print (gb__sysgui)'context'(splash),'window'(0,0,500,400,$$,$01000000$),'image'(0,0,500,400,"mysplash.gif")

   dim gb__event$:tmpl(gb__sysgui)
   gb__event=len(gb__event$)

   rem ' Open the resource file (try both .arc and .brc if necessary)
   gb__resource$="ec_end_user.arc"
   if pos("ec.bbj"= pgm(-2)) then gosub prep_routine
   gb__handle=resopen(gb__resource$,err=gb__resource_fallback);
:  goto gb__opened_resource

gb__resource_fallback:
   gb__temp=pos(".brc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"arc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

   gb__temp=pos(".arc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"brc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

gb__cannot_open_resource:
   gb__err$="Unable to open resource file ec_end_user.arc"+
:    " in program "+pgm(-2)+".  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"Resource file error")
   goto gb__eoj

   rem ' ------------------------------------------------------------------------
   rem ' Functions to manipulate screens and data
   rem ' ------------------------------------------------------------------------

   rem ' Get data from screen into template record
   def fngb__get_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put data from template record to screen
   def fngb__put_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Get fields from screen into template record
   def fngb__get_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put fields from template record to screen
   def fngb__put_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Set focus to specified Window ID
   def fngb__focus_win_id(xx__win_id$)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui,err=gb__focus_win_id)'context'(xx__context),'focus'(0),'raise',
      return xx__context
   gb__focus_win_id:
      xx__form=fngb__form(xx__win_id$)
      print (gb__sysgui)'context'(xx__context),
:                       'resource'(len(gb__resource$[xx__form])),gb__resource$[xx__form],
      return xx__context
   fnend


   rem ' Get form number given Window ID
   def fngb__form(xx__win_id$)
       gb__form=-1,xx__form_id$=xx__win_id$
       xx__form=pos("."=xx__form_id$)
       if xx__form then
:         xx__form_id$=xx__form_id$(1,xx__form-1)
       for xx__form=1 to gb__forms
           if gb__form.id$[xx__form]=xx__form_id$ then
:             gb__form=xx__form;
:             break
       next xx__form
       return gb__form
   fnend


   rem ' Set focus to specified Window ID + Control ID
   def fngb__focus_ctl_id(xx__win_id$,xx__ctl_id)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Set focus to specified Window ID + Control Name
   def fngb__focus_ctl_name(xx__win_id$,xx__ctl_name$)
      dim xx__rec$:fngb__template$(xx__win_id$)
      xx__ctl_id=num(fattr(xx__rec$,xx__ctl_name$,"ID"))
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Get Window ID given Context
   def fngb__win_id$(xx__context)
       xx__win_id$=""
       for xx__window=1 to gb__windows
           if gb__window.context[xx__window]=xx__context then
:             xx__win_id$=gb__window.win_id$[xx__window];
:             break
       next xx__window
       return xx__win_id$
   fnend


   rem ' Get Context given Window ID
   def fngb__context(xx__win_id$)
      gb__window=-1,gb__context=-1
      for xx__window=1 to gb__windows
          if gb__window.win_id$[xx__window]=xx__win_id$ then
:            gb__window=xx__window,gb__context=gb__window.context[gb__window];
:            break
      next xx__window
      if gb__context>=0 or gb__window<0 then
:        return gb__context
      return fngb__window(xx__win_id$)
   fnend


   rem ' Get Window Information given Window ID
   def fngb__win_info$(xx__win_id$)
      dim gb__win_info$(0)
      xx__context=fngb__context(xx__win_id$)
      if xx__context<0 then
:        return gb__win_info$
      dim gb__win_info$:"class:u(1),type:u(1),hidden:u(1),disabled:u(1),"
:                      +"context:u(2),eventmask:u(4),flags:u(4),focus:u(2),"
:                      +"x:i(2),y:i(2),w:u(2),h:u(2),title:c(16*=)"
      gb__win_info$=ctrl(gb__sysgui,0,4,xx__context)
:                  +ctrl(gb__sysgui,0,8,xx__context)
:                  +bin(xx__context,2)
:                  +sendmsg(gb__sysgui,0,21,0,"",xx__context)
:                  +sendmsg(gb__sysgui,0,22,0,"",xx__context)
:                  +ctrl(gb__sysgui,0,2,xx__context)
:                  +ctrl(gb__sysgui,0,0,xx__context)
:                  +ctrl(gb__sysgui,0,1,xx__context)
      return gb__win_info$
   fnend

gb__opened_resource:

   rem ==================== End of gb_ini.cod ====================

rem ' Instantiate form(s)

gb__forms = 1
dim gb__form_context[gb__forms],gb__resource$[gb__forms],gb__form$:"id[1]:c(4*=10)"

gb__windows=1; rem ' includes child windows, if any
gb__win_id$ = "115"

dim gb__win$:"END_USER_DATA:I(2)"

gb__win.END_USER_DATA=-1

dim gb__window$:"win_id[1]:c(8*=10),win_name[1]:c(16*=10),context[1]:n(4*=10)"
gb__window.win_id$[1]="115",gb__window.win_name$[1]="END_USER_DATA",gb__window.context[1]=-1,gb__form.id$[1]="115"

gb__context = fngb__window("115"); rem ' end_user_data

rem ' Instantiate the form corresponding to a given window

   def fngb__window(xx__win_id$)
      gb__window = 0
      for xx__window=1 to gb__windows
         if gb__window.win_id$[xx__window]=xx__win_id$ then
:           gb__window = xx__window;
:           break
      next xx__window
      if gb__window = 0 then 
:        return -1
      if gb__window.context[gb__window] >= 0 then
:        return gb__window.context[gb__window]

      switch fngb__form(xx__win_id$)

         case 1; rem ' Load Form ID 115 (END_USER_DATA)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[1]=gb__sysgui_fin.available_context
         gb__resource$[1]=resget(gb__handle,1,115)
         print (gb__sysgui)'context'(gb__form_context[1]),'resource'(len(gb__resource$[1])),gb__resource$[1]
         gb__win.END_USER_DATA=gb__form_context[1]
         gb__window.context[1]=gb__win.END_USER_DATA
         break
      swend

      return gb__window.context[gb__window]
   fnend

rem ' Get template for controls on a given window

   def fngb__template$(xx__win_id$)
      if xx__win_id$="115" then return "REFERENCENBR:C(64*=0):ID=102 TYPE=16 X=160 Y=67 W=295 H=25:,COMPNAME:C(64*=0):ID=104 TYPE=16 X=160 Y=99 W=295 H=25:,CONTACTNAME:C(64*=0):ID=106 TYPE=16 X=160 Y=131 W=240 H=25:,ADDRLNONE:C(64*=0):ID=109 TYPE=16 X=160 Y=195 W=295 H=25:,ADDRLNTWO:C(64*=0):ID=111 TYPE=16 X=160 Y=227 W=295 H=25:,ADDRLNTHREE:C(64*=0):ID=113 TYPE=16 X=160 Y=259 W=295 H=25:,CITY:C(64*=0):ID=115 TYPE=16 X=160 Y=291 W=240 H=25:,STATE:C(255*=0):ID=117 TYPE=19 X=160 Y=323 W=60 H=130:,POSTALCODE:C(64*=0):ID=119 TYPE=16 X=320 Y=323 W=100 H=25:,COUNTRY:C(255*=0):ID=121 TYPE=19 X=160 Y=355 W=160 H=130:,EMAILADDRESS:C(64*=0):ID=123 TYPE=16 X=160 Y=387 W=295 H=25:,PHONENUMBER:C(64*=0):ID=125 TYPE=16 X=160 Y=419 W=160 H=25:,INDUSTRY:C(255*=0):ID=127 TYPE=19 X=610 Y=131 W=160 H=130:,OTHERDESC:C(64*=0):ID=129 TYPE=16 X=610 Y=163 W=160 H=25:,BASISPRODUCT:C(255*=0):ID=131 TYPE=19 X=610 Y=195 W=160 H=130:,APPMODULESUSED:C(64*=0):ID=133 TYPE=22 X=610 Y=227 W=160 H=91:,ADVANTAGE:N(1*=0):ID=134 TYPE=13 X=430 Y=323 W=340 H=25:,ANNOUNCEMENTS:N(1*=0):ID=135 TYPE=13 X=430 Y=355 W=340 H=25:,SAVE:C(1*=0):ID=136 TYPE=11 X=510 Y=460 W=120 H=25:,CANCEL:C(1*=0):ID=137 TYPE=11 X=650 Y=460 W=120 H=25:,COMPNAMEFLAG:C(64*=0):ID=144 TYPE=17 X=140 Y=99 W=20 H=25:,LABEL1:C(64*=0):ID=103 TYPE=17 X=20 Y=104 W=130 H=25:,LABEL2:C(64*=0):ID=105 TYPE=17 X=10 Y=136 W=140 H=25:,LABEL3:C(64*=0):ID=108 TYPE=17 X=10 Y=200 W=140 H=25:,LABEL4:C(64*=0):ID=110 TYPE=17 X=10 Y=232 W=140 H=25:,LABEL5:C(64*=0):ID=112 TYPE=17 X=10 Y=264 W=140 H=25:,LABEL6:C(64*=0):ID=114 TYPE=17 X=10 Y=296 W=140 H=25:,LABEL7:C(64*=0):ID=116 TYPE=17 X=10 Y=328 W=140 H=20:,LABEL8:C(64*=0):ID=118 TYPE=17 X=225 Y=328 W=85 H=25:,COUNTRYFLAG:C(64*=0):ID=145 TYPE=17 X=140 Y=355 W=20 H=20:,LABEL9:C(64*=0):ID=120 TYPE=17 X=20 Y=360 W=130 H=25:,EMAILFLAG:C(64*=0):ID=149 TYPE=17 X=140 Y=387 W=20 H=20:,LABEL10:C(64*=0):ID=122 TYPE=17 X=10 Y=392 W=140 H=25:,LABEL11:C(64*=0):ID=124 TYPE=17 X=10 Y=424 W=140 H=25:,LABEL12:C(64*=0):ID=126 TYPE=17 X=465 Y=136 W=140 H=25:,LABEL13:C(64*=0):ID=128 TYPE=17 X=465 Y=168 W=140 H=25:,LABEL14:C(64*=0):ID=130 TYPE=17 X=465 Y=197 W=140 H=30:,LABEL15:C(64*=0):ID=132 TYPE=17 X=465 Y=232 W=140 H=30:,EXISTINGLIST:C(255*=0):ID=101 TYPE=19 X=160 Y=35 W=295 H=110:,LABEL_16:C(64*=0):ID=100 TYPE=17 X=10 Y=35 W=140 H=30:,ENDUSERNBR:C(64*=0):ID=138 TYPE=16 X=160 Y=460 W=120 H=25:,LABEL17:C(64*=0):ID=139 TYPE=17 X=10 Y=465 W=140 H=20:,STATIC_TEXT:C(64*=0):ID=140 TYPE=17 X=10 Y=72 W=140 H=25:,COMPNAMEREQ:C(64*=0):ID=141 TYPE=17 X=460 Y=99 W=50 H=25:,COUNTRYREQ:C(64*=0):ID=142 TYPE=17 X=330 Y=355 W=50 H=25:,TOGGLEBUTTON:C(1*=0):ID=143 TYPE=11 X=475 Y=35 W=180 H=25:,STATIC_TEXT_146:C(64*=0):ID=146 TYPE=17 X=10 Y=168 W=140 H=25:,CONTACTPHONE:C(64*=0):ID=107 TYPE=16 X=160 Y=163 W=160 H=25:,EMAILREQ:C(64*=0):ID=147 TYPE=17 X=460 Y=387 W=50 H=25:,HEADERTEXT:C(64*=0):ID=148 TYPE=17 X=0 Y=0 W=900 H=25:"
      return ""
   fnend

rem ' get our inteface objects
ourAPI!=BBjAPI()
ourSysGui!=ourAPI!.getSysGui()
ourSystemMetrics!=ourSysGui!.getSystemMetrics()
scrDimension!=ourSystemMetrics!.getScreenSize()
ourContext=ourSysGui!.getContext()
ourWindow!=ourSysGui!.getWindow(ourContext)
topLevelWindow!=cast(BBjTopLevelWindow, ourSysGui!.getWindow(ourContext))
rem ' the caller is managing it's own window
rem ' callersWindow!=ourSysGui!.getWindow(gb__arg.callersContext)
gosub center_window

firm_id$=gb__arg.firm_id$
customer_nbr$=gb__arg.customer_nbr$
theLine$=gb__arg.firm_id$+gb__arg.customer_nbr$+gb__arg.user_code$+gb__arg.line_number$
lang!=gb__arg.lang$
serialNbr$=gb__arg.serial_nbr$

gosub open_files

translator!.translateWindow(ourWindow!)

ourWindow!.setText(ourWindow!.getText() + " - " + gb__arg.customer_nbr$)

ourWindow!.setVisible(1)

rem ' hide the caller's Window
rem ' the caller is managing it's own window
rem ' rem ' rem ' rem ' urWindow!.setCursor(3)

rem ' init window template
win_id$=gb__win_id$, win_id=num(win_id$)
dim win_data$:fngb__template$(win_id$)
win_data$=fngb__get_screen$(win_id$,win_data$)

gosub get_objects
usingCompanyOrder=1; rem ' controls the order of the existing list button

compNameReq!.setVisible(0)
countryReq!.setVisible(0)
emailReq!.setVisible(0)


REM ' check to see if the end user data has been previously written
gosub check_for_existing_data

rem ' load the lists for the selection boxes
gosub get_end_user_list
gosub get_product_list
gosub get_state_list
gosub get_country_list
gosub get_industry_list

Rem ' set up the Marketing Comm updater TMM03
gosub assemble_url
marCommUpdater! = new EuMarCommUpdater(our_dburl$)

rem ' load the data in the form
gosub load_data

rem ' init the window
win_data$=fngb__put_screen$(win_id$,win_data$)

rem ' set cursor to pointer
ourWindow!.setCursor(0)
referenceNbr!.focus()

rem ----<define special user defined functions>-------

rem ' replace $0A$ with \n
def fngb_spec_esc_lf$(xx_inStr$)
    sgb_temp$=xx_inStr$,xx_outStr$=""
    while len(sgb_temp$)
        sgb_pos=pos($0A$=sgb_temp$)
        if sgb_pos=0 Then
            xx_outStr$=xx_outStr$+sgb_temp$+"\n",sgb_temp$=""
        else
            xx_outStr$=xx_outStr$+sgb_temp$(1,sgb_pos-1)+"\n",sgb_temp$=sgb_temp$(sgb_pos+1)
        fi
    wend
    return xx_outStr$
fnend

rem ' replace \n with $0A$
def fngb_spec_unesc_lf$(xx_inStr$)
    sgb_temp$=xx_inStr$,xx_outStr$=""
    while len(sgb_temp$)
        sgb_pos=pos("\n"=sgb_temp$)
        if sgb_pos=0 then
            xx_outStr$=xx_outStr$+sgb_temp$+$0A$,sgb_temp$=""
        else
            xx_outStr$=xx_outStr$+sgb_temp$(1,sgb_pos-1)+$0A$,sgb_temp$=sgb_temp$(sgb_pos+2)
        fi
    wend
    return xx_outStr$
fnend

rem ' get selection from list button
def fngb_spec_get_selection$(xx_inList$)
    sgb_temp$=xx_inList$,sgb_selection$=""
    sgb_marker=pos($ff$=sgb_temp$)
    if sgb_marker<>0 then 
        sgb_selIndex=num(sgb_temp$(sgb_marker+1))
        sgb_index=0
        while sgb_index <= sgb_selIndex
            sgb_marker=pos($0a$=sgb_temp$)
            sgb_sel$=sgb_temp$(1,sgb_marker-1),sgb_temp$=sgb_temp$(sgb_marker+1)
            if sgb_index=sgb_selIndex then sgb_selection$=sgb_sel$
            sgb_index=sgb_index+1
        wend
    fi
    return sgb_selection$
fnend

def FNinsertSQLParameters!(udfSql!, firmId!, customerNbr!)
    firmIdTarget!="\|FIRMID\|"
    customerNbrTarget!="\|CUSTOMERNBR\|"
    udfSql!=udfSql!.replaceAll(firmIdTarget!,firmId!)
    udfSql!=udfSql!.replaceAll(customerNbrTarget!,customerNbr!)
    return udfSql!
fnend

def FNgetNextSequence$(xProps!,xOur_dburl$)
    udfChan=sqlunt
    sqlopen(udfChan)XOur_dburl$
    thisSQL$=props!.getProperty("snmeu.get.next.sequence")
    sqlprep(udfChan)thisSQL$
    nextKey$=sqlfetch(udfChan)
    sqlclose(udfChan,err=*next)
    retKey$=str(num(cvs(nextKey$,3)):"0000000000")
    return retKey$
fnend
rem ' ---------------------------------------------------------------
rem ' Event Loop
rem ' ---------------------------------------------------------------

dim gb__closed[gb__windows]; rem ' track window status
dim gb__generic$:noticetpl(0,0); rem ' generic notice template
gb__eoj=0
goto gb__event

rem ' Load gb__notice$ string only if we're handling the event

gb__notice:
   gb__generic$=notice(gb__sysgui,gb__event.x%)
   dim gb__notice$:noticetpl(gb__generic.objtype%,gb__event.flags%)
   gb__notice$=gb__generic$
return

gb__event: repeat
   read record (gb__sysgui,siz=gb__event,err=gb__event_loop_end)gb__event$

   rem ' Get Window ID or Popup ID
   gb__win_id$=$$,gb__popup_id=gb__event.x*(gb__event.code$="P")
   if gb__popup_id=0 then gb__win_id$=fngb__win_id$(gb__event.context)

   rem ' Track whether event was handled
   gb__event_handled=0

   rem ' Handle events for Window ID 115 (end_user_data)
   while gb__win_id$="115"
      if gb__event.code$="X" then
:        gosub W115_C0_WIN_CLOSE;
:        gb__closed[1]=1;
:        gb__event_handled=1;
:        break
      if gb__event.id=101 and gb__event.code$="N" and gb__event.flags=2 then
:        gosub gb__notice;
:        gosub W115_C101_LIST_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=127 and gb__event.code$="N" and gb__event.flags=2 then
:        gosub gb__notice;
:        gosub W115_C127_LIST_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=136 and gb__event.code$="B" then
:        gosub W115_C136_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=137 and gb__event.code$="B" then
:        gosub W115_C137_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=143 and gb__event.code$="B" then
:        gosub W115_C143_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      break; rem ' Catch unhandled events
   wend; rem ' End of Window ID 115

   rem ' We're done when all windows have been closed.
   rem ' Developer can terminate event loop by setting
   rem ' gb__eoj=1 in any event handler.

   if !(gb__eoj) then
:     gb__eoj=1;
:     for gb__window=1 to gb__windows;
:        gb__eoj=(gb__eoj and gb__closed[gb__window]);
:     next gb__window

until gb__eoj

gb__event_loop_end: rem ' -------------------------------------

gosub show_callersWindow
rem gb_eoj.cod - GUIBuilder generated programs: End of Job
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** P R O G R A M   E X I T **************************************
rem
gb__eoj:
   if gb__forms and gb__sysgui then
:     for gb__temp=1 to gb__forms;
:        print (gb__sysgui)'context'(gb__form_context[gb__temp]),'destroy'(0);
:     next gb__temp

   if gb__sysgui then
:     close (gb__sysgui)

   resclose (gb__handle,err=gb__eoj_final)

gb__eoj_final:

   if tcb(13) then
:     exit
:  else
:     release

rem gb_err.cod - GUIBuilder generated programs: Error handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E R R O R   H A N D L E R ************************************
rem
gb__err:
   
   rem ' terminate on Network Lost Errors
   if err = 71 or err = 72 then goto gb__eoj

   gb__temp=msgbox(errmes(-1)+" ("+str(err)+")"+
:      " occurred at line "+str(tcb(5))+
:      " in program "+pgm(-2),5+48,"Error handler")

   if gb__temp=4 then
:     retry
:  else
:     goto gb__eoj

rem gb_esc.cod - GUIBuilder generated programs: Escape handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E S C A P E   H A N D L E R ***********************************
rem
gb__esc:
   
   rem ' terminate program when ESCAPE detected.
   goto gb__eoj
   
   gb__temp=msgbox("An ESCAPE has been detected.  Do you want to end this "+
:     "program?",4+32+256,"ESCAPE handler")
   if gb__temp=7 then
:     return
:  else
:     goto gb__eoj

rem ' -----------------------------------------------------------------rem ' Close_Filesrem ' -----------------------------------------------------------------

Close_Files:

IF LEN(chan$) THEN LET chan=NUM(chan$(1,4)),chan$=chan$(5); CLOSE (chan); GOTO close_files

return
rem ' -----------------------------------------------------------------rem ' Declarationsrem ' -----------------------------------------------------------------

Declarations:

USE ::LanguageTranslator.src::LanguageTranslator
USE ::EuMarCommUpdater.src::EuMarCommUpdater

DECLARE BBjAPI ourAPI!
DECLARE BBjVector params!
DECLARE BBjSysGui ourSysGui!
rem ' the caller is managing it's own window
rem ' DECLARE BBjWindow callersWindow!
DECLARE BBjAppletProxy applet!
DECLARE BBjTopLevelWindow topLevelWindow!
DECLARE BBjString thisSQL!
DECLARE EuMarCommUpdater marCommUpdater!


return
rem ' -----------------------------------------------------------------rem ' Open_Filesrem ' -----------------------------------------------------------------

Open_Files:

eceeu=gb__arg.eceeu
CALL "templates.pgm::ECEEU"

csm01=gb__arg.csm01
CALL "templates.pgm::CSM01"

states=gb__arg.states
CALL "templates.pgm::STATES"

country=gb__arg.country
CALL "templates.pgm::COUNTRY"

snmeu=gb__arg.snmeu
CALL "templates.pgm::SNMEU"

snmel=gb__arg.snmel
CALL "templates.pgm::SNMEL"

rem ' template needed to get localize message texts
rem 'dim ec_translate$:"mbid:c(4),lang:c(2*),text1:c(1*),text2:c(1*)"
translator! = new LanguageTranslator("ec_end_user."+lang!+".properties")

props=unt
open(props)"ec_sql.properties"
props$=fid(props), props$=props$(9)
close(props)
file!= new java.io.File(props$)
fis!=new java.io.FileInputStream(file!)
bis!=new java.io.BufferedInputStream(fis!)
props!=new java.util.Properties()
props!.load(bis!)

return
rem ' -----------------------------------------------------------------rem ' assemble_end_user_list_queryrem ' -----------------------------------------------------------------

assemble_end_user_list_query:

sql$=props!.getProperty("endUserList.select")+" "
sql$=sql$+props!.getProperty("endUserList.from")+" "
sql$=sql$+props!.getProperty("endUserList.where")+" "

udfSql!=sql$
firmId!=firm_id$
customerNbr!=customer_nbr$

sql!=FNinsertSQLParameters!(udfSql!, firmId!, customerNbr!)

byCompanyNameSQL$=sql!+props!.getProperty("endUserList.orderByCompany")
byReferenceNbrSQL$=sql!+props!.getProperty("endUserList.orderByReferenceNbr")

return
rem ' -----------------------------------------------------------------rem ' assemble_industry_list_queryrem ' -----------------------------------------------------------------

assemble_industry_list_query:

sql$=props!.getProperty("industryList.select")+" "
sql$=sql$+props!.getProperty("industryList.from")+" "
sql$=sql$+props!.getProperty("industryList.orderby")

return
rem ' -----------------------------------------------------------------rem ' assemble_urlrem ' -----------------------------------------------------------------

assemble_url:

our_dburl$=props!.getProperty("sqlURL.urlprefix") + props!.getProperty("sqlURL.server")+":"
our_dburl$=our_dburl$+props!.getProperty("sqlURL.port")+"?database="
our_dburl$=our_dburl$+props!.getProperty("sqlURL.database")+"&user="+props!.getProperty("sqlURL.user")+"&password="
our_dburl$=our_dburl$+props!.getProperty("sqlURL.password")

return
rem ' -----------------------------------------------------------------rem ' center_windowrem ' -----------------------------------------------------------------

center_window:

rem 'no longer needed'
return

rem running as an applet
if info(3,6)="2" then
    topLevelWindow!.setTitleBarVisible(0)
    applet!=ourAPI!.getAppletProxy()
    applet!.setBounds(0,0,525,600)
else
    width = scrDimension!.width
    height = scrDimension!.height
    winWidth = ourWindow!.getWidth()
    winHeight = ourWindow!.getHeight()

    x = int((width-winWidth)/2)
    y = int((height-winHeight)/2)

    ourWindow!.setLocation(x,y)
fi

return
rem ' -----------------------------------------------------------------rem ' check_for_existing_datarem ' -----------------------------------------------------------------

check_for_existing_data:

    rem ' check the cart end user data file first
    read record(eceeu,key=theLine$,dom=cfed_not_eceeu)eceeu$
    eceeu$=field(eceeu$)
    goto cfed_return

cfed_not_eceeu:

    dim eceeu$:fattr(eceeu$)
    eceeu.firm_id$=gb__arg.firm_id$
    eceeu.customer_nbr$=gb__arg.customer_nbr$
    eceeu.user_code$=gb__arg.user_code$
    eceeu.line_number$=gb__arg.line_number$

    rem ' check for an existing serial number
    if cvs(serialNbr$,3)="" then goto cfed_return

    read record(snmel,key=serialNbr$,dom=cfed_return)snmel$
    
    rem ' existing end user
    read record(snmeu,key=snmel.end_user_nbr$)snmeu$
    snmeu$=field(snmeu$)

    rem ' inform the user
    params!=ourAPI!.makeVector()
    params!.add(0,cvs(serialNbr$,3))
    params!.add(1,cvs(snmeu.reference_nbr$+" "+snmeu.company_name$,3))
    msg$=translator!.getMessage("loadUser.inform.existing", params!)

    masgmsg$ = msg$, msg$ = ""
    while pos("\n" = masgmsg$)
        ppos = pos("\n" = masgmsg$)
        msg$ = msg$ + masgmsg$(1, ppos - 1) + $0A$
        masgmsg$ = masgmsg$(ppos + 2)
    wend
    msg$ = msg$ + masgmsg$

    title$=translator!.getMessage("loadUser.title")
    button1$=translator!.getMessage("edit")
    button2$=translator!.getMessage("new")
    button3$=translator!.getMessage("cancel")

    resp = msgbox(msg$,7+32,title$,button1$,button2$,button3$)

    rem ' 0 or 3 is a cancel, 2 is create a new record from existing data, 1 is preserve the link
    if resp=0 or resp=3 then
        rem cancel
        goto cfed_return
    else
        if resp=2 then
            rem use data as a template for a new record
            snmeu.END_USER_NBR$=""
        fi
        rem resp = 1 edit an existing end user record
    fi

    eceeu.REFERENCE_NBR$=snmeu.REFERENCE_NBR$

    eceeu.COMPANY_NAME$=snmeu.COMPANY_NAME$
    eceeu.CONTACT$=snmeu.CONTACT$
    eceeu.CONTACT_PHONE$=snmeu.CONTACT_PHONE$

    eceeu.ADDR_1$=snmeu.ADDR_1$
    eceeu.ADDR_2$=snmeu.ADDR_2$
    eceeu.ADDR_3$=snmeu.ADDR_3$

    eceeu.CITY$=snmeu.CITY$
    eceeu.STATE$=snmeu.STATE$
    eceeu.POSTAL_CODE$=snmeu.POSTAL_CODE$
    eceeu.COUNTRY$=snmeu.COUNTRY$

    eceeu.EMAIL_ADDRESS$=snmeu.EMAIL_ADDRESS$
    eceeu.PHONE_NUMBER$=snmeu.PHONE_NUMBER$

    eceeu.INDUSTRY$=snmeu.INDUSTRY$
    eceeu.OTHER_INDUSTRY$=snmeu.OTHER_INDUSTRY$
    eceeu.BASIS_PROD$=snmeu.BASIS_PROD$

    eceeu.ADVANTAGE$=snmeu.ADVANTAGE$
    eceeu.ANNOUNCEMENTS$=snmeu.ANNOUNCEMENTS$

    eceeu.APP_MODULES_USED$=snmeu.APP_MODULES_USED$

    eceeu.END_USER_NBR$=snmeu.END_USER_NBR$

cfed_return:
return
rem ' -----------------------------------------------------------------rem ' clear_templaterem ' -----------------------------------------------------------------

clear_template:

    eceeu.REFERENCE_NBR$=""

    eceeu.COMPANY_NAME$=""
    eceeu.CONTACT$=""
    eceeu.CONTACT_PHONE$=""

    eceeu.ADDR_1$=""
    eceeu.ADDR_2$=""
    eceeu.ADDR_3$=""

    eceeu.CITY$=""
    eceeu.STATE$=""
    eceeu.POSTAL_CODE$=""
    eceeu.COUNTRY$=""

    eceeu.EMAIL_ADDRESS$=""
    eceeu.PHONE_NUMBER$=""

    eceeu.INDUSTRY$=""
    eceeu.OTHER_INDUSTRY$=""
    eceeu.BASIS_PROD$=""

    eceeu.ADVANTAGE$=""
    eceeu.ANNOUNCEMENTS$=""

    eceeu.APP_MODULES_USED$=""

    eceeu.END_USER_NBR$=""

return
rem ' -----------------------------------------------------------------rem ' find_industsry_idrem ' -----------------------------------------------------------------

find_industry_id:

industryId$=""

if selection$<>"" then
    sel=num(selection$(2))
    wrk$=industryIDList$
    
    for x = 0 to sel
        rpos=pos($0A$=wrk$)
        industryId$=wrk$(1,rpos-1)
        wrk$=wrk$(rpos+1)
    next x
fi

return
rem ' -----------------------------------------------------------------rem ' find_selectionrem ' -----------------------------------------------------------------

find_selection:

rem ' target$ value being searched for
rem ' wrk$ is the $0A$ separated list
rem ' selection$ is the ultimate selection marker either $ff$+str(-1) for no selection or $ff$+str(idx)

idx = 0, selection$ = $ff$ + str(-1)
while len(wrk$)
    dpos=pos($0A$=wrk$)
    suspect$=wrk$(1,dpos-1),wrk$=wrk$(dpos+1)
    if target$=suspect$ then 
        selection$=$ff$+str(idx)
        break
    fi
    idx=idx+1
wend

return
rem ' -----------------------------------------------------------------rem ' get_country_listrem ' -----------------------------------------------------------------

get_country_list:

countrylist$=""
countryListCount=0
READ RECORD(country,key="",knum=1,err=*next)

country_loop:
    READ RECORD(country,end=end_country_loop)country$
    countrylist$=countrylist$+cvs(country.country_name$,3)+$0A$
    countryListCount=countryListCount+1
    goto country_loop
end_country_loop:

return
rem ' -----------------------------------------------------------------rem ' get_end_user_listrem ' -----------------------------------------------------------------

get_end_user_list:

gosub assemble_url
gosub assemble_end_user_list_query

ourRecordSet!=ourAPI!.createSQLRecordSet(our_dburl$,"",byCompanyNameSQL$)
endUserListCount=0
endUserDisplayListComp$="", endUserValueListComp$=""
endUserDisplayListRef$="", endUserValueListRef$=""

if !(ourRecordSet!.isEmpty()) then
    
    ourRecordSet!.first()

    while 1
        thisRecord!=ourRecordSet!.getCurrentRecordData()

        endUserDisplayListComp$=endUserDisplayListComp$+cvs(thisRecord!.getFieldValue("COMPANY_NAME"),3)
        
        wrk$=cvs(thisRecord!.getFieldValue("CONTACT"),3)
        if wrk$<>"" then
            endUserDisplayListComp$=endUserDisplayListComp$+", "+wrk$
        fi
        
        wrk$=cvs(thisRecord!.getFieldValue("REFERENCE_NBR"),3)
        if wrk$<>"" then
            endUserDisplayListComp$=endUserDisplayListComp$+", "+wrk$
        fi

        endUserDisplayListComp$=endUserDisplayListComp$+" ("+str(num(cvs(thisRecord!.getFieldValue("END_USER_NBR"),3)))+")"+$0A$

        endUserValueListComp$=endUserValueListComp$+cvs(thisRecord!.getFieldValue("END_USER_NBR"),3)+$0A$
        endUserListCount=endUserListCount+1
        ourRecordSet!.next(err=*break)

    wend
fi
ourRecordSet!.close()

ourRecordSet!=ourAPI!.createSQLRecordSet(our_dburl$,"",byReferenceNbrSQL$)

if !(ourRecordSet!.isEmpty()) then
    
    ourRecordSet!.first()

    while 1
        thisRecord!=ourRecordSet!.getCurrentRecordData()

        wrk$=cvs(thisRecord!.getFieldValue("REFERENCE_NBR"),3)
        if wrk$="" then wrk$="No Number"
        endUserDisplayListRef$=endUserDisplayListRef$+wrk$

        wrk$=cvs(thisRecord!.getFieldValue("COMPANY_NAME"),3)
        if wrk$<>"" then
            endUserDisplayListRef$=endUserDisplayListRef$+", "+wrk$
        fi
        
        wrk$=cvs(thisRecord!.getFieldValue("CONTACT"),3)
        if wrk$<>"" then
            endUserDisplayListRef$=endUserDisplayListRef$+", "+wrk$
        fi

        endUserDisplayListRef$=endUserDisplayListRef$+" ("+str(num(cvs(thisRecord!.getFieldValue("END_USER_NBR"),3)))+")"+$0A$

        endUserValueListRef$=endUserValueListRef$+cvs(thisRecord!.getFieldValue("END_USER_NBR"),3)+$0A$
        ourRecordSet!.next(err=*break)

    wend
fi
ourRecordSet!.close()

return
rem ' -----------------------------------------------------------------rem ' get_industry_listrem ' -----------------------------------------------------------------

get_industry_list:

gosub assemble_url
gosub assemble_industry_list_query

industryList$=""
industryIDList$=""
otherIndustryID$=""

ourRecordSet!=ourAPI!.createSQLRecordSet(our_dburl$,"",sql$)
industryListCount=0

if !(ourRecordSet!.isEmpty()) then
    
    ourRecordSet!.first()

    while 1
        thisRecord!=ourRecordSet!.getCurrentRecordData()

        industryList$=industryList$+cvs(thisRecord!.getFieldValue("INDUSTRY_NAME"),3)+$0A$
        industryIDList$=industryIDList$+cvs(thisRecord!.getFieldValue("INDUSTRY_ID"),3)+$0A$
        if cvs(thisRecord!.getFieldValue("INDUSTRY_NAME"),3)="Other" then
            otherIndustryID$=cvs(thisRecord!.getFieldValue("INDUSTRY_ID"),3)
        fi
        industryListCount=industryListCount+1
        ourRecordSet!.next(err=*break)

    wend
fi
ourRecordSet!.close()

return
rem ' -----------------------------------------------------------------rem ' get_objectsrem ' -----------------------------------------------------------------

get_objects:

rem ' existingList! - id of the list button that contains a list of exisitng end users

ourControlVector! = ourWindow!.getAllControls()

for i=0 to ourControlVector!.size() - 1
    control!= cast(BBjControl, ourControlVector!.getItem(i))
    if control!.getName().equals("existingList") then existingList!=cast(BBjListButton, control!)
    if control!.getName().equals("OtherDesc") then otherDesc!=cast(BBjEditBox, control!)
    if control!.getName().equals("Industry") then industryCtl!=cast(BBjListButton, control!)
    if control!.getName().equals("CompName") then compName!=cast(BBjEditBox, control!)
    if control!.getName().equals("Country") then country!=cast(BBjListButton, control!)
    if control!.getName().equals("Advantage") then advantage!=cast(BBjCheckBox, control!)
    if control!.getName().equals("Announcements") then announcements!=cast(BBjCheckBox, control!)
    if control!.getName().equals("EmailAddress") then emailAddress!=cast(BBjEditBox, control!)
    if control!.getName().equals("Save") then saveButton!=cast(BBjButton, control!)
    if control!.getName().equals("referenceNbr") then referenceNbr!=cast(BBjEditBox, control!)
    if control!.getName().equals("compNameReq") then compNameReq!=cast(BBjStaticText, control!)
    if control!.getName().equals("countryReq") then countryReq!=cast(BBjStaticText, control!)
    if control!.getName().equals("emailReq") then emailReq!=cast(BBjStaticText, control!)
next i

return
rem ' -----------------------------------------------------------------rem ' get_product_listrem ' -----------------------------------------------------------------

get_product_list:

basisProdList$=""
basisProdListCount=0
READ (csm01,KEY=firm_id$,DOM=*next)

read_csm01: 
    READ RECORD (csm01,END=end_csm01)csm01$
    IF csm01.firm_id$<>firm_id$ THEN GOTO end_csm01
    IF csm01.online_flag$<>"Y" THEN GOTO read_csm01
 
    basisProdList$=basisProdList$+cvs(csm01.description$,3)+$0a$
    basisProdListCount=basisProdListCount+1

    GOTO read_csm01

end_csm01: 
basisProdList$=basisProdList$+"Uses several products"+$0a$
basisProdListCount=basisProdListCount+1

return
rem ' -----------------------------------------------------------------rem ' get_state_listrem ' -----------------------------------------------------------------

get_state_list:

statelist$=""
stateListCount=0
READ RECORD(states,key="",err=*next)

states_loop:
     READ RECORD(states,end=end_states_loop)states$
     statelist$=statelist$+cvs(states.state_code$,3)+$0A$
     stateListCount=stateListCount+1
     goto states_loop
end_states_loop:

return
rem ' -----------------------------------------------------------------rem ' insert_parametersrem ' -----------------------------------------------------------------

insert_parameters:

tag$="?"

rem ' firm id
fpos=pos(tag$=sql$)
wrk$=sql$(1,fpos-1)+"'"+firm_id$+"'"
sql$=sql$(fpos+len(tag$))

rem ' customer nbr
fpos=pos(tag$=sql$)
wrk$=wrk$+sql$(1,fpos-1)+"'"+customer_nbr$+"'"
wrk$=wrk$+sql$(fpos+len(tag$))

sql$=wrk$

return
rem ' -----------------------------------------------------------------rem ' load_datarem ' -----------------------------------------------------------------

load_data:

win_data.referenceNbr$=eceeu.REFERENCE_NBR$

win_data.compname$=eceeu.COMPANY_NAME$
win_data.CONTACTNAME$=eceeu.CONTACT$
win_data.CONTACTPHONE$=eceeu.CONTACT_PHONE$
win_data.ADDRLNONE$=eceeu.ADDR_1$
win_data.ADDRLNTWO$=eceeu.ADDR_2$
win_data.ADDRLNTHREE$=eceeu.ADDR_3$
win_data.CITY$=eceeu.CITY$
win_data.POSTALCODE$=eceeu.POSTAL_CODE$
win_data.EMAILADDRESS$=eceeu.EMAIL_ADDRESS$
win_data.PHONENUMBER$=eceeu.PHONE_NUMBER$
win_data.OTHERDESC$=eceeu.OTHER_INDUSTRY$
win_data.APPMODULESUSED$=fngb_spec_unesc_lf$(eceeu.APP_MODULES_USED$)

if eceeu.ADVANTAGE$="Y" THEN win_data.ADVANTAGE = 1 ELSE win_data.ADVANTAGE = 0
if eceeu.ANNOUNCEMENTS$="Y" then win_data.ANNOUNCEMENTS = 1 ELSE win_data.ANNOUNCEMENTS = 0

win_data.endUserNbr$=eceeu.END_USER_NBR$

gosub load_lists

win_data.basisproduct$=basisProdListSel$
win_data.state$=statelistSel$
win_data.country$=countrylistSel$
win_data.industry$=industrylistSel$

if eceeu.Industry$=otherIndustryID$ then
    otherDesc!.setEnabled(1)
else
    otherDesc!.setEnabled(0)
fi

return
rem ' -----------------------------------------------------------------rem ' load_listsrem ' -----------------------------------------------------------------

load_lists:

rem ' existing end user list button
if usingCompanyOrder then
    win_data.existingList$=endUserDisplayListComp$ + $ff$ + str(-1)
else
    win_data.existingList$=endUserDisplayListRef$ + $ff$ + str(-1)
fi

rem ' load lists with the selections if any

rem ' state list
wrk$=stateList$, target$=cvs(eceeu.state$,3), selection$=""
gosub find_selection
stateListSel$=stateList$+selection$

rem ' country list
wrk$=countryList$, target$=cvs(eceeu.country$,3), selection$=""
gosub find_selection
countryListSel$=countryList$+selection$

rem ' industry list
wrk$=industryIDList$, target$=cvs(eceeu.industry$,3), selection$=""
gosub find_selection
industryListSel$=industryList$+selection$

rem ' basis prod list
wrk$=basisProdList$, target$=cvs(eceeu.basis_prod$,3), selection$=""
gosub find_selection
basisProdListSel$=basisProdList$+selection$

return
rem ' -----------------------------------------------------------------
rem ' show_callersWindow
rem ' -----------------------------------------------------------------

show_callersWindow:

rem ' the caller is managing it's own window
rem ' if callersWindow! <> NULL() then
rem '     if info(3,6)="2" then
rem '         applet!=ourAPI!.getAppletProxy()
rem '         applet!.setBounds(0,0,500,400)
rem '     fi
rem '     callersWindow!.setVisible(1)
rem ' fi

return
rem ' -----------------------------------------------------------------rem ' validate_formrem ' -----------------------------------------------------------------

validate_form:

isValid=1

rem ' must at least enter a company name
vCompName$=cvs(compName!.getText(),3)
if len(vCompName$)=0 then
    isValid=0
    compNameReq!.setVisible(1)
else
    compNameReq!.setVisible(0)
fi

rem ' must at least select a country
index=country!.getSelectedIndex()
if index < 0 then
    isValid=0
    countryReq!.setVisible(1)
else
    countryReq!.setVisible(0)
fi

rem ' if advantage or announcements we must have a email address
if (advantage!.isSelected() or announcements!.isSelected()) and cvs(emailAddress!.getText(),3)="" then
    isValid=0
    emailReq!.setVisible(1)
else
    emailReq!.setVisible(0)
fi


if !isValid then
    msg$=translator!.getMessage("required.fields")
    title$=translator!.getMessage("required.fields.title")
    response=msgbox(msg$, 0+64, title$)
fi

return
rem ' -----------------------------------------------------------------rem ' write_datarem ' -----------------------------------------------------------------

write_data:

gosub validate_form

if isValid then

    win_data$=fngb__get_screen$(win_id$,win_data$)

    rem ' we will write both the ECEEU file and the SNMEU file at the same time
    rem ' this change makes the end user data for a new end user available 
    rem ' immediately for use in another purchase

    eceeu.REFERENCE_NBR$=win_data.referenceNbr$
    snmeu.REFERENCE_NBR$=win_data.referenceNbr$

    eceeu.COMPANY_NAME$=win_data.compname$
    snmeu.COMPANY_NAME$=win_data.compname$

    eceeu.CONTACT$=win_data.CONTACTNAME$
    snmeu.CONTACT$=win_data.CONTACTNAME$

    eceeu.CONTACT_PHONE$=win_data.CONTACTPHONE$
    snmeu.CONTACT_PHONE$=win_data.CONTACTPHONE$
    
    eceeu.ADDR_1$=win_data.ADDRLNONE$
    snmeu.ADDR_1$=win_data.ADDRLNONE$
    
    eceeu.ADDR_2$=win_data.ADDRLNTWO$
    snmeu.ADDR_2$=win_data.ADDRLNTWO$
    
    eceeu.ADDR_3$=win_data.ADDRLNTHREE$
    snmeu.ADDR_3$=win_data.ADDRLNTHREE$
    
    eceeu.CITY$=win_data.CITY$
    snmeu.CITY$=win_data.CITY$
    
    eceeu.POSTAL_CODE$=win_data.POSTALCODE$
    snmeu.POSTAL_CODE$=win_data.POSTALCODE$
    
    eceeu.EMAIL_ADDRESS$=win_data.EMAILADDRESS$
    snmeu.EMAIL_ADDRESS$=win_data.EMAILADDRESS$
    
    eceeu.PHONE_NUMBER$=win_data.PHONENUMBER$
    snmeu.PHONE_NUMBER$=win_data.PHONENUMBER$
    
    eceeu.OTHER_INDUSTRY$=win_data.OTHERDESC$
    snmeu.OTHER_INDUSTRY$=win_data.OTHERDESC$

    rem ' handle the $0A$ in the cedit control
    eceeu.APP_MODULES_USED$=fngb_spec_esc_lf$(win_data.APPMODULESUSED$)
    snmeu.APP_MODULES_USED$=fngb_spec_esc_lf$(win_data.APPMODULESUSED$)

    eceeu.end_user_nbr$=win_data.endUserNbr$
    snmeu.end_user_nbr$=win_data.endUserNbr$

    rem ' list boxes
    eceeu.basis_prod$=fngb_spec_get_selection$(win_data.basisproduct$)
    snmeu.basis_prod$=fngb_spec_get_selection$(win_data.basisproduct$)

    eceeu.state$=fngb_spec_get_selection$(win_data.state$)
    snmeu.state$=fngb_spec_get_selection$(win_data.state$)

    eceeu.country$=fngb_spec_get_selection$(win_data.country$)
    snmeu.country$=fngb_spec_get_selection$(win_data.country$)

    rem ' the industry
    wrk$=industryList$
    target$=fngb_spec_get_selection$(win_data.industry$)
    selection$=""
    gosub find_selection
    gosub find_industry_id
    eceeu.industry$=industryId$
    snmeu.industry$=industryId$

    if win_data.ADVANTAGE  then 
        eceeu.ADVANTAGE$="Y" 
        snmeu.ADVANTAGE$="Y"
    ELSE 
        eceeu.ADVANTAGE$="N"
        snmeu.ADVANTAGE$="N"
    fi

    if win_data.ANNOUNCEMENTS then 
        eceeu.ANNOUNCEMENTS$="Y" 
        snmeu.ANNOUNCEMENTS$="Y" 
    ELSE
        eceeu.ANNOUNCEMENTS$="N"
        snmeu.ANNOUNCEMENTS$="N"
    fi

    snmeu.firm_id$=eceeu.firm_id$
    snmeu.customer_nbr$=eceeu.customer_nbr$

    rem ' now let's write the snmeu first

    rem ' final trap to prevent error 1
    if len(snmeu$) > 1024 snmeu.APP_MODULES_USED$=""

    if cvs(snmeu.end_user_nbr$,3)<>"" then
        rem ' we already have an snmeu record just need to update it
        snmeu$=field(snmeu$)
        write record(snmeu)snmeu$
    else
        rem ' write a new snmeu record using the sequence
        gosub assemble_url
        hkey$=FNgetNextSequence$(props!,our_dburl$)
        snmeu.end_user_nbr$=hkey$
        snmeu$=field(snmeu$)
        write record(snmeu)snmeu$
        eceeu.end_user_nbr$=snmeu.end_user_nbr$
    fi

    rem update TMM03
    snmeu! = ourAPI!.makeTemplatedString(fattr(snmeu$))
    snmeu!.setString(snmeu$)
    marCommUpdater!.updateMarComm(snmeu!)

    rem write eceeu
    write record(eceeu)eceeu$

    wasWritten=1
else
    wasWritten=0
fi

return

rem ' ---------------------------------------------------------------
rem ' Win=115 end_user_data (Window) WIN_CLOSE (X)
rem ' ---------------------------------------------------------------

W115_C0_WIN_CLOSE:
rem ' Window Closed
rem ' gb__event! = cast(BBjCloseEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__window! = gb__event!.getControl()


gosub close_files
gosub show_callersWindow
goto gb__eoj
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=115 end_user_data Ctl=101 existingList (List Button) LIST_SELECT (N2:19)
rem ' ---------------------------------------------------------------

W115_C101_LIST_SELECT:
rem ' Notify Event - List Control - List Selection (2)
rem ' gb__event! = cast(BBjListSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set cursor to an hour glass
ourWindow!.setCursor(3)
compNameReq!.setVisible(0)
countryReq!.setVisible(0)

selidx=existingList!.getSelectedIndex()
idx=0
if usingCompanyOrder then
    wrkList$=endUserValueListComp$
else
    wrkList$=endUserValueListRef$
fi
endUserSelection$=""

if selidx < endUserListCount then
    while idx <= selidx
        dpos=pos($0A$=wrkList$)
        endUserSelection$=wrkList$(1,dpos-1)
        wrkList$=wrkList$(dpos+1)
        idx=idx+1
    wend
fi

if endUserSelection$<>"" then
    
    read record(snmeu,key=endUserSelection$)snmeu$
    snmeu$=field(snmeu$)

    eceeu.REFERENCE_NBR$=snmeu.REFERENCE_NBR$

    eceeu.COMPANY_NAME$=snmeu.COMPANY_NAME$
    eceeu.CONTACT$=snmeu.CONTACT$
    eceeu.CONTACT_PHONE$=snmeu.CONTACT_PHONE$

    eceeu.ADDR_1$=snmeu.ADDR_1$
    eceeu.ADDR_2$=snmeu.ADDR_2$
    eceeu.ADDR_3$=snmeu.ADDR_3$

    eceeu.CITY$=snmeu.CITY$
    eceeu.STATE$=snmeu.STATE$
    eceeu.POSTAL_CODE$=snmeu.POSTAL_CODE$
    eceeu.COUNTRY$=snmeu.COUNTRY$

    eceeu.EMAIL_ADDRESS$=snmeu.EMAIL_ADDRESS$
    eceeu.PHONE_NUMBER$=snmeu.PHONE_NUMBER$

    eceeu.INDUSTRY$=snmeu.INDUSTRY$
    eceeu.OTHER_INDUSTRY$=snmeu.OTHER_INDUSTRY$
    eceeu.BASIS_PROD$=snmeu.BASIS_PROD$

    eceeu.ADVANTAGE$=snmeu.ADVANTAGE$
    eceeu.ANNOUNCEMENTS$=snmeu.ANNOUNCEMENTS$

    eceeu.APP_MODULES_USED$=snmeu.APP_MODULES_USED$

    eceeu.END_USER_NBR$=snmeu.END_USER_NBR$

fi

rem ' present the form
gosub load_data
win_data$=fngb__put_screen$(win_id$,win_data$)

rem ' inform the user
msg$=translator!.getMessage("loadUser.inform")

masgmsg$ = msg$, msg$ = ""
while pos("\n" = masgmsg$)
    ppos = pos("\n" = masgmsg$)
    msg$ = msg$ + masgmsg$(1, ppos - 1) + $0A$
    masgmsg$ = masgmsg$(ppos + 2)
wend
msg$ = msg$ + masgmsg$

title$=translator!.getMessage("loadUser.title")
button1$=translator!.getMessage("edit")
button2$=translator!.getMessage("new")
button3$=translator!.getMessage("cancel")
resp = msgbox(msg$,7+32,title$,button1$,button2$,button3$)

rem ' 0 or 3 is a cancel, 2 is create a new record from existing data, 1 is preserve the link
if resp=0 or resp=3 then
    rem cancel
    gosub clear_template
    gosub load_data
    win_data$=fngb__put_screen$(win_id$,win_data$)
else
    if resp=2 then
        rem use data as a template for a new record
        eceeu.END_USER_NBR$=""
        rem win_data.endUserNbr$=""
        gosub load_data
        win_data$=fngb__put_screen$(win_id$,win_data$)
    else
        rem edit an existing end user record
    fi
fi
referenceNbr!.focus()

rem ' set cursor to pointer
ourWindow!.setCursor(0)
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=115 end_user_data Ctl=127 Industry (List Button) LIST_SELECT (N2:19)
rem ' ---------------------------------------------------------------

W115_C127_LIST_SELECT:
rem ' Notify Event - List Control - List Selection (2)
rem ' gb__event! = cast(BBjListSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()


idx=industryCtl!.getSelectedIndex()
thisVector!=industryCtl!.getAllItems()
selection$=cast(BBjString, thisVector!.getItem(idx))

if selection$="Other" then
    otherDesc!.setEnabled(1)
    otherDesc!.focus()
else
    otherDesc!.setEnabled(0)
    otherDesc!.setText("")
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=115 end_user_data Ctl=136 Save (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W115_C136_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' write the data
gosub write_data

if wasWritten then
    gosub close_files
    gosub show_callersWindow
    goto gb__eoj
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=115 end_user_data Ctl=137 Cancel (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W115_C137_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub close_files
gosub show_callersWindow
goto gb__eoj
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=115 end_user_data Ctl=143 toggleButton (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W115_C143_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

if usingCompanyOrder then
    usingCompanyOrder = 0
    existingList!.removeAllItems()
    existingList!.insertItems(0,endUserDisplayListRef$)
else
    usingCompanyOrder = 1
    existingList!.removeAllItems()
    existingList!.insertItems(0,endUserDisplayListComp$)
fi
RETURN


rem gb_std.cod - Put your standard subroutines/functions/etc. here.

END
