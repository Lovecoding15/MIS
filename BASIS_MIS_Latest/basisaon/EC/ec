REM ' Program Name: C:/BASIS/Tools/guibuild.new/ec.src
REM ' Resource File: ec.arc
REM ' Generated by GUIBuilder 2.0 (July 31, 2001 at 15:35:05)
REM ' Portions Copyright (C) 1997-2001 BASIS International Ltd.  All rights reserved.
SETERR gb__no_arg
pass_firm$="01",lang$="EN"
ENTER gb__arg$
p=POS($0A$=gb__arg$)
if p>1 then pass_firm$=gb__arg$(1,p-1),gb__arg$=gb__arg$(p+1)
p=POS($0A$=gb__arg$)
if p>1 then lang$=gb__arg$(1,p-1),gb__arg$=gb__arg$(p+1)
gb__no_arg: 
SETERR 0 
REM ' gb_ini.cod - GUIBuilder generated programs: Initialization
REM ' Copyright (C) 1998-2000 BASIS International Ltd.  All rights reserved.
REM 
REM ' ***** I N I T I A L I Z A T I O N *****
REM ' The first part of the initialization section ensures that the
REM ' environment will support the requirements of the generated 
REM ' program.  These requirements are:
REM '     1.  The interpreter supports GUI
REM '     2.  The interpreter is Visual PRO/5 2.0 or above
REM '     3.  A SYSGUI device is defined in config.bbx
REM 

REM ' 1. Make sure the interpreter in use supports GUI
IF INFO(6,0)="" THEN PRINT 'CS',; PRINT "This interpreter does not support GUI."; PRINT "Press any key to continue.",; READ RECORD (0,SIZ=1); STOP
REM 

REM ' 2. Make sure the interpreter in use is Visual PRO/5 2.0 or above
IF SYS<"LEVEL 5" OR (CVS(SYS,3)="LEVEL 5" AND CVS(REV,3)<"REV 2.0") THEN INPUT (0,ERR=gb__eoj)'ASK'("",4,"Requires at least Visual PRO/5 Rev. 2.0.  "+"This program will now terminate.","&Terminate:Y"+$0A$),'EE',gb__temp$,'BE',; GOTO gb__eoj
REM 

SETERR gb__err; SETESC gb__esc

REM ' 3. Check config.bbx for SYSGUI and SYSPRINT devices
LET gb__alias=0,gb__sysgui$="",gb__sysprint$=""
DIM gb__tsk$:"type:u(1),opens:u(1),name:c(1*=0),dname:c(1*=0),pname:c(1*=0),modes:c(1*=0)"

gb__check_tsk: 
LET gb__tsk$=TSK(gb__alias,ERR=gb__done_with_tsk)

IF gb__sysgui$="" AND CVS(gb__tsk.pname$,7)="SYSGUI" THEN LET gb__sysgui$=gb__tsk.name$

IF gb__sysprint$="" AND CVS(gb__tsk.pname$,7)="SYSPRINT" THEN LET gb__sysprint$=gb__tsk.name$

IF gb__sysgui$="" OR gb__sysprint$="" THEN LET gb__alias=gb__alias+1; GOTO gb__check_tsk

gb__done_with_tsk: 
IF gb__sysgui$="" THEN LET gb__sysgui$="not defined in config.bbx"; GOTO gb__cannot_open_sysgui

REM ' Open SYSGUI device
LET gb__sysgui=UNT; OPEN (gb__sysgui,ERR=gb__cannot_open_sysgui)gb__sysgui$
GOTO gb__opened_sysgui

gb__cannot_open_sysgui: 
LET gb__err$="Unable to open the SYSGUI device (alias "+gb__sysgui$+") in program "+PGM(-2)+".  Visual PRO/5 cannot maintain a graphical "+"user interface without this device.  This program will now terminate."
LET gb__temp=MSGBOX(gb__err$,16,"SYSGUI error")
GOTO gb__eoj

gb__opened_sysgui: 
REM ' Display the splash screen
dim gb__sysgui_fin$:tmpl(gb__sysgui,ind=0)
gb__sysgui_fin$=fin(gb__sysgui),splash=gb__sysgui_fin.available_context
LET splash=0,gb__context=0

REM BWH Get a reference to sysgui 
sysgui! = BBjAPI().getSysGui()
REM BWH Create Java Hash Map to hold image objects
imageHashMap! = new java.util.HashMap()

REM BWH Add a image control instead of using IMAGE mnemonic
PRINT (gb__sysgui)'CONTEXT'(splash),'WINDOW'(0,0,500,400,$$,$01000010$)
REM PRINT (gb__sysgui)'CONTEXT'(splash),'WINDOW'(0,0,500,400,$$,$01000010$),'IMAGE'(0,0,500,400,"bcomsplash.jpg")
rc = fnAddImagesSetBorder(splash)

LET center=FNCENTER(splash)
PRINT (gb__sysgui)'SHOW'(0),'FOCUS'(0),'RAISE'

REM ' Set up SYSGUI templates
DIM gb__event$:TMPL(gb__sysgui)
LET gb__event=LEN(gb__event$)
DIM grid_info$:TMPL(gb__sysgui,IND=1)

REM ' Open the resource file 
LET gb__resource$="ec.arc"
if lang$="DE" then gb__resource$="ec_de.arc"
if lang$="FR" then gb__resource$="ec_fr.arc"

gosub open_resource_file
GOTO gb__opened_resource

open_resource_file:
resclose(gb__handle,err=*next)
opened_ok=0
LET gb__handle=RESOPEN(gb__resource$,ERR=*next);opened_ok=1
if !(opened_ok) then
  gb__err$="Unable to open resource file "+gb__resource$+" in program "+PGM(-2)+".  This program will now terminate."
  gb__temp=MSGBOX(gb__err$,16,"Resource file error")
  exitto gb__eoj
fi
DIM gb__win_init[0:21]
LET gb__win_init[0]=1,gb__win_init[1]=1
gb__window_context$=""
gb__context_window$=""
return

REM ' ------------------------------------------------------------------------
REM ' Functions to manipulate screens and data
REM ' ------------------------------------------------------------------------

REM ' Get data from screen into template record
   def fngb__get_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then  print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then  xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then  return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then  print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend

   rem ' Put data from template record to screen
   def fngb__put_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then  print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then  xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then  return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then print (gb__sysgui)'check'(gb__ctl_id)              else print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then gb__temp=num(field(xx__rec$,gb__ctl_name$));                 if gb__temp then  print (gb__sysgui)'check'(-gb__ctl_id)                 else  print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;                 gb__temp=pos($ff$=gb__sel$);                 while gb__temp;                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);                    gb__temp=pos($ff$=gb__sel$);                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then  print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend

   rem ' Get fields from screen into template record
   def fngb__get_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then  print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then  xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then  print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend

   rem ' Put fields from template record to screen
   def fngb__put_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then  print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then  xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then print (gb__sysgui)'check'(gb__ctl_id)              else print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then gb__temp=num(field(xx__rec$,gb__ctl_name$));                 if gb__temp then  print (gb__sysgui)'check'(-gb__ctl_id)                 else  print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;                 gb__temp=pos($ff$=gb__sel$);                 while gb__temp;                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);                    gb__temp=pos($ff$=gb__sel$);                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then  print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend

REM ' Set focus to specified Window ID
DEF fngb__focus_win_id(xx__win_id$)
    LET xx__context=fngb__context(xx__win_id$)
    IF xx__context>=0 THEN PRINT (gb__sysgui,ERR=gb__focus_win_id)'CONTEXT'(xx__context),'FOCUS'(0),'RAISE',
    RETURN xx__context
gb__focus_win_id: 
    LET xx__form=NUM(xx__win_id$)
    sysgui!.createTopLevelWindow(gb__handle,xx__form)
    RETURN xx__context
FNEND

REM ' get form number given Window ID
DEF fngb__form(xx__win_id$)
    LET xx__win_id=POS(","+xx__win_id$+"="=","+gb__window_form$)
    IF xx__win_id THEN LET xx__win_id=xx__win_id+POS("="=gb__window_form$(xx__win_id)),xx__form=NUM(gb__window_form$(xx__win_id,POS(","=gb__window_form$(xx__win_id))-1)) ELSE LET xx__form=-1
    RETURN xx__form
FNEND


REM ' Set focus to specified Window ID + Control ID
DEF fngb__focus_ctl_id(xx__win_id$,xx__ctl_id)
    LET xx__context=fngb__context(xx__win_id$)
    IF xx__context>=0 THEN PRINT (gb__sysgui)'CONTEXT'(xx__context),'FOCUS'(0),'RAISE','FOCUS'(xx__ctl_id),
    RETURN xx__context
FNEND


REM ' Set focus to specified Window ID + Control Name
DEF fngb__focus_ctl_name(xx__win_id$,xx__ctl_name$)
    DIM xx__rec$:fngb__template$(xx__win_id$)
    LET xx__ctl_id=NUM(FATTR(xx__rec$,xx__ctl_name$,"ID"))
    LET xx__context=fngb__context(xx__win_id$)
    IF xx__context>=0 THEN PRINT (gb__sysgui)'CONTEXT'(xx__context),'FOCUS'(0),'RAISE','FOCUS'(xx__ctl_id),
    RETURN xx__context
FNEND


REM ' Get Window ID given Context
DEF fngb__win_id$(xx__context)
    LET xx__context=POS($0A$+STR(xx__context)+"="=$0A$+gb__context_window$)
    IF xx__context THEN LET xx__context=xx__context+POS("="=gb__context_window$(xx__context)),xx__win_id$=gb__context_window$(xx__context,POS($0A$=gb__context_window$(xx__context))-1) ELSE LET xx__win_id$=""
    RETURN xx__win_id$
FNEND


REM ' Get Context given Window ID
DEF fngb__context(xx__win_id$)
    LET xx__win_id=POS($0A$+xx__win_id$+"="=$0A$+gb__window_context$)
    IF xx__win_id THEN LET xx__win_id=xx__win_id+POS("="=gb__window_context$(xx__win_id)),xx__context=NUM(gb__window_context$(xx__win_id,POS($0A$=gb__window_context$(xx__win_id))-1)) ELSE RETURN -1
    IF !(gb__win_init[xx__context]) then LET gb__current_context=DEC(CTRL(gb__sysgui)),xx__resource$=gb__resource$[fngb__form(xx__win_id$)];PRINT (gb__sysgui)'CONTEXT'(xx__context),'resource'(len(xx__resource$)),xx__resource$;LET center=FNCENTER(xx__context);PRINT (gb__sysgui)'CONTEXT'(gb__current_context);LET gb__win_init[xx__context]=1;rc=fnAddImagesSetBorder(xx__context)
    RETURN xx__context
FNEND


REM ' Get Window Information given Window ID
DEF fngb__win_info$(xx__win_id$)
    DIM gb__win_info$(0)
    LET xx__context=fngb__context(xx__win_id$)
    IF xx__context<0 THEN RETURN gb__win_info$
    DIM gb__win_info$:"class:u(1),type:u(1),hidden:u(1),disabled:u(1),"+"context:u(2),eventmask:u(4),flags:u(4),focus:u(2),"+"x:i(2),y:i(2),w:u(2),h:u(2),title:c(16*=)"
    LET gb__win_info$=CTRL(gb__sysgui,0,4,xx__context)+CTRL(gb__sysgui,0,8,xx__context)+BIN(xx__context,2)+SENDMSG(gb__sysgui,0,21,0,"",xx__context)+SENDMSG(gb__sysgui,0,22,0,"",xx__context)+CTRL(gb__sysgui,0,2,xx__context)+CTRL(gb__sysgui,0,0,xx__context)+CTRL(gb__sysgui,0,1,xx__context)
    RETURN gb__win_info$
FNEND

rem ' center each window if not running in a browser
def fncenter(xx__context)
    if info(3,6)="2" then return 0
    dim xx__win$:"x:u(2),y:u(2),w:u(2),h:u(2)"
    xx__win$=ctrl(gb__sysgui,0,0)
    gb__x=max(0,int((gb__sysgui_fin.screen_width-xx__win.w)/2))
    gb__y=max(40,int((gb__sysgui_fin.screen_height-xx__win.h)/2))
    print (gb__sysgui)'move'(0,gb__x,gb__y)
    return 1
fnend

gb__opened_resource: 
rem ' (1) Don't show borders on button controls
rem ' (2) Force XP borders on list and edit controls
if (info(3,6)="0" and info(0,0)="Windows XP" and info(1,1)>="1.4.2")  or (info(3,6)<>"0" and  bbjapi().getThinClient(err=*next).getClientOSName(err=*next)="Windows XP" and  bbjapi().getThinClient(err=*next).getClientJavaVersion(err=*next)>="1.4.2") then  bbjapi().getSysGui().setLookAndFeel("WindowsXPLookAndFeel")

   rem ==================== End of gb_ini.cod ====================

rem ' Instantiate form(s)

LET gb__forms=21
DIM gb__form_context[gb__forms],gb__resource$[gb__forms]
LET gb__window_context$="",gb__context_window$=""
LET gb__window_form$="100=1,101=2,102=3,103=4,104=5,105=6,106=7,107=8,108=9,109=10,110=11,111=12,112=13,113=14,114=15,116=17,117=18,118=19,119=20,120=21,"

DIM gb__win$:"LOGIN:U(2),MAIN:U(2),VIEW_SN:U(2),EDIT_SN:U(2),ITEM:U(2),CART:U(2),CHECKOUT_1:U(2),SHIP_USA:U(2),SHIP_INTL:U(2),CHECKOUT_2:U(2),ACCOUNT:U(2),HISTORY:U(2),CLIENTS:U(2),FIND_SN:U(2),CREDIT_CARD:U(2),reset_license:U(2),trade_select:U(2),TRADE:U(2),send_rpt:u(2),renewal:u(2)"

gosub load_login
gosub load_remaining_forms
gosub initialize_structure
goto startup

load_login:
REM ' Load Form ID 100 (LOGIN)
LET gb__form_context[1]=1
LET gb__resource$[1]=resget(gb__handle,1,100)
LET gb__win.LOGIN=gb__form_context[1]
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[1]),'destroy'(0)
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[1]),'resource'(len(gb__resource$[1])),gb__resource$[1]
LET center=FNCENTER(gb__win.LOGIN)
LET gb__window_context$=gb__window_context$+"100="+STR(gb__form_context[1])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[1])+"=100"+$0A$
REM BWH Add images to the window
rc = fnAddImagesSetBorder(gb__form_context[1])
return

load_remaining_forms:
REM ' Load Form ID 101 (MAIN)
LET gb__form_context[2]=2
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[2]),'destroy'(0)
LET gb__resource$[2]=resget(gb__handle,1,101)
LET gb__win.MAIN=gb__form_context[2]
LET gb__window_context$=gb__window_context$+"101="+STR(gb__form_context[2])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[2])+"=101"+$0A$
REM ' Load Form ID 102 (VIEW_SN)
LET gb__form_context[3]=3
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[3]),'destroy'(0)
LET gb__resource$[3]=resget(gb__handle,1,102)
LET gb__win.VIEW_SN=gb__form_context[3]
LET gb__window_context$=gb__window_context$+"102="+STR(gb__form_context[3])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[3])+"=102"+$0A$
REM ' Load Form ID 103 (EDIT_SN)
LET gb__form_context[4]=4
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[4]),'destroy'(0)
LET gb__resource$[4]=resget(gb__handle,1,103)
LET gb__win.EDIT_SN=gb__form_context[4]
LET gb__window_context$=gb__window_context$+"103="+STR(gb__form_context[4])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[4])+"=103"+$0A$
REM ' Load Form ID 104 (ITEM)
LET gb__form_context[5]=5
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[5]),'destroy'(0)
LET gb__resource$[5]=resget(gb__handle,1,104)
LET gb__win.ITEM=gb__form_context[5]
LET gb__window_context$=gb__window_context$+"104="+STR(gb__form_context[5])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[5])+"=104"+$0A$
REM ' Load Form ID 105 (CART)
LET gb__form_context[6]=6
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[6]),'destroy'(0)
LET gb__resource$[6]=resget(gb__handle,1,105)
LET gb__win.CART=gb__form_context[6]
LET gb__window_context$=gb__window_context$+"105="+STR(gb__form_context[6])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[6])+"=105"+$0A$
REM ' Load Form ID 106 (CHECKOUT_1)
LET gb__form_context[7]=7
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[7]),'destroy'(0)
LET gb__resource$[7]=resget(gb__handle,1,106)
LET gb__win.CHECKOUT_1=gb__form_context[7]
LET gb__window_context$=gb__window_context$+"106="+STR(gb__form_context[7])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[7])+"=106"+$0A$
REM ' Load Form ID 107 (SHIP_USA)
LET gb__form_context[8]=8
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[8]),'destroy'(0)
LET gb__resource$[8]=resget(gb__handle,1,107)
LET gb__win.SHIP_USA=gb__form_context[8]
LET gb__window_context$=gb__window_context$+"107="+STR(gb__form_context[8])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[8])+"=107"+$0A$
REM ' Load Form ID 108 (SHIP_INTL)
LET gb__form_context[9]=9
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[9]),'destroy'(0)
LET gb__resource$[9]=resget(gb__handle,1,108)
LET gb__win.SHIP_INTL=gb__form_context[9]
LET gb__window_context$=gb__window_context$+"108="+STR(gb__form_context[9])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[9])+"=108"+$0A$
REM ' Load Form ID 109 (CHECKOUT_2)
LET gb__form_context[10]=10
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[10]),'destroy'(0)
LET gb__resource$[10]=resget(gb__handle,1,109)
LET gb__win.CHECKOUT_2=gb__form_context[10]
LET gb__window_context$=gb__window_context$+"109="+STR(gb__form_context[10])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[10])+"=109"+$0A$
REM ' Load Form ID 110 (ACCOUNT)
LET gb__form_context[11]=11
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[11]),'destroy'(0)
LET gb__resource$[11]=resget(gb__handle,1,110)
LET gb__win.ACCOUNT=gb__form_context[11]
LET gb__window_context$=gb__window_context$+"110="+STR(gb__form_context[11])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[11])+"=110"+$0A$
REM ' Load Form ID 111 (HISTORY)
LET gb__form_context[12]=12
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[12]),'destroy'(0)
LET gb__resource$[12]=resget(gb__handle,1,111)
LET gb__win.HISTORY=gb__form_context[12]
LET gb__window_context$=gb__window_context$+"111="+STR(gb__form_context[12])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[12])+"=111"+$0A$
REM ' Load Form ID 112 (CLIENTS)
LET gb__form_context[13]=13
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[13]),'destroy'(0)
LET gb__resource$[13]=resget(gb__handle,1,112)
LET gb__win.CLIENTS=gb__form_context[13]
LET gb__window_context$=gb__window_context$+"112="+STR(gb__form_context[13])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[13])+"=112"+$0A$
REM ' Load Form ID 113 (FIND_SN)
LET gb__form_context[14]=14
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[14]),'destroy'(0)
LET gb__resource$[14]=resget(gb__handle,1,113)
LET gb__win.FIND_SN=gb__form_context[14]
LET gb__window_context$=gb__window_context$+"113="+STR(gb__form_context[14])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[14])+"=113"+$0A$
REM ' Load Form ID 114 (CREDIT_CARD)
LET gb__form_context[15]=15
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[15]),'destroy'(0)
LET gb__resource$[15]=resget(gb__handle,1,114)
LET gb__win.CREDIT_CARD=gb__form_context[15]
LET gb__window_context$=gb__window_context$+"114="+STR(gb__form_context[15])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[15])+"=114"+$0A$
REM ' Load Form ID 116 (reset_license)
LET gb__form_context[17]=17
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[17]),'destroy'(0)
LET gb__resource$[17]=resget(gb__handle,1,116)
LET gb__win.reset_license=gb__form_context[17]
LET gb__window_context$=gb__window_context$+"116="+STR(gb__form_context[17])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[17])+"=116"+$0A$
REM ' Load Form ID 117 (trade_select)
LET gb__form_context[18]=18
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[18]),'destroy'(0)
LET gb__resource$[18]=resget(gb__handle,1,117)
LET gb__win.trade_select=gb__form_context[18]
LET gb__window_context$=gb__window_context$+"117="+STR(gb__form_context[18])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[18])+"=117"+$0A$
REM ' Load Form ID 118 (TRADE)
LET gb__form_context[19]=19
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[19]),'destroy'(0)
LET gb__resource$[19]=resget(gb__handle,1,118)
LET gb__win.trade=gb__form_context[19]
LET gb__window_context$=gb__window_context$+"118="+STR(gb__form_context[19])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[19])+"=118"+$0A$
REM ' Load Form ID 119 (send_rpt)
LET gb__form_context[20]=20
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[20]),'destroy'(0)
LET gb__resource$[20]=resget(gb__handle,1,119)
LET gb__win.send_rpt=gb__form_context[20]
LET gb__window_context$=gb__window_context$+"119="+STR(gb__form_context[20])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[20])+"=119"+$0A$
REM ' Load Form ID 120 (renewal)
LET gb__form_context[21]=21
PRINT (gb__sysgui)'CONTEXT'(gb__form_context[21]),'destroy'(0)
LET gb__resource$[21]=resget(gb__handle,1,120)
LET gb__win.renewal=gb__form_context[21]
LET gb__window_context$=gb__window_context$+"120="+STR(gb__form_context[21])+$0A$
LET gb__context_window$=gb__context_window$+STR(gb__form_context[21])+"=120"+$0A$

return

rem ' Get template for controls on a given window

  def fngb__template$(xx__win_id$)
  if xx__win_id$="100" then return "WELCOME:C(64*=0):ID=101 TYPE=17 X=180 Y=130 W=140 H=20:,USER_ID_LABEL:C(64*=0):ID=102 TYPE=17 X=140 Y=230 W=100 H=25:,USER_ID:C(64*=0):ID=103 TYPE=104 X=240 Y=230 W=120 H=25:,PASSWORD_LABEL:C(64*=0):ID=104 TYPE=17 X=140 Y=260 W=100 H=25:,LOGIN:C(1*=0):ID=1 TYPE=11 X=390 Y=360 W=90 H=25:,EXIT:C(1*=0):ID=2 TYPE=11 X=280 Y=360 W=90 H=25:,MESSAGE:C(64*=0):ID=108 TYPE=17 X=45 Y=320 W=410 H=30:,PASSWORD:C(64*=0):ID=109 TYPE=16 X=240 Y=260 W=120 H=25:,BOX:C(1*=0):ID=105 TYPE=0 X=20 Y=180 W=460 H=124:,PROMPT:C(64*=0):ID=106 TYPE=17 X=40 Y=200 W=410 H=25:,IMAGE:C(1*=0):ID=110 TYPE=0 X=104 Y=20 W=291 H=100:,SITE_INFO:C(64*=0):ID=111 TYPE=17 X=84 Y=160 W=332 H=20:"
if xx__win_id$="101" then return "VIEW_SN:C(1*=0):ID=112 TYPE=11 X=340 Y=160 W=120 H=25:,VIEW_ITEM:C(1*=0):ID=116 TYPE=11 X=340 Y=20 W=120 H=25:,ACCOUNT:C(1*=0):ID=117 TYPE=11 X=340 Y=315 W=120 H=25:,LOGOUT:C(1*=0):ID=118 TYPE=11 X=340 Y=365 W=120 H=25:,CART:C(1*=0):ID=119 TYPE=11 X=340 Y=235 W=120 H=25:,GROUP_CONTROL:C(1*=0):ID=1000 TYPE=21 X=20 Y=95 W=460 H=110:,GROUP_CONTROL_1001:C(1*=0):ID=1001 TYPE=21 X=20 Y=210 W=460 H=70:,GROUP_CONTROL_1002:C(1*=0):ID=1002 TYPE=21 X=20 Y=285 W=460 H=70:,STATIC_TEXT:C(64*=0):ID=1004 TYPE=17 X=110 Y=240 W=225 H=20:,STATIC_TEXT_1005:C(64*=0):ID=1005 TYPE=17 X=110 Y=315 W=225 H=20:,TRADE_BTN:C(1*=0):ID=120 TYPE=11 X=340 Y=120 W=120 H=25:,GROUP_CONTROL_1009:C(1*=0):ID=1009 TYPE=21 X=20 Y=5 W=460 H=85:,STATIC_TEXT_1011:C(64*=0):ID=1011 TYPE=17 X=110 Y=35 W=220 H=20:,TRD_TEXT:C(64*=0):ID=1015 TYPE=17 X=100 Y=120 W=235 H=30:,MOD_TEXT:C(64*=0):ID=1017 TYPE=17 X=119 Y=160 W=215 H=30:,RENT:C(1*=0):ID=1018 TYPE=11 X=340 Y=50 W=120 H=25:"
      if xx__win_id$="102" then return "SERIAL_NUMBER_LABEL:C(64*=0):ID=99 TYPE=17 X=20 Y=20 W=80 H=25:,SERIAL_NUMBER:C(64*=0):ID=100 TYPE=104 X=100 Y=20 W=140 H=20:,VIEW_SN:C(1*=0):ID=101 TYPE=11 X=270 Y=20 W=90 H=25:,FIND_SN:C(1*=0):ID=102 TYPE=11 X=390 Y=20 W=90 H=25:,AUTHORIZATION_LABEL:C(64*=0):ID=103 TYPE=17 X=20 Y=50 W=80 H=25:,AUTHORIZATION:C(64*=0):ID=104 TYPE=17 X=100 Y=50 W=140 H=25:,PURCHASE_DATE_LABEL:C(64*=0):ID=113 TYPE=17 X=20 Y=80 W=80 H=25:,PURCHASE_DATE:C(64*=0):ID=115 TYPE=17 X=100 Y=80 W=140 H=25:,ACTIVE_LABEL:C(64*=0):ID=121 TYPE=17 X=270 Y=50 W=50 H=20:,STATUS:C(64*=0):ID=124 TYPE=17 X=365 Y=50 W=90 H=20:,PRODUCT_LABEL:C(64*=0):ID=133 TYPE=17 X=20 Y=110 W=80 H=25:,PRODUCT:C(64*=0):ID=134 TYPE=17 X=100 Y=110 W=158 H=25:,PLATFORM_LABEL:C(64*=0):ID=136 TYPE=17 X=20 Y=140 W=80 H=25:,PLATFORM:C(64*=0):ID=137 TYPE=17 X=100 Y=140 W=158 H=25:,PORT_ID_LABEL:C(64*=0):ID=139 TYPE=17 X=20 Y=170 W=80 H=25:,OSLEVEL:C(64*=0):ID=140 TYPE=17 X=100 Y=170 W=230 H=25:,REVISION_LABEL:C(64*=0):ID=142 TYPE=17 X=20 Y=200 W=80 H=25:,REVISION:C(64*=0):ID=143 TYPE=17 X=100 Y=200 W=230 H=25:,LICENSE_LABEL:C(64*=0):ID=144 TYPE=17 X=20 Y=230 W=80 H=25:,LICENSE:C(64*=0):ID=145 TYPE=17 X=100 Y=230 W=230 H=25:,USERS_LABEL:C(64*=0):ID=154 TYPE=17 X=20 Y=260 W=80 H=25:,USERS:C(64*=0):ID=155 TYPE=17 X=100 Y=260 W=100 H=25:,ITEM_NUMBER_LABEL:C(64*=0):ID=160 TYPE=17 X=20 Y=290 W=80 H=25:,ITEM_NUMBER:C(64*=0):ID=161 TYPE=17 X=100 Y=290 W=227 H=25:,DESCRIPTION_LABEL:C(64*=0):ID=162 TYPE=17 X=20 Y=320 W=80 H=25:,DESCRIPTION:C(64*=0):ID=163 TYPE=17 X=100 Y=320 W=380 H=25:,HISTORY:C(1*=0):ID=165 TYPE=11 X=60 Y=360 W=90 H=25:,CHANGE:C(1*=0):ID=166 TYPE=11 X=165 Y=360 W=90 H=25:,CLOSE:C(1*=0):ID=2 TYPE=11 X=375 Y=360 W=90 H=25:,ANNUAL_LABEL:C(64*=0):ID=174 TYPE=17 X=270 Y=80 W=90 H=20:,EXPIRE_LABEL:C(64*=0):ID=175 TYPE=17 X=270 Y=105 W=81 H=30:,EXPIRATION_DATE:C(64*=0):ID=177 TYPE=17 X=365 Y=105 W=125 H=25:,ANNUAL_DATE:C(64*=0):ID=178 TYPE=17 X=365 Y=80 W=125 H=20:,AVAILABLE_SUPPORT_LABEL:C(64*=0):ID=179 TYPE=17 X=270 Y=140 W=90 H=20:,AVAILABLE_SUPPORT:C(64*=0):ID=180 TYPE=17 X=365 Y=140 W=40 H=20:,RENEW:C(1*=0):ID=181 TYPE=11 X=270 Y=360 W=90 H=25:"
      if xx__win_id$="103" then return "SERIAL_NUMBER_LABEL:C(64*=0):ID=100 TYPE=17 X=20 Y=235 W=75 H=20:,SERIAL_NUMBER:C(64*=0):ID=101 TYPE=17 X=100 Y=235 W=160 H=20:,CURRENT_CONFIGURATION:C(1*=0):ID=103 TYPE=21 X=10 Y=5 W=260 H=225:,MODIFIED_CONFIGURATION:C(1*=0):ID=106 TYPE=21 X=270 Y=5 W=220 H=300:,PRODUCT_LABEL:C(64*=0):ID=113 TYPE=17 X=20 Y=25 W=55 H=20:,CUR_PRODUCT:C(64*=0):ID=115 TYPE=17 X=80 Y=25 W=180 H=20:,PRODUCT:C(255*=0):ID=118 TYPE=19 X=280 Y=25 W=200 H=150:,PLATFORM_LABEL:C(64*=0):ID=121 TYPE=17 X=20 Y=50 W=55 H=20:,CUR_PLATFORM:C(64*=0):ID=124 TYPE=17 X=80 Y=50 W=180 H=20:,PLATFORM:C(255*=0):ID=127 TYPE=19 X=280 Y=50 W=200 H=150:,O_S_LEVEL_LABEL:C(64*=0):ID=133 TYPE=17 X=20 Y=72 W=55 H=20:,CUR_OSLEVEL:C(64*=0):ID=134 TYPE=17 X=80 Y=72 W=180 H=25:,OSLEVEL:C(255*=0):ID=135 TYPE=19 X=280 Y=75 W=200 H=150:,REVISION_LABEL:C(64*=0):ID=136 TYPE=17 X=20 Y=100 W=55 H=20:,CUR_REVISION:C(64*=0):ID=137 TYPE=17 X=80 Y=100 W=180 H=20:,REVISION:C(255*=0):ID=138 TYPE=19 X=280 Y=100 W=200 H=150:,LICENSE_LABEL:C(64*=0):ID=139 TYPE=17 X=20 Y=125 W=55 H=20:,CUR_LICENSE:C(64*=0):ID=140 TYPE=17 X=80 Y=125 W=180 H=20:,LICENSE:C(255*=0):ID=141 TYPE=19 X=280 Y=125 W=200 H=150:,CUR_USERS_LABEL:C(64*=0):ID=142 TYPE=17 X=20 Y=150 W=55 H=20:,CUR_USERS:C(64*=0):ID=143 TYPE=17 X=80 Y=150 W=150 H=20:,USERS:C(16*=0):ID=147 TYPE=105 X=445 Y=150 W=30 H=20:,ACCEPT:C(1*=0):ID=1 TYPE=11 X=255 Y=365 W=70 H=20:,CANCEL:C(1*=0):ID=2 TYPE=11 X=330 Y=365 W=70 H=20:,REFERENCE_LABEL:C(64*=0):ID=155 TYPE=17 X=15 Y=360 W=60 H=30:,REFERENCE:C(64*=0):ID=1010 TYPE=104 X=80 Y=365 W=90 H=20:,DESCRIPTION:C(64*=0):ID=200 TYPE=17 X=20 Y=260 W=240 H=30:,USERS_LABEL:C(64*=0):ID=1003 TYPE=17 X=350 Y=150 W=90 H=20:,RECALCULATE:C(1*=0):ID=1002 TYPE=11 X=180 Y=365 W=70 H=20:,SAM_LABEL:C(64*=0):ID=1006 TYPE=17 X=20 Y=175 W=55 H=20:,SAM_COVERED:C(64*=0):ID=1007 TYPE=17 X=80 Y=175 W=30 H=20:,SAM_STANDARD:N(1*=0):ID=1008 TYPE=13 X=395 Y=200 W=80 H=20:,ADDITIONAL_SUPPORT_LABEL:C(64*=0):ID=1011 TYPE=17 X=320 Y=255 W=125 H=20:,ADDITIONAL_SUPPORT:C(64*=0):ID=1012 TYPE=16 X=445 Y=255 W=30 H=20:,AVAILABLE_SUPPORT_LABEL:C(64*=0):ID=1013 TYPE=17 X=20 Y=200 W=55 H=20:,AVAILABLE_SUPPORT:C(64*=0):ID=1014 TYPE=17 X=80 Y=200 W=30 H=20:,USERS2_LABEL:C(64*=0):ID=1015 TYPE=17 X=350 Y=175 W=90 H=20:,USERS2:C(16*=0):ID=160 TYPE=105 X=445 Y=175 W=30 H=20:,PRICE:C(64*=0):ID=153 TYPE=16 X=370 Y=335 W=90 H=20:,TOTAL_PRICE:C(64*=0):ID=1019 TYPE=17 X=280 Y=335 W=85 H=20:,COMMENTS:C(64*=0):ID=154 TYPE=22 X=21 Y=300 W=240 H=55:,RENEW_DT:C(16*=0):ID=1009 TYPE=114 X=382 Y=225 W=68 H=20:,RENEW_DT_BTN:N(1*=0):ID=1020 TYPE=103 X=452 Y=222 W=30 H=30:,RENEW_DT_LBL:C(64*=0):ID=1021 TYPE=17 X=280 Y=225 W=100 H=20:,MAIN:C(1*=0):ID=1022 TYPE=11 X=405 Y=365 W=70 H=20:,RUNTIME:N(1*=0):ID=1017 TYPE=13 X=280 Y=280 W=65 H=20:,UNCOUNTED:N(1*=0):ID=1018 TYPE=13 X=350 Y=280 W=125 H=20:,CUR_UNCOUNTED_LBL:C(64*=0):ID=1023 TYPE=17 X=130 Y=200 W=85 H=20:,CUR_RUNTIME_LBL:C(64*=0):ID=1024 TYPE=17 X=130 Y=175 W=85 H=20:,CUR_UNCOUNTED:C(64*=0):ID=1025 TYPE=17 X=220 Y=200 W=30 H=20:,CUR_RUNTIME:C(64*=0):ID=1026 TYPE=17 X=220 Y=175 W=30 H=20:,LISTPRICE:C(64*=0):ID=1027 TYPE=16 X=370 Y=315 W=90 H=20:,LISTPRICE_LBL:C(64*=0):ID=1028 TYPE=17 X=280 Y=315 W=85 H=20:,NO_RIF:N(1*=0):ID=1029 TYPE=13 X=275 Y=200 W=115 H=20:"
  if xx__win_id$="104" then return "ITEM_DETAILS:C(1*=0):ID=10 TYPE=0 X=10 Y=10 W=280 H=220:,PRODUCT_LABEL:C(64*=0):ID=98 TYPE=17 X=20 Y=25 W=55 H=20:,PRODUCT:C(255*=0):ID=99 TYPE=19 X=80 Y=25 W=200 H=150:,PLATFORM_LABEL:C(64*=0):ID=100 TYPE=17 X=20 Y=50 W=55 H=20:,PLATFORM:C(255*=0):ID=101 TYPE=19 X=80 Y=50 W=200 H=150:,O_S_LABEL:C(64*=0):ID=102 TYPE=17 X=20 Y=75 W=55 H=20:,OSLEVEL:C(255*=0):ID=103 TYPE=19 X=80 Y=75 W=200 H=150:,REVISION_LABEL:C(64*=0):ID=104 TYPE=17 X=20 Y=100 W=55 H=20:,REVISION:C(255*=0):ID=105 TYPE=19 X=80 Y=100 W=200 H=150:,LICENSE_LABEL:C(64*=0):ID=111 TYPE=17 X=20 Y=125 W=55 H=20:,LICENSE:C(255*=0):ID=112 TYPE=19 X=80 Y=125 W=200 H=150:,ITEM_NUMBER_LABEL:C(64*=0):ID=113 TYPE=17 X=20 Y=150 W=55 H=20:,ITEM_NUMBER:C(64*=0):ID=117 TYPE=17 X=80 Y=150 W=200 H=20:,DESCRIPTION:C(64*=0):ID=119 TYPE=17 X=30 Y=175 W=250 H=40:,QUANTITY:C(16*=0):ID=121 TYPE=105 X=410 Y=25 W=25 H=20:,USERS:C(16*=0):ID=124 TYPE=105 X=410 Y=50 W=25 H=20:,REFERENCE_LABEL:C(64*=0):ID=130 TYPE=17 X=10 Y=360 W=60 H=30:,REFERENCE:C(64*=0):ID=240 TYPE=104 X=75 Y=365 W=90 H=20:,ACCEPT:C(1*=0):ID=1 TYPE=11 X=325 Y=365 W=70 H=20:,CLOSE:C(1*=0):ID=2 TYPE=11 X=400 Y=365 W=70 H=20:,RECALCULATE:C(1*=0):ID=200 TYPE=11 X=250 Y=365 W=70 H=20:,SAM_STANDARD:N(1*=0):ID=202 TYPE=13 X=350 Y=100 W=75 H=20:,USERS2:C(16*=0):ID=126 TYPE=105 X=410 Y=75 W=25 H=20:,USERS_LBL:C(64*=0):ID=206 TYPE=17 X=320 Y=50 W=85 H=20:,USERS2_LBL:C(64*=0):ID=207 TYPE=17 X=320 Y=75 W=85 H=20:,QUANTITY_LBL:C(64*=0):ID=212 TYPE=17 X=320 Y=25 W=85 H=20:,HORIZONTAL_LINE:C(1*=0):ID=213 TYPE=0 X=10 Y=345 W=470 H=0:,PRICE:C(64*=0):ID=140 TYPE=16 X=385 Y=310 W=90 H=20:,PRICELBL:C(64*=0):ID=211 TYPE=17 X=320 Y=310 W=60 H=20:,COMMENTS:C(64*=0):ID=122 TYPE=22 X=15 Y=235 W=270 H=100:,RENEW_DT:C(16*=0):ID=204 TYPE=114 X=375 Y=145 W=70 H=20:,RENEW_DT_LBL:C(64*=0):ID=231 TYPE=17 X=340 Y=125 W=110 H=15:,RENEW_DT_BTN:N(1*=0):ID=232 TYPE=103 X=450 Y=142 W=30 H=30:,RUNTIME:N(1*=0):ID=233 TYPE=13 X=355 Y=175 W=70 H=20:,UNCOUNTED:N(1*=0):ID=234 TYPE=13 X=298 Y=200 W=127 H=20:,LISTPRICE:C(64*=0):ID=241 TYPE=16 X=385 Y=290 W=90 H=20:,LISTPRICELBL:C(64*=0):ID=242 TYPE=17 X=320 Y=290 W=60 H=20:"
  if xx__win_id$="105" then return "GRID:C(1*=0):ID=99 TYPE=107 X=20 Y=195 W=460 H=100:,EMAIL:C(1*=0):ID=100 TYPE=11 X=115 Y=360 W=90 H=25:,SUBTOTAL_LABEL:C(64*=0):ID=105 TYPE=17 X=385 Y=300 W=80 H=20:,SUBTOTAL:C(64*=0):ID=106 TYPE=17 X=385 Y=325 W=80 H=20:,VIEW_SN:C(1*=0):ID=113 TYPE=11 X=390 Y=60 W=90 H=25:,VIEW_ITEM:C(1*=0):ID=114 TYPE=11 X=280 Y=60 W=90 H=25:,REFERENCE:C(255*=0):ID=116 TYPE=19 X=270 Y=360 W=110 H=90:,REFERENCE_LABEL:C(64*=0):ID=117 TYPE=17 X=210 Y=355 W=55 H=30:,CLOSE:C(1*=0):ID=2 TYPE=11 X=15 Y=360 W=90 H=25:,CHECKOUT:C(1*=0):ID=118 TYPE=11 X=390 Y=360 W=90 H=25:,DELETE:C(1*=0):ID=119 TYPE=11 X=390 Y=155 W=90 H=25:,MESSAGE:C(64*=0):ID=161 TYPE=17 X=20 Y=125 W=460 H=30:,ADD_TO_CART:C(1*=0):ID=150 TYPE=0 X=10 Y=10 W=480 H=90:,ADD_TO_CART_MESSAGE:C(64*=0):ID=151 TYPE=17 X=20 Y=30 W=460 H=30:,MODIFY_CART:C(1*=0):ID=160 TYPE=0 X=10 Y=105 W=480 H=250:,IMAGE:C(1*=0):ID=162 TYPE=0 X=36 Y=60 W=35 H=30:,IMAGE_164:C(1*=0):ID=164 TYPE=0 X=36 Y=157 W=40 H=35:,TRADE_BTN:C(1*=0):ID=165 TYPE=11 X=160 Y=60 W=100 H=25:,LISTPRICE:C(64*=0):ID=166 TYPE=17 X=300 Y=325 W=80 H=20:,LISTPRICE_LBL:C(64*=0):ID=167 TYPE=17 X=300 Y=300 W=80 H=20:,SUB_LBL:C(64*=0):ID=168 TYPE=17 X=208 Y=325 W=80 H=20:"
  if xx__win_id$="106" then return "LICENSE_1_LABEL:C(64*=0):ID=101 TYPE=17 X=280 Y=30 W=40 H=25:,LICENSE_1:C(64*=0):ID=102 TYPE=104 X=330 Y=30 W=150 H=25:,LICENSE_2_LABEL:C(64*=0):ID=103 TYPE=17 X=280 Y=60 W=50 H=25:,LICENSE_2:C(64*=0):ID=901 TYPE=104 X=330 Y=60 W=150 H=25:,MEDIA_LABEL:C(64*=0):ID=902 TYPE=17 X=20 Y=130 W=60 H=25:,MEDIA:C(16*=0):ID=903 TYPE=105 X=90 Y=130 W=40 H=25:,SHIP_STANDARD:C(1*=0):ID=904 TYPE=11 X=170 Y=130 W=90 H=25:,SHIP_USA:C(1*=0):ID=905 TYPE=11 X=280 Y=130 W=90 H=25:,SHIP_INTL:C(1*=0):ID=906 TYPE=11 X=390 Y=130 W=90 H=25:,BILL_TO_NAME:C(64*=0):ID=908 TYPE=17 X=20 Y=200 W=220 H=20:,BILL_TO_ADDR1:C(64*=0):ID=909 TYPE=17 X=20 Y=220 W=220 H=20:,BILL_TO_ADDR2:C(64*=0):ID=910 TYPE=17 X=20 Y=240 W=220 H=20:,BILL_TO_CITY:C(64*=0):ID=913 TYPE=17 X=20 Y=260 W=220 H=20:,BILL_TO_STATE:C(64*=0):ID=914 TYPE=17 X=20 Y=280 W=220 H=20:,BILL_TO_ZIP:C(64*=0):ID=915 TYPE=17 X=20 Y=300 W=220 H=20:,BILL_TO_COUNTRY:C(64*=0):ID=916 TYPE=17 X=20 Y=320 W=220 H=20:,SHIP_TO_NAME:C(64*=0):ID=918 TYPE=17 X=260 Y=200 W=220 H=20:,SHIP_TO_ADDR1:C(64*=0):ID=919 TYPE=17 X=260 Y=220 W=220 H=20:,SHIP_TO_ADDR2:C(64*=0):ID=920 TYPE=17 X=260 Y=240 W=220 H=20:,SHIP_TO_CITY:C(64*=0):ID=924 TYPE=17 X=260 Y=260 W=220 H=20:,SHIP_TO_STATE:C(64*=0):ID=925 TYPE=17 X=260 Y=280 W=220 H=20:,SHIP_TO_ZIP:C(64*=0):ID=926 TYPE=17 X=260 Y=300 W=220 H=20:,SHIP_TO_COUNTRY:C(64*=0):ID=927 TYPE=17 X=260 Y=320 W=220 H=20:,PREVIOUS:C(1*=0):ID=2 TYPE=11 X=280 Y=360 W=90 H=25:,NEXT:C(1*=0):ID=1 TYPE=11 X=390 Y=360 W=90 H=25:,SHIPPING_CONTROL:C(1*=0):ID=200 TYPE=0 X=10 Y=110 W=140 H=60:,BILLING_GROUP:C(1*=0):ID=907 TYPE=0 X=10 Y=180 W=240 H=170:,SHIPPING_GROUP:C(1*=0):ID=917 TYPE=0 X=250 Y=180 W=240 H=170:,LICENSE_GROUP:C(1*=0):ID=300 TYPE=0 X=10 Y=10 W=480 H=90:,LICENSE_MESSAGE:C(64*=0):ID=301 TYPE=17 X=20 Y=30 W=240 H=59:,SHIPPING_ADDRESS:C(1*=0):ID=928 TYPE=0 X=160 Y=110 W=330 H=60:,STATIC_TEXT:C(64*=0):ID=929 TYPE=17 X=15 Y=350 W=250 H=45:"
  if xx__win_id$="107" then return "BILL_TO_NAME:C(64*=0):ID=132 TYPE=17 X=20 Y=40 W=220 H=25:,BILL_TO_ADDR1:C(64*=0):ID=133 TYPE=17 X=20 Y=70 W=220 H=25:,BILL_TO_ADDR2:C(64*=0):ID=134 TYPE=17 X=20 Y=100 W=220 H=25:,BILL_TO_CITY:C(64*=0):ID=147 TYPE=17 X=20 Y=130 W=220 H=25:,BILL_TO_STATE:C(64*=0):ID=148 TYPE=17 X=20 Y=160 W=220 H=25:,BILL_TO_ZIP:C(64*=0):ID=149 TYPE=17 X=20 Y=190 W=80 H=25:,SHIP_TO_NAME:C(64*=0):ID=152 TYPE=104 X=260 Y=40 W=220 H=25:,SHIP_TO_ADDR1:C(64*=0):ID=154 TYPE=104 X=260 Y=70 W=220 H=25:,SHIP_TO_ADDR2:C(64*=0):ID=156 TYPE=104 X=260 Y=100 W=220 H=25:,SHIP_TO_CITY:C(64*=0):ID=159 TYPE=104 X=260 Y=130 W=220 H=25:,SHIP_TO_STATE:C(255*=0):ID=160 TYPE=19 X=260 Y=160 W=220 H=150:,SHIP_TO_ZIP:C(64*=0):ID=161 TYPE=104 X=260 Y=190 W=80 H=25:,ONE_DAY:N(1*=0):ID=162 TYPE=12 X=310 Y=270 W=50 H=25:,TWO_DAY:N(1*=0):ID=163 TYPE=12 X=370 Y=270 W=50 H=25:,THREE_DAY:N(1*=0):ID=164 TYPE=12 X=430 Y=270 W=50 H=25:,CANCEL:C(1*=0):ID=2 TYPE=11 X=390 Y=360 W=90 H=25:,ACCEPT:C(1*=0):ID=1 TYPE=11 X=280 Y=360 W=90 H=25:,BILLING_GROUP:C(1*=0):ID=100 TYPE=0 X=10 Y=20 W=240 H=210:,SHIPPING_GROUP:C(1*=0):ID=110 TYPE=0 X=250 Y=20 W=240 H=210:,DELIVERY_GROUP:C(1*=0):ID=120 TYPE=0 X=10 Y=250 W=480 H=63:,DELIVERY_MESSAGE:C(64*=0):ID=121 TYPE=17 X=20 Y=275 W=280 H=30:"
  if xx__win_id$="108" then return "BILL_TO_NAME:C(64*=0):ID=132 TYPE=17 X=20 Y=40 W=220 H=25:,BILL_TO_ADDR1:C(64*=0):ID=133 TYPE=17 X=20 Y=70 W=220 H=25:,BILL_TO_ADDR2:C(64*=0):ID=134 TYPE=17 X=20 Y=100 W=220 H=25:,BILL_TO_CITY:C(64*=0):ID=147 TYPE=17 X=20 Y=130 W=220 H=25:,BILL_TO_STATE:C(64*=0):ID=148 TYPE=17 X=20 Y=160 W=220 H=25:,BILL_TO_ZIP:C(64*=0):ID=149 TYPE=17 X=20 Y=190 W=220 H=25:,BILL_TO_COUNTRY:C(64*=0):ID=151 TYPE=17 X=20 Y=220 W=220 H=25:,SHIP_TO_NAME:C(64*=0):ID=154 TYPE=104 X=260 Y=40 W=220 H=25:,SHIP_TO_ADDR1:C(64*=0):ID=156 TYPE=104 X=260 Y=70 W=220 H=25:,SHIP_TO_ADDR2:C(64*=0):ID=157 TYPE=104 X=260 Y=100 W=220 H=25:,SHIP_TO_CITY:C(64*=0):ID=160 TYPE=104 X=260 Y=130 W=220 H=25:,SHIP_TO_STATE:C(64*=0):ID=161 TYPE=104 X=260 Y=160 W=220 H=25:,SHIP_TO_ZIP:C(64*=0):ID=162 TYPE=104 X=260 Y=190 W=220 H=25:,SHIP_TO_COUNTRY:C(255*=0):ID=163 TYPE=19 X=260 Y=220 W=220 H=120:,CANCEL:C(1*=0):ID=2 TYPE=11 X=390 Y=360 W=90 H=25:,ACCEPT:C(1*=0):ID=1 TYPE=11 X=280 Y=360 W=90 H=25:,BILLING_GROUP:C(1*=0):ID=110 TYPE=0 X=10 Y=20 W=240 H=240:,SHIPPING_GROUP:C(1*=0):ID=1000 TYPE=0 X=250 Y=20 W=240 H=240:"
  if xx__win_id$="109" then return "ON_ACCOUNT:N(1*=0):ID=101 TYPE=12 X=50 Y=40 W=110 H=25:,CREDIT_CARD_FRAME:C(1*=0):ID=135 TYPE=0 X=220 Y=70 W=240 H=270:,CREDIT_CARD:N(1*=0):ID=136 TYPE=12 X=230 Y=40 W=77 H=25:,CREDIT_CARD_LIST:C(255*=0):ID=141 TYPE=19 X=230 Y=90 W=220 H=150:,VISA:N(1*=0):ID=143 TYPE=12 X=230 Y=113 W=23 H=20:,MASTERCARD:N(1*=0):ID=144 TYPE=12 X=230 Y=149 W=23 H=20:,AMERICAN_EXPRESS:N(1*=0):ID=145 TYPE=12 X=230 Y=186 W=23 H=20:,NUMBER_LABEL:C(64*=0):ID=146 TYPE=17 X=230 Y=220 W=70 H=25:,NUMBER:C(64*=0):ID=148 TYPE=104 X=300 Y=220 W=150 H=25:,NAME_LABEL:C(64*=0):ID=149 TYPE=17 X=230 Y=250 W=70 H=25:,NAME:C(64*=0):ID=150 TYPE=104 X=300 Y=250 W=150 H=25:,EXPIRY_LABEL:C(64*=0):ID=151 TYPE=17 X=230 Y=280 W=70 H=25:,EXPIRY_MONTH:C(255*=0):ID=152 TYPE=19 X=300 Y=280 W=80 H=120:,EXPIRY_YEAR:C(255*=0):ID=153 TYPE=19 X=390 Y=280 W=60 H=120:,SAVE_CREDIT_CARD:N(1*=0):ID=154 TYPE=13 X=230 Y=308 W=150 H=25:,ORDER_AMOUNT_FRAME:C(1*=0):ID=155 TYPE=0 X=40 Y=70 W=140 H=150:,SUBTOTAL_LABEL:C(64*=0):ID=156 TYPE=17 X=50 Y=90 W=50 H=25:,SUBTOTAL:C(64*=0):ID=157 TYPE=17 X=100 Y=90 W=70 H=25:,TAX_LABEL:C(64*=0):ID=158 TYPE=17 X=50 Y=120 W=50 H=25:,TAX:C(64*=0):ID=159 TYPE=17 X=100 Y=120 W=70 H=25:,FREIGHT_LABEL:C(64*=0):ID=160 TYPE=17 X=50 Y=150 W=50 H=25:,FREIGHT:C(64*=0):ID=161 TYPE=17 X=100 Y=150 W=70 H=25:,TOTAL_LABEL:C(64*=0):ID=162 TYPE=17 X=50 Y=180 W=50 H=25:,TOTAL:C(64*=0):ID=163 TYPE=17 X=100 Y=180 W=70 H=25:,PREVIOUS:C(1*=0):ID=165 TYPE=11 X=280 Y=360 W=90 H=25:,BUY_NOW:C(1*=0):ID=1 TYPE=11 X=390 Y=360 W=90 H=25:,RETURN_TO_CART:C(1*=0):ID=2 TYPE=11 X=170 Y=360 W=90 H=25:,REFERENCE:C(64*=0):ID=167 TYPE=104 X=60 Y=240 W=100 H=25:,REFERENCE_TITLE:C(1*=0):ID=169 TYPE=0 X=40 Y=220 W=140 H=60:,BUY_NOW_TITLE:C(1*=0):ID=170 TYPE=0 X=20 Y=22 W=460 H=328:,MESSAGE:C(64*=0):ID=171 TYPE=17 X=319 Y=40 W=150 H=25:,IMAGE:C(1*=0):ID=172 TYPE=0 X=260 Y=113 W=50 H=31:,IMAGE_173:C(1*=0):ID=173 TYPE=0 X=260 Y=149 W=50 H=31:,IMAGE_174:C(1*=0):ID=174 TYPE=0 X=260 Y=186 W=50 H=31:,CONTACT_TITLE:C(1*=0):ID=175 TYPE=0 X=40 Y=280 W=140 H=60:,CONTACT:C(64*=0):ID=168 TYPE=104 X=60 Y=300 W=100 H=25:,LIST_LABEL:C(64*=0):ID=176 TYPE=17 X=50 Y=190 W=50 H=20:,LIST:C(64*=0):ID=177 TYPE=17 X=100 Y=190 W=70 H=20:"
  if xx__win_id$="110" then return "EMAIL_ADDRESS_LABEL:C(64*=0):ID=100 TYPE=17 X=20 Y=30 W=100 H=25:,EMAIL:C(64*=0):ID=101 TYPE=104 X=120 Y=30 W=360 H=25:,PASSWORD_LABEL:C(64*=0):ID=102 TYPE=17 X=20 Y=90 W=100 H=25:,PASSWORD:C(64*=0):ID=103 TYPE=16 X=120 Y=90 W=100 H=25:,CONFIRM_PASSWORD_LABEL:C(64*=0):ID=104 TYPE=17 X=20 Y=120 W=100 H=25:,CONFIRM_PASSWORD:C(64*=0):ID=105 TYPE=16 X=120 Y=120 W=100 H=25:,GRID:C(1*=0):ID=106 TYPE=107 X=20 Y=200 W=460 H=120:,NOTE:C(64*=0):ID=108 TYPE=17 X=230 Y=90 W=250 H=50:,EMAIL_ADDRESS_LABEL2:C(64*=0):ID=109 TYPE=17 X=20 Y=60 W=100 H=25:,EMAIL2:C(64*=0):ID=110 TYPE=104 X=120 Y=60 W=360 H=25:,CANCEL:C(1*=0):ID=2 TYPE=11 X=395 Y=360 W=90 H=25:,NEW_CC:C(1*=0):ID=111 TYPE=11 X=15 Y=360 W=90 H=25:,ACCEPT:C(1*=0):ID=1 TYPE=11 X=300 Y=360 W=90 H=25:,MESSAGE:C(64*=0):ID=120 TYPE=17 X=20 Y=330 W=460 H=20:,EMAIL_RPT:C(1*=0):ID=121 TYPE=11 X=110 Y=360 W=90 H=25:,INVOICE:C(1*=0):ID=3 TYPE=11 X=205 Y=360 W=90 H=25:"
  if xx__win_id$="111" then return "SERIAL_NUMBER_LABEL:C(64*=0):ID=101 TYPE=17 X=20 Y=60 W=80 H=20:,SERIAL_NUMBER:C(64*=0):ID=102 TYPE=17 X=100 Y=60 W=120 H=20:,ITEM_NUMBER_LABEL:C(64*=0):ID=105 TYPE=17 X=20 Y=85 W=80 H=20:,ITEM_NUMBER:C(64*=0):ID=106 TYPE=17 X=100 Y=85 W=380 H=20:,DESCRIPTION_LABEL:C(64*=0):ID=107 TYPE=17 X=20 Y=110 W=80 H=20:,DESCRIPTION:C(64*=0):ID=108 TYPE=17 X=100 Y=110 W=380 H=20:,GRID:C(1*=0):ID=110 TYPE=107 X=18 Y=180 W=460 H=190:,CLOSE:C(1*=0):ID=2 TYPE=11 X=20 Y=10 W=90 H=25:,CLIENTS:C(1*=0):ID=113 TYPE=11 X=115 Y=10 W=90 H=25:,TAB:N(4*=0):ID=114 TYPE=106 X=10 Y=140 W=480 H=240:,LIST_BOX:C(255*=0):ID=115 TYPE=18 X=20 Y=180 W=460 H=200:,RESET:C(1*=0):ID=116 TYPE=11 X=210 Y=10 W=90 H=25:,RESET_REASON:C(255*=0):ID=117 TYPE=19 X=310 Y=10 W=160 H=120:"
  if xx__win_id$="112" then return "GRID:C(1*=0):ID=100 TYPE=107 X=20 Y=160 W=460 H=180:,CLOSE:C(1*=0):ID=2 TYPE=11 X=390 Y=360 W=90 H=25:,SERIAL_NUMBER_LABEL:C(64*=0):ID=103 TYPE=17 X=20 Y=30 W=80 H=25:,SERIAL_NUMBER:C(64*=0):ID=104 TYPE=17 X=100 Y=30 W=150 H=25:,ITEM_NUMBER_LABEL:C(64*=0):ID=105 TYPE=17 X=20 Y=60 W=80 H=25:,ITEM_NUMBER:C(64*=0):ID=106 TYPE=17 X=100 Y=60 W=150 H=25:,DESCRIPTION_LABEL:C(64*=0):ID=107 TYPE=17 X=20 Y=90 W=80 H=25:,DESCRIPTION:C(64*=0):ID=108 TYPE=17 X=100 Y=90 W=370 H=25:,MESSAGE:C(64*=0):ID=109 TYPE=17 X=20 Y=360 W=350 H=30:,SERVER_GROUP:C(1*=0):ID=200 TYPE=0 X=10 Y=10 W=480 H=120:,CLIENT_GROUP:C(1*=0):ID=201 TYPE=0 X=10 Y=140 W=480 H=210:,DISCLAIMER:C(64*=0):ID=110 TYPE=17 X=260 Y=30 W=210 H=50:"
  if xx__win_id$="113" then return "SERIAL_NUMBER_LABEL:C(64*=0):ID=99 TYPE=17 X=20 Y=20 W=110 H=20:,SERIAL_NUMBER:C(64*=0):ID=100 TYPE=104 X=130 Y=20 W=140 H=20:,NEXT:C(1*=0):ID=1 TYPE=11 X=390 Y=20 W=90 H=25:,LIMIT_LABEL:C(64*=0):ID=101 TYPE=17 X=20 Y=50 W=110 H=20:,LIMIT:C(16*=0):ID=106 TYPE=105 X=130 Y=50 W=50 H=20:,ACTIVE_ONLY:N(1*=0):ID=108 TYPE=13 X=200 Y=50 W=180 H=25:,PREVIOUS:C(1*=0):ID=110 TYPE=11 X=290 Y=20 W=90 H=25:,GRID:C(1*=0):ID=111 TYPE=107 X=20 Y=117 W=460 H=233:,CLOSE:C(1*=0):ID=2 TYPE=11 X=390 Y=360 W=90 H=25:,MESSAGE:C(64*=0):ID=112 TYPE=17 X=20 Y=360 W=350 H=25:"
  if xx__win_id$="114" then return "VISA:N(1*=0):ID=103 TYPE=12 X=55 Y=210 W=26 H=25:,MASTERCARD:N(1*=0):ID=104 TYPE=12 X=55 Y=250 W=26 H=25:,AMERICAN_EXPRESS:N(1*=0):ID=105 TYPE=12 X=55 Y=290 W=26 H=25:,NUMBER_LABEL:C(64*=0):ID=106 TYPE=17 X=200 Y=210 W=90 H=25:,NUMBER:C(64*=0):ID=107 TYPE=104 X=290 Y=210 W=160 H=25:,NAME_LABEL:C(64*=0):ID=108 TYPE=17 X=200 Y=250 W=90 H=25:,NAME:C(64*=0):ID=109 TYPE=104 X=290 Y=250 W=160 H=25:,EXPIRY_LABEL:C(64*=0):ID=110 TYPE=17 X=200 Y=290 W=90 H=25:,EXPIRY_MONTH:C(255*=0):ID=111 TYPE=19 X=290 Y=290 W=90 H=150:,EXPIRY_YEAR:C(255*=0):ID=112 TYPE=19 X=390 Y=290 W=60 H=150:,UPDATE:C(1*=0):ID=200 TYPE=11 X=280 Y=360 W=90 H=25:,DELETE:C(1*=0):ID=201 TYPE=11 X=170 Y=360 W=90 H=25:,CANCEL:C(1*=0):ID=2 TYPE=11 X=390 Y=360 W=90 H=25:,CREDIT_CARD_GROUP:C(1*=0):ID=100 TYPE=0 X=40 Y=195 W=130 H=135:,GROUP_CONTROL:C(1*=0):ID=101 TYPE=0 X=190 Y=195 W=270 H=135:,CREDIT_CARD_DETAILS:C(1*=0):ID=202 TYPE=0 X=20 Y=175 W=460 H=175:,IMAGE:C(1*=0):ID=203 TYPE=0 X=112 Y=30 W=291 H=100:,IMAGE_204:C(1*=0):ID=204 TYPE=0 X=90 Y=210 W=50 H=31:,IMAGE_205:C(1*=0):ID=205 TYPE=0 X=90 Y=250 W=50 H=31:,IMAGE_206:C(1*=0):ID=206 TYPE=0 X=90 Y=290 W=50 H=31:"
      if xx__win_id$="116" then return "OK_BTN:C(1*=0):ID=1 TYPE=11 X=90 Y=170 W=80 H=20:,CANCEL:C(1*=0):ID=2 TYPE=11 X=175 Y=170 W=80 H=20:,STATIC_TEXT:C(64*=0):ID=102 TYPE=17 X=15 Y=20 W=315 H=55:,RESET_REASON:C(255*=0):ID=103 TYPE=19 X=90 Y=90 W=160 H=120:"
      if xx__win_id$="117" then return "AVAILABLE_SN_LBOX:C(255*=0):ID=100 TYPE=18 X=30 Y=130 W=150 H=110:,SELECTED_SN_LBOX:C(255*=0):ID=101 TYPE=18 X=320 Y=130 W=150 H=110:,ADD_BTN:C(1*=0):ID=104 TYPE=11 X=210 Y=140 W=80 H=25:,REMOVE_BTN:C(1*=0):ID=105 TYPE=11 X=210 Y=170 W=80 H=25:,EXCHANGE_BTN:C(1*=0):ID=107 TYPE=11 X=360 Y=270 W=80 H=25:,REMOVE_ALL_BTN:C(1*=0):ID=106 TYPE=11 X=210 Y=200 W=80 H=25:,CANCEL_BTN:C(1*=0):ID=109 TYPE=11 X=360 Y=330 W=80 H=25:,EXCHANGE_TXT:C(64*=0):ID=110 TYPE=17 X=155 Y=270 W=195 H=50:,SELECTED_DESC:C(64*=0):ID=113 TYPE=17 X=31 Y=55 W=430 H=45:,STARTING_SN_TEXT:C(64*=0):ID=114 TYPE=17 X=50 Y=20 W=70 H=20:,STARTING_SN:C(64*=0):ID=115 TYPE=16 X=120 Y=20 W=100 H=20:,STATIC_TEXT:C(64*=0):ID=116 TYPE=17 X=35 Y=110 W=130 H=20:,STATIC_TEXT_117:C(64*=0):ID=117 TYPE=17 X=320 Y=110 W=130 H=20:,SCAN_FORWARD_BTN:C(1*=0):ID=1 TYPE=11 X=350 Y=17 W=80 H=25:,SCAN_BACK_BTN:C(1*=0):ID=119 TYPE=11 X=245 Y=17 W=80 H=25:,SELECTED_DESC_CTL:C(1*=0):ID=120 TYPE=0 X=20 Y=45 W=450 H=60:,CANCEL_TXT:C(64*=0):ID=121 TYPE=17 X=155 Y=330 W=195 H=30:"
  if xx__win_id$="118" then return "NEW_PRODUCT:C(1*=0):ID=106 TYPE=0 X=250 Y=15 W=235 H=157:,PRODUCT:C(255*=0):ID=118 TYPE=19 X=270 Y=35 W=200 H=150:,PLATFORM:C(255*=0):ID=127 TYPE=19 X=270 Y=60 W=200 H=150:,OSLEVEL:C(255*=0):ID=135 TYPE=19 X=270 Y=85 W=200 H=150:,REVISION:C(255*=0):ID=138 TYPE=19 X=270 Y=110 W=200 H=150:,LICENSE:C(255*=0):ID=141 TYPE=19 X=270 Y=135 W=200 H=150:,PRICE_LABEL:C(64*=0):ID=151 TYPE=17 X=330 Y=365 W=60 H=20:,ACCEPT:C(1*=0):ID=1 TYPE=11 X=95 Y=365 W=70 H=20:,CANCEL:C(1*=0):ID=2 TYPE=11 X=170 Y=365 W=70 H=20:,REFERENCE_LABEL:C(64*=0):ID=154 TYPE=17 X=20 Y=325 W=55 H=30:,REFERENCE:C(64*=0):ID=155 TYPE=104 X=80 Y=330 W=100 H=20:,RECALCULATE:C(1*=0):ID=200 TYPE=11 X=20 Y=365 W=70 H=20:,ENT_USERS_LBL:C(64*=0):ID=1003 TYPE=17 X=260 Y=195 W=110 H=20:,STATIC_TEXT:C(64*=0):ID=1009 TYPE=17 X=20 Y=6 W=140 H=20:,DETAIL_PRICING_LABEL:C(64*=0):ID=1011 TYPE=17 X=20 Y=175 W=90 H=20:,SAM_STANDARD:N(1*=0):ID=1008 TYPE=13 X=310 Y=245 W=80 H=20:,GROUP_CONTROL:C(1*=0):ID=1014 TYPE=0 X=250 Y=180 W=235 H=155:,PRICE:C(64*=0):ID=152 TYPE=16 X=395 Y=365 W=90 H=20:,ENT_USERS:C(64*=0):ID=142 TYPE=16 X=375 Y=195 W=40 H=20:,COMMENTS:C(64*=0):ID=1010 TYPE=22 X=20 Y=200 W=220 H=120:,SELECTED_SN_LBOX:C(64*=0):ID=1005 TYPE=22 X=20 Y=27 W=220 H=140:,RENEW_DT:C(16*=0):ID=145 TYPE=114 X=375 Y=270 W=70 H=20:,RENEW_DT_BTN:N(1*=0):ID=146 TYPE=103 X=448 Y=267 W=30 H=30:,RENEW_DT_LBL:C(64*=0):ID=144 TYPE=17 X=270 Y=270 W=100 H=20:,STD_USERS:C(64*=0):ID=143 TYPE=16 X=375 Y=220 W=40 H=20:,STD_USERS_LBL:C(64*=0):ID=1004 TYPE=17 X=260 Y=220 W=110 H=20:,MAIN:C(1*=0):ID=1015 TYPE=11 X=250 Y=365 W=70 H=20:,RUNTIME:N(1*=0):ID=147 TYPE=13 X=270 Y=300 W=65 H=20:,UNCOUNTED:N(1*=0):ID=148 TYPE=13 X=345 Y=300 W=125 H=20:,LISTPRICE:C(64*=0):ID=1017 TYPE=16 X=395 Y=345 W=90 H=20:,LISTPRICE_LBL:C(64*=0):ID=1018 TYPE=17 X=330 Y=345 W=60 H=20:"
  if xx__win_id$="119" then return "OK:C(1*=0):ID=1 TYPE=11 X=75 Y=215 W=90 H=25:,CANCEL:C(1*=0):ID=2 TYPE=11 X=185 Y=215 W=90 H=25:,EMAIL:C(64*=0):ID=101 TYPE=104 X=21 Y=55 W=309 H=25:,SEND_INFO:C(64*=0):ID=102 TYPE=17 X=21 Y=23 W=309 H=25:,PROGRESS_INFO:C(64*=0):ID=103 TYPE=17 X=21 Y=180 W=309 H=25:,SN_RPT:N(1*=0):ID=104 TYPE=12 X=25 Y=91 W=300 H=25:,AR_RPT:N(1*=0):ID=105 TYPE=12 X=25 Y=115 W=300 H=25:"
  if xx__win_id$="120" then return "COMMENTS:C(64*=0):ID=100 TYPE=22 X=32 Y=70 W=240 H=60:,REFERENCE:C(64*=0):ID=130 TYPE=104 X=100 Y=200 W=90 H=20:,REFERENCE_LABEL:C(64*=0):ID=129 TYPE=17 X=5 Y=200 W=95 H=20:,LISTPRICE:C(64*=0):ID=126 TYPE=16 X=100 Y=145 W=90 H=20:,PRICE:C(64*=0):ID=128 TYPE=16 X=100 Y=170 W=90 H=20:,LISTPRICE_LBL:C(64*=0):ID=125 TYPE=17 X=20 Y=145 W=70 H=20:,PRICE_LBL:C(64*=0):ID=127 TYPE=17 X=20 Y=170 W=70 H=20:,ACCEPT:C(1*=0):ID=1 TYPE=11 X=200 Y=200 W=70 H=20:,CANCEL:C(1*=0):ID=2 TYPE=11 X=200 Y=170 W=70 H=20:,SN_LBL:C(64*=0):ID=131 TYPE=17 X=20 Y=10 W=75 H=20:,SN:C(64*=0):ID=132 TYPE=16 X=100 Y=15 W=90 H=20:,DT_LBL:C(64*=0):ID=133 TYPE=17 X=20 Y=40 W=75 H=20:,RENEW_DT:C(64*=0):ID=134 TYPE=16 X=100 Y=40 W=90 H=20:,REV:C(64*=0):ID=136 TYPE=16 X=245 Y=15 W=40 H=20:,REV_LBL:C(64*=0):ID=135 TYPE=17 X=190 Y=15 W=50 H=20:"

 return ""
 fnend

startup:
LET temp$=STBL("INHOUSE",ERR=*NEXT)
LET inhouse=(temp$="1")
server_name$=""
if inhouse then 
 server_name$=info(3,4),p=pos("."=server_name$)
 if p then server_name$=server_name$(1,p-1)
 server_name$="["+cvs(server_name$,3)+"]"
fi

REM ' Temporary files go here
LET temp_dir$=STBL("TEMP",ERR=*NEXT)

LET cc_cmd$=STBL("CC_CMD",ERR=*NEXT)
LET cc_dir$=STBL("CC_DIR",ERR=*NEXT)

LET win_id_login$=fngb__win_id$(gb__win.login)
DIM win_login$:fngb__template$(win_id_login$)

LET edit_sn_color$="BLACK"
LET item_color$="BLACK"

REM ' Hide the Exit button in a browser
IF !(POS(" 5 "=SYS)) AND INFO(3,6)="2" THEN LET ctl_id=NUM(FATTR(win_login$,"Exit","ID")); PRINT (gb__sysgui)'CONTEXT'(gb__win.login),'HIDE'(ctl_id)

REM ' Set Window Focus
LET focus_id=NUM(FATTR(win_login$,"User_ID","ID"))
new_context=gb__win.login
old_context=splash
gosub show_window

LET logged_in=0

REM ' defined functions
DEF fndate$(julian)=CHR(ASC(DATE(julian:"%Yp"))+32)+CHR(ASC(DATE(julian:"%Mp"))+32)+CHR(ASC(DATE(julian:"%Dp"))+32)

DEF fnnum(tempnum$)
  RETURN NUM(tempnum$,ERR=*next)
  RETURN 0
FNEND

DEF fnosdesc$(x$)=CVS(csm03.description$,3)+" [Port "+csm03.port_id$(1,4)+"]"

def fnjul(yyyymmdd$)
  xjul=0,xy=0,xm=0,xd=0
  xy=NUM(yyyymmdd$(1,4),ERR=*next)
  xm=NUM(yyyymmdd$(5,2),ERR=*next)
  xd=NUM(yyyymmdd$(7,2),ERR=*next)
  if xy*xm*xd then xjul=jul(xy,xm,xd)
  return xjul
fnend

def fnaonjul(ymd$)
  y=1900+asc(ymd$(1))-32,m=asc(ymd$(2))-32,d=asc(ymd$(3))-32
  IF m<1 OR d<1 THEN LET jd=0 ELSE LET jd=JUL(y,m,d)
  return jd
fnend

def fnaondate$(ymd$)
  jd=fnaonjul(ymd$)
  IF jd=0 THEN LET d$="Unknown" ELSE LET d$=DATE(Jd:"%D %Ms %Yl")
  return d$
fnend


rem ' -----------------------------------------------------------------
rem ' fnGetImage!
rem ' -----------------------------------------------------------------
rem Function called to get an image
def fnGetImage!(image$)
  getImage! = NULL()

    getImage! = imageHashMap!.get(image$)
  if (getImage! <> NULL()) then
     return getImage!
  endif   

    REM Get a reference to sysgui and the image manager
  imageManager! = sysgui!.getImageManager()

    REM Determine if running in an Applet or Web Start
  if info(3,6) = "2" or info(3,6) = "3" then
    REM Running in an Applet or Web Start, load image from client jar
    getImage! = imageManager!.loadImageFromClientJar(image$)
  else
    REM Running in an Applet or Web Start, load image server
    getImage! = imageManager!.loadImageFromFile(image$)
  endif

    REM Add the image to the hash map
  if (getImage! <> NULL()) then
     imageHashMap!.put(image$, getImage!)
  endif   

    REM Return the image
  return getImage!

  fnend

rem ' -----------------------------------------------------------------
rem ' fnAddImageControl!
rem ' -----------------------------------------------------------------
rem Function called to add an image control to the window
def fnAddImageControl!(curContext,x,y,width,height,image$)
  image!     = NULL()
  imageCtrl! = NULL()

    REM Get the current window
  window! = sysgui!.getWindow(curContext)

    REM Get the specified image
  image! = fnGetImage!(image$)

    REM Add the image control if the window and image are not NULL
  if (window! <> NULL() and image! <> NULL()) then
    imageCtrl! = window!.addImageCtrl(window!.getAvailableControlID(),x,y,width,height,image!)
  endif

    REM Return the image control
  return imageCtrl!
fnend

rem ' -----------------------------------------------------------------
rem ' fnSetToolButtonImage
rem ' -----------------------------------------------------------------
rem Function called to set an image for a tool button
def fnSetToolButtonImage(curContext,toolButtonID,image$)
  image!      = NULL()
  window!     = NULL()
  toolButton! = NULL()

    REM Get the current window
  window! = sysgui!.getWindow(curContext)
  if (window! <> NULL()) then
    toolButton! = window!.getControl(toolButtonID)
  endif

    REM Get the specified image
  image! = fnGetImage!(image$)

    REM Add the image to the tool button, if the tool button and image are not NULL
  if (toolButton! <> NULL() and image! <> NULL()) then
    toolButton!.setImage(image!)
    return 1
  endif

  return 0
fnend

rem ' -----------------------------------------------------------------
rem ' fnAddImagesSetBorder
rem ' -----------------------------------------------------------------
rem Function called to add an images and set the border for the passed window
def fnAddImagesSetBorder(curContext)
  returnCode = 0

  REM Determine the current window
  switch curContext
    case 0
      REM '(SPLASH)
      imageControl! = fnAddImageControl!(curContext,0,0,500,400,"bcomsplash.png")
      returnCode = 1
      break
    case 1
      REM ' Form ID 100 (LOGIN)
      imageControl! = fnAddImageControl!(curContext,104,20,291,100,"bcomlogo.png")
      returnCode = 1
      break
    case 2
      REM ' Form ID 101 (MAIN)
      imageControl! = fnAddImageControl!(curContext,50,25,44,40,"CDs.png")
      imageControl! = fnAddImageControl!(curContext,50,126,42,35,"licproduct.png")
      imageControl! = fnAddImageControl!(curContext,50,230,42,35,"cartA.png")
      imageControl! = fnAddImageControl!(curContext,50,305,42,35,"accountinfo.png")
      returnCode = 1
      break
    case 3
      REM ' Form ID 102 (VIEW_SN)
      imageControl! = fnAddImageControl!(curContext,340,190,150,94,"viewlicproduct.png")
      returnCode = 1
      break
    case 4
      REM ' Form ID 103 (EDIT_SN)
      returnCode = fnSetToolButtonImage(curContext,1020,"calendar.png")
      break
    case 5
      REM ' Form ID 104 (ITEM)
      returnCode = fnSetToolButtonImage(curContext,232,"calendar.png")
      break
    case 6
      REM ' Form ID 105 (CART)
      imageControl! = fnAddImageControl!(curContext,36,60,35,30,"cart.png")
      imageControl! = fnAddImageControl!(curContext,36,157,40,35,"actualcart.png")
      returnCode = 1
      break
    case 7
      REM ' Form ID 106 (CHECKOUT_1)
      break
    case 8
      REM ' Form ID 107 (SHIP_USA)
      break
    case 9
      REM ' Form ID 108 (SHIP_INTL)
      break
    case 10
      REM ' Form ID 109 (CHECKOUT_2)
      imageControl! = fnAddImageControl!(curContext,260,113,50,31,"visa.png")
      imageControl! = fnAddImageControl!(curContext,260,149,50,31,"mastercard.png")
      imageControl! = fnAddImageControl!(curContext,260,186,50,31,"amex.png")
      returnCode = 1
      break
    case 11
      REM ' Form ID 110 (ACCOUNT)
      break
    case 12
      REM ' Form ID 111 (HISTORY)
      break
    case 13
      REM ' Form ID 112 (CLIENTS)
      break
    case 14
      REM ' Form ID 113 (FIND_SN)
      break
    case 15
      REM ' Form ID 114 (CREDIT_CARD)
      imageControl! = fnAddImageControl!(curContext,112,30,291,100,"logo.png")
      imageControl! = fnAddImageControl!(curContext,90,210,50,31,"visa.png")
      imageControl! = fnAddImageControl!(curContext,90,250,50,31,"mastercard.png")
      imageControl! = fnAddImageControl!(curContext,90,290,50,31,"amex.png")
      returnCode = 1
      break
    case 16
      REM ' Form ID XXX (EMPTY)
      break
    case 17
      REM ' Form ID 116 (reset_license)
      break
    case 18
      REM ' Form ID 117 (trade_select)
      break
    case 19
      REM ' Form ID 118 (TRADE)
      returnCode = fnSetToolButtonImage(curContext,146,"calendar.png")
      break
    case 20
      REM ' Form ID 119 (send_rpt)
      break
    case 21
      REM ' Form ID 120 (renewal)
      break
    case default
      break
  swend    

  REM Determine if running in an Applet
  if info(3,6) = "2" then
    REM Get the current window and remove it's border
    window! = sysgui!.getWindow(curContext)
    if (window! <> NULL()) then
      window!.setTitleBarVisible(0)
    endif
  endif

    return returnCode

  fnend

    REM ' ---------------------------------------------------------------
    REM ' Event Loop
    REM ' ---------------------------------------------------------------

    DIM gb__generic$:NOTICETPL(0,0); REM ' generic notice template
    LET gb__eoj=0

    REPEAT
        READ RECORD (gb__sysgui,SIZ=gb__event,ERR=gb__event_loop_end)gb__event$
        IF gb__event.code$="N" THEN LET gb__generic$=NOTICE(gb__sysgui,gb__event.x,ERR=*CONTINUE); DIM gb__notice$:NOTICETPL(gb__generic.objtype,gb__event.flags); LET gb__notice$=gb__generic$

        REM ' Get Window ID from event context
        LET gb__win_id$=fngb__win_id$(gb__event.context)
        IF gb__win_id$=$$ THEN CONTINUE; REM ' unknown context -- ignore

        REM ' Handle events for Window ID 100
        WHILE gb__win_id$="100"
            IF gb__event.id=1 AND gb__event.code$="B" THEN GOSUB W100_C1_PUSH_BUTTON; BREAK
            IF gb__event.id=2 AND gb__event.code$="B" THEN GOSUB W100_C2_PUSH_BUTTON; BREAK
            BREAK; REM ' Catch unhandled events
        WEND; REM ' End of Window ID 100

    REM ' Handle events for Window ID 101
    WHILE gb__win_id$="101"
        IF gb__event.id=112 AND gb__event.code$="B" THEN GOSUB W101_C112_PUSH_BUTTON; BREAK
        IF gb__event.id=116 AND gb__event.code$="B" THEN GOSUB W101_C116_PUSH_BUTTON; BREAK
        IF gb__event.id=117 AND gb__event.code$="B" THEN GOSUB W101_C117_PUSH_BUTTON; BREAK
        IF gb__event.id=119 AND gb__event.code$="B" THEN GOSUB W101_C119_PUSH_BUTTON; BREAK
        IF gb__event.id=118 AND gb__event.code$="B" THEN GOSUB W101_C118_PUSH_BUTTON; BREAK
        IF gb__event.id=120 AND gb__event.code$="B" THEN GOSUB W101_C120_PUSH_BUTTON; BREAK
        IF gb__event.id=1018 AND gb__event.code$="B" THEN GOSUB W101_C1018_PUSH_BUTTON; BREAK

        BREAK; REM ' Catch unhandled events
    WEND; REM ' End of Window ID 101

REM ' Handle events for Window ID 102
WHILE gb__win_id$="102"
    IF gb__event.id=181 AND gb__event.code$="B" THEN GOSUB W102_C181_PUSH_BUTTON; BREAK
    IF gb__event.id=165 AND gb__event.code$="B" THEN GOSUB W102_C165_PUSH_BUTTON; BREAK
    IF gb__event.id=166 AND gb__event.code$="B" THEN GOSUB W102_C166_PUSH_BUTTON; BREAK
    IF gb__event.id=2 AND gb__event.code$="B" THEN GOSUB W102_C2_PUSH_BUTTON; BREAK
    IF gb__event.id=100 AND gb__event.code$="N" AND gb__event.flags=1 THEN GOSUB W102_C100_INPUTE_KEY; BREAK
    IF gb__event.id=102 AND gb__event.code$="B" THEN GOSUB W102_C102_PUSH_BUTTON; BREAK
    IF gb__event.id=101 AND gb__event.code$="B" THEN GOSUB W102_C101_PUSH_BUTTON; BREAK
    BREAK; REM ' Catch unhandled events
WEND; REM ' End of Window ID 102

REM ' Handle events for Window ID 103
WHILE gb__win_id$="103"
    IF gb__event.id=118 AND gb__event.code$="N" AND gb__event.flags=2 THEN GOSUB W103_C118_LIST_SELECT; BREAK
    IF gb__event.id=127 AND gb__event.code$="N" AND gb__event.flags=2 THEN GOSUB W103_C127_LIST_SELECT; BREAK
    IF gb__event.id=135 AND gb__event.code$="N" AND gb__event.flags=2 THEN GOSUB W103_C135_LIST_SELECT; BREAK
    IF gb__event.id=138 AND gb__event.code$="N" AND gb__event.flags=2 THEN GOSUB W103_C138_LIST_SELECT; BREAK
    IF gb__event.id=141 AND gb__event.code$="N" AND gb__event.flags=2 THEN GOSUB W103_C141_LIST_SELECT; BREAK
    IF gb__event.id=1 AND gb__event.code$="B" THEN GOSUB W103_C1_PUSH_BUTTON; BREAK
    IF gb__event.id=2 AND gb__event.code$="B" THEN GOSUB W103_C2_PUSH_BUTTON; BREAK
    IF gb__event.id=1002 AND gb__event.code$="B" THEN GOSUB W103_C1002_PUSH_BUTTON; BREAK
    IF gb__event.id=1022 AND gb__event.code$="B" THEN GOSUB W103_C1022_PUSH_BUTTON; BREAK
    IF gb__event.id=147 AND gb__event.code$="f" AND gb__event.flags=0 THEN GOSUB W103_C147_LOST_FOCUS; BREAK
    IF gb__event.id=1008 AND gb__event.code$="c" AND gb__event.flags=1 THEN GOSUB W103_C1008_CHECK_ON; BREAK
    IF gb__event.id=1008 AND gb__event.code$="c" AND gb__event.flags=0 THEN GOSUB W103_C1008_CHECK_OFF; BREAK
    IF gb__event.id=1012 AND gb__event.code$="f" AND gb__event.flags=0 THEN GOSUB W103_C1012_LOST_FOCUS; BREAK
    IF gb__event.id=160 AND gb__event.code$="f" AND gb__event.flags=0 THEN GOSUB W103_C160_LOST_FOCUS; BREAK
    if gb__event.id=1009 and gb__event.code$="f" and gb__event.flags=0 then gosub W103_C1009_LOST_FOCUS; break
    if gb__event.id=1009 and gb__event.code$="f" and gb__event.flags=1 then gosub W103_C1009_GOT_FOCUS; break
    if gb__event.id=1020 and gb__event.code$="b" then GOSUB W103_C1020_TOOL_BUTTON; BREAK
    IF gb__event.id=1017 AND gb__event.code$="c" AND gb__event.flags=1 THEN GOSUB W103_C1017_CHECK_ON; BREAK
    IF gb__event.id=1017 AND gb__event.code$="c" AND gb__event.flags=0 THEN GOSUB W103_C1017_CHECK_OFF; BREAK
    IF gb__event.id=1029 AND gb__event.code$="c" AND gb__event.flags=1 THEN GOSUB W103_C1029_CHECK_ON; BREAK
    IF gb__event.id=1029 AND gb__event.code$="c" AND gb__event.flags=0 THEN GOSUB W103_C1029_CHECK_OFF; BREAK
    BREAK; REM ' Catch unhandled events
WEND; REM ' End of Window ID 103

REM ' Handle events for Window ID 104
WHILE gb__win_id$="104"
    IF gb__event.id=2 AND gb__event.code$="B" THEN GOSUB W104_C2_PUSH_BUTTON; BREAK
    IF gb__event.id=200 AND gb__event.code$="B" THEN GOSUB W104_C200_PUSH_BUTTON; BREAK
    IF gb__event.id=99 AND gb__event.code$="N" AND gb__event.flags=2 THEN GOSUB W104_C99_LIST_SELECT; BREAK
    IF gb__event.id=101 AND gb__event.code$="N" AND gb__event.flags=2 THEN GOSUB W104_C101_LIST_SELECT; BREAK
    IF gb__event.id=103 AND gb__event.code$="N" AND gb__event.flags=2 THEN GOSUB W104_C103_LIST_SELECT; BREAK
    IF gb__event.id=112 AND gb__event.code$="N" AND gb__event.flags=2 THEN GOSUB W104_C112_LIST_SELECT; BREAK
    IF gb__event.id=105 AND gb__event.code$="N" AND gb__event.flags=2 THEN GOSUB W104_C105_LIST_SELECT; BREAK
    IF gb__event.id=121 AND gb__event.code$="f" AND gb__event.flags=0 THEN GOSUB W104_C121_LOST_FOCUS; BREAK
    IF gb__event.id=124 AND gb__event.code$="f" AND gb__event.flags=0 THEN GOSUB W104_C124_LOST_FOCUS; BREAK
    IF gb__event.id=126 AND gb__event.code$="f" AND gb__event.flags=0 THEN GOSUB W104_C126_LOST_FOCUS; BREAK
    IF gb__event.id=1 AND gb__event.code$="B" THEN GOSUB W104_C1_PUSH_BUTTON; BREAK
    IF gb__event.id=202 AND gb__event.code$="c" AND gb__event.flags=1 THEN GOSUB W104_C202_CHECK_ON; BREAK
    IF gb__event.id=202 AND gb__event.code$="c" AND gb__event.flags=0 THEN GOSUB W104_C202_CHECK_OFF; BREAK
    if gb__event.id=204 and gb__event.code$="f" and gb__event.flags=0 then gosub W104_C204_LOST_FOCUS; break
    if gb__event.id=204 and gb__event.code$="f" and gb__event.flags=1 then gosub W104_C204_GOT_FOCUS; break
    if gb__event.id=232 and gb__event.code$="b" then GOSUB W104_C232_TOOL_BUTTON; break
    IF gb__event.id=233 AND gb__event.code$="c" AND gb__event.flags=1 THEN GOSUB W104_C233_CHECK_ON; BREAK
    IF gb__event.id=233 AND gb__event.code$="c" AND gb__event.flags=0 THEN GOSUB W104_C233_CHECK_OFF; BREAK
    IF gb__event.id=234 AND gb__event.code$="c" AND gb__event.flags=1 THEN GOSUB W104_C234_CHECK_ON; BREAK
    IF gb__event.id=234 AND gb__event.code$="c" AND gb__event.flags=0 THEN GOSUB W104_C234_CHECK_OFF; BREAK
    BREAK; REM ' Catch unhandled events
WEND; REM ' End of Window ID 104

REM ' Handle events for Window ID 105
WHILE gb__win_id$="105"
    IF gb__event.id=113 AND gb__event.code$="B" THEN GOSUB W105_C113_PUSH_BUTTON; BREAK
    IF gb__event.id=114 AND gb__event.code$="B" THEN GOSUB W105_C114_PUSH_BUTTON; BREAK
    IF gb__event.id=2 AND gb__event.code$="B" THEN GOSUB W105_C2_PUSH_BUTTON; BREAK
    IF gb__event.id=118 AND gb__event.code$="B" THEN GOSUB W105_C118_PUSH_BUTTON; BREAK
    IF gb__event.id=99 AND gb__event.code$="N" AND gb__event.flags=3 THEN GOSUB W105_C99_GRID_DCLICK; BREAK
    IF gb__event.id=99 AND gb__event.code$="N" AND gb__event.flags=12 THEN GOSUB W105_C99_GRID_KEYPRESS; BREAK
    IF gb__event.id=119 AND gb__event.code$="B" THEN GOSUB W105_C119_PUSH_BUTTON; BREAK
    IF gb__event.id=100 AND gb__event.code$="B" THEN GOSUB W105_C100_PUSH_BUTTON; BREAK
    IF gb__event.id=165 AND gb__event.code$="B" THEN GOSUB W105_C165_PUSH_BUTTON; BREAK
    BREAK; REM ' Catch unhandled events
WEND; REM ' End of Window ID 105

REM ' Handle events for Window ID 106
WHILE gb__win_id$="106"
    IF gb__event.id=904 AND gb__event.code$="B" THEN GOSUB W106_C904_PUSH_BUTTON; BREAK
    IF gb__event.id=905 AND gb__event.code$="B" THEN GOSUB W106_C905_PUSH_BUTTON; BREAK
    IF gb__event.id=906 AND gb__event.code$="B" THEN GOSUB W106_C906_PUSH_BUTTON; BREAK
    IF gb__event.id=2 AND gb__event.code$="B" THEN GOSUB W106_C2_PUSH_BUTTON; BREAK
    IF gb__event.id=1 AND gb__event.code$="B" THEN GOSUB W106_C1_PUSH_BUTTON; BREAK
    BREAK; REM ' Catch unhandled events
WEND; REM ' End of Window ID 106

REM ' Handle events for Window ID 107
WHILE gb__win_id$="107"
    IF gb__event.id=2 AND gb__event.code$="B" THEN GOSUB W107_C2_PUSH_BUTTON; BREAK
    IF gb__event.id=1 AND gb__event.code$="B" THEN GOSUB W107_C1_PUSH_BUTTON; BREAK
    BREAK; REM ' Catch unhandled events
WEND; REM ' End of Window ID 107

REM ' Handle events for Window ID 108
WHILE gb__win_id$="108"
    IF gb__event.id=2 AND gb__event.code$="B" THEN GOSUB W108_C2_PUSH_BUTTON; BREAK
    IF gb__event.id=1 AND gb__event.code$="B" THEN GOSUB W108_C1_PUSH_BUTTON; BREAK
    BREAK; REM ' Catch unhandled events
WEND; REM ' End of Window ID 108

REM ' Handle events for Window ID 109
WHILE gb__win_id$="109"
    IF gb__event.id=165 AND gb__event.code$="B" THEN GOSUB W109_C165_PUSH_BUTTON; BREAK
    IF gb__event.id=1 AND gb__event.code$="B" THEN GOSUB W109_C1_PUSH_BUTTON; BREAK
    IF gb__event.id=2 AND gb__event.code$="B" THEN GOSUB W109_C2_PUSH_BUTTON; BREAK
    IF gb__event.id=141 AND gb__event.code$="N" AND gb__event.flags=2 THEN GOSUB W109_C141_LIST_SELECT; BREAK
    IF gb__event.id=101 AND gb__event.code$="c" AND gb__event.flags=1 THEN GOSUB W109_C101_CHECK_ON; BREAK
    IF gb__event.id=136 AND gb__event.code$="c" AND gb__event.flags=1 THEN GOSUB W109_C136_CHECK_ON; BREAK
    BREAK; REM ' Catch unhandled events
WEND; REM ' End of Window ID 109

REM ' Handle events for Window ID 110
WHILE gb__win_id$="110"
    IF gb__event.id=106 AND gb__event.code$="N" AND gb__event.flags=3 THEN GOSUB W110_C106_GRID_DCLICK; BREAK
    IF gb__event.id=2 AND gb__event.code$="B" THEN GOSUB W110_C2_PUSH_BUTTON; BREAK
    IF gb__event.id=111 AND gb__event.code$="B" THEN GOSUB W110_C111_PUSH_BUTTON; BREAK
    IF gb__event.id=1 AND gb__event.code$="B" THEN GOSUB W110_C1_PUSH_BUTTON; BREAK
    IF gb__event.id=121 and gb__event.code$="B" then gosub w110_c121_push_button; break
    IF gb__event.id=3 AND gb__event.code$="B" THEN GOSUB W110_C3_PUSH_BUTTON; BREAK
    BREAK; REM ' Catch unhandled events
WEND; REM ' End of Window ID 110

REM ' Handle events for Window ID 111
WHILE gb__win_id$="111"
    IF gb__event.id=2 AND gb__event.code$="B" THEN GOSUB W111_C2_PUSH_BUTTON; BREAK
    IF gb__event.id=113 AND gb__event.code$="B" THEN GOSUB W111_C113_PUSH_BUTTON; BREAK
    IF gb__event.id=114 AND gb__event.code$="N" AND gb__event.flags=2 THEN GOSUB W111_C114_TAB_SELECT; BREAK
    IF gb__event.id=116 AND gb__event.code$="B" THEN GOSUB W111_C116_PUSH_BUTTON; BREAK
    BREAK; REM ' Catch unhandled events
WEND; REM ' End of Window ID 111

REM ' Handle events for Window ID 112
WHILE gb__win_id$="112"
    IF gb__event.id=100 AND gb__event.code$="N" AND gb__event.flags=3 THEN GOSUB W112_C100_GRID_DCLICK; BREAK
    IF gb__event.id=2 AND gb__event.code$="B" THEN GOSUB W112_C2_PUSH_BUTTON; BREAK
    BREAK; REM ' Catch unhandled events
WEND; REM ' End of Window ID 112

REM ' Handle events for Window ID 113
WHILE gb__win_id$="113"
    IF gb__event.id=1 AND gb__event.code$="B" THEN GOSUB W113_C1_PUSH_BUTTON; BREAK
    IF gb__event.id=111 AND gb__event.code$="N" AND gb__event.flags=3 THEN GOSUB W113_C111_GRID_DCLICK; BREAK
    IF gb__event.id=2 AND gb__event.code$="B" THEN GOSUB W113_C2_PUSH_BUTTON; BREAK
    IF gb__event.id=110 AND gb__event.code$="B" THEN GOSUB W113_C110_PUSH_BUTTON; BREAK
    BREAK; REM ' Catch unhandled events
WEND; REM ' End of Window ID 113

REM ' Handle events for Window ID 114
WHILE gb__win_id$="114"
    IF gb__event.id=2 AND gb__event.code$="B" THEN GOSUB W114_C2_PUSH_BUTTON; BREAK
    IF gb__event.id=200 AND gb__event.code$="B" THEN GOSUB W114_C200_PUSH_BUTTON; BREAK
    IF gb__event.id=201 AND gb__event.code$="B" THEN GOSUB W114_C201_PUSH_BUTTON; BREAK
    BREAK; REM ' Catch unhandled events
WEND; REM ' End of Window ID 114

REM ' Handle events for Window ID 116
WHILE gb__win_id$="116"
    IF gb__event.id=1 AND gb__event.code$="B" THEN GOSUB W116_C1_PUSH_BUTTON; BREAK
    IF gb__event.id=2 AND gb__event.code$="B" THEN GOSUB W116_C2_PUSH_BUTTON; BREAK
    BREAK; REM ' Catch unhandled events
WEND; REM ' End of Window ID 116

REM ' Handle events for Window ID 117
WHILE gb__win_id$="117"
    IF gb__event.id=100 AND gb__event.code$="l" AND gb__event.flags=0 THEN GOSUB W117_C100_LIST_CLICK; BREAK
    IF gb__event.id=101 AND gb__event.code$="l" AND gb__event.flags=0 THEN GOSUB W117_C101_LIST_CLICK; BREAK
    IF gb__event.id=104 AND gb__event.code$="B" THEN GOSUB W117_C104_PUSH_BUTTON; BREAK
    IF gb__event.id=105 AND gb__event.code$="B" THEN GOSUB W117_C105_PUSH_BUTTON; BREAK
    IF gb__event.id=106 AND gb__event.code$="B" THEN GOSUB W117_C106_PUSH_BUTTON; BREAK
    IF gb__event.id=107 AND gb__event.code$="B" THEN GOSUB W117_C107_PUSH_BUTTON; BREAK
    IF gb__event.id=109 AND gb__event.code$="B" THEN GOSUB W117_C109_PUSH_BUTTON; BREAK
    IF gb__event.id=1 AND gb__event.code$="B" THEN GOSUB W117_C1_PUSH_BUTTON; BREAK
    IF gb__event.id=119 AND gb__event.code$="B" THEN GOSUB W117_C119_PUSH_BUTTON; BREAK
    BREAK; REM ' Catch unhandled events
WEND; REM ' End of Window ID 117

REM ' Handle events for Window ID 118
WHILE gb__win_id$="118"
    IF gb__event.id=118 AND gb__event.code$="N" AND gb__event.flags=2 THEN GOSUB W118_C118_LIST_SELECT; BREAK
    IF gb__event.id=2 AND gb__event.code$="B" THEN GOSUB W118_C2_PUSH_BUTTON; BREAK
    IF gb__event.id=1015 AND gb__event.code$="B" THEN GOSUB W118_C1015_PUSH_BUTTON; BREAK
    IF gb__event.id=127 AND gb__event.code$="N" AND gb__event.flags=2 THEN GOSUB W118_C127_LIST_SELECT; BREAK
    IF gb__event.id=135 AND gb__event.code$="N" AND gb__event.flags=2 THEN GOSUB W118_C135_LIST_SELECT; BREAK
    IF gb__event.id=138 AND gb__event.code$="N" AND gb__event.flags=2 THEN GOSUB W118_C138_LIST_SELECT; BREAK
    IF gb__event.id=141 AND gb__event.code$="N" AND gb__event.flags=2 THEN GOSUB W118_C141_LIST_SELECT; BREAK
    if gb__event.id=142 and gb__event.code$="f" and gb__event.flags=0 then gosub W118_C142_LOST_FOCUS; break
    if gb__event.id=143 and gb__event.code$="f" and gb__event.flags=0 then gosub W118_C143_LOST_FOCUS; break
    if gb__event.id=145 and gb__event.code$="f" and gb__event.flags=0 then gosub W118_C145_LOST_FOCUS; break
    if gb__event.id=145 and gb__event.code$="f" and gb__event.flags=1 then gosub W118_C145_GOT_FOCUS; break
    if gb__event.id=146 and gb__event.code$="b" then gosub W118_C146_TOOL_BUTTON; break
    IF gb__event.id=200 AND gb__event.code$="B" THEN GOSUB W118_C200_PUSH_BUTTON; BREAK
    IF gb__event.id=1008 AND gb__event.code$="c" AND gb__event.flags=1 THEN GOSUB W118_C1008_CHECK_ON; BREAK
    IF gb__event.id=1008 AND gb__event.code$="c" AND gb__event.flags=0 THEN GOSUB W118_C1008_CHECK_OFF; BREAK
    IF gb__event.id=1 AND gb__event.code$="B" THEN GOSUB W118_C1_PUSH_BUTTON; BREAK
    BREAK; REM ' Catch unhandled events
WEND; REM ' End of Window ID 118

REM ' Handle events for Window ID 119
WHILE gb__win_id$="119"
    IF gb__event.id=1 AND gb__event.code$="B" THEN GOSUB W119_C1_PUSH_BUTTON; BREAK
    IF gb__event.id=2 AND gb__event.code$="B" THEN GOSUB W119_C2_PUSH_BUTTON; BREAK
    BREAK; REM ' Catch unhandled events
WEND; REM ' End of Window ID 119
REM ' Handle events for Window ID 120
WHILE gb__win_id$="120"
    IF gb__event.id=1 AND gb__event.code$="B" THEN GOSUB W120_C1_PUSH_BUTTON; BREAK
    IF gb__event.id=2 AND gb__event.code$="B" THEN GOSUB W120_C2_PUSH_BUTTON; BREAK
    BREAK
WEND

UNTIL gb__eoj

gb__event_loop_end: REM ' -------------------------------------

REM ' -----------------------------------------------------------------
REM ' EOJ
REM ' -----------------------------------------------------------------

IF INFO(3,2)="thines" THEN ESCAPE
if tcb(13) then exit else RELEASE

REM gb_eoj.cod - GUIBuilder generated programs: End of Job
REM Copyright (C) 1998-2000 BASIS International Ltd.  All rights reserved.
REM 
REM ***** P R O G R A M   E X I T **************************************
REM 
gb__eoj: 
IF INFO(3,2)="thines" THEN ESCAPE
if tcb(13) then exit else RELEASE

REM gb_err.cod - GUIBuilder generated programs: Error handler
REM Copyright (C) 1998-2000 BASIS International Ltd.  All rights reserved.
REM 
REM ***** E R R O R   H A N D L E R ************************************
REM 
gb__err: 
seterr gb__err2
IF INFO(3,2)="thines" THEN ESCAPE
errlog$="/usr/local/ec/ec_error.log"
errmsg$="Error "+str(err)+" in "+str(tcb(5))
rem IF INFO(3,2)="thines" THEN i=msgbox(errmsg$,0,"")
errchan=unt
exists=0
open(errchan,err=*next)errlog$;exists=1
if exists=0 then string errlog$;open(errchan,err=*next)errlog$;exists=1
while exists
  read(errchan,err=*break)x$
wend
d$=date(0)
t$=date(0:"%hz:%mz")
print(errchan)d$+" "+t$+" -- "+errmsg$+" -- Cust: "+firm_id$+" "+cust_num$+" "+user_code$
close(errchan)
gb__err2: 
if tcb(13) then exit else RELEASE

REM gb_esc.cod - GUIBuilder generated programs: Escape handler
REM Copyright (C) 1998-2000 BASIS International Ltd.  All rights reserved.
REM 
REM ***** E S C A P E   H A N D L E R ***********************************
REM 
gb__esc: 
IF INFO(3,2)="thines" THEN ESCAPE
if tcb(13) then exit else RELEASE

REM ' -----------------------------------------------------------------
REM ' Init Account
REM ' -----------------------------------------------------------------

Init_Account: 

REM ' win_account$ = fngb__get_screen$(win_id_account$,win_account$)
LET win_account.email$=cvs(ecm01.e_mail$,3)
LET win_account.email2$=cvs(ecm01.e_mail2$,3)
LET win_account.password$=""
LET win_account.confirm_password$=""
LET win_account$=fngb__put_fields$(win_id_account$,win_account$,"email,email2,password,confirm_password")

IF !(init_credit_card) THEN GOSUB init_credit_card

LET win_account_grid_id=NUM(FATTR(win_account$,"Grid","ID"))

DIM cc_rec$:"cc_key:c(20):SHOW=0:,"+"cc_num:c(16*):ALIGN=0 SHOW=1 LABEL=Card_Number LENGTH=16:,"+"cc_type:c(1*):ALIGN=0 SHOW=1 LABEL=Card_Type LENGTH=16:,"+"cc_name:c(30*):ALIGN=0 SHOW=1 LABEL=Name_On_Card LENGTH=30:,"+"cc_mm:n(2*):ALIGN=0 SHOW=1 LABEL=MM LENGTH=2:,"+"cc_yyyy:n(4*):ALIGN=0 SHOW=1 LABEL=YYYY LENGTH=4:"

IF cc_file THEN CLOSE (cc_file)
LET cc_file=UNT
INITFILE cc_file$
OPEN (cc_file)cc_file$
READ (ecm02,KEY=firm_id$+cust_num$+user_code$,DOM=setup_cc_loop)

setup_cc_loop: 
READ RECORD (ecm02,END=setup_cc_endloop)ecm02$
IF CVS(ecm02.firm_id$,3)<>CVS(firm_id$,3) OR CVS(ecm02.customer_nbr$,3)<>CVS(cust_num$,3) or cvs(ecm02.user_code$,3)<>cvs(user_code$,3) THEN GOTO setup_cc_endloop

LET ccu$="",cce$=CVS(ecm02.credit_card_num$,3)
CALL "BCC.11",ccu$,cce$
IF ccu$="" THEN LET ccu$=cce$
LET cc_rec.cc_num$=fnobscure_cc$(ccu$)
LET cc_rec.cc_key$=ccu$

IF ecm02.cc_type$="V" THEN LET cc_rec.cc_type$="Visa" ELSE IF ecm02.cc_type$="M" THEN LET cc_rec.cc_type$="MasterCard" ELSE IF ecm02.cc_type$="A" THEN LET cc_rec.cc_type$="AmEx" ELSE LET cc_rec.cc_type$=ecm02.cc_type$
LET cc_rec.cc_name$=CVS(ecm02.cc_name$,3)
LET cc_rec.cc_mm$=STR(NUM(ecm02.cc_expires_mo$):"00")
LET cc_rec.cc_yyyy$=STR(NUM(ecm02.cc_expires_yr$):"0000")
WRITE RECORD (cc_file,KEY=cc_rec.cc_key$)cc_rec$
GOTO setup_cc_loop

setup_cc_endloop: 
CLOSE (cc_file)
OPEN (cc_file)cc_file$

LET batch!=sysgui!.get_message_batch()
batch!.addSendMsg(win_account_grid_id,80,cc_file,FATTR(cc_rec$),gb__win.account)
batch!.addSendMsg(win_account_grid_id,81,0,$01$,gb__win.account); REM ' read-only grid
batch!.addSendMsg(win_account_grid_id,49,1,$$,gb__win.account); REM ' highlight row
batch!.addSendMsg(win_account_grid_id,57,1,$$,gb__win.account); REM ' highlight colour
batch!.addSendMsg(win_account_grid_hdr,84,0,$$,gb__win.account); REM ' alignment
REM # batch!.addSendMsg(win_account_grid_hdr,20,0,$$,gb__win.account); rem ' info block
batch!.processAll()

LET init_account=1

RETURN

REM ' -----------------------------------------------------------------
REM ' Init Checkout 1
REM ' -----------------------------------------------------------------

Init_Checkout_1: 

LET win_checkout_1$=fngb__get_screen$(win_id_checkout_1$,win_checkout_1$)

LET win_checkout_1.License_1$=cvs(ecm01.e_mail$,3)
LET win_checkout_1.License_2$=cvs(ecm01.e_mail2$,3)
LET win_checkout_1.Media$=""

LET win_checkout_1.Bill_To_Name$=CVS(tmm01.cont_firm$,3)
LET win_checkout_1.Bill_To_Addr1$=CVS(tmm01.address_1$,3)
LET win_checkout_1.Bill_To_Addr2$=CVS(tmm01.address_2$,3)
LET win_checkout_1.Bill_To_City$=CVS(tmm01.city$,3)
LET win_checkout_1.Bill_To_State$=CVS(tmm01.state$,3)
LET win_checkout_1.Bill_To_Zip$=CVS(tmm01.zip_code$,3)
LET win_checkout_1.Bill_To_Country$=CVS(country.country_name$,3)

LET win_checkout_1.Ship_To_Name$=CVS(tmm01.cont_firm$,3)
LET win_checkout_1.Ship_To_Addr1$=CVS(tmm01.address_1$,3)
LET win_checkout_1.Ship_To_Addr2$=CVS(tmm01.address_2$,3)
LET win_checkout_1.Ship_To_City$=CVS(tmm01.city$,3)
LET win_checkout_1.Ship_To_State$=CVS(tmm01.state$,3)
LET win_checkout_1.Ship_To_Zip$=CVS(tmm01.zip_code$,3)
LET win_checkout_1.Ship_To_Country$=CVS(country.country_name$,3)

LET win_checkout_1$=fngb__put_screen$(win_id_checkout_1$,win_checkout_1$)
LET init_checkout_1=1

RETURN

REM ' -----------------------------------------------------------------
REM ' Init Ship USA
REM ' -----------------------------------------------------------------

Init_Ship_USA: 

LET win_ship_usa$=fngb__get_screen$(win_id_ship_usa$,win_ship_usa$)

LET state_list$="",state=-1,index=-1
READ (states,KEY="",DOM=state_loop)
state_loop: 
READ RECORD (states,ERR=state_endloop)states$
LET state=state+1
LET state_list$=state_list$+states.state_code$+" "+CVS(states.state_name$,3)+$0A$
IF states.state_code$=tmm01.state$ THEN LET index=state
GOTO state_loop
state_endloop: 
IF index>=0 THEN LET state_list$=state_list$+$FF$+STR(index)

LET win_ship_usa.Bill_To_Name$=CVS(tmm01.cont_firm$,3)
LET win_ship_usa.Bill_To_Addr1$=CVS(tmm01.address_1$,3)
LET win_ship_usa.Bill_To_Addr2$=CVS(tmm01.address_2$,3)
LET win_ship_usa.Bill_To_City$=CVS(tmm01.city$,3)
LET win_ship_usa.Bill_To_State$=CVS(tmm01.state$,3)
LET win_ship_usa.Bill_To_Zip$=CVS(tmm01.zip_code$,3)

LET win_ship_usa.Ship_To_Name$=CVS(tmm01.cont_firm$,3)
LET win_ship_usa.Ship_To_Addr1$=CVS(tmm01.address_1$,3)
LET win_ship_usa.Ship_To_Addr2$=CVS(tmm01.address_2$,3)
LET win_ship_usa.Ship_To_City$=CVS(tmm01.city$,3)
LET win_ship_usa.Ship_To_State$=state_list$
LET win_ship_usa.Ship_To_Zip$=CVS(tmm01.zip_code$,3)

LET win_ship_usa.one_day=0
LET win_ship_usa.two_day=0
LET win_ship_usa.three_day=0
IF freight_type$="1" THEN LET win_ship_usa.one_day=1
IF freight_type$="2" THEN LET win_ship_usa.two_day=1
IF freight_type$="3" THEN LET win_ship_usa.three_day=1

LET win_ship_usa$=fngb__put_screen$(win_id_ship_usa$,win_ship_usa$)

LET init_ship_usa=1

RETURN

REM ' -----------------------------------------------------------------
REM ' Init Ship Intl
REM ' -----------------------------------------------------------------

Init_Ship_Intl: 

LET win_ship_intl$=fngb__get_screen$(win_id_ship_intl$,win_ship_intl$)

LET ctry_list$="",ctry=-1,index=-1
dim tmp_country$:fattr(country$)
READ (country,KEY="",knum=1,DOM=ctry_loop)
ctry_loop: 
READ RECORD (country,ERR=ctry_endloop)tmp_country$
LET ctry=ctry+1
LET ctry_list$=ctry_list$+CVS(tmp_country.country_name$,3)+$0A$
IF tmp_country.country_code$=tmm01.country_code$ THEN LET index=ctry
GOTO ctry_loop
ctry_endloop: 
IF index>=0 THEN LET ctry_list$=ctry_list$+$FF$+STR(index)

LET win_ship_intl.Bill_To_Name$=CVS(tmm01.cont_firm$,3)
LET win_ship_intl.Bill_To_Addr1$=CVS(tmm01.address_1$,3)
LET win_ship_intl.Bill_To_Addr2$=CVS(tmm01.address_2$,3)
LET win_ship_intl.Bill_To_City$=CVS(tmm01.city$,3)
LET win_ship_intl.Bill_To_State$=CVS(tmm01.state$,3)
LET win_ship_intl.Bill_To_Zip$=CVS(tmm01.zip_code$,3)
LET win_ship_intl.Bill_To_Country$=CVS(country.country_name$,3)

LET win_ship_intl.Ship_To_Name$=CVS(tmm01.cont_firm$,3)
LET win_ship_intl.Ship_To_Addr1$=CVS(tmm01.address_1$,3)
LET win_ship_intl.Ship_To_Addr2$=CVS(tmm01.address_2$,3)
LET win_ship_intl.Ship_To_City$=CVS(tmm01.city$,3)
LET win_ship_intl.Ship_To_State$=CVS(tmm01.state$,3)
LET win_ship_intl.Ship_To_Zip$=CVS(tmm01.zip_code$,3)
LET win_ship_intl.Ship_To_Country$=ctry_list$

LET win_ship_intl$=fngb__put_screen$(win_id_ship_intl$,win_ship_intl$)

LET init_ship_intl=1

RETURN

REM ' -----------------------------------------------------------------
REM ' Verify Credit Card
REM '
REM ' Note that this routine is specifically designed to accept
REM ' ONLY Visa, MasterCard, and American Express numbers.  It
REM ' rejects other credit card number formats which might be
REM ' valid, including:
REM ' Diner's Club/Carte Blanche - starts with 3, LEN=14
REM ' Discover - starts with 6 (6011), LEN=16
REM ' enRoute - starts with 2 (2014, 2149), LEN=15
REM ' JCB - starts with 3, LEN=16
REM ' JCB - starts with 1800 or 2131, LEN=15
REM ' -----------------------------------------------------------------

Verify_Credit_Card: 

REM ' pass CC$ = credit card number
REM ' return VALID = 0 or 1

LET valid=0
LET l=LEN(cc$)
IF l=0 OR l>16 THEN GOTO cc_done
IF cc$(1,1)<>"3" AND cc$(1,1)<>"4" AND cc$(1,1)<>"5" THEN GOTO cc_done; REM ' not Amex, Visa, or MasterCard
IF cc$(1,1)="3" AND l<>15 THEN GOTO cc_done; REM ' Invalid Amex
IF cc$(1,1)="4" AND l<>16 AND l<>13 THEN GOTO cc_done; REM ' Invalid Visa
IF cc$(1,1)="5" AND l<>16 THEN GOTO cc_done; REM ' Invalid MasterCard
LET sum=NUM(cc$(l,1),ERR=cc_done)
FOR c=l-1 TO 1 STEP -1
    LET digit=NUM(cc$(c,1),ERR=cc_done)
    IF MOD(l-c,2)=1 THEN LET double=digit*2,sum=sum+INT(double/10)+MOD(double,10) ELSE LET sum=sum+digit
NEXT c
LET valid=(MOD(sum,10)=0)
rem if info(3,2)="thines" then valid=1
cc_done: 
RETURN

DEF fnformat_cc$(temp_cc$)
    IF LEN(temp_cc$)=16 THEN RETURN STR(temp_cc$:"XXXX XXXX XXXX XXXX") ELSE IF LEN(temp_cc$)=15 THEN RETURN STR(temp_cc$:"XXXX XXXXXX XXXXX") ELSE IF LEN(temp_cc$)=13 THEN RETURN STR(temp_cc$:"XXXX XXX XXX XXX") ELSE RETURN temp_cc$
FNEND

DEF fnobscure_cc$(temp_cc$)
    IF LEN(temp_cc$)=16 THEN LET temp_cc$=STR(temp_cc$:"XXXX XXXX XXXX XXXX"); LET temp_cc$(1,15)="**** **** ****" ELSE IF LEN(temp_cc$)=15 THEN LET temp_cc$=STR(temp_cc$:"XXXX XXXXXX XXXXX"); LET temp_cc$(1,11)="**** ******" ELSE IF LEN(temp_cc$)=13 THEN LET temp_cc$=STR(temp_cc$:"XXXX XXX XXX XXX"); LET temp_cc$(1,12)="**** *** ***"
    RETURN temp_cc$
FNEND

REM ' -----------------------------------------------------------------
REM ' Show SN
REM ' -----------------------------------------------------------------

Show_SN: 
LET save_context=DEC(CTRL(gb__sysgui))
PRINT (gb__sysgui)'CONTEXT'(gb__win.view_sn)
LET support_only=0
LET win_view_sn$=fngb__get_screen$(win_id_view_sn$,win_view_sn$)
LET win_view_sn.serial_number$=CVS(sn$,3)
LET win_view_sn.authorization$=""
LET win_view_sn.purchase_date$=""
LET win_view_sn.status$=""
LET win_view_sn.product$=""
LET win_view_sn.platform$=""
LET win_view_sn.oslevel$=""
LET win_view_sn.revision$=""
LET win_view_sn.license$=""
LET win_view_sn.users$=""
LET win_view_sn.item_number$=""
LET win_view_sn.description$=""
LET win_view_sn.annual_date$=""
LET win_view_sn.expiration_date$=""
ds_xref$=""
read record(sam2_ds_xref,key=sn$,knum=0,dom=*next)sam2_ds_xref$;ds_xref$=sam2_ds_xref.ds_serial_nbr$

IF CVS(sn$,3)="" THEN GOTO set_focus_view_sn
ok=0
FIND RECORD (snm01,KNUM=0,KEY=sn$,dom=*next)snm01$;ok=1
if ok=0 then
  junk$="M2"+$0a$+cvs(sn$,3)+$0a$
  mb_mode=0
  gosub translate_mbox
  GOTO set_focus_view_sn
fi
IF snm01.firm_id$<>firm_id$ OR snm01.customer_nbr$<>cust_num$ THEN 
  IF inhouse THEN 
    i=MSGBOX(CVS(sn$,3)+" available ONLY for Support sale.",0,firm_id$+cust_num$+" not owner")
    support_only=1 
  ELSE 
    PRINT (gb__sysgui)'SETCURSOR'(0)
    junk$="M3"+$0a$+cvs(sn$,3)+$0a$
    mb_mode=0
    gosub translate_mbox
    sn$=""
    GOTO set_focus_view_sn
  fi
fi
dim snm02$:fattr(snm02$)
READ RECORD (snm02,KNUM=0,KEY=sn$,dom=*next)snm02$
LET auth$="*** Not Available ***"
cur_uncounted=0
READ (snt01,KNUM=0,KEY=sn$,DOM=*next)
while 1
  READ RECORD (snt01,END=*break)snt01$
  IF CVS(snt01.serial_nbr$,3)<>CVS(sn$,3) THEN break
  if cvs(snt01.auth_code$,3)="" THEN continue
  LET auth$=snt01.auth_code$
  p=pos(snt01.fixed_float$="FX")
  if p then cur_uncounted=p-1
wend
new_uncounted=cur_uncounted
contract$=CVS(snm01.contract$,3)
annual_date$=""
expiration_date$=""
GOSUB get_contract_info
IF contract_type$<>"" THEN expiration_date$=DATE(fnjul(smc01.annual_dt$):"%D %Ml %Yl")
IF POS("SM"=contract_type$) THEN 
  annual_date$=expiration_date$
  expiration_date$=DATE(fnjul(smc01.expire_on_dt$):"%D %Ml %Yl")
fi
product_code$=snm01.product$
dim csm01$:fattr(csm01$)
FIND RECORD (csm01,KEY=firm_id$+product_code$,ERR=*next)csm01$
product$=CVS(csm01.description$,3)
sam_required$=csm01.ctr_required$

platform_code$=snm01.platform$
dim csm02$:fattr(csm02$)
FIND RECORD (csm02,KEY=firm_id$+platform_code$,ERR=*next)csm02$
platform$=CVS(csm02.description$,3)

os_level_code$=snm01.os_level$
dim csm03$:fattr(csm03$)
FIND RECORD (csm03,KEY=firm_id$+os_level_code$,ERR=*next)csm03$
os_level$=fnosdesc$(x$)

product_rev_code$=snm01.product_rev$
dim csm04$:fattr(csm04$)
FIND RECORD (csm04,KEY=firm_id$+product_rev_code$,ERR=*next)csm04$
product_rev$=CVS(csm04.description$,3)

license_type_code$=snm01.license_type$
dim csm05$:fattr(csm05$)
FIND RECORD (csm05,KEY=firm_id$+license_type_code$,ERR=*next)csm05$
license_type$=CVS(csm05.description$,3)

DIM item$(20)
item$(1)=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$
ivm_item$=item$
gosub ivm_item
desc$=ivm01.item_desc$

exp_ok$="NNN"
if sam_renew_status<2 and contract_type$="SM1" then 
  ivm_item$(13,3)="EXP"
  gosub ivm_item
  if ivmok then exp_ok$(1,1)="Y"
fi
if csm04.key_or_licen$="L" then exp_ok$(2,1)="Y"
if snm01.license_type$="STD" then exp_ok$(3,1)="Y"

server_sn$=""
REM ' is this serial a linked server or client?
READ (snt02,KNUM=0,KEY=sn$,DOM=*next)
while 1
  k$=KEY(snt02,ERR=*break)
  IF POS(sn$=k$)=1 THEN LET server_sn$=sn$;break
  READ (snt02,KNUM=1,KEY=sn$,DOM=*next)
  k$=KEY(snt02,ERR=*break)
  IF POS(sn$=k$)=1 THEN LET server_sn$=k$(21,20)
  break
wend
win_view_sn.authorization$=auth$
d$=fnaondate$(snm01.orig_sale_date$)
win_view_sn.purchase_date$=d$
win_view_sn.status$=snm01.active_flag$
win_view_sn.product$=product$
win_view_sn.platform$=platform$
win_view_sn.oslevel$=os_level$
win_view_sn.revision$=product_rev$
win_view_sn.license$=license_type$
win_view_sn.users$=STR(snm01.users)
if snm02.users1 then win_view_sn.users$=str(snm02.users1)+" "+snm02.lic_property1$
if snm02.users2 then win_view_sn.users$=win_view_sn.users$+", "+str(snm02.users2)+" "+snm02.lic_property2$
win_view_sn.item_number$=item$
win_view_sn.description$=desc$
win_view_sn.annual_date$=annual_date$
win_view_sn.expiration_date$=expiration_date$
win_view_sn.available_support$=STR(snm01.avail_support)
IF snm01.product$="TAO" THEN win_view_sn.authorization$="N/A",win_view_sn.users$="N/A"

set_focus_view_sn: 
win_view_sn$=fngb__put_screen$(win_id_view_sn$,win_view_sn$)
upd_id=NUM(FATTR(win_view_sn$,"Change","ID"))
rnw_id=NUM(FATTR(win_view_sn$,"renew","ID"))
ctl_id=NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
IF win_view_sn.status$="Y" THEN 
  sn_editable=LEN(sn$)
  PRINT (gb__sysgui)'ENABLE'(upd_id)
  if renewable then print (gb__sysgui)'enable'(rnw_id) else print (gb__sysgui)'disable'(rnw_id)
ELSE 
  sn_editable=0
  PRINT (gb__sysgui)'DISABLE'(upd_id,rnw_id)
fi
PRINT (gb__sysgui)'FOCUS'(ctl_id),'CONTEXT'(save_context)

RETURN

REM ' -----------------------------------------------------------------
REM ' Update Edit SN Price
REM ' Assumes win_edit_sn$ is up to date
REM ' -----------------------------------------------------------------

Update_Edit_SN_Price: 
LET sam_flag=(win_edit_sn.sam_standard$="1")

DIM old_item_code$(20)
LET old_item_code$(1)=old_product_code$+old_platform_code$+old_os_level_code$+old_product_rev_code$+old_license_code$
LET temp_os_level_code$=old_os_level_code$
LET temp_product_rev_code$=old_product_rev_code$

LET temp$=win_edit_sn.product$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(product_list$) THEN LET new_product_code$=product_list$(temp*3+1,3)

LET temp$=win_edit_sn.platform$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(platform_list$) THEN LET new_platform_code$=platform_list$(temp*3+1,3)

LET temp$=win_edit_sn.oslevel$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(os_level_list$) THEN LET new_os_level_code$=os_level_list$(temp*3+1,3),temp_os_level_code$=new_os_level_code$

LET temp$=win_edit_sn.revision$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(revision_list$) THEN LET new_product_rev_code$=revision_list$(temp*3+1,3),temp_product_rev_code$=new_product_rev_code$

LET temp$=win_edit_sn.license$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(license_list$) THEN LET new_license_code$=license_list$(temp*3+1,3)

DIM new_item_code$(20)
LET new_item_code$(1)=new_product_code$+new_platform_code$+new_os_level_code$+new_product_rev_code$+new_license_code$

DIM item$(20)
LET item$(1)=new_item_code$
ivm_item$=item$
gosub ivm_item
if ivmok=0 then 
  ok=0,comments$="**Continue"+$0a$
  if lang$="DE" then comments$="**Fortsetzen"+$0a$
  goto no_price
fi

LET qty=1
DIM type$[0:1],price[0:1]; REM 'dummies - redimensioned in price program

DIM cur_users[2],new_users[2],cur_lprop$[2],new_lprop$[2]
cur_lprop$[0]=snm02.lic_property1$
cur_lprop$[1]=snm02.lic_property2$
cur_users[0]=snm02.users1
cur_users[1]=snm02.users2
if cur_users[0]+cur_users[1]=0 then cur_users[0]=snm01.users
dim csmtmp$:fattr(csm01$)
READ RECORD (csm01,KEY=firm_id$+item$(1,3),DOM=*NEXT)csmtmp$
new_users[0]=fnnum(win_edit_sn.users$)
new_users[1]=fnnum(win_edit_sn.users2$)

LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"runtime,uncounted")
ffun=(win_edit_sn.runtime$="0")
temp$="RF"
p0$="E"+temp$(ffun+1,1)
p1$="S"+temp$(ffun+1,1)
temp$=csmtmp.lic_property1$+csmtmp.lic_property2$+csmtmp.lic_property3$+csmtmp.lic_property4$
if pos(p0$=temp$,2) and new_users[0] then new_lprop$[0]=p0$
if pos(p1$=temp$,2) and new_users[1] then new_lprop$[1]=p1$
gosub user_sort
DIM csm05$:FATTR(csm05$)
READ RECORD (csm05,KEY=firm_id$+new_item_code$(13,3),DOM=*NEXT)csm05$
expiring_license=(csm05.expires$="Y")+(csm05.license_type$="EXP")
DIM csm04$:FATTR(csm04$)
READ RECORD (csm04,KEY=firm_id$+new_item_code$(10,3),DOM=*NEXT)csm04$
if csm04.key_or_licen$="L" then exp_ok$(2,1)="Y" else exp_ok$(2,1)="Y"
if new_license_code$="STD" then exp_ok$(3,1)="Y" else exp_ok$(3,1)="N"
if pos("N"=exp_ok$) then 
  if no_rif then gosub unset_rif
else
  gosub enable_disable_rif
fi
DIM csm03$:FATTR(csm03$)
READ RECORD (csm03,KEY=firm_id$+new_item_code$(7,3),DOM=*NEXT)csm03$
uncounted_ok=(csm03.fixed_lic_flag$="Y" and csm04.key_or_licen$="L")
if uncounted_ok and new_users[0]+new_users[1]=1 then
  PRINT (gb__sysgui)'enable'(uncounted_id)
else
  win_edit_sn.uncounted$="0"
  PRINT (gb__sysgui)'disable'(uncounted_id)
fi
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"uncounted")
cur_un=pos("Y"=win_edit_sn.cur_uncounted$)
new_un=(win_edit_sn.uncounted$="1")
rem 'following causes UNC trans in ec_price if no other transactions
if cur_un<>new_un then uncounted_change=1 else uncounted_change=0
add_tsi=fnnum(win_edit_sn.additional_support$)
cur_item$=old_item_code$,new_item$=new_item_code$
jul_renew=renew_dt!.getValue()
if jul_renew<0 then jul_renew=0
gosub ec_price
IF ok=0 THEN GOTO no_price
PRINT (gb__sysgui)'DISABLE'(renew_dt_id,renew_dt_btn_id) 
if sam_flag and (cvs(contract$,3)="" or sam_renew_status<2) then 
  gosub renew_dt_info 
  if jul_renew=0 then jul_renew=jul_default
  renew_dt!.setValue(jul_renew)
  PRINT (gb__sysgui)'ENABLE'(renew_dt_id,renew_dt_btn_id)
  if jul_renew=jul_default then comments$=comments$+renew_dt_info$
fi
GOSUB total_price
no_price: 
LET win_edit_sn.comments$=comments$
if expiring_license=1 then
  jul_renew=fnjul(smc01.annual_dt$)+csm05.expire_days*(sam_flag<>0)*(ok<>0)
  renew_dt!.setValue(jul_renew)
fi

IF ok THEN 
  win_edit_sn.price$=CVS(STR(price:amount_mask$),3+64) 
  win_edit_sn.listprice$=CVS(STR(listprice:amount_mask$),3+64) 
ELSE  
  win_edit_sn.price$="n/a"
  win_edit_sn.listprice$="n/a"
fi

RETURN

REM ' -----------------------------------------------------------------
REM ' Update Item Price
REM ' Assumes win_item$ is up to date
REM ' -----------------------------------------------------------------
Update_Item_Price: 

LET item_code$="",desc$="",contract$=""
IF item_product_code$="" THEN LET item_code$=item_code$+"---" ELSE LET item_code$=item_code$+item_product_code$; FIND RECORD (csm01,KEY=firm_id$+item_product_code$)csm01$; LET sam_required$=csm01.ctr_required$
IF item_platform_code$="" THEN LET item_code$=item_code$+"---" ELSE LET item_code$=item_code$+item_platform_code$
IF item_os_level_code$="" THEN LET item_code$=item_code$+"---" ELSE LET item_code$=item_code$+item_os_level_code$
IF item_revision_code$="" THEN LET item_code$=item_code$+"---" ELSE LET item_code$=item_code$+item_revision_code$
IF item_license_code$="" THEN LET item_code$=item_code$+"---" ELSE LET item_code$=item_code$+item_license_code$

DIM item$(20)
LET item$(1)=item_code$

ivm_item$=item$
gosub ivm_item
LET desc$=ivm01.item_desc$
LET win_item.item_number$=item_code$
LET win_item.description$=desc$

LET qty=fnnum(win_item.quantity$)
LET users=fnnum(win_item.users$)
LET users2=fnnum(win_item.users2$)
LET sam_flag=(win_item.sam_standard$="1")
LET sam_std_id=NUM(FATTR(win_item$,"Sam_standard","ID"))
LET save_context=DEC(CTRL(gb__sysgui))
PRINT (gb__sysgui)'CONTEXT'(gb__win.item)
LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"runtime,uncounted")
DIM csmtmp$:FATTR(csm01$)
READ RECORD (csm01,KEY=firm_id$+item$(1,3),DOM=*NEXT)csmtmp$
DIM csm03$:FATTR(csm03$)
READ RECORD (csm03,KEY=firm_id$+item$(7,3),DOM=*NEXT)csm03$
uncounted_ok=(csm03.fixed_lic_flag$="Y")
if uncounted_ok and users+users2=1 and uncounted_id then
  PRINT (gb__sysgui)'enable'(uncounted_id)
  if item$(1,3)<>"BAS" and uncounted_chg=0 then win_item.uncounted$="1"
else
  win_item.uncounted$="0"
  PRINT (gb__sysgui)'disable'(uncounted_id)
fi
LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"uncounted")
DIM type$[0:1],price[0:1]; REM ' dummies - redimensioned in price program
DIM cur_users[2],new_users[2],cur_lprop$[2],new_lprop$[2]
new_users[0]=users,new_users[1]=users2
temp$="RF"
ffun=(win_item.runtime$="0")
p0$="E"+temp$(ffun+1,1)
p1$="S"+temp$(ffun+1,1)
temp$=csmtmp.lic_property1$+csmtmp.lic_property2$+csmtmp.lic_property3$+csmtmp.lic_property4$
if pos(p0$=temp$,2) and new_users[0] then new_lprop$[0]=p0$
if pos(p1$=temp$,2) and new_users[1] then new_lprop$[1]=p1$
gosub user_sort
cur_item$="",new_item$=item_code$
jul_renew=renew_dt!.getValue()
if jul_renew<0 then jul_renew=0
gosub ec_price
IF ok=0 THEN GOTO skip_price_total
PRINT (gb__sysgui)'DISABLE'(renew_dt_id,renew_dt_btn_id) 
if sam_flag or rent_item and cvs(contract$,3)="" then 
  gosub renew_dt_info 
  if jul_renew=0 then jul_renew=jul_default
  renew_dt!.setValue(jul_renew)
  PRINT (gb__sysgui)'ENABLE'(renew_dt_id,renew_dt_btn_id)
  if jul_renew=jul_default then comments$=comments$+renew_dt_info$
fi
GOSUB total_price

skip_price_total: 
LET win_item.comments$=comments$
IF ok THEN 
  win_item.price$=CVS(STR(price:amount_mask$),3+64) 
  win_item.listprice$=CVS(STR(listprice:amount_mask$),3+64) 
ELSE 
  win_item.price$="n/a"
  win_item.listprice$="n/a"
fi

RETURN

ec_price:
gosub renew_range
samfactor=sam_flag*(jul_renew-jul(0,0,0))*(jul_renew>=jul_begin and jul_renew<=jul_end)
xday$="0",xday$=stbl("buyback",err=*next)
xchk$=cvs(sn$,3)+":"+date(0:"%Y%Mz%Dz")+":"
px=pos(xchk$=xday$)
if px then xday$=xday$(px+len(xchk$))
xday=0,xday=num(xday$,err=*next)

cntr$=contract$
if sam_active$="N" and sam_renew_status>1 then sam_flag=0,cntr$=""
if sam_flag=0 then xday=0

gosub user_sort
gosub get_discount
if no_rif then new_item$(13,3)="EXP"
xtra$=lang$+$0a$+str(disc_pct+partner_disc)+$0a$+str(add_tsi)+$0a$+"0"+$0a$+str(uncounted_change)+$0a$+str(no_rif)+$0a$+str(sam_renew_status=20)+$0a$
add_tsi=0,uncounted_change=0

CALL "ec_price",firm_id$,cust_num$,qty,cur_item$,cur_users[all],cur_lprop$[all],new_item$,new_users[all],new_lprop$[all],type$[ALL],price[ALL],comments$,arm02,arm10i,csm01,csm02,csm03,csm04,csm05,csm07,csm10,csm13,ivm01,smc01,sam_flag,samfactor,cntr$,nbr_trans,xtra$

LET ok=!(POS("**"=comments$)=1)
p=pos($0a$=comments$)
if p=0 then comments$=comments$+$0a$
if ok=0 then return

if rent_item or pos("RN1"=cur_item$)=13 then
  rn1factor=(jul_renew-jul(0,0,0))/365
  if rn1factor<=0 then rn1factor=1
  for nbr=0 TO nbr_trans
    price[nbr]=price[nbr]*rn1factor
  next nbr
fi

xtra_sam=0,xtra_up=0,xhi=99999
if xday then
  xtra_sam=xhi
  xtra_up=xhi
  xloop=0
  rem 'calculate buyback twice if users changed, use lower amount
  while xloop<2
  xxd=xday
  dim xtype$[2],xprice[2],xu[2],cu[2]
  if xloop=0 then cu[]=cur_users[] else cu[]=new_users[]
  xtra$=lang$+$0a$+str(disc_pct+partner_disc)+$0a$+"0"+$0a$+"0"+$0a$+"0"+$0a$
  CALL "ec_price",firm_id$,cust_num$,qty,"",xu[all],xtype$[all],cur_item$,cu[all],cur_lprop$[all],xtype$[ALL],xprice[ALL],xcomments$,arm02,arm10i,csm01,csm02,csm03,csm04,csm05,csm07,csm10,csm13,ivm01,smc01,sam_flag,xxd,"",xnbr_trans,xtra$
  rem 'calc SAM on extra days, find max update charge
  for tmp=0 to xnbr_trans
    if pos("SM"=xtype$[tmp]) then xtra_sam=min(xprice[tmp],xtra_sam)
    if pos("NEW"=xtype$[tmp]) then xtra_up=min(xprice[tmp],xtra_up)
  next tmp
  if cur_users[0]=new_users[0] and cur_users[1]=new_users[1] then break
  xloop=xloop+1
  wend

  rem 'if SAM>max updt, then substitute lower amt
  if xtra_up=xhi then xtra_up=0
  if xtra_sam=xhi then xtra_sam=0
  if xtra_up>0 and xtra_up*.9<xtra_sam then xtra_sam=xtra_up*.9
fi

upg=-1,ad=0,sm=-1,dsxref_sam=0
for tmp=0 to nbr_trans
  if len(type$[tmp])<4 then continue
  if pos("ADD"=type$[tmp]) then ad=1,xadd=tmp
  if pos("SM"=type$[tmp]) then sm=tmp,price[tmp]=price[tmp]+xtra_sam
  if pos(type$[tmp](1,3)="UPD,UG4")=0 or price[tmp]<=0 then continue
  upg=tmp
next tmp
while ad 
  if cvs(ds_xref$,3)="" or sm<0 then break
  dim dsn$:fattr(snm01$)
  readrecord(snm01,key=ds_xref$,dom=*break)dsn$
  if dsn.active_flag$<>"Y" then ds_xref$="";break
  new_i$=dsn.product$+dsn.platform$+dsn.os_level$+dsn.product_rev$+dsn.license_type$
  cur_i$=new_i$,samfactor=0
  dim ty$[0],pr[0]
  xtra$=lang$+$0a$+str(disc_pct+partner_disc)+$0a$+"0"+$0a$+"0"+$0a$+"0"+$0a$
  CALL "ec_price",firm_id$,cust_num$,qty,cur_i$,cur_users[all],cur_lprop$[all],new_i$,new_users[all],new_lprop$[all],ty$[ALL],pr[ALL],cmts$,arm02,arm10i,csm01,csm02,csm03,csm04,csm05,csm07,csm10,csm13,ivm01,smc01,sam_flag,samfactor,contract$,n_t,xtra$
  for i=0 to n_t
    if pos("SM"=ty$[i]) and pr[i]>0 then price[sm]=price[sm]+pr[i],dsxref_sam=dsxref_sam+pr[i] 
    if pos("ADD"=ty$[i]) and pr[i]>0 then price[xadd]=price[xadd]+pr[i],dsxref_sam=dsxref_sam+pr[i]
  next i
  ad=0
  if dsxref_sam then comments$=comments$+"(Includes"+str(dsxref_sam:"####.00")+" for D/S "+cvs(ds_xref$,3)+")"+$0a$
wend

if upg<0 or sam_flag=0 or cvs(contract$,3)<>"" then return 
splevel=arm02.pricing_level
dim old_u[2],sm_u[2],old_lp$[2],new_lp$[2]
if cvs(new_lprop$[0],3)<>"" then new_lp$[0]=new_lprop$[0] else new_lp$[0]=new_item$(1,3)
new_lp$[1]=new_lprop$[1]
rem "Add as 1st tran means user reduction, use lower user count
if pos("AD"=type$[0])=1 then sm_u[]=new_users[] else sm_u[]=cur_users[]
call "price.pgm",firm_id$,"SM1",new_item$(10,3),old_u[all],sm_u[all],old_lp$[all],new_lp$[all],"","SM1",0,disc_pct,splevel,prc,samprc
if samprc<=0 then return

jd=0
first=1
read (snt01,key=snm01.serial_nbr$,dom=*next)
while 1
  read record(snt01,end=*break)snt01$
  if snt01.serial_nbr$<>snm01.serial_nbr$ then break
  if (pos(snt01.type_of_sale$="UPDUG4UG3PLXUNCEXC",3) or first) and snt01.ext_price>0 then jd=fnaonjul(snt01.trans_date$)
  first=0
wend

if jd then
  today=jul(0,0,0)
  days=max(0,today-jd)
  sam_upg=samprc*days/365
  if sam_upg>0 and sam_upg<price[upg] then 
    price[upg]=sam_upg
    comments$=comments$+"*Price based on retroactive SAM"+$0a$
  fi
fi

return

REM ' -----------------------------------------------------------------
REM ' Init Cart
REM ' -----------------------------------------------------------------

Init_Cart: 
LET win_cart$=fngb__get_screen$(win_id_cart$,win_cart$)
LET win_cart_grid_id=NUM(FATTR(win_cart$,"Grid","ID"))
LET subtotal=0
LET listtotal=0
LET reference_list$=""

DIM cart_rec$:"Line:c(4):SHOW=0:,"+"Reference:c(10*):ALIGN=0 SHOW=1 LABEL=PurchaseOrder LENGTH=10:,"+"Serial_Number:c(16*):ALIGN=0 SHOW=1 LABEL=Serial_Number LENGTH=16:,"+"Quantity:c(8*):ALIGN=1 SHOW=1 LABEL=Qty LENGTH=8:,"+"Item_Number:c(20*):ALIGN=0 SHOW=1 LABEL=Item_Number LENGTH=20:,"+"Users:c(8*):ALIGN=1 SHOW=1 LABEL=Users LENGTH=8:,"+"Price:c(12*):ALIGN=1 SHOW=1 LABEL=Price LENGTH=12:,"+"Sam:c(4*):ALIGN=0 SHOW=1 LABEL=SAM LENGTH=1:"
IF cart_file THEN CLOSE (cart_file)
LET cart_file=UNT
INITFILE cart_file$
OPEN (cart_file)cart_file$
READ (ece11,KEY=firm_id$+cust_num$+user_code$,DOM=setup_cart_loop)
setup_cart_loop: 
READ RECORD (ece11,END=setup_cart_endloop)ece11$
IF CVS(ece11.firm_id$,3)<>CVS(firm_id$,3) OR CVS(ece11.customer_nbr$,3)<>CVS(cust_num$,3) OR CVS(ece11.user_code$,3)<>CVS(user_code$,3) THEN GOTO setup_cart_endloop
LET cart_rec.line$=ece11.line_number$
LET cart_rec.reference$=CVS(ece11.po_ref_number$,3)
if cart_rec.reference$="" then cart_rec.reference$=fill(10)
LET cart_rec.serial_number$=CVS(ece11.serial_nbr$,3)
LET cart_rec.quantity$=STR(ece11.qty)
LET cart_rec.item_number$=ece11.item_number$
LET cart_rec.users$=STR(ece11.users+ece11.users2)

IF ece11.sam_coverage$="S" THEN cart_rec.sam$="Yes" ELSE cart_rec.sam$="No"

LET contract$=""
LET pricecheck=1
GOSUB check_for_trade
IF trade_tran THEN GOTO got_price

DIM sn$(20)
LET sn$(1)=ece11.serial_nbr$
GOSUB sn_ec_price_setup
LET sam_flag=POS(ece11.sam_coverage$="S")

GOSUB ece11_ec_price

got_price: 

IF POS("**"=comments$)=1 THEN LET cart_rec.price$=comments$ ELSE LET cart_rec.price$=CVS(STR(price:"#,###,##0.00-"),64)

WRITE RECORD (cart_file,KEY=ece11.line_number$)cart_rec$
LET subtotal=subtotal+price
LET listtotal=listtotal+listprice

IF LEN(cart_rec.reference$) AND POS(cart_rec.reference$+$0A$=reference_list$)=0 THEN LET reference_list$=reference_list$+cart_rec.reference$+$0A$

GOTO setup_cart_loop

setup_cart_endloop: 
CLOSE (cart_file)
OPEN (cart_file)cart_file$

p=pos($0a$=reference_list$,1,0)
if p>1 then reference_list$="*** Entire Cart ***"+$0A$+reference_list$
LET win_cart.subtotal$=CVS(STR(subtotal:"#,###,##0.00-"),64)
LET win_cart.listprice$=CVS(STR(listtotal:"#,###,##0.00-"),64)
LET win_cart.reference$=reference_list$+$FF$+"0"
LET win_cart$=fngb__put_fields$(win_id_cart$,win_cart$,"subtotal,listprice,reference")

LET batch!=sysgui!.get_message_batch()
batch!.addSendMsg(win_cart_grid_id,80,cart_file,FATTR(cart_rec$),gb__win.cart)
batch!.addSendMsg(win_cart_grid_id,81,0,$01$,gb__win.cart); REM ' read-only grid
batch!.addSendMsg(win_cart_grid_id,49,1,$$,gb__win.cart); REM ' highlight row
batch!.addSendMsg(win_cart_grid_id,57,1,$$,gb__win.cart); REM ' highlight colour
batch!.addSendMsg(win_cart_grid_hdr,84,0,$$,gb__win.cart); REM ' alignment
REM # batch!.addSendMsg(win_cart_grid_hdr,20,0,$$,gb__win.cart); rem ' info block
batch!.processAll()

LET init_cart=1
RETURN

REM ' -----------------------------------------------------------------
REM ' Insert CC
REM ' -----------------------------------------------------------------

Insert_CC: 

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_credit_card$=fngb__get_screen$(win_id_credit_card$,win_credit_card$)
LET win_credit_card.visa=0
LET win_credit_card.mastercard=0
LET win_credit_card.american_express=0
LET win_credit_card.number$=""
LET win_credit_card.name$=""

LET temp$=win_credit_card.expiry_month$+$FF$,temp=POS($FF$=temp$)
LET temp$=temp$(1,temp-1)
LET win_credit_card.expiry_month$=temp$

LET temp$=win_credit_card.expiry_year$+$FF$,temp=POS($FF$=temp$)
LET temp$=temp$(1,temp-1)
LET win_credit_card.expiry_year$=temp$

LET win_credit_card$=fngb__put_screen$(win_id_credit_card$,win_credit_card$)

LET focus_id=NUM(FATTR(win_credit_card$,"Visa","ID"))
new_context=gb__win.credit_card
old_context=gb__win.account
gosub show_window
REM BWH
creditCardWindow! = sysgui!.getWindow(gb__win.credit_card)
creditCardWindow!.getControl(100).setOpaque(sysgui!.FALSE)
creditCardWindow!.getControl(202).setOpaque(sysgui!.FALSE)
RETURN


REM ' -----------------------------------------------------------------
REM ' Delete CC
REM ' -----------------------------------------------------------------

Delete_CC: 
LET win_credit_card$=fngb__get_screen$(win_id_credit_card$,win_credit_card$)
LET win_credit_card.visa=0
LET win_credit_card.mastercard=0
LET win_credit_card.american_express=0

IF POS("V"=cc_rec.cc_type$)=1 THEN LET win_credit_card.visa=1
IF POS("M"=cc_rec.cc_type$)=1 THEN LET win_credit_card.mastercard=1
IF POS("A"=cc_rec.cc_type$)=1 THEN LET win_credit_card.american_express=1

LET win_credit_card.number$=cc_rec.cc_num$
LET win_credit_card.name$=cc_rec.cc_name$

LET temp$=win_credit_card.expiry_month$+$FF$,temp=POS($FF$=temp$)
LET index=cc_rec.cc_mm-1
LET temp$=temp$(1,temp)+STR(index)
LET win_credit_card.expiry_month$=temp$

LET temp$=win_credit_card.expiry_year$+$FF$,temp=POS($FF$=temp$)
LET index=cc_rec.cc_yyyy-NUM(DATE(0:"%Yl"))
LET temp$=temp$(1,temp)+STR(index)
LET win_credit_card.expiry_year$=temp$

LET win_credit_card$=fngb__put_screen$(win_id_credit_card$,win_credit_card$)

LET focus_id=NUM(FATTR(win_credit_card$,"Delete","ID"))
new_context=gb__win.credit_card
old_context=gb__win.account
gosub show_window
RETURN


REM ' -----------------------------------------------------------------
REM ' Init Checkout 2
REM ' -----------------------------------------------------------------

Init_Checkout_2: 

LET win_checkout_2$=fngb__get_screen$(win_id_checkout_2$,win_checkout_2$)

LET cc_count=0
LET credit_card_list$=""
READ (ecm02,KEY=firm_id$+cust_num$+user_code$,DOM=count_ecm02_loop)
count_ecm02_loop: 
READ RECORD (ecm02,END=count_ecm02_endloop)ecm02$
IF ecm02.firm_id$<>firm_id$ OR ecm02.customer_nbr$<>cust_num$ or ecm02.user_code$<>user_code$ THEN GOTO count_ecm02_endloop
LET cc_count=cc_count+1
GOTO count_ecm02_loop

count_ecm02_endloop: 
DIM cc_key$[cc_count],cc_num$[cc_count],cc_type$[cc_count],cc_name$[cc_count],cc_month[cc_count],cc_year[cc_count]
IF cc_count=0 THEN GOTO setup_ecm02_endloop

LET cc_count=0
READ (ecm02,KEY=firm_id$+cust_num$+user_code$,DOM=setup_ecm02_loop)
setup_ecm02_loop: 
READ RECORD (ecm02,END=setup_ecm02_endloop)ecm02$
IF ecm02.firm_id$<>firm_id$ OR ecm02.customer_nbr$<>cust_num$ or ecm02.user_code$<>user_code$ THEN GOTO setup_ecm02_endloop

LET ccu$="",cce$=CVS(ecm02.credit_card_num$,3)
CALL "BCC.11",ccu$,cce$
IF cce$="" THEN LET ccu$=cce$
LET cc_key$[cc_count]=ccu$
LET cc_num$[cc_count]=fnobscure_cc$(ccu$)
LET cc_type$[cc_count]=CVS(ecm02.cc_type$,7)
LET cc_name$[cc_count]=CVS(ecm02.cc_name$,3)
LET cc_month[cc_count]=NUM(ecm02.cc_expires_mo$)
LET cc_year[cc_count]=NUM(ecm02.cc_expires_yr$)
LET credit_card_list$=credit_card_list$+cc_type$[cc_count]+" "+cc_num$[cc_count]+" "+cc_name$[cc_count]+$0A$
LET cc_count=cc_count+1
GOTO setup_ecm02_loop

setup_ecm02_endloop: 
LET win_checkout_2.credit_card_list$=credit_card_list$

LET temp$=""
LET year=NUM(DATE(0:"%Yl"))
FOR temp=year TO year+10
    LET temp$=temp$+STR(temp)+$0A$
NEXT temp
LET win_checkout_2.expiry_year$=temp$

LET temp$=""
FOR temp=1 TO 12
    LET temp$=temp$+DATE(JUL(year,temp,1):"%Ml")+$0A$
NEXT temp
LET win_checkout_2.expiry_month$=temp$

LET win_checkout_2$=fngb__put_screen$(win_id_checkout_2$,win_checkout_2$)

LET init_checkout_2=1

RETURN


REM ' -----------------------------------------------------------------
REM ' Init Cart Record
REM ' -----------------------------------------------------------------

Init_Cart_Record: 

LET line_number=0
LET status$=""
LET temp$=sn$
REM 'SN$ contains list of serials+$0a$ for multi sn transactions
init_cart_sn_check: 
LET lf=POS($0A$=temp$)
IF lf THEN LET sn$=temp$(1,lf-1),temp$=temp$(lf+1) ELSE LET temp$=""
IF CVS(sn$,3)="" THEN GOTO ece83_endloop

READ (ece83,KEY=firm_id$+cust_num$,DOM=ece83_loop)
ece83_loop: 
READ RECORD (ece83,END=ece83_endloop)ece83$
IF POS(firm_id$+cust_num$=ece83$)<>1 THEN GOTO ece83_endloop
IF CVS(sn$,3)<>CVS(ece83.serial_nbr$,3) THEN GOTO ece83_loop
LET status$="M14"
goto init_cart_failed
ece83_endloop: 

READ (ece11,KEY=firm_id$+cust_num$,DOM=ece11_loop)
ece11_loop: 
READ RECORD (ece11,END=ece11_endloop)ece11$
IF POS(firm_id$+cust_num$=ece11$)<>1 THEN GOTO ece11_endloop
IF CVS(sn$,3)<>"" AND CVS(sn$,3)=CVS(ece11.serial_nbr$,3) THEN LET status$="M14";goto init_cart_failed
if cvs(ece11.user_code$,3)=cvs(user_code$,3) then line_number=NUM(ece11.line_number$)
GOTO ece11_loop
ece11_endloop: 
IF temp$<>"" THEN GOTO init_cart_sn_check

LET line_number=line_number+1
IF line_number>9999 THEN LET status$="M15";goto init_cart_failed

DIM ece11$:FATTR(ece11$)
LET ece11.firm_id$=firm_id$
LET ece11.customer_nbr$=cust_num$
LET ece11.user_code$=user_code$
LET ece11.line_number$=STR(line_number:"0000")

RETURN

init_cart_failed:
junk$=status$+$0a$+cvs(sn$,3)+$0a$
mb_mode=0
gosub translate_mbox
return

REM ' -----------------------------------------------------------------
REM ' Edit Cart Item
REM ' -----------------------------------------------------------------

Edit_Cart_Item: 
new_context=gb__win.item
old_context=gb__win.cart
LET win_item$=fngb__get_screen$(win_id_item$,win_item$)
init_item=1
runtime_id=num(fattr(win_item$,"runtime","ID"))
uncounted_id=num(fattr(win_item$,"uncounted","ID"))

DIM item$(20)
LET item$(1)=ece11.item_number$
ivm_item$=item$
gosub ivm_item
DIM sn$(20)

REM ' *** prepare product list ***
LET item_product_code$=item$(1,3)
LET item_platform_list$="",item_platform_code$=item$(4,3)
LET item_os_level_list$="",item_os_level_code$=item$(7,3)
LET item_revision_list$="",item_revision_code$=item$(10,3)
LET item_license_list$="",item_license_code$=item$(13,3)
rent_item=(item_license_code$="RN1")

LET temp_list$="",product_index=-1,index=0
FOR temp=1 TO LEN(item_product_list$) STEP 3
  LET csm01.product$=item_product_list$(temp,3)
  LET csm01.description$=csm01.product$
  READ RECORD (csm01,KEY=firm_id$+csm01.product$,ERR=*next)csm01$
  LET temp_list$=temp_list$+CVS(csm01.description$,3)+$0A$
  IF csm01.product$=item_product_code$ THEN LET product_index=index,sam_required$=csm01.ctr_required$
  LET index=index+1
NEXT temp
IF product_index>=0 THEN LET temp_list$=temp_list$+$FF$+STR(product_index)
LET win_item.product$=temp_list$

REM ' *** prepare platform list ***
lb_id=num(fattr(win_item$,"platform","ID"))
LET temp_product_code$=item_product_code$,temp_platform_code$=item_platform_code$
GOSUB platform_list
LET item_platform_list$=platform_list$,win_item.platform$=platform_desc_list$

REM ' *** prepare os level list ***
lb_id=num(fattr(win_item$,"oslevel","ID"))
LET temp_platform_code$=item_platform_code$,temp_os_level_code$=item_os_level_code$
GOSUB os_level_list
LET item_os_level_list$=os_level_list$
LET win_item.oslevel$=os_level_desc_list$

REM ' *** prepare revision list ***
lb_id=num(fattr(win_item$,"revision","ID"))
LET temp_os_level_code$=item_os_level_code$,temp_product_rev_code$=item_revision_code$
GOSUB revision_list
LET item_revision_list$=revision_list$
LET win_item.revision$=revision_desc_list$

REM ' *** prepare license list ***
lb_id=num(fattr(win_item$,"license","ID"))
LET ltcode$=item_license_code$,prdcode$=item_product_code$
GOSUB license_list
LET item_license_list$=license_list$
LET win_item.license$=license_desc_list$

LET win_item.item_number$=CVS(ivm01.item_number$,3)
LET win_item.description$=CVS(ivm01.item_desc$,3)
LET win_item.quantity$=STR(ece11.qty)
LET sam_flag=POS(ece11.sam_coverage$="S")
LET win_item.sam_standard$=STR(sam_flag<>0)
LET contract$=""
LET contract_type$=""
LET sam_active$=""
LET win_item.users$="0", win_item.users2$="0"
u1_prop$=ece11.lic_property1$,u1=pos(u1_prop$(1,1)="ES")
u2_prop$=ece11.lic_property2$,u2=pos(u2_prop$(1,1)="ES")
if u1=1 or u1+u2=0 then LET win_item.users$=STR(ece11.users)
if u2=1 then LET win_item.users$=STR(ece11.users2)
if u1=2 then LET win_item.users2$=STR(ece11.users)
if u2=2 then LET win_item.users2$=STR(ece11.users2)

READ RECORD (csm01,KEY=firm_id$+item$(1,3),dom=*next)csm01$
gosub new_item_props
READ RECORD (csm03,KEY=firm_id$+item$(7,3),dom=*next)csm03$
uncounted_ok=(csm03.fixed_lic_flag$="Y")
LET win_item.reference$=CVS(ece11.po_ref_number$,3)
if pos("R"=ece11.lic_property1$)=2 or pos("R"=ece11.lic_property2$)=2 or pos("RTM"=ece11.item_number$) then win_item.runtime$="1" else win_item.runtime$="0"
LET win_item.uncounted$=str(ece11.uncounted_flag$="Y")
uncounted_chg=1

LET win_item$=fngb__put_screen$(win_id_item$,win_item$)

temp$=ece11.annual_dt$
if fnnum(temp$) then
  jul_renew=fnjul(temp$)
else
  jul_renew=0
fi
renew_dt_id=num(fattr(win_item$,"renew_dt","ID"))
renew_dt_btn_id=num(fattr(win_item$,"renew_dt_btn","ID"))
newWindow! = sysgui!.getWindow(new_context)
renew_dt!=newWindow!.getControl(renew_dt_id)
if jul_renew then renew_dt!.setValue(jul_renew) else renew_dt!.setText(" ")
temp$=renew_dt!.getText()
win_item.renew_dt$=temp$
GOSUB update_item_price

LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"comments,price,listprice")

LET focus_id=NUM(FATTR(win_item$,"Accept","ID"))
LET sam_std_id=NUM(FATTR(win_item$,"Sam_standard","ID"))

gosub show_window
PRINT (gb__sysgui)'CONTEXT'(new_context),'CUE'(focus_id,"Modify this purchase in shopping cart","")
IF sam_required$<>"A" THEN PRINT (gb__sysgui)'DISABLE'(sam_std_id) ELSE PRINT (gb__sysgui)'ENABLE'(sam_std_id)
if sam_flag then PRINT (gb__sysgui)'enable'(renew_dt_id,renew_dt_btn_id) ELSE PRINT (gb__sysgui)'disable'(renew_dt_id,renew_dt_btn_id)
if pos(item_product_code$=runtime_products$) then PRINT(gb__sysgui)'enable'(runtime_id) ELSE PRINT (gb__sysgui)'disable'(runtime_id)
if uncounted_ok and ece11.users+ece11.users2=1 then PRINT(gb__sysgui)'enable'(uncounted_id) ELSE PRINT (gb__sysgui)'disable'(uncounted_id)
RETURN

REM ' -----------------------------------------------------------------
REM ' Edit Cart SN
REM ' -----------------------------------------------------------------

Edit_Cart_SN: 

DIM sn$(20)
LET sn$(1)=ece11.serial_nbr$
GOSUB show_sn;rem 'reads SNM-01,SNM-02,SNT-01
rem 'sets product_code$,etc, auth$, contract$, exp_ok$
DIM item$(20)
LET item$(1)=ece11.item_number$
LET new_product_code$=item$(1,3)
LET new_platform_code$=item$(4,3)
LET new_os_level_code$=item$(7,3)
LET new_product_rev_code$=item$(10,3)
LET new_license_code$=item$(13,3)

if pos("Y"=exp_ok$)=1 then
  exp_ok$="YNN"
  csm04.key_or_licen$=" "
  READ RECORD (csm04,KEY=firm_id$+new_product_rev_code$,DOM=*next)csm04$
  if csm04.key_or_licen$="L" then exp_ok$(2,1)="Y" 
  if item$(13,3)="STD" then exp_ok$(3,1)="Y" 
fi

LET support_only=(ece11.support_only$="Y")
u1_prop$=ece11.lic_property1$
u2_prop$=ece11.lic_property2$
user1=ece11.users
user2=ece11.users2
old_context=gb__win.cart
temp_renew$=ece11.annual_dt$
sam_flag=POS(ece11.sam_coverage$="S")
no_rif=(ece11.no_rif_flag$="Y")
new_uncounted=(cvs(ece11.uncounted_flag$,4)="Y")

gosub show_edit_sn_window

RETURN

REM ' -----------------------------------------------------------------
REM ' Create Order
REM ' Order_Number$ must be set before calling this routine
REM ' -----------------------------------------------------------------

Create_Order: 

reset_list$=""
LET mailtext$="Order Number: "+order_number$+ $0A$
IF CVS(user_code$,3)="" THEN user$="" ELSE user$=" "+CVS(user_code$,3)
LET mailtext$=mailtext$+"Customer Number: "+firm_id$+"-"+cust_num$+user$+" ("+CVS(arm01.cust_name$,3)+")" + $0A$
IF LEN(win_checkout_2.reference$) THEN LET mailtext$=mailtext$+"Purchase Order: "+win_checkout_2.reference$+ $0A$
IF LEN(contact$) THEN LET mailtext$=mailtext$+"Contact: "+contact$+ $0A$
reset_text$=mailtext$+ $0A$
IF win_checkout_2.credit_card THEN LET mailtext$=mailtext$+"Bill to: "+fnobscure_cc$(cc$)+ $0A$
LET mailtext$=mailtext$+ $0A$

REM ' ARE03 - order header
LET are03.firm_id$=firm_id$
LET are03.ar_type$="  "
LET are03.customer_nbr$=cust_num$
LET are03.order_number$=order_number$
LET are03.sequence_000$="000"
LET are03.invoice_type$="S"
LET are03.ord_inv_flag$="O"
LET are03.backord_flag$=" "
LET are03.invoice_date$=fndate$(JUL(0,0,0))
LET are03.ar_ship_date$=fndate$(JUL(0,0,0)+1)

LET ship_via$=FILL(10)+"UPS Int'l UPS 1 Day UPS 2 Day UPS 3 Day "

IF media THEN LET are03.ar_ship_via$=ship_via$(POS(freight_type$=" 123")*10+1,10) ELSE LET are03.ar_ship_via$=FILL(10)

LET are03.ar_inv_nbr$=FILL(7)
LET are03.ar_po_number$=win_checkout_2.reference$
LET are03.slspsn_code$=arm02.slspsn_code$

IF win_checkout_2.credit_card THEN LET are03.terms_code$="04",are03.rel_to_ship$="N" ELSE LET are03.terms_code$=arm02.terms_code$,are03.rel_to_ship$="Y"

gosub get_discount
LET are03.reserved_str_2$=FILL(9)
LET are03.disc_code$=discount_code$
LET are03.dist_code$=arm02.dist_code$
LET are03.ord_prt_flag$="N"
LET are03.ord_lock$="Y"; REM ' lock until all related records are updated
LET are03.message_code$=arm02.message_code$
LET are03.territory$=arm02.territory$
LET are03.list_prc_cde$="  "
LET are03.date_ordered$=fndate$(JUL(0,0,0))
LET are03.tax_code$=arm02.tax_code$
LET are03.pricing_code$=arm02.pricing_code$
LET are03.ar_job_nbr$=FILL(10)
LET are03.ord_taken_by$="*"+user_code$
LET are03.cash_sale$="N"
LET are03.reprint_flag$=" "
LET are03.ord_cred_flg$=" "; REM ' R=Release, C=Credit Hold

IF ship_to THEN LET are03.shipto_nbr$="000099" ELSE LET are03.shipto_nbr$=FILL(6)

LET are03.tax_amount=tax
LET are03.freight_amt=freight
LET are03.discount_amt=0
LET are03.comm_percent=0
LET are03.taxable_amt=taxable
LET are03.comm_amt=0
LET are03.total_sales=total
LET are03.total_cost=0

LET are03_key$=are03.firm_id$+are03.ar_type$+are03.customer_nbr$+are03.order_number$+are03.sequence_000$

LET are03$=FIELD(are03$)

WRITE RECORD (are03,KEY=are03_key$)are03$

REM ' ARE33 - manual ship-to entry

IF !(ship_to) THEN GOTO no_ship_to

LET win_checkout_1$=fngb__get_screen$(win_id_checkout_1$,win_checkout_1$)

LET are33.firm_id$=firm_id$
LET are33.customer_nbr$=cust_num$
LET are33.order_number$=order_number$
LET are33.ship_to_name$=CVS(win_checkout_1.ship_to_name$,3)
LET are33.address_1$=CVS(win_checkout_1.ship_to_addr1$,3)
LET are33.address_2$=CVS(win_checkout_1.ship_to_addr2$,3)
LET are33.city$=CVS(win_checkout_1.ship_to_city$,3)
LET are33.state$=CVS(win_checkout_1.ship_to_state$,3)
LET are33.zip_code$=CVS(win_checkout_1.ship_to_zip$,3)
LET are33.country$=CVS(win_checkout_1.ship_to_country$,3)

LET are33_key$=are33.firm_id$+are33.customer_nbr$+are33.order_number$

LET are33$=FIELD(are33$)

WRITE RECORD (are33,KEY=are33_key$)are33$

LET mailtext$=mailtext$+"Ship to:" + $0A$
LET mailtext$=mailtext$+"   "+are33.ship_to_name$ + $0A$
LET mailtext$=mailtext$+"   "+are33.address_1$ + $0A$
LET mailtext$=mailtext$+"   "+are33.address_2$ + $0A$
LET mailtext$=mailtext$+"   "+are33.city$+" "
LET mailtext$=mailtext$+are33.state$+" "
LET mailtext$=mailtext$+are33.zip_code$+" "
LET mailtext$=mailtext$+are33.country$ + $0A$ + $0A$

no_ship_to: 

REM ' ARE04 - pick ticket

LET are04.firm_id$=are03.firm_id$
LET are04.ord_inv_flag$=are03.ord_inv_flag$
LET are04.ar_type$=are03.ar_type$
LET are04.customer_nbr$=are03.customer_nbr$
LET are04.order_number$=are03.order_number$

LET are04_key$=are04.firm_id$+are04.ord_inv_flag$+are04.ar_type$+are04.customer_nbr$+are04.order_number$

LET are04$=FIELD(are04$)

WRITE RECORD (are04,KEY=are04_key$)are04$

REM ' ARE43 = open orders

LET are43.firm_id$=are03.firm_id$
LET are43.ar_type$=are03.ar_type$
LET are43.customer_nbr$=are03.customer_nbr$
LET are43.order_number$=are03.order_number$

LET are43_key$=are43.firm_id$+are43.ar_type$+are43.order_number$+are43.customer_nbr$

LET are43$=FIELD(are43$)

WRITE RECORD (are43,KEY=are43_key$)are43$

REM ' Now loop through the detail lines from the shopping cart

DIM detail$:"Line:c(4),Item:c(31),Users:c(5),Price:c(11),Qty:c(4),Ext:c(11)"
LET detail.Item$="Description"
LET detail.Users$="Users"
LET detail.Price$="     Price"
LET detail.Qty$=" Qty"
LET detail.Ext$=" Extension"
LET mailtext$=mailtext$+CVS(detail$,2)+ $0A$ + $0A$

LET line_number=0
deactivated_list$=""
READ (ece11,KEY=firm_id$+cust_num$+user_code$,DOM=order_ece11_loop)

order_ece11_loop: 
if info(3,2)="thines" then escape
LET ece11_key$=KEY(ece11,END=order_ece11_endloop)
READ RECORD (ece11,KEY=ece11_key$)ece11$
IF ece11.firm_id$<>firm_id$ OR ece11.customer_nbr$<>cust_num$ or ece11.user_code$<>user_code$ THEN GOTO order_ece11_endloop
IF reference$<>"" AND cvs(reference$,3)<>CVS(ece11.po_ref_number$,3) THEN GOTO order_ece11_loop
REM ' Stop generating the order if we're about to run out of line numbers
IF line_number+30>999 THEN GOTO order_ece11_endloop

DIM sn$(20)
LET sn$(1)=ece11.serial_nbr$
LET contract$="",xday=0,duration=365
LET pricecheck=1,new_sn$="",ds_xref$=""
GOSUB check_for_trade
IF trade_tran THEN GOTO skip_price

GOSUB sn_ec_price_setup
LET sam_flag=POS(ece11.sam_coverage$="S")
GOSUB ece11_ec_price
REM 'sam_required$ & duration & xday are set in ece11_ec_price
dim t_users[nbr_trans],t_desc$[nbr_trans]
trn=0
uc$=comments$+$0a$
while trn<=nbr_trans
 u$="",u=pos($0a$=uc$),t_users[trn]=ece11.users+ece11.users2
 if u then 
   u$=cvs(uc$(1,u),3),uc$=uc$(u+1)
   if pos("discount"=u$) or pos("Rabatt"=u$) then u$=""
   desc$=u$
 fi
 u=pos(","=u$),u1=pos("user"=u$)
 if u and u<u1 then u$=cvs(u$(u+1,u1-u-1),3),t_users[trn]=fnnum(u$)
 t_desc$[trn]=type$[trn](5)
 p=pos("  "=desc$);if p>1 then desc$=desc$(1,p-1)
 if pos("ADD"=type$[trn])=1 then t_desc$[trn]=desc$
 trn=trn+1
wend

skip_price: 
REM ' Skip this shopping cart line if we can't calculate a price
IF POS("**"=comments$)=1 OR type$[0]="" THEN GOTO order_ece11_loop

REM ' I think this is where I need to initialize serial numbers array
DIM hold_sn$[1:ece11.qty]
REM ' can be many detail lines for each ECE11 record
LET last_line=nbr_trans
FOR line=0 TO last_line
LET line_number=line_number+10
LET line_number$=STR(line_number:"000")

REM 'CSM07 -Retrieve Type Of Sale record - skip this line if not found
READ RECORD (csm07,KEY=firm_id$+type$[line](1,3),DOM=*continue)csm07$

REM ' IVM01 - skip this line if not found
ivm_item$=type$[line](5)
gosub ivm_item
if ivmok=0 then continue

LET detail$=line_number$+" "+csm07.description$
LET mailtext$=mailtext$+CVS(detail$,2) + $0A$

LET detail$="    "+CVS(ivm01.item_desc$,2) + $0A$
LET qty=ece11.qty
IF trade_tran THEN LET qty=t_qty[line]
IF type$[line](1,2)="TS" THEN 
  qty=ece11.add_support
  detail$=""
  rpos=pos(ece11.reset_code$=reset_code_list$,2)
  if rpos then
    reset_list$=reset_list$+"Reset "+ece11.serial_nbr$ + $0A$
    rr=pos($0a$=reset_reason_list$,1,int(rpos/2))
    if rr then
      rreason$=reset_reason_list$(rr+1)
      rr=pos($0a$=rreason$)
      if rr then reset_list$=reset_list$+rreason$(1,rr-1) + $0A$
    fi
  fi
fi
LET mailtext$=mailtext$+detail$

DIM detail$:FATTR(detail$)
p=pos($0a$=t_desc$[line])
if p>1 then t_desc$[line]=t_desc$[line](1,p-1)
p=pos("USERS "=cvs(t_desc$[line],4))
if p then p=p+6 else p=1
LET detail.Item$=t_desc$[line](p)
LET detail.Users$=STR(t_users[line]:"####-")
if t_desc$[line]<>type$[line](5) or pos("TS"=type$[line])=1 then detail.users$=""
LET detail.Price$=CVS(STR(price[line]/qty:"#######.00-"),64)
LET detail.Qty$=STR(qty:"###0")
LET detail.Ext$=CVS(STR(price[line]:"#######.00-"),64)
LET mailtext$=mailtext$+CVS(detail$,2) + $0A$

REM ' ARE13 - Order Line Detail

LET are13.firm_id$=are03.firm_id$
LET are13.ar_type$=are03.ar_type$
LET are13.customer_nbr$=are03.customer_nbr$
LET are13.order_number$=are03.order_number$
LET are13.line_number$=line_number$
LET are13.line_code$="S"
LET are13.man_price$="N"
LET are13.product_type$=ivm01.product_type$
LET are13.pull_assmble$="P"
LET are13.warehouse_id$=ivs01.warehouse_id$
LET are13.item_number$=type$[line](5)
LET are13.order_memo$=FILL(40)
LET are13.est_shp_date$=fndate$(JUL(0,0,0)+1)
LET are13.commit_flag$="Y"
LET are13.pick_flag$=" "
LET ffl$=FATTR(are13$,"reserved_str_2"),ffl=DEC(ffl$(10,2))
LET are13.reserved_str_2$=FILL(ffl)
LET are13.unit_cost=0
LET are13.unit_price=price[line]/qty
LET are13.qty_ordered=qty
LET are13.qty_backord=0
LET are13.qty_shipped=qty
LET are13.std_list_prc=0
LET are13.ext_price=price[line]
arm10e.taxable_flag$="Y"
READ RECORD (arm10e,KEY=firm_id$+"ES")arm10e$
IF arm10e.taxable_flag$="Y" AND ivm01.taxable_flag$="Y" THEN LET are13.taxable_amt=price[line] ELSE LET are13.taxable_amt=0

LET are13.disc_percent=0
LET are13.comm_percent=0
LET are13.comm_amt=0
LET are13.spl_comm_pct=0
LET are13.disc_cust=0

LET are13_key$=are13.firm_id$+are13.ar_type$+are13.customer_nbr$+are13.order_number$+are13.line_number$

LET are13$=FIELD(are13$)

WRITE RECORD (are13,KEY=are13_key$)are13$

REM ' ARE07 = open order lines (items)

LET are07.firm_id$=are13.firm_id$
LET are07.warehouse_id$=are13.warehouse_id$
LET are07.item_number$=are13.item_number$
LET are07.ar_type$=are13.ar_type$
LET are07.order_number$=are13.order_number$
LET are07.line_number$=are13.line_number$
LET are07.customer_nbr$=are13.customer_nbr$

LET are07_key$=are07.firm_id$+are07.warehouse_id$+are07.item_number$+are07.ar_type$+are07.order_number$+are07.line_number$+are07.customer_nbr$

LET are07$=FIELD(are07$)

WRITE RECORD (are07,KEY=are07_key$)are07$

REM ' ARE73 - order config record
dim are73$:fattr(are73$)
LET are73.firm_id$=are13.firm_id$
LET are73.ar_type$=are13.ar_type$
LET are73.customer_nbr$=are13.customer_nbr$
LET are73.order_number$=are13.order_number$
LET are73.line_number$=are13.line_number$
IF media THEN LET are73.media_type$="CDR" ELSE LET are73.media_type$="N/A"
LET are73.type_of_sale$=type$[line](1,3); REM 'NEW ADD UPD UNC UG4 PLX SM1 TRD
if cvs(new_lprop$[0]+new_lprop$[1],3)<>"" then LET are73.odbc_rw$="W" else are73.odbc_rw$=" "

REM 'Fixed or floating license: X=fixed/F=float
IF cvs(ece11.uncounted_flag$,4)="Y" AND t_users[line]=1 THEN 
  LET are73.fixed_float$="X" 
  if pos(are73.type_of_sale$(1,2)="SM,TS")=0 then mailtext$=mailtext$+fill(4)+"Standalone (uncounted) license." + $0A$
ELSE 
  LET are73.fixed_float$="F"
fi
temp$=""
if ece11.users and ece11.lic_property1$<>"  " then temp$=str(ece11.users)+" "+ece11.lic_property1$
if ece11.users2 and ece11.lic_property2$<>"  " then temp$=temp$+"  "+str(ece11.users2)+" "+ece11.lic_property2$
if pos(are73.type_of_sale$="SM1,TSI,ADD,RIF")=0 and temp$<>"" then mailtext$=mailtext$+fill(4)+"User detail: "+temp$ + $0A$
LET are73.exp_type$="   "
LET are73.exp_days_dt$=fill(8)
bbjrev$="";read (csm04,key=firm_id$+"CUR",dom=*next)*,bbjrev$
LET are73.cur_rev$=cvs(bbjrev$,3)
LET ffl$=FATTR(are73$,"dealer_str"),ffl=DEC(ffl$(10,2))
LET are73.dealer_str$=FILL(ffl)
LET are73.media_qty=media
LET are73.users=ece11.users
LET are73.users2=ece11.users2
rem 'set to T to indicate users are total new users- used in BSN.20,flexlic.bbx
LET are73.available1$="T" 
LET are73.available2$=" "
if pos(type$[line](1,3)="NEW,ADD,RNW")=0 and ece11.users2=0 then
  LET are73.users=t_users[line]
  LET are73.available1$=" " 
fi
sam_renew$=""

if pos("SM"=type$[line])=1 then
  if cvs(ece11.lic_property1$+ece11.lic_property2$,3)<>"" then
    p$=ece11.lic_property1$
    for u=1 to 2
      xx=new_users[0]*(pos(p$=new_lprop$[0])=1)+new_users[1]*(pos(p$=new_lprop$[1])=1)-cur_users[0]*(pos(p$=cur_lprop$[0])=1)-cur_users[1]*(pos(p$=cur_lprop$[1])=1)
      if xx then if u=1 then are73.users=xx else are73.users2=xx*(cvs(p$,3)<>"")
      p$=ece11.lic_property2$
    next u
    are73.available1$=" "
  fi
  if jul_renew then sam_renew$="SAM Annual  "+date(jul_renew:"%D %Ms %Yl")
fi 
if are73.users then LET are73.lic_property1$=ece11.lic_property1$
if are73.users2 then LET are73.lic_property2$=ece11.lic_property2$
LET are73.contract$=FILL(6)
LET temp$=type$[line](1,3)
IF pos(temp$="SM1,TRD,EXC,RNW") or (temp$="NEW" and rent_item) THEN 
  GOSUB get_sam_contract
  LET are73.contract$=contract$
  if rent_item then sam_renew$="Rental through "+date(jul_renew:"%D %Ms %Yl")
FI 

LET are73_key$=are73.firm_id$+are73.ar_type$+are73.customer_nbr$+are73.order_number$+are73.line_number$

LET are73$=FIELD(are73$)

WRITE RECORD (are73,KEY=are73_key$)are73$

LET media=0; REM ' only set media type in the first line of the order

REM ' ARE83 - license activity record(s)
LET license_seq=1; REM ' always 001
LET license_seq$=STR(license_seq:"000")
LET sequence_nbr=0; REM ' increment for each activity (1 or 3)

IF trade_tran THEN LET tmpsnlist$=are83_snlist$[line]

if pos(type$[line](1,3)="TRD,EXC") AND sam_contract$<>"" then
  DIM oldsmc01$:FATTR(smc01$)
  READ RECORD (smc01,KEY=sam_contract$(1,6),DOM=*break)oldsmc01$
  LET smc01.contr_start$=oldsmc01.contr_start$
  LET smc01.e_mail$=oldsmc01.e_mail$
  let smc01.invoiced_flag$=oldsmc01.invoiced_flag$
  LET smc01$=FIELD(smc01$)
  WRITE RECORD (smc01)smc01$
fi

REM ' ===================================
REM ' Allow for qty>1
REM ' ===================================

LET item_qty=are13.qty_ordered
IF type$[line](1,2)="TS" THEN LET item_qty=1

FOR item_count=1 TO item_qty

multi_are83_recs: 
  IF trade_tran THEN 
   LET sn$=new_sn$,p=POS($0A$=tmpsnlist$)
   IF p THEN LET sn$=PAD(tmpsnlist$(1,p-1),20),tmpsnlist$=tmpsnlist$(p+1)
   IF CVS(sn$,2)="" THEN CONTINUE
  FI 

  DIM are83$:FATTR(are83$)
  IF csm07.modify_snum$="N" THEN GOTO create_order_create_snum
  REM 'item_count should never be >1 if modifying (unless it's sam for BBj)
  REM 'modify_snum
  LET lic_count=0,lic_key$=""
  IF type$[line](1,1)="S" THEN IF !(trade_tran) AND are13.qty_ordered>1 THEN LET sn$=hold_sn$[item_count] FI ; GOTO skip_ec_an

IF pos(type$[line](1,3)="TSI,RIF") THEN GOTO skip_ec_an

CALL "ec_an",firm_id$,ece11.item_number$,sn$,order_number$,t_users[line],lic_key$,lic_count,cvs(ece11.uncounted_flag$,4)

skip_ec_an: 
LET win_checkout_2.message$="S/N: "+sn$
LET win_checkout_2$=fngb__put_fields$(win_id_checkout_2$,win_checkout_2$,"message")
LET are83.action$="M"
LET are83.contract$=""
LET are83.sam_active$=""
LET are83.auth_code$=lic_key$
LET are83.license_cnt=lic_count
IF pos(type$[line](1,2)="SM,RN") THEN LET are83.contract$=contract$,are83.sam_active$=sam_active$
IF type$[line]="NEW" and rent_item then are83.contract$=contract$
GOSUB write_are83

create_order_create_snum: 
IF csm07.create_snum$="N" THEN GOTO create_order_retire_snum
IF trade_tran THEN IF new_sn$<>"" THEN GOTO create_order_retire_snum
LET savesn$=sn$
CALL "ec_sn",firm_id$,ece11.item_number$,sn$,arm02.product_prefix$
CALL "ec_an",firm_id$,ece11.item_number$,sn$,order_number$,t_users[line],lic_key$,lic_count,cvs(ece11.uncounted_flag$,4)

LET new_sn$=sn$
LET win_checkout_2.message$="S/N: "+sn$
LET win_checkout_2$=fngb__put_fields$(win_id_checkout_2$,win_checkout_2$,"message")
LET are83.action$="A"
LET are83.auth_code$=lic_key$
LET are83.license_cnt=lic_count
IF contract$<>"" THEN LET are83.contract$=contract$,are83.sam_active$=sam_active$
IF !(trade_tran) THEN LET hold_sn$[item_count]=sn$
GOSUB write_are83

REM 'Reset sn to existing sn from ece11 or tmpsnlist for deactivation
IF CVS(savesn$,3)<>"" THEN LET sn$=savesn$

create_order_retire_snum: 
IF csm07.retire_snum$="N" THEN GOTO create_order_done_detail
LET are83.action$="D"
LET are83.auth_code$=""
LET are83.license_cnt=0
LET are83.contract$="",are83.sam_active$=""

GOSUB write_are83
IF CVS(new_sn$,3)<>"" THEN LET sn$=new_sn$

create_order_done_detail: 
IF trade_tran AND POS($0A$=tmpsnlist$) THEN GOTO multi_are83_recs
REM ' ====================================
REM ' Allow for qty>1 in the shopping cart
REM ' ====================================
NEXT item_count

REM ' ====================================
REM ' The shopping cart record might generate many transactions (e.g. UPD + ADD + SAM)
REM ' ====================================
NEXT line

REM ' don't remove this until at least 3/31/2002 - maybe not then
IF promo_discount THEN GOSUB credit_promo

REMOVE (ece11,KEY=ece11_key$); REM ' remove from shopping cart
GOSUB clear_ece83
GOTO order_ece11_loop

order_ece11_endloop: 
rem 'Now go through the order and remove are83 records w/action=M if they are going to be deactivated anyway
ok=1
read(are83,key=are03_key$(1,17),dom=*next)
while ok
 are83key$=key(are83,end=*break)
 if are03_key$(1,17)<>are83key$(1,17) then ok=0;break
 readrecord(are83,key=are83key$)are83$
 if are83.action$<>"M" then continue
 if pos(are83.serial_nbr$=deactivated_list$)=0 then continue
 remove(are83,key=are83key$)
 temp$="   Modify     "+are83.serial_nbr$ + $0A$
 p=pos(temp$=mailtext$)
 while p
  mailtext$=mailtext$(1,p-1)+mailtext$(p+len(temp$))
  p=pos(temp$=mailtext$)
 wend
wend

DIM detail$:FATTR(detail$)
LET detail.Item$="Subtotal"
LET detail.Ext$=CVS(STR(subtotal:"#######.00-"),64)
LET mailtext$=mailtext$+CVS(detail$,2) + $0A$

IF tax THEN LET detail.Item$="Tax"; LET detail.Ext$=CVS(STR(tax:"#######.00-"),64); LET mailtext$=mailtext$+CVS(detail$,2) + $0A$

IF freight THEN LET detail.Item$="Freight"; LET detail.Ext$=CVS(STR(freight:"#######.00-"),64); LET mailtext$=mailtext$+CVS(detail$,2) + $0A$

LET detail.Item$="Total"
LET detail.Ext$=CVS(STR(total:"#######.00-"),64)
LET mailtext$=mailtext$+CVS(detail$,2) + $0A$ + $0A$
LET mailtext$=mailtext$+disc_incl$ + $0A$

LET are03.ord_lock$="N"; REM ' unlock the order header
LET are03$=FIELD(are03$)
WRITE RECORD (are03,KEY=are03_key$)are03$

LET win_checkout_1.Media$=""
LET win_checkout_1.Ship_To_Name$=CVS(tmm01.cont_firm$,3)
LET win_checkout_1.Ship_To_Addr1$=CVS(tmm01.address_1$,3)
LET win_checkout_1.Ship_To_Addr2$=CVS(tmm01.address_2$,3)
LET win_checkout_1.Ship_To_City$=CVS(tmm01.city$,3)
LET win_checkout_1.Ship_To_State$=CVS(tmm01.state$,3)
LET win_checkout_1.Ship_To_Zip$=CVS(tmm01.zip_code$,3)
LET win_checkout_1.Ship_To_Country$=CVS(country.country_name$,3)

LET freight_zone$=country.zone$
IF firm_id$="02" THEN LET freight_zone$=country.zone2$
if tmm01.country_code$="US" then LET freight_zone$="001"
LET freight_type$=standard_freight_type$
LET ship_to=0; REM ' don't write ARE33 ship-to record
LET win_checkout_1$=fngb__put_screen$(win_id_checkout_1$,win_checkout_1$)

LET win_checkout_2.message$="Order #"+order_number$
LET win_checkout_2$=fngb__put_fields$(win_id_checkout_2$,win_checkout_2$,"message")
no_rif=0,rent_item=0

PRINT (gb__sysgui)'SETCURSOR'(0)

junk$="M11"+$0a$+order_number$+$0a$
mb_mode=0
gosub translate_mbox
RETURN

Credit_promo: 
arm10e.code_desc$="Discount"
arm10e.taxable_flag$="Y"
readrecord(arm10e,key=firm_id$+"E"+promo_line_code$,dom=*next)arm10e$
LET line_number=line_number+10
LET line_number$=STR(line_number:"000")
REM ' ARE13 - Order Line Detail
LET are13.line_number$=line_number$
LET are13.line_code$=promo_line_code$
LET are13.product_type$=FILL(3)
LET are13.item_number$=FILL(20)
LET are13.order_memo$=arm10e.code_desc$
LET are13.est_shp_date$=fndate$(JUL(0,0,0)+1)
LET are13.unit_price=-(promo_discount/ece11.qty)
LET are13.ext_price=-promo_discount
IF arm10e.taxable_flag$="Y" THEN LET are13.taxable_amt=-promo_discount ELSE LET are13.taxable_amt=0
LET are13_key$=are13.firm_id$+are13.ar_type$+are13.customer_nbr$+are13.order_number$+are13.line_number$
LET are13$=FIELD(are13$)
WRITE RECORD (are13,KEY=are13_key$)are13$

REM ' ARE07 = open order lines (items)
LET are07.line_number$=are13.line_number$
LET are07_key$=are07.firm_id$+are07.warehouse_id$+are07.item_number$+are07.ar_type$+are07.order_number$+are07.line_number$+are07.customer_nbr$
LET are07$=FIELD(are07$)
WRITE RECORD (are07,KEY=are07_key$)are07$

LET detail$=line_number$+" "+are13.order_memo$
LET mailtext$=mailtext$+CVS(detail$,2) + $0A$

DIM detail$:FATTR(detail$)
LET detail.Item$=""
LET detail.Users$=FILL(5)
LET detail.Price$=CVS(STR(-(promo_discount/ece11.qty):"#######.00-"),64)
LET detail.Qty$=STR(ece11.qty:"###0")
LET detail.Ext$=CVS(STR(-promo_discount:"#######.00-"),64)
LET mailtext$=mailtext$+CVS(detail$,2) + $0A$

RETURN

REM ' -----------------------------------------------------------------
REM ' Send Mail
REM ' -----------------------------------------------------------------

Send_Mail: 

LET errmsg$="Couldn't find mailcall"

from$=CVS(arm10f.slspsn_name$,3)+" <"+CVS(arm10f.e_mail$,3)+">"
subject$="BASIS Order "+STR(order_number)+" Confirmation"
if nc_up then LET subject$="BASIS Confirmation (Non Chargeable)"
attach$=""
sls_email$=cvs(arm10f.e_mail$,3)
to$="BASIS Customer Service <cust@basis.com>"
ccaddr$=sls_email$
IF CVS(ecm01.e_mail$,3)<>"" THEN to$=CVS(ecm01.e_mail$,3)
IF CVS(ecm01.e_mail$,3)<>"" or firm_id$="02" THEN
  ccaddr$="cust@basis.com"
  if sls_email$<>"" then ccaddr$ = ccaddr$ + "," + sls_email$
fi
msgtxt$=mailtext$
bcc$=""
call "sendEmail.src", from$, to$, ccaddr$, bcc$, subject$, msgtxt$, attach$

send_mail_done: 

IF LEN(errmsg$) OR CVS(ecm01.e_mail2$,3)="" THEN GOTO send_mail2_done
to$=CVS(ecm01.e_mail2$,3)
ccaddr$=""

send_mail2_done: 
PRINT (gb__sysgui)'SETCURSOR'(0)
IF LEN(errmsg$) THEN 
  gosub no_ack
  return
fi
if reset_list$="" then return
to$="sales@basis.com"
ccaddr$="cust@basis.com"
bcc$ = ""
attach$=""
subject$="License Reset Request from Bcomm"
msgtxt$=reset_text$+reset_list$
call "sendEmail.src", from$, to$, ccaddr$, bcc$, subject$, msgtxt$, attach$

 RETURN

REM ' -----------------------------------------------------------------
REM ' Send Mail Failure
REM ' -----------------------------------------------------------------

Send_Mail_Failure: 
LET errmsg$="Couldn't find mailcall"

from$=CVS(arm10f.slspsn_name$,3)+" <"+CVS(arm10f.e_mail$,3)+">"
subject$="Problem with BASIS Order "+STR(order_number)
attach$=""
to$=CVS(ecm01.e_mail$,3)
ccaddr$=CVS(arm10f.slspsn_name$,3)+" <"+CVS(arm10f.e_mail$,3)+">"+",BASIS Customer Service <cust@basis.com>"
bcc$=""
LET temp$=CVS(STR(total:amount_mask$),3+64)
msgtxt$="Credit card transaction failed for customer "+cust_num$+" order "+order_number$+" ("+temp$+")" + $0A$
call "sendEmail.src", from$, to$, ccaddr$, bcc$, subject$, msgtxt$, attach$

send_mail_failure_done: 
IF LEN(errmsg$) OR CVS(ecm01.e_mail2$,3)="" THEN GOTO send_mail2_failure_done
to$=CVS(ecm01.e_mail2$,3)
ccaddr$=""

send_mail2_failure_done: 
PRINT (gb__sysgui)'SETCURSOR'(0)
IF LEN(errmsg$) THEN gosub no_ack
 to$="cust@basis.com,sales@basis.com"
 ccaddr$=""
 bcc$ = ""
 attach$ = ""
 msgtxt$=are64.cc_message$
 call "sendEmail.src", from$, to$, ccaddr$, bcc$, subject$, msgtxt$, attach$
RETURN

no_ack:
junk$="M12"+$0a$
mb_mode=0
gosub translate_mbox
RETURN

REM ' -----------------------------------------------------------------
REM ' Enable Checkout 2 CC Info
REM ' -----------------------------------------------------------------

Enable_Checkout_2_CC_Info: 

LET save_context=DEC(CTRL(gb__sysgui))
LET credit_card_id=NUM(FATTR(win_checkout_2$,"Credit_Card","ID"))
LET credit_card_list_id=NUM(FATTR(win_checkout_2$,"Credit_Card_List","ID"))
LET visa_id=NUM(FATTR(win_checkout_2$,"Visa","ID"))
LET mastercard_id=NUM(FATTR(win_checkout_2$,"MasterCard","ID"))
LET american_express_id=NUM(FATTR(win_checkout_2$,"American_Express","ID"))
LET number_id=NUM(FATTR(win_checkout_2$,"Number","ID"))
LET name_id=NUM(FATTR(win_checkout_2$,"Name","ID"))
LET expiry_month_id=NUM(FATTR(win_checkout_2$,"Expiry_Month","ID"))
LET expiry_year_id=NUM(FATTR(win_checkout_2$,"Expiry_Year","ID"))
LET save_credit_card_id=NUM(FATTR(win_checkout_2$,"Save_Credit_Card","ID"))

PRINT (gb__sysgui)'CONTEXT'(gb__win.checkout_2),'ENABLE'(credit_card_id),'ENABLE'(credit_card_list_id),'ENABLE'(visa_id),'ENABLE'(mastercard_id),'ENABLE'(american_express_id),'ENABLE'(number_id),'ENABLE'(name_id),'ENABLE'(expiry_month_id),'ENABLE'(expiry_year_id),'ENABLE'(save_credit_card_id),'CONTEXT'(save_context)

RETURN


REM ' -----------------------------------------------------------------
REM ' Disable Checkout 2 CC Info
REM ' -----------------------------------------------------------------

Disable_Checkout_2_CC_Info: 

LET save_context=DEC(CTRL(gb__sysgui))

LET credit_card_id=NUM(FATTR(win_checkout_2$,"Credit_Card","ID"))
LET credit_card_list_id=NUM(FATTR(win_checkout_2$,"Credit_Card_List","ID"))
LET visa_id=NUM(FATTR(win_checkout_2$,"Visa","ID"))
LET mastercard_id=NUM(FATTR(win_checkout_2$,"MasterCard","ID"))
LET american_express_id=NUM(FATTR(win_checkout_2$,"American_Express","ID"))
LET number_id=NUM(FATTR(win_checkout_2$,"Number","ID"))
LET name_id=NUM(FATTR(win_checkout_2$,"Name","ID"))
LET expiry_month_id=NUM(FATTR(win_checkout_2$,"Expiry_Month","ID"))
LET expiry_year_id=NUM(FATTR(win_checkout_2$,"Expiry_Year","ID"))
LET save_credit_card_id=NUM(FATTR(win_checkout_2$,"Save_Credit_Card","ID"))

REM ' if this is a zero-cost order, don't allow credit card payment

IF total=0 THEN PRINT (gb__sysgui)'CONTEXT'(gb__win.checkout_2),'DISABLE'(credit_card_id),'DISABLE'(credit_card_list_id),'DISABLE'(visa_id),'DISABLE'(mastercard_id),'DISABLE'(american_express_id),'DISABLE'(number_id),'DISABLE'(name_id),'DISABLE'(expiry_month_id),'DISABLE'(expiry_year_id),'DISABLE'(save_credit_card_id),'CONTEXT'(save_context) ELSE PRINT (gb__sysgui)'CONTEXT'(gb__win.checkout_2),'ENABLE'(credit_card_id),'DISABLE'(credit_card_list_id),'DISABLE'(visa_id),'DISABLE'(mastercard_id),'DISABLE'(american_express_id),'DISABLE'(number_id),'DISABLE'(name_id),'DISABLE'(expiry_month_id),'DISABLE'(expiry_year_id),'DISABLE'(save_credit_card_id),'CONTEXT'(save_context)
RETURN

REM ' -----------------------------------------------------------------
REM ' Init Credit Card
REM ' -----------------------------------------------------------------

Init_Credit_Card: 

REM 'win_credit_card$=fngb__get_screen$(win_id_credit_card$,win_credit_card$)

LET temp$=""
LET year=NUM(DATE(0:"%Yl"))
FOR temp=year TO year+10
    LET temp$=temp$+STR(temp)+$0A$
NEXT temp
LET win_credit_card.expiry_year$=temp$

LET temp$=""
FOR temp=1 TO 12
    LET temp$=temp$+DATE(JUL(year,temp,1):"%Ml")+$0A$
NEXT temp
LET win_credit_card.expiry_month$=temp$

LET win_credit_card$=fngb__put_fields$(win_id_credit_card$,win_credit_card$,"expiry_year,expiry_month")

LET init_credit_card=1

RETURN


REM ' -----------------------------------------------------------------
REM ' license list
REM ' -----------------------------------------------------------------

license_list: 
LET license_list$="",this_license$="",temp_list$=""
READ (csm13,KEY=firm_id$+"E"+prdcode$,DOM=*next)
while 1
  READ RECORD (csm13,END=*break)csm13$
  IF csm13.firm_id$+csm13.cm_file_type$+csm13.cm_id_1$<>firm_id$+"E"+prdcode$ THEN break
  IF ltcode$=csm13.cm_id_2$ THEN LET this_license$=csm13.cm_id_2$ ELSE LET temp_list$=temp_list$+csm13.cm_id_2$
wend
LET temp_list$=this_license$+temp_list$
LET license_desc_list$="",license_type_index=-1,index=0
IF temp_list$="" THEN RETURN
IF ltcode$="" THEN LET ltcode$=temp_list$(1,3)
dim csm05$:fattr(csm05$)
READ RECORD (csm05,KEY=firm_id$+ltcode$,ERR=*next)csm05$
expiring_license=(csm05.expires$="Y")+(csm05.license_type$="EXP")
FOR temp=1 TO LEN(temp_list$) STEP 3
  LET csm05.license_type$=temp_list$(temp,3)
  LET csm05.description$=csm05.license_type$
  READ RECORD (csm05,KEY=firm_id$+csm05.license_type$,ERR=*next)csm05$
  if csm05.online_flag$<>"Y" then continue
  rem 'Select only current lic type for expiring license - can't change exp type
  if expiring_license and csm05.license_type$<>ltcode$ THEN continue
  rem 'Select only permanent lic types if current lic is not expiring
  if  csm05.expires$="Y" and expiring_license=0 THEN continue
  LET license_desc_list$=license_desc_list$+CVS(csm05.description$,3)+$0A$
  license_list$=license_list$+temp_list$(temp,3)
  IF csm05.license_type$=ltcode$ THEN LET license_type_index=index
  LET index=index+1
NEXT temp
IF license_type_index>=0 THEN LET license_desc_list$=license_desc_list$+$FF$+STR(license_type_index)
rem 'disable list if 1 of 2 options is for runtime - use checkbox to set runtimes
if index=2 and pos("RTM"=license_list$,3) then index=1

disable_list_button:
rem 'disable list button if no choices
if new_context=gb__win.item or new_context=gb__win.trade or new_context=gb__win.edit_sn then
  PRINT (gb__sysgui)'CONTEXT'(new_context),
  if lb_id then 
    PRINT (gb__sysgui)'enable'(lb_id)
    IF index=1 THEN PRINT (gb__sysgui)'disable'(lb_id) 
  fi
fi
lb_id=0
RETURN

REM ' -----------------------------------------------------------------
REM ' product list
REM ' -----------------------------------------------------------------

product_list: 
LET product_list$="",this_code$=""
READ (csm13,KEY=firm_id$+"D"+product_code$,DOM=*next)
while 1
  READ RECORD (csm13,END=*break)csm13d$
  IF csm13d.firm_id$+csm13d.cm_file_type$+csm13d.product$<>firm_id$+"D"+product_code$ THEN break
  IF  pos(csm13d.new_product$=product_list$,3) then continue
  READ RECORD (csm01,KEY=firm_id$+csm13d.new_product$,DOM=*continue)csm01$
  IF csm13d.type_of_sale$="TRD" THEN IF sam_active$="N" continue
  IF product_code$=csm13d.new_product$ THEN LET this_code$=product_code$ ELSE if csm01.online_flag$="Y" then LET product_list$=product_list$+csm13d.new_product$
wend
LET product_list$=this_code$+product_list$
RETURN

REM ' -----------------------------------------------------------------
REM ' Open Files
REM ' -----------------------------------------------------------------

Open_Files: 

LET chan$=""; REM ' track channels we open so we can close them at EOJ

CALL "ec_open::ARE03"; LET chan$=chan$+STR(are03:"0000")
CALL "ec_open::ARE04"; LET chan$=chan$+STR(are04:"0000")
CALL "ec_open::ARE07"; LET chan$=chan$+STR(are07:"0000")
CALL "ec_open::ARE13"; LET chan$=chan$+STR(are13:"0000")
CALL "ec_open::ARE33"; LET chan$=chan$+STR(are33:"0000")
CALL "ec_open::ARE43"; LET chan$=chan$+STR(are43:"0000")
CALL "ec_open::ARE63"; LET chan$=chan$+STR(ARE63:"0000")
CALL "ec_open::ARE64"; LET chan$=chan$+STR(ARE64:"0000")
CALL "ec_open::ARE73"; LET chan$=chan$+STR(are73:"0000")
CALL "ec_open::ARE83"; LET chan$=chan$+STR(are83:"0000")
CALL "ec_open::ARM01"; LET chan$=chan$+STR(arm01:"0000")
CALL "ec_open::ARM02"; LET chan$=chan$+STR(arm02:"0000")
CALL "ec_open::ARM10B"; LET chan$=chan$+STR(ARM10B:"0000")
CALL "ec_open::ARM10E"; LET chan$=chan$+STR(arm10e:"0000")
CALL "ec_open::ARM10F"; LET chan$=chan$+STR(arm10f:"0000")
CALL "ec_open::ARM10I"; LET chan$=chan$+STR(arm10i:"0000")
CALL "ec_open::ARS10N"; LET chan$=chan$+STR(ARS10N:"0000")
CALL "ec_open::COUNTRY"; LET chan$=chan$+STR(country:"0000")
CALL "ec_open::CSM01"; LET chan$=chan$+STR(csm01:"0000")
CALL "ec_open::CSM02"; LET chan$=chan$+STR(csm02:"0000")
CALL "ec_open::CSM03"; LET chan$=chan$+STR(csm03:"0000")
CALL "ec_open::CSM04"; LET chan$=chan$+STR(csm04:"0000")
CALL "ec_open::CSM05"; LET chan$=chan$+STR(csm05:"0000")
CALL "ec_open::CSM06"; LET chan$=chan$+STR(CSM06:"0000")
CALL "ec_open::CSM07"; LET chan$=chan$+STR(csm07:"0000")
CALL "ec_open::CSM10"; LET chan$=chan$+STR(csm10:"0000")
CALL "ec_open::CSM13"; LET chan$=chan$+STR(csm13:"0000")
CALL "ec_open::CSM13A"; LET chan$=chan$+STR(CSM13A:"0000")
CALL "ec_open::CSM13B"; LET chan$=chan$+STR(CSM13B:"0000")
CALL "ec_open::CSM13C"; LET chan$=chan$+STR(CSM13C:"0000")
CALL "ec_open::CSM13D"; LET chan$=chan$+STR(CSM13D:"0000")
CALL "ec_open::CSM13H"; LET chan$=chan$+STR(CSM13H:"0000")
CALL "ec_open::ECE11"; LET chan$=chan$+STR(ece11:"0000")
CALL "ec_open::ECE83"; LET chan$=chan$+STR(ece83:"0000")
CALL "ec_open::ECM01"; LET chan$=chan$+STR(ecm01:"0000")
CALL "ec_open::IVM01"; LET chan$=chan$+STR(ivm01:"0000")
CALL "ec_open::IVS01"; LET chan$=chan$+STR(ivs01:"0000")
CALL "ec_open::LICENSE_RESET"; LET chan$=chan$+STR(LICENSE_RESET:"0000")
CALL "ec_open::LOGEXTRACT"; LET chan$=chan$+STR(LOGEXTRACT:"0000")
CALL "ec_open::SHIPPING"; LET chan$=chan$+STR(SHIPPING:"0000")
CALL "ec_open::SERIALNUMBERS"; LET chan$=chan$+STR(SERIALNUMBERS:"0000")
CALL "ec_open::SN_LICENSE"; LET chan$=chan$+STR(SN_LICENSE:"0000")
CALL "ec_open::SN_HOST"; LET chan$=chan$+STR(SN_HOST:"0000")
CALL "ec_open::SMC01"; LET chan$=chan$+STR(smc01:"0000")
CALL "ec_open::SNM01"; LET chan$=chan$+STR(snm01:"0000")
CALL "ec_open::SNM02"; LET chan$=chan$+STR(snm02:"0000")
CALL "ec_open::SNT01"; LET chan$=chan$+STR(snt01:"0000")
CALL "ec_open::SNT02"; LET chan$=chan$+STR(snt02:"0000")
CALL "ec_open::STATES"; LET chan$=chan$+STR(states:"0000")
CALL "ec_open::TMM01"; LET chan$=chan$+STR(tmm01:"0000")
Call "ec_open::SAM2_DS_XREF";LET chan$=chan$+STR(sam2_ds_xref:"0000")
rem ' get reset reasons & close file - no need to keep it open
call "ec_open::reset_reason"
reset_reason_list$="Select a reason for reset:"+$0a$
reset_code_list$="??"
while 1
  readrecord(reset_reason,err=*break)reset_reason$
  reset_reason_list$=reset_reason_list$+cvs(reset_reason.reason$,3)+$0a$
  reset_code_list$=reset_code_list$+reset_reason.reset_code$
wend
close(reset_reason,err=*next)
reset_reason_list$=reset_reason_list$+$ff$+"0"

RETURN

REM ' -----------------------------------------------------------------
REM ' Close Files
REM ' -----------------------------------------------------------------

Close_Files: 

IF LEN(chan$) THEN LET chan=NUM(chan$(1,4)),chan$=chan$(5); CLOSE (chan); GOTO close_files

RETURN

REM ' -----------------------------------------------------------------
REM ' Get Order Number
REM ' -----------------------------------------------------------------

Get_Order_Number: 

REM ' ARS10N - next order number

EXTRACT RECORD (ARS10N,KEY=firm_id$+"N",TIM=5,ERR=get_ars10n_locked)ars10n$
LET order_number=ars10n.nxt_ord_nbr
LET ars10n.nxt_ord_nbr=ars10n.nxt_ord_nbr+1
LET ars10n$=FIELD(ars10n$)
WRITE RECORD (ARS10N,KEY=firm_id$+"N")ars10n$
LET order_number$=STR(order_number:"0000000")

RETURN

get_ars10n_locked: 
IF ERR=0 THEN WAIT 1; RETRY
GOTO gb__err

REM ' -----------------------------------------------------------------
REM ' Put Order Number
REM ' -----------------------------------------------------------------

Put_Order_Number: 

REM ' ARS10N - next order number

EXTRACT RECORD (ARS10N,KEY=firm_id$+"N",TIM=5,ERR=put_ars10n_locked)ars10n$
IF ars10n.nxt_ord_nbr=NUM(order_number$)+1 THEN LET ars10n.nxt_ord_nbr=NUM(order_number$)
LET ars10n$=FIELD(ars10n$)
WRITE RECORD (ARS10N,KEY=firm_id$+"N")ars10n$

RETURN

put_ars10n_locked: 
IF ERR=0 THEN WAIT 1; RETRY

GOTO gb__err

REM ' -----------------------------------------------------------------
REM ' Get SAM Contract
REM ' -----------------------------------------------------------------

Get_SAM_Contract: 

start_jul=JUL(0,0,0)
annual_jul=start_jul+duration
FIND RECORD (smc01,KEY=contract$,DOM=new_contract)smc01$
start_jul=fnjul(smc01.contr_start$)
IF temp$="TRD" or temp$="EXC" THEN GOTO new_contract
if xday then 
  annual_jul=fnjul(smc01.expire_on_dt$)+duration
  if sam_renew_status=0 then goto finish_contract else goto new_contract
fi
rem "Renew DV1: contract date is rolled in BSN.20, but ok to roll here, since BSN.20 checks the date and won't roll it again - leave BSN.20 alone unless directcomm gets changed to roll DV1 dates
if ece11.modify_flag$="R" then 
  if sam_renew_status=0 then goto finish_contract else goto new_contract
fi
GOTO contract_done

new_contract: 
DIM counter$:"type:c(3),filler:c(7),nbr:n(6)"
LET counter.type$="CTR"
LET counter.nbr=1
EXTRACT RECORD (SERIALNUMBERS,KEY=counter.type$,DOM=*NEXT)counter$
LET contract$=STR(counter.nbr:"000000")
LET counter.nbr$=STR((counter.nbr+1):"000000")
LET counter$=FIELD(counter$)
WRITE RECORD (SERIALNUMBERS,KEY=counter.type$)counter$

LET smc01.contract$=contract$
LET smc01.contr_type$="SM1"
IF pos(ece11.item_number$(13,3)="KIT,NFR") THEN LET smc01.contr_type$="DV1"
IF rent_item THEN smc01.contr_type$="RN1"
LET smc01.firm_id$=firm_id$
LET smc01.customer_nbr$=cust_num$
if firm_id$="02" then
  smc01.e_mail$=arm10f.e_mail$
else
  smc01.e_mail$=ecm01.e_mail$
endif
close(tmm03,err=*next)
call "ec_open::tmm03"
read(tmm03,key=firm_id$+cust_num$,dom=*next)
while 1
  read record(tmm03,end=*break)tmm03$
  if pos(firm_id$+cust_num$=tmm03$)<>1 then break
  em$=cvs(tmm03.e_mail$,3)
  if em$="" or pos("@"=em$)=0 then continue
  if tmm03.sam_contact$="Y" then smc01.e_mail$=em$;break
wend
close(tmm03,err=*next)

finish_contract:
if jul_renew then annual_jul=jul_renew
LET expire$=DATE((annual_jul):"%Yl%Mz%Dz")
LET smc01.contr_start$=DATE(start_jul:"%Yl%Mz%Dz")
LET smc01.annual_dt$=expire$
LET smc01.expire_on_dt$=expire$
if smc01.contr_type$="SM1" then smc01.sam_active$="Y" else smc01.sam_active$=" "
LET smc01.new_flag$="Y"
LET smc01.invoiced_flag$=" "
LET smc01$=FIELD(smc01$)

write_contract: 
LET sam_active$="Y"
WRITE RECORD (smc01)smc01$

contract_done: 
RETURN

get_contract_info: 
LET sam_flag=0,contract_type$="",sam_active$="",days_expired=0
if len(cvs(snm01.contract$,3))<>6 then goto no_contract
FIND RECORD (smc01,KEY=snm01.contract$,DOM=no_contract)smc01$
LET contract_type$=smc01.contr_type$
LET days_expired=JUL(0,0,0)-fnjul(smc01.annual_dt$)
LET sam_active$=snm01.sam_active$
IF smc01.sam_active$="N" OR days_expired>0 THEN LET sam_active$="N"
IF sam_active$<>"N" AND POS("SM"=contract_type$) THEN sam_flag=1,sam_active$="Y"
IF POS("DV"=contract_type$) THEN sam_active$=""
no_contract: 
sam_renew_status=2
renewable=0
if contract_type$<>"" then call "renew_sam.bbj",snm01.serial_nbr$,sam_renew_status
dummy$=stbl("!CLEAR","buyback",err=*next)
if sam_renew_status<2 then 
  if contract_type$="SM1" then 
    if days_expired>0 then dummy$=stbl("buyback",cvs(snm01.serial_nbr$,3)+":"+date(0:"%Y%Mz%Dz")+":"+str(days_expired)) 
    if days_expired<15 and days_expired>-46 then renewable=1
    if days_expired<=0 then sam_renew_status=2
  else
    if days_expired<46 and days_expired>-46 and pos(contract_type$="DV1,RN1") then renewable=1
  fi
fi
rem 'sam_renew_status from renew_sam.bbj
rem '0 = Ok to renew using same contract or no SAM contract
rem '1 = Ok to renew- other sn's on this contract, make new one
rem '10 = SN not found or inactive
rem '15 = Current order exists for this SN
rem '20 = Open SAM invoice exists for this SN
rem '99 = Undetermined program failure
RETURN

upg_to:
bbjprod$=ece11.item_number$(1,3)
bbjrev$=ece11.item_number$(10,3)

rem 'Not already a BBj product
if pos(bbjprod$="BEFBERBSFBSR,3")=0 then
 bbjprod$="B"+ece11.sam_coverage$+"R"
 if ece11.item_number$(13,3)<>"RTM" and ece11.item_number$(1,3)<>"ODB" then let bbjprod$(3,1)="F"
fi
rem 'Find the current rev of BBj
read (csm04,key=firm_id$+"CUR",dom=*next)*,bbjrev$
rem 'Not a valid BBj product
if pos(bbjprod$="BEFBERBSFBSR,3")=0 then bbjprod$="   ",bbjrev$="   "
rem 'Already got current product&rev
if bbjprod$=ece11.item_number$(1,3) and bbjrev$=ece11.item_number$(10,3) then bbjprod$="   ",bbjrev$="   "
ece11.upg_to_product$=bbjprod$
ece11.upg_to_rev$=cvs(bbjrev$,3)
return

sn_ec_price_setup: 
dim snm01$:fattr(snm01$)
READ RECORD (snm01,KNUM=0,KEY=sn$,err=*next)snm01$
dim snm02$:fattr(snm02$)
READ RECORD (snm02,KNUM=0,KEY=sn$,err=*next)snm02$
ds_xref$=""
readrecord(sam2_ds_xref,key=sn$,knum=0,err=*next)sam2_ds_xref$;ds_xref$=sam2_ds_xref.ds_serial_nbr$
LET cur_item$=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$
LET contract$=CVS(snm01.contract$,3)
GOSUB get_contract_info
DIM csm05$:FATTR(csm05$)
READ RECORD (csm05,KEY=firm_id$+ece11.item_number$(13,3),DOM=*NEXT)csm05$
expiring_license=(csm05.expires$="Y")+(csm05.license_type$="EXP")
RETURN

ece11_ec_price: 
READ RECORD (csm01,KEY=firm_id$+ece11.item_number$(1,3))csm01$
LET sam_required$=csm01.ctr_required$,duration=csm01.ctr_duration
DIM type$[0:1],price[0:1]; REM 'dummies, actually dimensioned in ec_price
LET add_tsi=ece11.add_support
no_rif=(ece11.no_rif_flag$="Y")

DIM cur_users[2],new_users[2],cur_lprop$[2],new_lprop$[2]
if cvs(sn$,3)<>"" then
  cur_lprop$[0]=snm02.lic_property1$
  cur_lprop$[1]=snm02.lic_property2$
  cur_users[0]=snm02.users1
  cur_users[1]=snm02.users2
  if cur_users[0]+cur_users[1]=0 then cur_users[0]=snm01.users
fi
new_users[0]=ece11.users
new_users[1]=ece11.users2
new_lprop$[0]=ece11.lic_property1$
new_lprop$[1]=ece11.lic_property2$
gosub user_sort
original_users=cur_users[0]
original_users2=cur_users[1]
temp$=ece11.annual_dt$
if fnnum(temp$) then
  jul_renew=fnjul(temp$)
else
  jul_renew=0
fi

qty=ece11.qty,new_item$=ece11.item_number$
rem 'lowercase y/n indicates uncounted flag has changed
if pos(ece11.uncounted_flag$="yn") then uncounted_change=1 else uncounted_change=0
rent_item=(pos("RN1"=ece11.item_number$)=13)
hold_contract$=contract$
hold_dt=jul_renew
if ece11.modify_flag$="R" then
  contract$=""
  jul_renew=jul(0,0,0)+365
  sam_flag=1
fi
gosub ec_price
contract$=hold_contract$
jul_renew=hold_dt
GOSUB total_price
RETURN

win_title:
temp$=ctrl(gb__sysgui,0,1,new_context),temp1$=temp$
pcn1=pos("    "=temp$)
if pcn1 then temp$=temp$(1,pcn1-1)
temp$=cvs(temp$,3)
if new_context<>gb__win.login then temp$=temp$+fill(4)+cust_num$+user_code$
if inhouse then
 if pos(server_name$=temp$)=0 then temp$=temp$+fill(4)+server_name$
fi
if temp1$<>temp$ then print (gb__sysgui)'context'(new_context),'title'(0,temp$)
return

ivm_item:
dim ivm01$:fattr(ivm01$)
LET ivm01.firm_id$=firm_id$,ivm01.item_number$=ivm_item$
LET ivm01.item_desc$="Not Available"
ivmok=0
FIND RECORD (ivm01,KEY=firm_id$+ivm_item$,ERR=*next)ivm01$;ivmok=1
if ivmok or len(cvs(ivm_item$,3))<15 then return
ivm_item$(10,3)="CUR"
if ivm_item$(13,3)<>"STD" and ivm_item$(1,3)="BAS" then ivm_item$(13,3)="EXP"
FIND RECORD (ivm01,KEY=firm_id$+ivm_item$,ERR=*next)ivm01$;ivmok=1
return

new_item_props:
LET users2_id=NUM(FATTR(win_item$,"users2","ID"))
LET users2_lbl_id=NUM(FATTR(win_item$,"users2_lbl","ID"))
if pos(" "=csm01.lic_property1$+csm01.lic_property2$)=0 or rent_item then
  win_item.users_lbl$="Extended users:"
  PRINT (gb__sysgui)'CONTEXT'(gb__win.item),'enable'(users2_id)
else
  win_item.users_lbl$="Users:"
  win_item.users2$=""
  PRINT (gb__sysgui)'CONTEXT'(gb__win.item),'disable'(users2_id)
fi

LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"users_lbl,users2_lbl,users2")
return

REM ' -----------------------------------------------------------------
REM ' Platform list
REM ' -----------------------------------------------------------------

Platform_list: 
DIM rec$(100)
LET temp$=""
temp=0
READ (CSM13A,KEY=firm_id$+"A"+temp_product_code$,DOM=*next)
while 1 
  READ RECORD (CSM13A,END=*break)csm13a$
  IF csm13a.firm_id$<>firm_id$ OR csm13a.cm_file_type$<>"A" OR csm13a.product$<>temp_product_code$ THEN break
  READ RECORD (csm02,KEY=firm_id$+csm13a.platform$,DOM=*continue)csm02$
  LET rec$(1)=csm02.description$
  LET rec$(95)=csm13a.platform$
  LET temp$=temp$+rec$
  if csm13a.platform$=temp_platform_code$ then temp=1 
wend

 while temp=0
  READ RECORD (csm02,KEY=firm_id$+temp_platform_code$,DOM=*break)csm02$
  temp=1
  LET rec$(1)=csm02.description$
  LET rec$(95)=temp_platform_code$
  LET temp$=temp$+rec$
wend

  LET platform_list$="",platform_desc_list$="",platform_index=-1,index=0
IF temp$="" THEN RETURN
LET temp$=SSORT(temp$,100)
FOR temp=1 TO LEN(temp$) STEP 100
    LET platform_desc_list$=platform_desc_list$+CVS(temp$(temp,90),3)+$0A$
    LET platform_list$=platform_list$+temp$(temp+94,3)
    IF temp$(temp+94,3)=temp_platform_code$ THEN LET platform_index=index
    LET index=index+1
NEXT temp
if index=1 then platform_index=0,temp_platform_code$=temp$(95,3)
IF platform_index>=0 THEN LET platform_desc_list$=platform_desc_list$+$FF$+STR(platform_index)

gosub disable_list_button
RETURN

REM ' -----------------------------------------------------------------
REM ' Os level list
REM ' -----------------------------------------------------------------

os_level_list: 
DIM rec$(100)
LET temp$=""
temp=0
READ (CSM13B,KEY=firm_id$+"B"+temp_platform_code$,DOM=*next)
while 1
  READ RECORD (CSM13B,END=*break)csm13b$
  IF csm13b.firm_id$<>firm_id$ OR csm13b.cm_file_type$<>"B" OR csm13b.platform$<>temp_platform_code$ THEN break
  REM ' now make sure this o/s level is legal for this product
  READ (CSM13H,KEY=firm_id$+"H"+csm13b.os_level$,DOM=*next)
  ok=0  
  while ok=0
    READ RECORD (CSM13H,END=*break)csm13h$
    IF csm13h.firm_id$<>firm_id$ OR csm13h.cm_file_type$<>"H" OR csm13h.os_level$<>csm13b.os_level$ THEN break
    IF csm13h.product$=temp_product_code$ THEN ok=1
  wend
  if ok=0 then continue  
  READ RECORD (csm03,KEY=firm_id$+csm13b.os_level$,DOM=*continue)csm03$
  LET rec$(1)=fnosdesc$(x$)
  LET rec$(95)=csm13b.os_level$
  LET temp$=temp$+rec$
  if csm13b.os_level$=temp_os_level_code$ then temp=1
wend
while temp=0
  READ RECORD (csm03,KEY=firm_id$+temp_os_level_code$,DOM=*break)csm03$
  LET rec$(1)=fnosdesc$(x$)
  LET rec$(95)=temp_os_level_code$
  LET temp$=temp$+rec$
  temp=1
wend
LET os_level_list$="",os_level_desc_list$="",index=0,os_level_index=-1
IF temp$="" THEN RETURN
LET temp$=SSORT(temp$,100)
FOR temp=1 TO LEN(temp$) STEP 100
  LET os_level_list$=os_level_list$+temp$(temp+94,3)
  LET os_level_desc_list$=os_level_desc_list$+CVS(temp$(temp,90),3)+$0A$
  IF temp$(temp+94,3)=temp_os_level_code$ THEN LET os_level_index=index
  LET index=index+1
NEXT temp
if index=1 then os_level_index=0,temp_os_level_code$=temp$(95,3)
IF os_level_index<>-1 THEN LET os_level_desc_list$=os_level_desc_list$+$FF$+STR(os_level_index)

gosub disable_list_button
RETURN

REM ' -----------------------------------------------------------------
REM ' Revision list
REM ' -----------------------------------------------------------------

revision_list: 
DIM rec$(100)
LET temp$="",current_rev$=" ",temp=0
READ (CSM13C,KEY=firm_id$+"C"+temp_os_level_code$,DOM=*next)
while 1
  READ RECORD (CSM13C,END=*break)csm13c$
  IF csm13c.firm_id$<>firm_id$ OR csm13c.cm_file_type$<>"C" OR csm13c.os_level$<>temp_os_level_code$ THEN break
  READ RECORD (csm04,KEY=firm_id$+csm13c.product_rev$,DOM=*continue)csm04$
  LET rec$(1)=csm04.description$
  LET rec$(95)=csm04.product_rev$
  LET temp$=temp$+rec$
  if temp_product_rev_code$=csm04.product_rev$ then temp=1 
  if csm13c.product_rev$="CUR" then 
    rec$(1)="CURRENT"
    rec$(95)=csm04.description$
    temp$=rec$
    temp=1
    break
  fi
wend
while temp=0
  READ RECORD (csm04,KEY=firm_id$+temp_product_rev_code$,DOM=*break)csm04$
  LET rec$(1)=csm04.description$
  LET rec$(95)=csm04.product_rev$
rem  LET temp$=temp$+rec$
  temp=1
wend
LET revision_desc_list$="",revision_list$="",index=0,revision_index=-1
IF temp$="" THEN RETURN
LET temp$=SSORT(temp$,100)
FOR temp=1 TO LEN(temp$) STEP 100
  LET revision_desc_list$=revision_desc_list$+CVS(temp$(temp,90),3)+$0A$
  LET revision_list$=revision_list$+temp$(temp+94,3)
  LET current_rev$=temp$(temp+94,3)
  IF temp$(temp+94,3)=temp_product_rev_code$ THEN LET revision_index=index
  LET index=index+1
NEXT temp
gosub next_release
if index=1 then let revision_index=0,temp_product_rev_code$=temp$(95,3)
IF revision_index<>-1 THEN LET revision_desc_list$=revision_desc_list$+$FF$+STR(revision_index)

gosub disable_list_button
RETURN

next_release:
if pos("CUR"=revision_desc_list$)=0 then return
READ RECORD (csm04,KEY=firm_id$+"NXT",DOM=*next)csm04$
if pos(firm_id$+"NXT"=csm04$)<>1 then return
nxtmp$=cvs(csm04.description$,3)
pnxt=pos(nxtmp$=revision_list$,3)
if pnxt then return
countdown=fnjul(csm04.available1$(1,8))-jul(0,0,0)
if countdown<=0 then if abs(countdown)>60 then return
remaining=days_expired*-1
ctx=dec(ctrl(gb__sysgui))
if ctx=gb__win.edit_sn and (days_expired>=0 or remaining<countdown) then return

revision_list$=revision_list$+nxtmp$
revision_desc_list$=revision_desc_list$+"Next ("+nxtmp$+")"+$0A$
IF nxtmp$=temp_product_rev_code$ THEN revision_index=index
index=index+1
return

REM ' -----------------------------------------------------------------
REM ' Write are83
REM ' -----------------------------------------------------------------

Write_are83: 
are83_loop=0
while are83_loop<2
REM ' Called by create_order subroutine
LET sequence_nbr=sequence_nbr+1
LET sequence_nbr$=STR(sequence_nbr:"000")
LET are83.firm_id$=are13.firm_id$
LET are83.ar_type$=are13.ar_type$
LET are83.customer_nbr$=are13.customer_nbr$
LET are83.order_number$=are13.order_number$
LET are83.line_number$=are13.line_number$
LET are83.license_seq$=license_seq$
LET are83.sequence_nbr$=sequence_nbr$
REM 'are83.action$ must be set before calling this subroutine
LET are83.snhist_flag$="N"
REM 'are83.auth_code$ must be set before calling this subroutine
if pos("U"=are73.type_of_sale$)=1 then
  LET are83.upg_to_product$=ece11.upg_to_product$
  LET are83.upg_to_rev$=ece11.upg_to_rev$
fi
LET ffl$=FATTR(are83$,"available"),ffl=DEC(ffl$(10,2))
LET are83.available$=FILL(ffl)
LET ffl$=FATTR(are83$,"dealer_str"),ffl=DEC(ffl$(10,2))
LET are83.dealer_str$=FILL(ffl)
LET are83.serial_nbr$=sn$
if are83_loop=1 then LET are83.serial_nbr$=ds_xref$, are83.auth_code$=""
REM 'are83.license_cnt must be set before calling this subroutine

LET are83_key$=are83.firm_id$+are83.ar_type$+are83.customer_nbr$+are83.order_number$+are83.line_number$+are83.license_seq$+are83.sequence_nbr$
LET are83$=FIELD(are83$)
WRITE RECORD (are83,KEY=are83_key$)are83$

LET temp$="DeactivateModify    Activate  ",temp=POS(are83.action$="DMA")
IF temp THEN LET mailtext$=mailtext$+"   "+temp$(temp*10-9,10)+" "+are83.serial_nbr$+sam_renew$ + $0A$
if are83.action$="D" then deactivated_list$=deactivated_list$+are83.serial_nbr$+$0a$
if are83_loop=0 then
  readrecord(sam2_ds_xref,key=sn$,knum=0,err=*next)sam2_ds_xref$
  sam2_ds_xref.available$="X",sam2_ds_xref$=field(sam2_ds_xref$)
  if sam2_ds_xref.client_serial_nbr$=sn$ then writerecord(sam2_ds_xref)sam2_ds_xref$
fi
if cvs(ds_xref$,3)="" or pos(are73.type_of_sale$="SM1,ADD")=0 then break
are83_loop=are83_loop+1
wend

RETURN

REM ' -----------------------------------------------------------------
REM ' license_history
REM ' -----------------------------------------------------------------

license_history: 
LET ichan=LOGEXTRACT,temp_item$="",lbox$="",l_hostid$=""
DIM tmpl$:FATTR(logextract$); GOSUB build_temp_item
LET ichan=SN_LICENSE
DIM tmpl$:FATTR(sn_license$); GOSUB build_temp_item
LET ichan=LICENSE_RESET,lrx$=CVS(FATTR(license_reset$),4)
LET p=POS("RESET_DATE"=lrx$)
IF p THEN LET lrx$=lrx$(1,p-1)+lrx$(p+6)
LET p=POS("RESET_TIME"=lrx$)
IF p THEN LET lrx$=lrx$(1,p-1)+lrx$(p+6)
resets=0
DIM tmpl$:lrx$; GOSUB build_temp_item
IF LEN(temp_item$)<50 THEN GOTO current_status
LET temp_item$=SSORT(temp_item$,50)
LET holddate$="",fill$=FILL(65,"_")
license_history_loop: 
date$=temp_item$(1,8)
time$=temp_item$(9,6)
ichan=NUM(temp_item$(15,2))
k$=CVS(temp_item$(17,34),2)
temp_item$=temp_item$(51)
IF holddate$=date$ THEN LET lbox$=lbox$+$0A$ ELSE LET lbox$=lbox$+fill$+$0A$+date$(5,2)+"/"+date$(7,2)+"/"+date$(1,4)+$0A$
LET holddate$=date$,time$=time$(1,2)+":"+time$(3,2)
SWITCH ichan
    CASE LOGEXTRACT; DIM tmpl$:FATTR(logextract$); BREAK
    CASE SN_LICENSE; DIM tmpl$:FATTR(sn_license$); BREAK
    CASE LICENSE_RESET; DIM tmpl$:lrx$; BREAK
SWEND
READ RECORD (ichan,KEY=k$)tmpl$
LET lbox$=lbox$+"  "; REM +time$+" "
SWITCH ichan
  CASE LOGEXTRACT; LET lbox$=lbox$+"License Request Received"+$0A$
  LET x$=CVS(tmpl.firstname$+tmpl.lastname$,35),y$=CVS(tmpl.company$,3)
  IF x$<>"" AND y$<>"" THEN LET x$=x$+"/"
  IF x$+y$<>"" THEN LET lbox$=lbox$+"        From: "+x$+y$+$0A$
  IF CVS(tmpl.email$,2)<>"" THEN LET lbox$=lbox$+"       Email: "+tmpl.email$+$0A$
  IF CVS(tmpl.fax$,2)<>"" THEN LET lbox$=lbox$+"         Fax: "+tmpl.fax$+$0A$
  IF CVS(tmpl.hostname$,2)<>"" THEN LET lbox$=lbox$+"    HostName: "+tmpl.hostname$+$0A$
  LET lbox$=lbox$+"      HostId: "+tmpl.hostid$+$0A$
  LET lbox$=lbox$+"      Auth #: "+tmpl.authnum$+$0A$
  BREAK
  CASE SN_LICENSE; dim sn_host$:fattr(sn_host$) 
  readrecord(sn_host,key=tmpl$(1,26),dom=*next)sn_host$
  l_hostid$=tmpl.hostid$,xx$=""
  if cvs(sn_host.hostid1$,3)<>"" then
    xx$=$0a$
    l_hostid$=cvs(sn_host.hostname1$,3)+" "+cvs(sn_host.hostid1$,3)+","+$0a$
    l_hostid$=l_hostid$+cvs(sn_host.hostname2$,3)+" "+cvs(sn_host.hostid2$,3)+","
    l_hostid$=l_hostid$+$0a$+cvs(sn_host.hostname3$,3)+" "+cvs(sn_host.hostid3$,3)
  fi
  LET lbox$=lbox$+"License Generated"+$0A$
  LET lbox$=lbox$+"      HostId: "+xx$+l_hostid$+$0A$
  LET lbox$=lbox$+"      Auth #: "+tmpl.authnum$+FILL(12)+"Revision: "+tmpl.prod_rev$+$0A$
  LET lbox$=lbox$+"       Users: "+STR(tmpl.users:"###0 ")+cvs(tmpl.lic_property1$+str(tmpl.users2:"#### ")+tmpl.lic_property2$,35)+FILL(15)+"LicenseType: "+tmpl.prod_type$+$0A$
  IF CVS(tmpl.expire$,2)<>"" THEN LET lbox$=lbox$+"     Expires: "+tmpl.expire$+$0A$
  BREAK
  CASE LICENSE_RESET
  rreason$="",p=pos(tmpl.reset_code$=reset_code_list$)
  if p>2 then
    p1=pos($0a$=reset_reason_list$,1,int(p/2))
    if p1 then
      rreason$=" ("+reset_reason_list$(p1+1)
      p=pos($0a$=rreason$)
      if p then rreason$=rreason$(1,p-1)+")"
    fi
  fi
  IF POS("00"=tmpl.reset_by$)=0 THEN LET tmpl.reset_by$="BASIS"
  let lbox$=lbox$+"License Status Reset by "+tmpl.reset_by$+rreason$+$0a$
  BREAK
SWEND
IF temp_item$<>"" THEN GOTO license_history_loop
current_status: 
LET s$=""
IF snm01.active_flag$<>"Y" THEN GOTO current_status_end
GOSUB license_status
IF license_status<0 THEN GOTO current_status_end
LET s$=$0A$+"Current License Status: "+STR(license_status)
IF license_status=0 THEN LET s$=s$+" (Ready for licensing)" ELSE LET s$=s$+" (Licensed)"
s$=s$+$0a$+"Resets for this License: "+str(resets)+$0a$+fill$+$0a$
current_status_end: 
LET lbox$=s$+lbox$+$0A$
RETURN

build_temp_item: 
read (ichan,key=cvs(sn$,2),dom=*next)
while 1
  let k$=key(ichan,end=*break)
  if pos(cvs(sn$,2)=k$)<>1 then break
  read record(ichan,key=k$)tmpl$
  if ichan=license_reset then
    if tmpl.reset_to$="0" then resets=resets+1 else continue
  fi
  let time$=pad(tmpl.time$,6),p=pos(":"=time$)
  if p then let time$=time$(1,p-1)+time$(p+1)+" "
  if ichan=logextract then let time$="00000"+tmpl.seq_num$
  let x$=pad(k$,34),temp_item$=temp_item$+tmpl.date$+time$+str(ichan:"00")+x$
wend
RETURN

REM ' -----------------------------------------------------------------
REM ' license_status
REM ' -----------------------------------------------------------------

license_status: 
LET license_status=-1,license_status_channel=0
READ (are83,KEY="",DOM=license_status_are83)
license_status_are83: 
LET k$=KEY(are83,END=end_license_status_are83)
READ RECORD (are83,KEY=k$)are83$
IF CVS(sn$,2)<>CVS(are83.serial_nbr$,2) OR are83.snhist_flag$="Y" OR LEN(CVS(are83.auth_code$,3))<>10 THEN GOTO license_status_are83
IF are83.action$="D" THEN LET license_status=-1; GOTO license_status_are83
LET license_status=are83.license_cnt,license_status_channel=are83,license_status_key$=k$
GOTO license_status_are83
end_license_status_are83: 
IF license_status>=0 THEN GOTO license_status_end
READ (snt01,KEY=CVS(sn$,2),ERR=license_status_snt01)
license_status_snt01: 
LET k$=KEY(snt01,END=license_status_end)
READ RECORD (snt01,KEY=k$)snt01$
IF POS(CVS(sn$,2)=snt01.serial_nbr$)<>1 THEN GOTO license_status_end
IF LEN(CVS(snt01.auth_code$,3))<>10 THEN GOTO license_status_snt01
IF snt01.action$="D" THEN LET license_status=-1; GOTO license_status_snt01
LET license_status=snt01.license_cnt,license_status_channel=snt01,license_status_key$=k$
GOTO license_status_snt01
license_status_end: 
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=101 Ctl=112 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W101_C112_PUSH_BUTTON: 
REM ' Go from Main Window to View_SN Window
old_context=gb__win.main

change_to_view_sn:
LET edit_action$="new"
DIM sn$(0)
GOSUB show_sn
LET focus_id=NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
new_context=gb__win.view_sn
gosub show_window
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=101 Ctl=116 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W101_C1018_PUSH_BUTTON: 
REM ' Go from Main to Item Window for Rental
rent_item=1
goto change_to_item

W101_C116_PUSH_BUTTON: 
REM ' Go from Main Window to Item Window
rent_item=0

change_to_item:
edit_action$="new"
win_item$=fngb__get_screen$(win_id_item$,win_item$),init_item=1
item_product_code$="",product_code$=""
item_platform_list$="",item_platform_code$="",platform_code$=""
item_os_level_list$="",item_os_level_code$="",os_level_code$=""
item_revision_list$="",item_revision_code$="",revision_code$=""
item_license_list$="",item_license_code$="",license_code$=""
LET temp$=""
if rent_item then item_product_code$="BAS",item_license_code$="RN1"
FOR temp=1 TO LEN(item_product_list$) STEP 3
  csm01.product$=item_product_list$(temp,3)
  if rent_item and csm01.product$<>item_product_code$ then continue
  csm01.description$=csm01.product$
  READ RECORD (csm01,KEY=firm_id$+csm01.product$,ERR=*next)csm01$
  temp$=temp$+CVS(csm01.description$,3)+$0A$
NEXT temp
LET win_item.product$=temp$
win_item.platform$=""
win_item.oslevel$=""
win_item.revision$=""
win_item.license$=""
LET win_item.item_number$=""
LET win_item.description$=""
LET win_item.quantity$="1"
LET win_item.users$="1"
LET win_item.reference$=""
LET win_item.price$=""
LET win_item.listprice$=""
LET win_item.comments$=""
LET win_item.sam_standard$="0"
LET win_item.renew_dt$=" "
LET win_item.runtime$="0"
LET win_item.uncounted$="0"
LET contract$=""
LET contract_type$=""
LET sam_active$=""

LET win_item$=fngb__put_screen$(win_id_item$,win_item$)
dim csm01$:fattr(csm01$)
gosub new_item_props

LET focus_id=NUM(FATTR(win_item$,"Close","ID"))
new_context=gb__win.item
old_context=gb__win.main
gosub show_window
renew_dt_id=num(fattr(win_item$,"renew_dt","ID"))
renew_dt_btn_id=num(fattr(win_item$,"renew_dt_btn","ID"))
renew_dt!=currentWindow!.getControl(renew_dt_id)
renew_dt!.setText(" ")
runtime_id=num(fattr(win_item$,"runtime","ID"))
uncounted_id=num(fattr(win_item$,"uncounted","ID"))
sam_id=num(fattr(win_item$,"sam_standard","ID"))
prd_id=num(fattr(win_item$,"product","ID"))
uncounted_chg=0
if rent_item then
  win_item.product$=win_item.product$+$FF$+"0"
  item_platform_code$="ALL"
  temp_product_code$=item_product_code$
  temp_platform_code$=item_platform_code$
  lb_id=num(fattr(win_item$,"platform","ID"))
  gosub platform_list
  item_platform_list$=platform_list$
  win_item.platform$=platform_desc_list$
  lb_id=num(fattr(win_item$,"oslevel","ID"))
  gosub os_level_list
  item_os_level_list$=os_level_list$
  win_item.oslevel$=os_level_desc_list$
  temp_os_level_code$=""
  temp_product_rev_code$=item_revision_code$
  lb_id=num(fattr(win_item$,"revision","ID"))
  gosub revision_list
  item_revision_list$=revision_list$
  win_item.revision$=revision_desc_list$
  ltcode$=item_license_code$
  prdcode$=item_product_code$
  lb_id=num(fattr(win_item$,"license","ID"))
  gosub license_list
  item_license_list$=license_list$
  win_item.license$=license_desc_list$
  PRINT (gb__sysgui)'CONTEXT'(new_context),'hide'(users2_id,users2_lbl_id,sam_id,runtime_id,uncounted_id),'disable'(prd_id),'enable'(renew_dt_btn_id,renew_dt_id)
  gosub update_item_price
  win_item$=fngb__put_screen$(win_id_item$,win_item$)
else
  PRINT (gb__sysgui)'CONTEXT'(new_context),'show'(users2_id,users2_lbl_id,sam_id,runtime_id,uncounted_id)
  PRINT (gb__sysgui)'CONTEXT'(new_context),'disable'(renew_dt_id,renew_dt_btn_id,runtime_id,uncounted_id),'enable'(prd_id)
fi
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=101 Ctl=117 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W101_C117_PUSH_BUTTON: 
REM ' Go from Main Window to Account Window
gosub open_ecm02

IF !(init_account) THEN GOSUB init_account

LET focus_id=NUM(FATTR(win_account$,"Accept","ID"))
new_context=gb__win.account
old_context=gb__win.main
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=101 Ctl=119 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W101_C119_PUSH_BUTTON: 
REM ' Go from Main Window to Cart Window

IF !(init_cart) THEN GOSUB init_cart

LET focus_id=NUM(FATTR(win_cart$,"Close","ID"))
new_context=gb__win.cart
old_context=gb__win.main
gosub show_window

REM BWH
cartWindow! = sysgui!.getWindow(gb__win.cart)
cartWindow!.getControl(150).setOpaque(sysgui!.FALSE)
cartWindow!.getControl(160).setOpaque(sysgui!.FALSE)
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=101 Ctl=120 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W101_C120_PUSH_BUTTON: 
REM ' Go from Main Window to trade_select Window
old_context=gb__win.main

change_to_trade_select: 
LET edit_action$="new"
LET win_trade_select.starting_sn$=""
LET win_trade_select.selected_desc$=""
LET win_trade_select.available_sn_lbox$=""
LET win_trade_select.selected_sn_lbox$=""
LET win_trade_select$=fngb__put_fields$(win_id_trade_select$,win_trade_select$,"starting_sn,selected_desc,available_sn_lbox,selected_sn_lbox")

LET focus_id=NUM(FATTR(win_trade_select$,"starting_sn","ID"))
new_context=gb__win.trade_select
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=103 Ctl=118 (Window Event) LIST_SELECT (N2:19)
REM ' ---------------------------------------------------------------

W103_C118_LIST_SELECT: 
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"product")
LET temp$=win_edit_sn.product$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(product_list$) THEN LET new_product_code$=product_list$(temp*3+1,3)

READ RECORD (csm01,KEY=firm_id$+snm01.product$)csm01$
LET cur_lic_props=csm01.lic_property1$<>"  "
LET cur_sam_required$=csm01.ctr_required$
READ RECORD (csm01,KEY=firm_id$+new_product_code$)csm01$
LET sam_required$=csm01.ctr_required$
LET new_lic_props=csm01.lic_property1$<>"  "

rem "** switch to trade_select **
if cur_lic_props=0 and new_lic_props then
  print(gb__sysgui)'SETCURSOR'(0)
  junk$="M13"+$0a$
  mb_mode=4+64
  gosub translate_mbox
  IF i<>6 THEN 
    new_product_code$=product_code$
    temp=pos($FF$=temp$)
    if temp then win_edit_sn.product$=temp$(1,temp)+str(0)
    LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"product")
    RETURN
  fi
  old_context=new_context
  gosub change_to_trade_select
  hold_sn$=snm01.serial_nbr$
  LET win_trade_select.starting_sn$=hold_sn$
  LET win_trade_select$=fngb__put_fields$(win_id_trade_select$,win_trade_select$,"starting_sn")
  gosub w117_c1_push_button
  gosub w117_c104_push_button
  dim start_sn$(20)  
  LET start_sn$(1)=hold_sn$
  gosub set_starting_sn 
  ctl_id=num(fattr(win_trade_select$,"exchange_btn","ID"))
  Print (gb__sysgui)'focus'(ctl_id) 
  return
fi

REM ' *** prepare platform list ***
LET temp_product_code$=new_product_code$,temp_platform_code$=""
lb_id=num(fattr(win_edit_sn$,"platform","ID"))
GOSUB platform_list
LET new_platform_code$=temp_platform_code$
LET win_edit_sn.platform$=platform_desc_list$
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"platform")

REM ' *** prepare license list ***
lb_id=num(fattr(win_edit_sn$,"license","ID"))
LET ltcode$=license_type_code$,prdcode$=product_code$
GOSUB license_list
LET new_license_code$=license_type_code$
LET win_edit_sn.license$=license_desc_list$
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"license")

REM ' *** prepare os_level list ***
gosub W103_C127_LIST_SELECT 

IF CVS(contract$,3)="" AND sam_required$="R" and cur_sam_required$<>"R" THEN LET win_edit_sn.sam_standard$="1" 
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"sam_standard")
if new_lic_props and cur_lic_props=0 then
 hide_props=0
 win_edit_sn.users2$=win_edit_sn.users$
 win_edit_sn.users$="0"
fi
if new_lic_props=0 then 
  hide_props=1
  win_edit_sn.users$=str(snm01.users)
  win_edit_sn.users2$="0"
fi
gosub edit_sn_show_props
if cur_lic_props+hide_props=0 then PRINT (gb__sysgui)'CONTEXT'(gb__win.edit_sn),'disable'(users_id) else PRINT (gb__sysgui)'CONTEXT'(gb__win.edit_sn),'enable'(users_id) 
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"users_label,users,users2")

GOSUB update_edit_sn_price

LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"comments,price,listprice")

LET sam_std_id=NUM(FATTR(win_edit_sn$,"Sam_standard","ID"))
PRINT (gb__sysgui)'CONTEXT'(gb__win.edit_sn),

IF pos(sam_required$="RN") THEN PRINT (gb__sysgui)'DISABLE'(sam_std_id) ELSE PRINT (gb__sysgui)'ENABLE'(sam_std_id)
IF sam_required$="R" and cur_sam_required$="R" and cvs(contract$,3)="" THEN PRINT (gb__sysgui)'ENABLE'(sam_std_id)

PRINT (gb__sysgui)'SETCURSOR'(0)
RETURN

edit_sn_show_props:
users_id=NUM(FATTR(win_edit_sn$,"users","ID"))
users2_id=NUM(FATTR(win_edit_sn$,"users2","ID"))
win_edit_sn.users_label$="Extended users:"
if hide_props then
 win_edit_sn.users_label$="Total users:"
 PRINT (gb__sysgui)'CONTEXT'(gb__win.edit_sn),'disable'(users2_id),
else
 PRINT (gb__sysgui)'CONTEXT'(gb__win.edit_sn),'enable'(users2_id),
fi
if contract_type$="RN1" then PRINT (gb__sysgui)'CONTEXT'(gb__win.edit_sn),'disable'(users2_id),
return

REM ' ---------------------------------------------------------------
REM ' Win=103 Ctl=127 (Window Event) LIST_SELECT (N2:19)
REM ' ---------------------------------------------------------------

W103_C127_LIST_SELECT: 
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"platform")
LET temp$=win_edit_sn.platform$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(platform_list$) THEN LET new_platform_code$=platform_list$(temp*3+1,3)

REM ' *** prepare os level list ***
LET temp_platform_code$=new_platform_code$,temp_os_level_code$="",temp_product_code$=new_product_code$
lb_id=num(fattr(win_edit_sn$,"oslevel","ID"))
GOSUB os_level_list
LET new_os_level_code$=temp_os_level_code$
LET win_edit_sn.oslevel$=os_level_desc_list$
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"oslevel")

REM ' *** prepare revision list ***
gosub W103_C135_LIST_SELECT
GOSUB update_edit_sn_price
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"oslevel,revision,comments,price,listprice")

PRINT (gb__sysgui)'SETCURSOR'(0),'flush'
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=103 Ctl=135 (Window Event) LIST_SELECT (N2:19)
REM ' ---------------------------------------------------------------

W103_C135_LIST_SELECT: 
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"oslevel")
LET temp$=win_edit_sn.oslevel$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(os_level_list$) THEN LET new_os_level_code$=os_level_list$(temp*3+1,3)

REM ' *** update revision list ***
LET temp_os_level_code$=new_os_level_code$,temp_product_rev_code$=new_product_rev_code$
GOSUB revision_list
LET win_edit_sn.revision$=revision_desc_list$
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"revision")

GOSUB update_edit_sn_price

LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"revision,comments,price,listprice")

PRINT (gb__sysgui)'SETCURSOR'(0),'flush'
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=103 Ctl=138 (Window Event) LIST_SELECT (N2:19)
REM ' ---------------------------------------------------------------

W103_C138_LIST_SELECT: 
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"revision")
LET temp$=win_edit_sn.revision$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(revision_list$) THEN LET new_product_rev_code$=revision_list$(temp*3+1,3)

LET temp1=1,temp2=0,revision$=""
IF temp THEN LET temp1=POS($0A$=temp$,1,temp)+1
IF temp1 THEN LET temp2=POS($0A$=temp$(1))
IF temp2 THEN LET revision$=temp$(temp1,temp2-1)

GOSUB update_edit_sn_price

LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"comments,price,listprice")

PRINT (gb__sysgui)'SETCURSOR'(0),'flush'
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=103 Ctl=141 (Window Event) LIST_SELECT (N2:19)
REM ' ---------------------------------------------------------------

W103_C141_LIST_SELECT: 
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"license")
LET temp$=win_edit_sn.license$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(license_list$) THEN LET new_license_code$=license_list$(temp*3+1,3)
GOSUB update_edit_sn_price

LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"comments,price,listprice")
PRINT (gb__sysgui)'SETCURSOR'(0),'flush'
RETURN

edit_sn_sam_checkbox: 
LET win_edit_sn.sam_standard$=STR(sam_flag<>0)
GOSUB update_edit_sn_price
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"comments,price,sam_standard,listprice")
renew_dt!.focus() 
PRINT (gb__sysgui)'flush'
RETURN

renew_dt_info:
  gosub renew_range
  dim param$:"mbid:c(4),lang:c(2*),text1:c(1*),text2:c(1*)"
  param.lang$=lang$
  param.mbid$="R1"
  if r0 then param.mbid$="R3"
  param.text1$=begin_dt$
  param.text2$=end_dt$
  call "ec_translate.bbj",param$
  renew_dt_info$=param.text1$+$0a$
  if jul_spec_date=jul_default then renew_dt_info$=""
return

W103_C1008_CHECK_ON: 
REM ' SAM checked
LET sam_flag=1
GOSUB edit_sn_sam_checkbox
RETURN

W103_C1008_CHECK_OFF: 
REM ' SAM unchecked
LET sam_flag=0
gosub unset_rif
GOSUB edit_sn_sam_checkbox
RETURN

W103_C1029_CHECK_ON: 
REM ' SAM RIF cancel
if sam_flag=0 then goto unset_rif 
junk$="M47"+$0a$
mb_mode=4+32
gosub translate_mbox
IF i<>6 THEN goto unset_rif
no_rif=1
GOSUB edit_sn_sam_checkbox
RETURN
unset_rif:
  win_edit_sn.no_rif$="0",no_rif=0
  win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"no_rif")
  renew_dt!.focus() 
enable_disable_rif:
  if pos("N"=exp_ok$) or sam_flag=0 then PRINT (gb__sysgui)'DISABLE'(no_rif_id) else PRINT (gb__sysgui)'enable'(no_rif_id) 
RETURN

W103_C1029_CHECK_OFF: 
no_rif=0
GOSUB edit_sn_sam_checkbox
RETURN

W103_C1017_CHECK_ON: 
REM ' Runtime checked
ltcode$="RTM"
goto rtm_edit_sn_display
RETURN

W103_C1017_CHECK_OFF: 
REM ' Runtime checked off
ltcode$=""
rtm_edit_sn_display:
if pos("BAS"=new_product_code$)=0 then
  lb_id=num(fattr(win_edit_sn$,"license","ID"))
  GOSUB license_list
  dim ivm_item$(20)
  ivm_item$(1)=new_product_code$+new_platform_code$+new_os_level_code$+new_product_rev_code$+new_license_code$
  if pos(ltcode$=license_list$) then ivm_item$(13,3)=ltcode$
  gosub ivm_item
  if ivmok then 
    win_edit_sn.license$=license_desc_list$
    win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"license")
  else
    win_edit_sn.runtime$="0"
    win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"runtime")
  fi
fi
GOSUB update_edit_sn_price
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"comments,price,listprice")
RETURN

W103_C1020_TOOL_BUTTON:
renew_dt!.focus()
renew_dt!.calendar()
print(gb__sysgui)'flush'
return

W103_C1022_PUSH_BUTTON: 
REM ' Go from Edit Sn Window to Main Window
LET focus_id=NUM(FATTR(win_main$,"View_SN","ID"))
new_context=gb__win.main
old_context=gb__win.edit_sn
gosub show_window
RETURN

W103_C1009_LOST_FOCUS:
rem ' Control lost focus
jul_renew=renew_dt!.getValue()
temp$=DATE(jul_renew:"%Mz%Dz")
if pos("0229"=temp$) then jul_renew=jul_renew+1
gosub renew_range

if sam_flag and (jul_renew<jul_begin or jul_renew>jul_end) then
  gosub invalid_date
  jul_renew=jul_default
  PRINT (gb__sysgui)'flush'
  renew_dt!.focus()
fi

renew_dt!.setValue(jul_renew)
gosub update_edit_sn_price
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"comments,price,listprice")

return

renew_range:
if new_context=gb__win.item and rent_item then r0=1 else r0=0
jul_newsam=jul(0,0,0)+365
temp$=DATE(jul_newsam:"%Yl%Mz%Dz")+"1"
temp$=stbl("sam_dt",err=*next)
dummy$=stbl("!CLEAR","sam_dt",err=*next)
jul_default=jul(num(temp$(1,4)),num(temp$(5,2)),num(temp$(7,2)))
if jul_spec_date and pos("DV"=contract_type$)=0 and (sam_active$<>"Y" or jul_default=jul_spec_date) then
  jul_renew=jul_spec_date
  jul_default=jul_spec_date
  jul_begin=jul_spec_date
  jul_end=jul_spec_date
  return
fi
use_date=num(temp$(9,1))
yy_begin=num(temp$(1,4))
mm_begin=num(temp$(5,2))-1
yy_end=yy_begin
mm_end=mm_begin+2
if mm_end>12 then mm_end=1, yy_end=yy_end+1
if mm_begin<1 then mm_begin=12,yy_begin=yy_begin-1
dd_end=31-(mm_end=4 or mm_end=6 or mm_end=9 or mm_end=11)-3*(mm_end=2)
jul_begin=jul_default-30
if jul_newsam>jul_default then jul_begin=jul_default
jul_end=jul(yy_end,mm_end,dd_end)
if jul_end<jul_newsam then jul_end=jul_newsam
if r0 then jul_begin=jul_default,jul_end=jul_default+335
begin_dt$=date(jul_begin:"%D %Ms %Yl")
end_dt$=date(jul_end:"%D %Ms %Yl")
if use_date=0 then jul_default=jul_newsam
RETURN

W103_C1009_GOT_FOCUS:
rem ' Control got focus
jul_renew=renew_dt!.getValue()
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=103 Ctl=1 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W103_C1_PUSH_BUTTON: 
REM ' Go from Edit_SN Window to Cart Window
PRINT (gb__sysgui)'SETCURSOR'(3)

GOSUB update_edit_sn_price
IF !(ok) THEN 
  PRINT (gb__sysgui)'SETCURSOR'(0)
  junk$="M20"+$0a$+cvs(comments$,3)+$0a$
  mb_mode=0
  gosub translate_mbox
  RETURN
fi

IF edit_action$="new" THEN 
  GOSUB init_cart_record
  IF LEN(status$) THEN 
    PRINT (gb__sysgui)'SETCURSOR'(0)
    RETURN
  fi
fi
LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"reference,additional_support,no_rif")
LET old_item_number$=old_product_code$+old_platform_code$+old_os_level_code$+old_product_rev_code$+old_license_code$
LET new_item_number$=new_product_code$+new_platform_code$+new_os_level_code$+new_product_rev_code$+new_license_code$

DIM item$(20)
LET item$(1)=new_item_number$
READ RECORD (csm01,KEY=firm_id$+item$(1,3))csm01$
LET sam_required$=csm01.ctr_required$
rem 'new_users[all],new_lprop$[all] were set in update_edit_sn_price
LET ece11.po_ref_number$=win_edit_sn.reference$
LET ece11.serial_nbr$=win_edit_sn.serial_number$
LET ece11.item_number$=new_item_number$
LET ece11.qty=1
LET ece11.users=new_users[0],ece11.lic_property1$=new_lprop$[0]
LET ece11.users2=new_users[1],ece11.lic_property2$=new_lprop$[1]
if ece11.users=0 then
 LET ece11.users=ece11.users2,ece11.users2=0
 LET ece11.lic_property1$=ece11.lic_property2$,ece11.lic_property2$="  "
fi
LET temp$="NS",ece11.sam_coverage$=temp$(sam_flag+1,1)
LET temp$="NY",ece11.support_only$=temp$(support_only+1,1)
LET ece11.add_support=fnnum(win_edit_sn.additional_support$)
rem 'cur_un and new_un set in update_edit_sn_price - uncounted flag changed if not equal - use lowercase y/n if changed, uppercase if no change - check in ecell_ec_price 
LET ece11.uncounted_flag$="n"
if win_edit_sn.uncounted$="1" and ece11.users+ece11.users2=1 then ece11.uncounted_flag$="y"
if cur_un=new_un then ece11.uncounted_flag$=cvs(ece11.uncounted_flag$,4)
LET ece11.annual_dt$=fill(8)
if sam_active$="Y" then ece11.annual_dt$=smc01.annual_dt$
ece11.no_rif_flag$=" "
if no_rif then ece11.no_rif_flag$="Y" 
if sam_flag then
  gosub renew_range
  if jul_renew<=jul_end and jul_renew>=jul_begin then ece11.annual_dt$=date(jul_renew:"%Yl%Mz%Dz")
fi
LET ffl$=FATTR(ece11$,"available"),ffl=DEC(ffl$(10,2))
LET ece11.available$=FILL(ffl)
gosub upg_to
ece11.reset_code$="  "
if ece11.add_support=0 or firm_id$="02" then goto edit_to_cart

LET win_reset_license$=fngb__get_screen$(win_id_reset_license$,win_reset_license$)
focus_id=NUM(FATTR(win_reset_license$,"reset_reason","ID"))
LET win_reset_license.reset_reason$=reset_reason_list$
reset_code$=reset_code_list$(1,2)
LET win_reset_license$=fngb__put_screen$(win_id_reset_license$,win_reset_license$)
new_context=gb__win.reset_license
old_context=gb__win.edit_sn
print(gb__sysgui)'context'(new_context),'enable'(0),'show'(0),'focus'(0),'raise','setcursor'(0),'flush'
print(gb__sysgui)'context'(new_context),'focus'(focus_id)
currentWindow! = sysgui!.getWindow(new_context)
return

edit_to_cart:
LET ece11$=FIELD(ece11$)
WRITE RECORD (ece11)ece11$
LET focus_id=NUM(FATTR(win_cart$,"Close","ID"))
new_context=gb__win.cart
old_context=gb__win.edit_sn
if ece11.modify_flag$="R" then old_context=gb__win.view_sn
GOSUB init_cart
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=103 Ctl=2 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W103_C2_PUSH_BUTTON: 
REM ' Go from Edit_SN Window to View_SN Window
LET focus_id=NUM(FATTR(win_view_sn$,"Change","ID"))
new_context=gb__win.view_sn
old_context=gb__win.edit_sn
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=103 Ctl=1002 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W103_C1002_PUSH_BUTTON: 
LET win_edit_sn$=fngb__get_screen$(win_id_edit_sn$,win_edit_sn$)
GOSUB update_edit_sn_price
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"comments,price,listprice")
return

REM ' ---------------------------------------------------------------
REM ' Win=104 Ctl=2 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W104_C2_PUSH_BUTTON: 
REM ' Go from Item Window to Main Window
LET focus_id=NUM(FATTR(win_main$,"View_Item","ID"))
new_context=gb__win.main
old_context=gb__win.item
gosub show_window
rent_item=0
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=105 Ctl=113 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W105_C113_PUSH_BUTTON: 
REM ' Go from Cart Window to View_SN Window
old_context=gb__win.cart
gosub change_to_view_sn
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=105 Ctl=114 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W105_C114_PUSH_BUTTON: 
REM ' Go from Cart Window to Item Window
old_context=gb__win.cart
gosub change_to_item
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=105 Ctl=2 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W105_C2_PUSH_BUTTON: 
REM ' Go from Cart Window to Main Window

LET focus_id=NUM(FATTR(win_main$,"Cart","ID"))
new_context=gb__win.main
old_context=gb__win.cart
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=105 Ctl=118 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W105_C118_PUSH_BUTTON: 
REM ' Go from Cart Window to Checkout_1 Window

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_cart$=fngb__get_screen$(win_id_cart$,win_cart$)
LET ctl_id=NUM(FATTR(win_cart$,"Reference","ID"))
LET reference$=CTRL(gb__sysgui,ctl_id,1,gb__win.cart)
entire_cart=pos("*** Entire Cart ***"=reference$) 
if entire_cart then reference$="" else GOTO chkout_continue

PRINT (gb__sysgui)'SETCURSOR'(0)
junk$="M9"+$0a$
mb_mode=1
gosub translate_mbox
IF i=2 THEN RETURN
PRINT (gb__sysgui)'SETCURSOR'(3)

chkout_continue: 
LET subtotal=0
LET listtotal=0
LET taxable=0
LET tax=0
LET freight=0
LET total=0
LET lines=0
nc_trans$=""
READ (ece11,KEY=firm_id$+cust_num$+user_code$,DOM=subtotal_loop)

subtotal_loop: 
READ RECORD (ece11,END=subtotal_endloop)ece11$
IF CVS(ece11.firm_id$,3)<>CVS(firm_id$,3) OR CVS(ece11.customer_nbr$,3)<>CVS(cust_num$,3) or cvs(ece11.user_code$,3)<>cvs(user_code$,3) THEN GOTO subtotal_endloop
IF reference$<>"" AND cvs(reference$,3)<>CVS(ece11.po_ref_number$,3) THEN GOTO subtotal_loop

LET contract$=""
LET pricecheck=1
GOSUB check_for_trade
IF trade_tran THEN GOTO price_done

DIM sn$(20)
IF LEN(CVS(ece11.serial_nbr$,3)) THEN LET sn$(1)=ece11.serial_nbr$
GOSUB sn_ec_price_setup
LET sam_flag=POS(ece11.sam_coverage$="S")
GOSUB ece11_ec_price

price_done: 
LET subtotal=subtotal+price
LET listtotal=listtotal+listprice
LET lines=lines+1
for n=0 to nbr_trans
nc_trans$=nc_trans$+ece11.line_number$+type$[n](1,3)+$0a$
next n
GOTO subtotal_loop

subtotal_endloop: 

REM ' don't generate an empty order (subtotal=0 is ok if lines>0)
IF lines=0 THEN 
  PRINT (gb__sysgui)'SETCURSOR'(0)
  junk$="M8"+$0a$
  mb_mode=0
  gosub translate_mbox
  RETURN
fi

REM ' can't purchase anything if customer is on credit hold
IF arm02.cred_hold$="Y" THEN 
  PRINT (gb__sysgui)'SETCURSOR'(0)
  junk$="M16"+$0a$,mb_mode=0
  gosub translate_mbox
  RETURN
fi
rem 'Check if this is nothing but n/c updates/platform exchanges
rem 'don't create order/invoice in that's all it is
nc_up=(subtotal=0),temptype$=nc_trans$
while pos($0a$=temptype$)=8 and nc_up
 if pos(temptype$(5,3)="UNC,UPD,PLX")=0 then nc_up=0
 temptype$=temptype$(9)
wend

gosub open_ecm02
IF !(init_checkout_1) THEN GOSUB init_checkout_1

LET focus_id=NUM(FATTR(win_checkout_1$,"Previous","ID"))
new_context=gb__win.checkout_1
old_context=gb__win.cart
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=106 Ctl=904 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W106_C904_PUSH_BUTTON: 
REM ' Push button operated

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_checkout_1$=fngb__get_screen$(win_id_checkout_1$,win_checkout_1$)

LET win_checkout_1.Ship_To_Name$=CVS(tmm01.cont_firm$,3)
LET win_checkout_1.Ship_To_Addr1$=CVS(tmm01.address_1$,3)
LET win_checkout_1.Ship_To_Addr2$=CVS(tmm01.address_2$,3)
LET win_checkout_1.Ship_To_City$=CVS(tmm01.city$,3)
LET win_checkout_1.Ship_To_State$=CVS(tmm01.state$,3)
LET win_checkout_1.Ship_To_Zip$=CVS(tmm01.zip_code$,3)
LET win_checkout_1.Ship_To_Country$=CVS(country.country_name$,3)
LET init_ship_usa=0
LET init_ship_intl=0
LET freight_zone$=country.zone$
IF firm_id$="02" THEN LET freight_zone$=country.zone2$
if tmm01.country_code$="US" then LET freight_zone$="001"
LET freight_type$=standard_freight_type$

LET win_checkout_1$=fngb__put_screen$(win_id_checkout_1$,win_checkout_1$)

LET ship_to=0; REM ' don't write ARE33 ship-to record

PRINT (gb__sysgui)'SETCURSOR'(0)

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=106 Ctl=905 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W106_C905_PUSH_BUTTON: 
REM ' Go from Checkout_1 Window to Ship_USA Window

PRINT (gb__sysgui)'SETCURSOR'(3)

IF !(init_ship_usa) THEN GOSUB init_ship_usa

LET focus_id=NUM(FATTR(win_ship_usa$,"Accept","ID"))
new_context=gb__win.ship_usa
old_context=gb__win.checkout_1
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=106 Ctl=906 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W106_C906_PUSH_BUTTON: 
REM ' Go from Checkout_1 Window to Ship_Intl Window

PRINT (gb__sysgui)'SETCURSOR'(3)

IF !(init_ship_intl) THEN GOSUB init_ship_intl

LET focus_id=NUM(FATTR(win_ship_intl$,"Accept","ID"))
new_context=gb__win.ship_intl
old_context=gb__win.checkout_1
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=106 Ctl=2 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W106_C2_PUSH_BUTTON: 
REM ' Go from Checkout_1 Window to Cart Window
close(ecm02,err=*next)

LET focus_id=NUM(FATTR(win_cart$,"Checkout","ID"))
new_context=gb__win.cart
old_context=gb__win.checkout_1
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=106 Ctl=1 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W106_C1_PUSH_BUTTON: 
REM ' Go from Checkout_1 Window to Checkout_2 Window

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_checkout_1$=fngb__get_screen$(win_id_checkout_1$,win_checkout_1$)

LET media=fnnum(win_checkout_1.media$)

REM ' if no license delivery, we must ship media
IF CVS(win_checkout_1.license_1$,3)=$$ AND CVS(win_checkout_1.license_2$,3)=$$ AND media=0 THEN 
  PRINT (gb__sysgui)'SETCURSOR'(0)
  junk$="M17"+$0a$,mb_mode=0
  gosub translate_mbox
  RETURN
fi

REM ' do some shipping address valididation
IF media THEN 
    LET bad_addr=0,temp$=CVS(win_checkout_1.ship_to_addr1$,3)+CVS(win_checkout_1.ship_to_addr2$,3)
    IF temp$=$$ OR POS("PO "=temp$)=1 OR POS("P.O."=temp$)=1 THEN LET bad_addr=1
    IF CVS(win_checkout_1.ship_to_city$,3)=$$ THEN LET bad_addr=1
    IF CVS(win_checkout_1.ship_to_country$,3)=$$ AND (CVS(win_checkout_1.ship_to_state$,3)=$$ OR CVS(win_checkout_1.ship_to_zip$,3)=$$) THEN LET bad_addr=1
    IF bad_addr THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M18"+$0a$,mb_mode=0;gosub translate_mbox; RETURN
 FI 

REM ' Allow maximum of 10 CDROMs
IF media>10 THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M19"+$0a$,mb_mode=0;gosub translate_mbox ; RETURN

REM ' Calculate freight cost assuming 1/2 pound per CD-ROM

LET freight=0
IF media=0 THEN GOTO taxable
rem IF subtotal=0 AND freight_type$="3" THEN GOTO taxable
LET weight$=STR(ROUND(media*0.5,0):"000")
READ RECORD (SHIPPING,KEY=freight_zone$+freight_type$+weight$,DOM=taxable)shipping$
LET freight=shipping.shipping_charge

taxable: 
LET taxable=subtotal
IF arm10b.tax_frt_flag$="Y" THEN LET taxable=taxable+freight
precision 6;LET tax=taxable*arm10b.tax_rate/100;precision 2

LET total=subtotal+freight+tax

IF !(init_checkout_2) THEN GOSUB init_checkout_2 ELSE LET win_checkout_2$=fngb__get_screen$(win_id_checkout_2$,win_checkout_2$)

LET win_checkout_2.reference$=cvs(reference$,3)
if cvs(win_checkout_2.contact$,3)="" then win_checkout_2.contact$=firm_id$+cust_num$+user_code$

LET win_checkout_2.subtotal$=CVS(STR(subtotal:amount_mask$),3+64)
LET win_checkout_2.tax$=CVS(STR(tax:amount_mask$),3+64)
LET win_checkout_2.freight$=CVS(STR(freight:amount_mask$),3+64)
LET win_checkout_2.total$=CVS(STR(total:amount_mask$),3+64)
LET win_checkout_2.list$=CVS(STR(listtotal:amount_mask$),3+64)

REM ' If insufficient credit or terms, disable the "On Account" button
win_checkout_2.credit_card=1
win_checkout_2.on_account=0
trm$="0305";if firm_id$="01" then trm$=trm$+"0620"
if firm_id$="02" then win_checkout_2.credit_card=0
on_terms=POS(arm02.terms_code$=trm$,2)
ctl_id=NUM(FATTR(win_checkout_2$,"On_Account","ID"))
PRINT (gb__sysgui)'CONTEXT'(gb__win.checkout_2),'DISABLE'(ctl_id)
available_credit=0
IF on_terms THEN CALL "ec_credit",firm_id$,cust_num$,available_credit
IF total=0 OR available_credit>=total THEN
  win_checkout_2.on_account=1 
  win_checkout_2.credit_card=0
  GOSUB disable_checkout_2_cc_info 
  PRINT (gb__sysgui)'CONTEXT'(gb__win.checkout_2),'ENABLE'(ctl_id)
fi
win_checkout_2.message$=""
if win_checkout_2.credit_card then 
  GOSUB enable_checkout_2_cc_info
  IF on_terms then win_checkout_2.message$="Over Credit Limit"
fi

LET win_checkout_2$=fngb__put_screen$(win_id_checkout_2$,win_checkout_2$)

LET focus_id=NUM(FATTR(win_checkout_2$,"Previous","ID"))
new_context=gb__win.checkout_2
old_context=gb__win.checkout_1
gosub show_window

REM BWH
checkout2Window! = sysgui!.getWindow(gb__win.checkout_2)
checkout2Window!.getControl(170).setOpaque(sysgui!.FALSE)
checkout2Window!.getControl(135).setOpaque(sysgui!.FALSE)
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=107 Ctl=2 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W107_C2_PUSH_BUTTON: 
REM ' Go from Ship_USA Window to Checkout_1 Window
LET focus_id=NUM(FATTR(win_checkout_1$,"Ship_USA","ID"))
new_context=gb__win.checkout_1
old_context=gb__win.ship_usa
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=107 Ctl=1 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W107_C1_PUSH_BUTTON: 
REM ' Go from Ship_USA Window to Checkout_1 Window

PRINT (gb__sysgui)'SETCURSOR'(3)

REM ' state must be selected
LET ctl_id=NUM(FATTR(win_ship_usa$,"Ship_To_State","ID"))
LET state$=CTRL(gb__sysgui,ctl_id,1,gb__win.ship_usa)
IF state$="" THEN PRINT (gb__sysgui)'SETCURSOR'(0); LET i=MSGBOX("Please select a state.",0,"State Is Required"); RETURN

LET temp_ship_usa$=win_ship_usa$; REM ' see if it changed

LET win_ship_usa$=fngb__get_screen$(win_id_ship_usa$,win_ship_usa$)

LET freight_zone$="001"
LET freight_type$="3"

IF win_ship_usa.one_day THEN LET freight_type$="1"
IF win_ship_usa.two_day THEN LET freight_type$="2"
IF win_ship_usa.three_day THEN LET freight_type$="3"

IF win_ship_usa.ship_to_name$=temp_ship_usa.ship_to_name$ AND win_ship_usa.ship_to_addr1$=temp_ship_usa.ship_to_addr1$ AND win_ship_usa.ship_to_addr2$=temp_ship_usa.ship_to_addr2$ AND win_ship_usa.ship_to_city$=temp_ship_usa.ship_to_city$ AND win_ship_usa.ship_to_state$=temp_ship_usa.ship_to_state$ AND win_ship_usa.ship_to_zip$=temp_ship_usa.ship_to_zip$ THEN GOTO ship_usa_to_checkout_1

LET win_checkout_1$=fngb__get_screen$(win_id_checkout_1$,win_checkout_1$)
LET win_checkout_1.Ship_To_Name$=win_ship_usa.Ship_To_Name$
LET win_checkout_1.Ship_To_Addr1$=win_ship_usa.Ship_To_Addr1$
LET win_checkout_1.Ship_To_Addr2$=win_ship_usa.Ship_To_Addr2$
LET win_checkout_1.Ship_To_City$=win_ship_usa.Ship_To_City$

IF CVS(win_checkout_1.Ship_To_City$,3)="" THEN LET win_checkout_1.Ship_To_City$=win_ship_usa.Ship_To_Addr2$,win_checkout_1.Ship_To_Addr2$=""; REM ' since inputs aren't labeled, city may be in addr2

LET win_checkout_1.Ship_To_State$=state$
LET win_checkout_1.Ship_To_Zip$=win_ship_usa.Ship_To_Zip$
LET win_checkout_1.Ship_To_Country$=""; REM ' leave country blank for USA
LET win_checkout_1$=fngb__put_screen$(win_id_checkout_1$,win_checkout_1$)

LET ship_to=1; REM ' write ARE33 ship-to record

ship_usa_to_checkout_1: 

LET focus_id=NUM(FATTR(win_checkout_1$,"Ship_USA","ID"))
new_context=gb__win.checkout_1
old_context=gb__win.ship_usa
gosub show_window
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=108 Ctl=2 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W108_C2_PUSH_BUTTON: 
REM ' Go from Ship_Intl Window to Checkout_1 Window

LET focus_id=NUM(FATTR(win_checkout_1$,"Ship_Intl","ID"))
new_context=gb__win.checkout_1
old_context=gb__win.ship_intl
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=108 Ctl=1 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W108_C1_PUSH_BUTTON: 
REM ' Go from Ship_Intl Window to Checkout_1 Window

PRINT (gb__sysgui)'SETCURSOR'(3)

REM ' country must be selected
LET ctl_id=NUM(FATTR(win_ship_intl$,"Ship_To_Country","ID"))
LET cntry$=CTRL(gb__sysgui,ctl_id,1,gb__win.ship_intl)
IF cntry$="" THEN 
  PRINT (gb__sysgui)'SETCURSOR'(0)
  junk$="M21"+$0a$,mb_mode=0
  gosub translate_mbox
  RETURN
fi

LET temp_ship_intl$=win_ship_intl$

LET win_ship_intl$=fngb__get_screen$(win_id_ship_intl$,win_ship_intl$)

LET cntry$=PAD(cntry$,30)
dim tmp_country$:fattr(country$)
READ RECORD (country,KEY=cntry$,knum=1,DOM=ship_intl_freight_type)tmp_country$
LET freight_zone$=tmp_country.zone$
IF firm_id$="02" THEN LET freight_zone$=tmp_country.zone2$
ship_intl_freight_type: 
LET freight_type$=" "

IF win_ship_intl.ship_to_name$=temp_ship_intl.ship_to_name$ AND win_ship_intl.ship_to_addr1$=temp_ship_intl.ship_to_addr1$ AND win_ship_intl.ship_to_addr2$=temp_ship_intl.ship_to_addr2$ AND win_ship_intl.ship_to_city$=temp_ship_intl.ship_to_city$ AND win_ship_intl.ship_to_state$=temp_ship_intl.ship_to_state$ AND win_ship_intl.ship_to_zip$=temp_ship_intl.ship_to_zip$ AND win_ship_intl.ship_to_country$=temp_ship_intl.ship_to_country$ THEN GOTO ship_intl_to_checkout_1

LET win_checkout_1$=fngb__get_screen$(win_id_checkout_1$,win_checkout_1$)
LET win_checkout_1.Ship_To_Name$=win_ship_intl.Ship_To_Name$
LET win_checkout_1.Ship_To_Addr1$=win_ship_intl.Ship_To_Addr1$
LET win_checkout_1.Ship_To_Addr2$=win_ship_intl.Ship_To_Addr2$
LET win_checkout_1.Ship_To_City$=win_ship_intl.Ship_To_City$
LET win_checkout_1.Ship_To_State$=win_ship_intl.Ship_To_State$
LET win_checkout_1.Ship_To_Zip$=win_ship_intl.Ship_To_Zip$
LET win_checkout_1.Ship_To_Country$=cntry$
LET win_checkout_1$=fngb__put_screen$(win_id_checkout_1$,win_checkout_1$)

LET ship_to=1; REM ' write ARE33 ship-to record

ship_intl_to_checkout_1: 

LET focus_id=NUM(FATTR(win_checkout_1$,"Ship_Intl","ID"))
new_context=gb__win.checkout_1
old_context=gb__win.ship_intl
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=109 Ctl=165 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W109_C165_PUSH_BUTTON: 
REM ' Go from Checkout_2 Window to Checkout_1 Window

LET focus_id=NUM(FATTR(win_checkout_1$,"Previous","ID"))
new_context=gb__win.checkout_1
old_context=gb__win.checkout_2
gosub show_window
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=109 Ctl=1 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W109_C1_PUSH_BUTTON: 
REM ' Checkout - Buy Now

PRINT (gb__sysgui)'SETCURSOR'(3),'DISABLE'(1)

LET win_checkout_2$=fngb__get_screen$(win_id_checkout_2$,win_checkout_2$)
rem 'check total incl. freight & tax before a possible n/c update
if total then nc_up=0

if nc_up=0 and win_checkout_2.on_account=0 AND win_checkout_2.credit_card=0 THEN  PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1); junk$="M29"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

if nc_up=0 and win_checkout_2.on_account=0 AND firm_id$="02" THEN  PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1); junk$="T1"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

IF win_checkout_2.contact$="" THEN  
  PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1)
  junk$="M10"+$0a$
  mb_mode=0
  gosub translate_mbox
  LET ctl_id=NUM(FATTR(win_checkout_2$,"Contact","ID"))
  PRINT (gb__sysgui)'FOCUS'(ctl_id)
  RETURN
fi

LET contact$=win_checkout_2.contact$
if nc_up then gosub nc_up_routine; GOSUB send_mail; GOTO order_complete

IF win_checkout_2.on_account THEN GOTO finish_checkout

REM ' credit card
checkout_credit_card: 
IF (win_checkout_2.visa=0) AND (win_checkout_2.mastercard=0) AND (win_checkout_2.american_express=0) THEN PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1); junk$="M23"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

LET cc$="",temp$=CVS(win_checkout_2.number$,3)
IF POS("*"=temp$)=0 THEN GOTO continue_cc_checkout
FOR temp=0 TO cc_count
    IF POS(temp$=cc_num$[temp]) THEN LET temp$=cc_key$[temp]
NEXT temp
continue_cc_checkout: 
IF LEN(temp$) THEN FOR temp=1 TO LEN(temp$); IF temp$(temp,1)>="0" AND temp$(temp,1)<="9" THEN LET cc$=cc$+temp$(temp,1) FI ; NEXT temp

IF cc$="" THEN PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1); junk$="M30"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

IF (win_checkout_2.american_express AND cc$(1,1)<>"3") OR (win_checkout_2.visa AND cc$(1,1)<>"4") OR (win_checkout_2.mastercard AND cc$(1,1)<>"5") THEN PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1); junk$="M31"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

GOSUB Verify_Credit_Card
IF valid=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1);junk$="M31"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

LET temp$=win_checkout_2.expiry_month$,temp=POS($FF$=temp$)
IF temp=0 THEN LET ctl_id=NUM(FATTR(win_checkout_2$,"Expiry_Month","ID")); PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1),'FOCUS'(ctl_id); junk$="M27"+$0a$,mb_mode=0;gosub translate_mbox; RETURN
LET expiry_month=fnnum(win_checkout_2.expiry_month$(temp+1))+1

LET temp$=win_checkout_2.expiry_year$,temp=POS($FF$=temp$)
IF temp=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1); junk$="M28"+$0a$,mb_mode=0;gosub translate_mbox; LET ctl_id=NUM(FATTR(win_checkout_2$,"Expiry_Year","ID")); PRINT (gb__sysgui)'FOCUS'(ctl_id); RETURN
LET expiry_year=fnnum(win_checkout_2.expiry_year$(temp+1))+NUM(DATE(0:"%Yl"))

REM ' Save the credit card record

IF !(win_checkout_2.save_credit_card) THEN GOTO finish_checkout

LET ecm02.firm_id$=firm_id$
LET ecm02.customer_nbr$=cust_num$
LET ecm02.user_code$=user_code$
LET cce$=""
CALL "BCC.11",cc$,cce$
LET ecm02.credit_card_num$=cce$

IF win_checkout_2.visa THEN LET ecm02.cc_type$="V"
IF win_checkout_2.mastercard THEN LET ecm02.cc_type$="M"
IF win_checkout_2.american_express THEN LET ecm02.cc_type$="A"

LET ecm02.cc_name$=CVS(win_checkout_2.name$,3)
LET ecm02.cc_expires_mo$=STR(expiry_month:"00")
LET ecm02.cc_expires_yr$=STR(expiry_year:"0000")

LET ecm02$=FIELD(ecm02$)
rem 'No update by salesperson
if user_code$<>"**" then 
  WRITE RECORD (ecm02)ecm02$
  rem 'Update salesperson's credit card data
  LET ecm02.user_code$="**"
  WRITE RECORD (ecm02)ecm02$
  LET ecm02.user_code$=user_code$
fi

GOSUB init_account

REM ' Finish Checkout

finish_checkout: 

GOSUB get_order_number

LET win_checkout_2.message$="Order #"+order_number$
LET win_checkout_2$=fngb__put_fields$(win_id_checkout_2$,win_checkout_2$,"message")

IF win_checkout_2.on_account THEN GOSUB create_order; GOSUB send_mail; GOTO checkout_complete

REM ' Attempt to Process Credit Card Transaction
unique$=date(0:"%Yd%Mz%Dz%Hz%mz%sz")+order_number$
LET cmd$=cc_cmd$+" "+unique$+" "+STR(total)+" "+cc$+" "+STR(expiry_month)+"/"+STR(MOD(expiry_year,100):"00")

are64.cc_message$="Command failed: "+cmd$

LET win_checkout_2.message$="Processing Charge..."
LET win_checkout_2$=fngb__put_fields$(win_id_checkout_2$,win_checkout_2$,"message")

LET failed=SCALL(cmd$)
IF failed THEN GOTO credit_card_status

DIM cc_trans_rec$:"status:c(2*=9),date:c(18*=9),price:n(9*=9),auth:c(6*=9),txn:c(12*=9),ref:c(12*=9),cust:c(9*=9),msg:c(256*=)"
LET cc_trans_file$=cc_dir$+unique$
LET cc_trans_chan=UNT
OPEN (cc_trans_chan,ERR=no_cc_file)cc_trans_file$
READ (cc_trans_chan)cc_trans_rec$
CLOSE (cc_trans_chan)
temp=SCALL("chmod 666 "+cc_trans_file$)

REM ' debug/testing code
IF POS($09$=cc_trans_rec$,1,0)<7 THEN GOTO credit_card_status

REM ' if cc_trans_rec.price<>total then rem ' problem with cc processing
REM ' erase cc_trans_file$

REM ' Write ARE63 Credit Card Transaction Entry
cce$=""
CALL "BCC.11",cc$,cce$
LET are63.firm_id$=firm_id$
LET are63.customer_nbr$=cust_num$
LET are63.order_number$=order_number$
LET are63.cc_number$=cce$
LET are63.cc_expiry_year$=STR(expiry_year:"0000")
LET are63.cc_expiry_month$=STR(expiry_month:"00")
LET are63.cc_name$=CVS(win_checkout_2.name$,3)
LET are63.currency$="USD"
LET are63.status$=cc_trans_rec.status$
LET are63.ref_code$=cc_trans_rec.ref$
LET are63.auth_code$=cc_trans_rec.auth$
LET are63.trans_id$=cc_trans_rec.txn$
LET are63.customer_id$=cc_trans_rec.cust$
LET are63.trans_date$=cc_trans_rec.date$
LET are63.trans_amount=total

LET are63_key$=are63.firm_id$+are63.customer_nbr$+are63.order_number$

LET are63$=FIELD(are63$)

WRITE RECORD (ARE63)are63$

are64.firm_id$=are63.firm_id$
are64.customer_nbr$=are63.customer_nbr$
are64.order_number$=are63.order_number$
are64.cc_message$="Status code: "+are63.status$
IF LEN(CVS(cc_trans_rec.msg$,3)) THEN are64.cc_message$=CVS(cc_trans_rec.msg$,3),are64_key$=are63_key$; WRITE RECORD (ARE64)are64$

LET failed=are63.status$<>"su"

REM ' If successful, release the order & send acknowledgement email

credit_card_status: 

IF failed THEN 
  GOSUB put_order_number
  GOSUB send_mail_failure
  PRINT (gb__sysgui)'SETCURSOR'(0)
  junk$="M32"+$0a$,mb_mode=48
  gosub translate_mbox
  GOTO order_complete 
ELSE 
  GOSUB create_order
  EXTRACT RECORD (are03,TIM=10,KEY=are03_key$)are03$
  are03.rel_to_ship$="Y", are03$=FIELD(are03$)
  WRITE RECORD (are03,KEY=are03_key$)are03$
  GOSUB send_mail
  GOTO checkout_complete
fi

no_cc_file: 
are64.cc_message$="Error opening "+cc_trans_file$+": "+ERRMES(-1)
failed=1
goto credit_card_status

checkout_complete: 
close(ecm02,err=*next)

LET win_checkout_2.message$="Generating Licenses..."
LET win_checkout_2$=fngb__put_fields$(win_id_checkout_2$,win_checkout_2$,"message")

LET license1$=win_checkout_1.license_1$
LET license2$=win_checkout_1.license_2$
CALL "ec_license",ERR=license_error,firm_id$,cust_num$,order_number$,license1$,license2$
GOTO order_complete

license_error: 
PRINT (gb__sysgui)'SETCURSOR'(0)
LET i=MSGBOX("License process did not complete",0,"Couldn't License Product: "+ERRMES(-1))

order_complete: 
LET win_checkout_1.License_1$=cvs(ecm01.e_mail$,3)
LET win_checkout_1.License_2$=cvs(ecm01.e_mail2$,3)
LET win_checkout_1$=fngb__put_fields$(win_id_checkout_1$,win_checkout_1$,"license_1,license_2")

LET win_checkout_2.visa=0
LET win_checkout_2.mastercard=0
LET win_checkout_2.american_express=0
LET win_checkout_2.save_credit_card=0
LET win_checkout_2.number$=""
LET win_checkout_2.name$=""
LET win_checkout_2.contact$=""
LET win_checkout_2.message$="Order is Complete"
LET win_checkout_2$=fngb__put_fields$(win_id_checkout_2$,win_checkout_2$,"message,visa,mastercard,american_express,number,name,contact")
REM " Reset shipto address to default after checkout
LET init_ship_usa=0
LET init_ship_intl=0

GOSUB init_cart

LET focus_id=NUM(FATTR(win_cart$,"Checkout","ID"))
new_context=gb__win.cart
old_context=gb__win.checkout_2
print(gb__sysgui)'context'(old_context),'enable'(1)
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=109 Ctl=2 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W109_C2_PUSH_BUTTON: 
REM ' Go from Checkout_2 Window to Cart Window

close(ecm02,err=*next)
LET focus_id=NUM(FATTR(win_cart$,"Checkout","ID"))
new_context=gb__win.cart
old_context=gb__win.checkout_2
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=110 Ctl=106 (Window Event) GRID_DCLICK (N3:107)
REM ' ---------------------------------------------------------------

W110_C106_GRID_DCLICK: 
REM ' Notify Event - Grid - Grid Double Clicked (TBLINF)
REM ' .col,.row = cell clicked
REM ' .ptx,.pty = point clicked
REM ' .x,.y,.w,.h = cell boundaries
REM ' .wparam$ = $01$(Ctrl)/$02$(Shift)

IF gb__notice.row<0 THEN RETURN; REM ' no row where the user double-clicked

PRINT (gb__sysgui)'SETCURSOR'(3)

LET cc_rec$=SENDMSG(gb__sysgui,win_account_grid_id,81,gb__notice.row,$04$,gb__win.account)

LET win_credit_card$=fngb__get_screen$(win_id_credit_card$,win_credit_card$)

LET win_credit_card.visa=0
LET win_credit_card.mastercard=0
LET win_credit_card.american_express=0

IF POS("V"=cc_rec.cc_type$)=1 THEN LET win_credit_card.visa=1
IF POS("M"=cc_rec.cc_type$)=1 THEN LET win_credit_card.mastercard=1
IF POS("A"=cc_rec.cc_type$)=1 THEN LET win_credit_card.american_express=1

LET win_credit_card.number$=fnformat_cc$(cc_rec.cc_num$)
LET win_credit_card.name$=cc_rec.cc_name$

LET temp$=win_credit_card.expiry_month$+$FF$,temp=POS($FF$=temp$)
LET index=cc_rec.cc_mm-1
LET temp$=temp$(1,temp)+STR(index)
LET win_credit_card.expiry_month$=temp$

LET temp$=win_credit_card.expiry_year$+$FF$,temp=POS($FF$=temp$)
LET index=cc_rec.cc_yyyy-NUM(DATE(0:"%Yl"))
LET temp$=temp$(1,temp)+STR(index)
LET win_credit_card.expiry_year$=temp$

LET win_credit_card$=fngb__put_screen$(win_id_credit_card$,win_credit_card$)

LET focus_id=NUM(FATTR(win_credit_card$,"Expiry_Year","ID"))
new_context=gb__win.credit_card
old_context=gb__win.account
gosub show_window
REM BWH
creditCardWindow! = sysgui!.getWindow(gb__win.credit_card)
creditCardWindow!.getControl(100).setOpaque(sysgui!.FALSE)
creditCardWindow!.getControl(202).setOpaque(sysgui!.FALSE)

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=111 Ctl=2 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W111_C2_PUSH_BUTTON: 
REM ' Go from History Window to View_SN Window

LET focus_id=NUM(FATTR(win_view_sn$,"History","ID"))
new_context=gb__win.view_sn
old_context=gb__win.history
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=112 Ctl=100 (Window Event) GRID_DCLICK (N3:107)
REM ' ---------------------------------------------------------------

W112_C100_GRID_DCLICK: 
REM ' Go from Clients Window to View_SN Window
REM ' Notify Event - Grid - Grid Double Clicked (TBLINF)
REM ' .col,.row = cell clicked
REM ' .ptx,.pty = point clicked
REM ' .x,.y,.w,.h = cell boundaries
REM ' .wparam$ = $01$(Ctrl)/$02$(Shift)

IF gb__notice.row<0 THEN RETURN; REM ' no row where the user double-clicked

LET clients_rec$=SENDMSG(gb__sysgui,win_clients_grid_id,81,gb__notice.row,$04$,gb__win.clients)
DIM sn$(20)
LET sn$(1)=clients_rec.serial_number$
GOSUB show_sn

LET focus_id=NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
new_context=gb__win.view_sn
old_context=gb__win.clients
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=112 Ctl=2 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W112_C2_PUSH_BUTTON: 
REM ' Go from Clients Window to History Window

LET focus_id=NUM(FATTR(win_history$,"Clients","ID"))
new_context=gb__win.history
old_context=gb__win.clients
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=113 Ctl=1 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W113_C1_PUSH_BUTTON: 
REM ' Find_SN: Scan Next

PRINT (gb__sysgui)'SETCURSOR'(3)

CLOSE (find_sn_file)
INITFILE find_sn_file$
OPEN (find_sn_file)find_sn_file$

LET win_find_sn$=fngb__get_screen$(win_id_find_sn$,win_find_sn$)

LET count=MAX(1,fnnum(win_find_sn.limit$))
LET prev_sn$=CVS(win_find_sn.serial_number$,7)
READ (snm01,KNUM=1,KEY=firm_id$+cust_num$+prev_sn$,DOM=next_sn)

next_sn: 
READ RECORD (snm01,END=last_sn)snm01$
IF snm01.firm_id$<>firm_id$ OR snm01.customer_nbr$<>cust_num$ THEN GOTO last_sn
IF win_find_sn.active_only AND snm01.active_flag$="N" THEN GOTO next_sn

LET grid_sn$=snm01.serial_nbr$

LET grid_date$=fnaondate$(snm01.orig_sale_date$)
IF snm01.users THEN LET grid_users$=STR(snm01.users) ELSE LET grid_users$="N/A"

DIM grid_item$(20)
LET grid_item$(1)=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$
ivm_item$=grid_item$
gosub ivm_item
LET grid_desc$=ivm01.item_desc$
LET grid_desc$=CVS(grid_desc$,3)+" ("+CVS(grid_item$,3)+")"

WRITE (find_sn_file,KEY=grid_sn$)CVS(grid_sn$,3),CVS(grid_date$,3),CVS(grid_users$,3),CVS(grid_desc$,3)

LET win_find_sn.serial_number$=CVS(snm01.serial_nbr$,7)
LET count=count-1
IF count THEN GOTO next_sn

last_sn: 
LET win_find_sn$=fngb__put_fields$(win_id_find_sn$,win_find_sn$,"serial_number")

CLOSE (find_sn_file)
OPEN (find_sn_file)find_sn_file$

LET batch!=sysgui!.get_message_batch()
batch!.addSendMsg(win_find_sn_grid_id,80,find_sn_file,FATTR(find_sn_rec$),gb__win.find_sn)
batch!.addSendMsg(win_find_sn_grid_id,81,0,$01$,gb__win.find_sn); REM ' read-only grid
batch!.addSendMsg(win_find_sn_grid_id,49,1,$$,gb__win.find_sn); REM ' highlight row
batch!.addSendMsg(win_find_sn_grid_id,57,1,$$,gb__win.find_sn); REM ' highlight colour
batch!.addSendMsg(win_find_sn_grid_hdr,84,0,$$,gb__win.find_sn); REM ' alignment
REM # batch!.addSendMsg(win_find_sn_grid_hdr,20,0,$$,gb__win.find_sn); rem ' info block
batch!.processAll()

PRINT (gb__sysgui)'SETCURSOR'(0)

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=113 Ctl=111 (Window Event) GRID_DCLICK (N3:107)
REM ' ---------------------------------------------------------------

W113_C111_GRID_DCLICK: 
REM ' Notify Event - Grid - Grid Double Clicked (TBLINF)
REM ' .col,.row = cell clicked
REM ' .ptx,.pty = point clicked
REM ' .x,.y,.w,.h = cell boundaries
REM ' .wparam$ = $01$(Ctrl)/$02$(Shift)

IF gb__notice.row<0 THEN RETURN; REM ' no row where the user double-clicked

LET find_sn_rec$=SENDMSG(gb__sysgui,win_find_sn_grid_id,81,gb__notice.row,$04$,gb__win.find_sn)
DIM sn$(20)
LET sn$(1)=find_sn_rec.serial_number$
GOSUB show_sn

LET focus_id=NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
new_context=gb__win.view_sn
old_context=gb__win.find_sn
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=113 Ctl=2 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W113_C2_PUSH_BUTTON: 
REM ' Go from Find_SN Window to View_SN Window

LET focus_id=NUM(FATTR(win_view_sn$,"Find_SN","ID"))
new_context=gb__win.view_sn
old_context=gb__win.find_sn
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=102 Ctl=165 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W102_C165_PUSH_BUTTON: 
REM ' Go from View_SN Window to History Window

LET temp$=sn$
LET ctl_id=NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
DIM sn$(20)
LET sn$(1)=CVS(CTRL(gb__sysgui,ctl_id,1,gb__win.view_sn),4)
IF temp$<>sn$ THEN GOSUB show_sn
IF sn$="" THEN RETURN

LET snm01.serial_nbr$=sn$
READ RECORD (snm01,KNUM=0,KEY=snm01.serial_nbr$,ERR=*next)snm01$;GOTO got_history_snm01
sn$=""
IF CVS(sn$,3)="" THEN 
  PRINT (gb__sysgui)'SETCURSOR'(0)
  junk$="M4"+$0a$
  mb_mode=0
  gosub translate_mbox
  RETURN
fi

got_history_snm01: 
PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_history_grid_id=NUM(FATTR(win_history$,"Grid","ID"))
DIM history_rec$:"Date:c(16*):ALIGN=0 SHOW=1 LABEL=Date LENGTH=16:,"+"Invoice:c(16*):ALIGN=0 SHOW=1 LABEL=Invoice LENGTH=16:,"+"Activity:c(8*):ALIGN=0 SHOW=1 LABEL=Activity LENGTH=8:,"+"Revision:c(16*):ALIGN=0 SHOW=1 LABEL=Revision LENGTH=16:,"+"Users:c(8*):ALIGN=1 SHOW=1 LABEL=Users LENGTH=8:,"+"Authorization:c(32*):ALIGN=0 SHOW=1 LABEL=Key/Authorization LENGTH=32:"

IF history_file THEN CLOSE (history_file)
LET history_file=UNT
INITFILE history_file$
OPEN (history_file)history_file$

LET win_history$=fngb__get_screen$(win_id_history$,win_history$)

ivm_item$=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$+FILL(5)
gosub ivm_item

LET win_history.serial_number$=CVS(sn$,3)
LET win_history.item_number$=CVS(ivm01.item_number$,3)
LET win_history.description$=CVS(ivm01.item_desc$,3)
LET win_history.reset_reason$=reset_reason_list$

LET win_history_list_box_id=NUM(FATTR(win_history$,"List_Box","ID"))
LET win_history_tab_id=NUM(FATTR(win_history$,"Tab","ID"))
reset_id=NUM(FATTR(win_history$,"Reset","ID"))
reset_reason_id=NUM(FATTR(win_history$,"reset_reason","ID"))
reset_code$=reset_code_list$(1,2)
GOSUB license_history
LET win_history.list_box$=lbox$

get_history: 
READ (snt01,KNUM=0,KEY=sn$,DOM=history_loop)

history_loop: 
READ RECORD (snt01,END=history_endloop)snt01$
IF CVS(snt01.serial_nbr$,3)<>CVS(sn$,3) THEN GOTO history_endloop

LET d$=fnaondate$(snt01.trans_date$)
LET csm04.firm_id$=firm_id$
LET csm04.product_rev$=snt01.product_rev$
LET csm04.description$=snt01.product_rev$
READ RECORD (csm04,KEY=csm04.firm_id$+csm04.product_rev$,ERR=history_no_rev)csm04$
history_no_rev: 

WRITE (history_file,KEY=snt01.trans_date$+snt01.sn_det_seq$)d$,CVS(snt01.ar_inv_nbr$,3),CVS(snt01.type_of_sale$,3),CVS(csm04.description$,3),STR(snt01.users),CVS(snt01.auth_code$,3),CVS(ivm01.item_desc$,3)

GOTO history_loop

history_endloop: 
CLOSE (history_file)
OPEN (history_file)history_file$

LET win_history$=fngb__put_screen$(win_id_history$,win_history$)

LET batch!=sysgui!.get_message_batch()
batch!.addSendMsg(win_history_grid_id,80,history_file,FATTR(history_rec$),gb__win.history)
batch!.addSendMsg(win_history_grid_id,81,0,$01$,gb__win.history); REM ' read-only grid
batch!.addSendMsg(win_history_grid_id,49,1,$$,gb__win.history); REM ' highlight row
batch!.addSendMsg(win_history_grid_id,57,1,$$,gb__win.history); REM ' highlight colour
batch!.addSendMsg(win_history_grid_hdr,84,0,$$,gb__win.history); REM ' alignment
REM # batch!.addSendMsg(win_history_grid_hdr,20,0,$$,gb__win.history); rem ' info block
batch!.processAll()

LET focus_id=NUM(FATTR(win_history$,"Close","ID"))
LET clients_id=NUM(FATTR(win_history$,"Clients","ID"))
new_context=gb__win.history
old_context=gb__win.view_sn
gosub show_window

REM 'Select tab 0
LET idx$=SENDMSG(gb__sysgui,win_history_tab_id,34,0,$$)

IF CVS(server_sn$,3)="" THEN PRINT (gb__sysgui)'DISABLE'(clients_id), ELSE PRINT (gb__sysgui)'ENABLE'(clients_id)
PRINT (gb__sysgui)'HIDE'(reset_id,reset_reason_id)
IF arm02.allowed_resets>0 THEN PRINT (gb__sysgui)'SHOW'(reset_id,reset_reason_id),'DISABLE'(reset_id,reset_reason_id)

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=102 Ctl=166 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W102_C166_PUSH_BUTTON: 
REM ' Go from View_SN Window to Edit_SN Window
LET edit_action$="new"
LET ctl_id=NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
DIM sn$(20)
LET sn$(1)=CVS(CTRL(gb__sysgui,ctl_id,1,gb__win.view_sn),4)
xref=0;readrecord(sam2_ds_xref,key=sn$,knum=1,dom=*next)sam2_ds_xref$;xref=1
if xref then 
  i=msgbox("Data server is linked to "+cvs(sam2_ds_xref.client_serial_nbr$,2)+" - can only be used for upgrade.",0,"Unavailable")
  return
fi
GOSUB show_sn
IF !(sn_editable) THEN RETURN
GOSUB init_cart_record
IF LEN(status$) THEN RETURN

new_product_code$=product_code$
new_platform_code$=platform_code$
new_os_level_code$=os_level_code$
new_product_rev_code$=product_rev_code$
new_license_code$=license_type_code$
user1=snm01.users,user2=0
u1_prop$=snm02.lic_property1$
u2_prop$=snm02.lic_property2$
if snm02.users1+snm02.users2 then user1=snm02.users1,user2=snm02.users2
old_context=gb__win.view_sn

gosub show_edit_sn_window

RETURN

show_edit_sn_window:
if edit_action$="new" then
  no_rif=0
  temp_renew$=" "
  if cvs(contract$,3)<>"" and sam_renew_status>1 then temp_renew$=smc01.annual_dt$
fi

if pos(contract_type$="DV1,RN1") and days_expired>0 then junk$="M22"+$0a$,mb_mode=0;gosub translate_mbox;RETURN
new_context=gb__win.edit_sn
cur_context=dec(ctrl(gb__sysgui))
LET old_product_code$=product_code$
LET old_platform_code$=platform_code$
LET old_os_level_code$=os_level_code$
LET old_product_rev_code$=product_rev_code$
LET old_license_code$=license_type_code$

REM ' *** prepare product list ***
GOSUB product_list
IF product_list$="" THEN 
  PRINT (gb__sysgui)'context'(cur_context),'SETCURSOR'(0)
  junk$="M33"+$0a$+product_code$+$0a$,mb_mode=0;gosub translate_mbox
  RETURN
fi
LET temp$=product_list$,product_desc_list$=""
LET product_index=-1,index=0
FOR temp=1 TO LEN(temp$) STEP 3
  if pos("DS"=old_product_code$)=1 and temp$(temp,3)="BAS" then continue
  LET csm01.product$=temp$(temp,3)
  LET csm01.description$=csm01.product$
  READ RECORD (csm01,KEY=firm_id$+csm01.product$,ERR=*next)csm01$
  LET product_desc_list$=product_desc_list$+CVS(csm01.description$,3)+$0A$
  IF csm01.product$=new_product_code$ THEN LET product_index=index,sam_required$=csm01.ctr_required$
  LET index=index+1
NEXT temp
IF product_index<0 THEN LET product_index=0
LET product_desc_list$=product_desc_list$+$FF$+STR(product_index)

REM ' *** prepare license list ***
LET ltcode$=new_license_code$,prdcode$=new_product_code$
GOSUB license_list
if expiring_license=1 and pos(contract_type$="DV1,RN1")=0 then license_list$=""
IF license_list$="" THEN PRINT (gb__sysgui)'context'(cur_context),'SETCURSOR'(0); junk$="M33"+$0a$+new_license_code$+$0a$,mb_mode=0;gosub translate_mbox; RETURN

REM ' *** prepare platform list ***
LET temp_product_code$=new_product_code$,temp_platform_code$=new_platform_code$
GOSUB platform_list

REM ' *** prepare os level list ***
LET temp_platform_code$=new_platform_code$,temp_os_level_code$=new_os_level_code$
GOSUB os_level_list

REM ' *** prepare revision list ***
LET temp_os_level_code$=new_os_level_code$,temp_product_rev_code$=new_product_rev_code$
GOSUB revision_list
LET csm04.description$=new_product_rev_code$
READ RECORD (csm04,KEY=firm_id$+new_product_rev_code$,DOM=*next)csm04$
REM ' Add current revision to list if missing
if pos(new_product_rev_code$=revision_list$)=0 and expiring_license=0 then
  LET revision_list$=new_product_rev_code$+revision_list$
  p=pos($FF$=revision_desc_list$)
  if p then revision_desc_list$=revision_desc_list$(1,p-1)
  LET revision_desc_list$=CVS(csm04.description$,3)+$0A$+revision_desc_list$+$FF$+STR(0)
fi

REM ' *** display screen ***
LET win_edit_sn$=fngb__get_screen$(win_id_edit_sn$,win_edit_sn$)
if init_edit_sn=0 then
ctl_id=NUM(FATTR(win_edit_sn$,"renew_dt_lbl","ID"))
orig_lbl_title$=ctrl(gb__sysgui,ctl_id,1)
ctl_id=NUM(FATTR(win_edit_sn$,"Sam_standard","ID"))
orig_sam_title$=ctrl(gb__sysgui,ctl_id,1)
fi
init_edit_sn=1
LET win_edit_sn.serial_number$=CVS(sn$,3)
LET win_edit_sn.description$=CVS(desc$,3)
LET win_edit_sn.cur_product$=product$
LET win_edit_sn.product$=product_desc_list$
LET win_edit_sn.cur_platform$=platform$
LET win_edit_sn.platform$=platform_desc_list$
LET win_edit_sn.cur_oslevel$=os_level$
LET win_edit_sn.oslevel$=os_level_desc_list$
LET win_edit_sn.cur_revision$=product_rev$
LET win_edit_sn.revision$=revision_desc_list$
LET win_edit_sn.cur_license$=license_type$
LET win_edit_sn.license$=license_desc_list$
LET win_edit_sn.cur_users$=str(snm01.users)
LET win_edit_sn.sam_standard$=STR(sam_flag<>0)
LET win_edit_sn.available_support$=STR(snm01.avail_support)
LET win_edit_sn.users$=str(user1),win_edit_sn.users2$=str(user2)
LET win_edit_sn.cur_runtime$="No"
if pos("RTM"=license_type_code$) or pos("R"=snm02.lic_property1$)=2 or pos("R"=snm02.lic_property2$)=2 then win_edit_sn.cur_runtime$="Yes"
LET win_edit_sn.runtime$="0"
if pos("RTM"=new_license_code$) or pos("R"=u1_prop$)=2 or pos("R"=u2_prop$)=2 then win_edit_sn.runtime$="1"
LET win_edit_sn.cur_uncounted$="No"
LET win_edit_sn.uncounted$=str(new_uncounted)
if cur_uncounted then win_edit_sn.cur_uncounted$="Yes"
win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"runtime,uncounted")
hide_props=1
u1=pos(u1_prop$(1,1)="ES")
u2=pos(u2_prop$(1,1)="ES")
if u1=1 then win_edit_sn.users$=str(user1),win_edit_sn.users2$=str(user2)
if u1=2 then win_edit_sn.users$=str(user2),win_edit_sn.users2$=str(user1)
if snm02.lic_property1$+snm02.lic_property2$<>fill(4) then
  win_edit_sn.cur_users$=cvs(str(snm02.users1:"####")+" "+snm02.lic_property1$+" "+str(snm02.users2:"####")+" "+snm02.lic_property2$,35)
  hide_props=0
fi
gosub edit_sn_show_props
renew_dt_id=num(fattr(win_edit_sn$,"renew_dt","ID"))
renew_dt_btn_id=num(fattr(win_edit_sn$,"renew_dt_btn","ID"))
newWindow! = sysgui!.getWindow(new_context)
renew_dt!=newWindow!.getControl(renew_dt_id)
sam_std_id=NUM(FATTR(win_edit_sn$,"Sam_standard","ID"))
jul_renew=0
if fnnum(temp_renew$) then jul_renew=fnjul(temp_renew$)

if jul_renew then renew_dt!.setValue(jul_renew) else renew_dt!.setText(" ")
IF CVS(contract$,3)="" or sam_active$="N" THEN LET win_edit_sn.sam_covered$="No" ELSE LET win_edit_sn.sam_covered$="Yes"
if edit_action$="new" then 
  win_edit_sn.additional_support$=""
  win_edit_sn.reference$=""
else 
  win_edit_sn.additional_support$=STR(ece11.add_support)
  win_edit_sn.reference$=ece11.po_ref_number$
fi
win_edit_sn.no_rif$=str(no_rif)

PRINT (gb__sysgui)'SETCURSOR'(0),'CONTEXT'(new_context)
runtime_id=num(fattr(win_edit_sn$,"runtime","ID"))
uncounted_id=num(fattr(win_edit_sn$,"uncounted","ID"))
GOSUB update_edit_sn_price
temp$=renew_dt!.getText()
win_edit_sn.renew_dt$=temp$
win_edit_sn$=fngb__put_screen$(win_id_edit_sn$,win_edit_sn$)
if pos("**CALL BASIS"=cvs(comments$,4)) then support_only=1

focus_id=NUM(FATTR(win_edit_sn$,"Cancel","ID"))
 upd_id=NUM(FATTR(win_edit_sn$,"Accept","ID"))
sam_title$=orig_sam_title$
lbl_id=NUM(FATTR(win_edit_sn$,"renew_dt_lbl","ID"))
lbl_title$=orig_lbl_title$
if expiring_license=1 then
  dim param$:"mbid:c(4),lang:c(2*),text1:c(1*),text2:c(1*)"
  param.lang$=lang$
  param.mbid$="R2"
  param.text1$=new_license_code$
  param.text2$=""
  rem call "ec_translate.bbj",param$
  rem sam_title$=param.text1$
  rem lbl_title$=param.text2$
fi
PRINT (gb__sysgui)'title'(sam_std_id,sam_title$),'title'(lbl_id,lbl_title$)

no_rif_id=NUM(FATTR(win_edit_sn$,"no_rif","ID"))
if pos("Y"=exp_ok$)=1 then PRINT (gb__sysgui)'show'(no_rif_id) else PRINT (gb__sysgui)'hide'(no_rif_id) 
gosub show_window
GOSUB disable_edits
if pos("N"=exp_ok$)>1 or sam_flag=0 then PRINT (gb__sysgui)'DISABLE'(no_rif_id) 
DIM csm03$:FATTR(csm03$)
READ RECORD (csm03,KEY=firm_id$+item$(7,3),DOM=*NEXT)csm03$
uncounted_ok=(csm03.fixed_lic_flag$="Y" and csm04.key_or_licen$="L")
IF support_only THEN return 

if expiring_license or sam_renew_status>1 then PRINT (gb__sysgui)'DISABLE'(sam_std_id,renew_dt_id,renew_dt_btn_id) 

IF (pos(sam_required$="AR") and cvs(contract$,3)="") THEN 
  PRINT (gb__sysgui)'ENABLE'(sam_std_id)
  if edit_action$="chg" and sam_flag then print(gb__sysgui)'enable'(renew_dt_id,renew_dt_btn_id)
fi
if u1+u2+hide_props=0 then PRINT (gb__sysgui)'disable'(users_id) else PRINT (gb__sysgui)'enable'(users_id) 
if pos(new_product_code$=runtime_products$) and expiring_license=0 then PRINT(gb__sysgui)'enable'(runtime_id) ELSE PRINT (gb__sysgui)'disable'(runtime_id)
if uncounted_ok and user1+user2=1 then PRINT(gb__sysgui)'enable'(uncounted_id) ELSE PRINT (gb__sysgui)'disable'(uncounted_id)

return

W102_C181_PUSH_BUTTON: 
REM ' Renew button

ctl_id=NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
DIM sn$(20)
LET sn$(1)=CVS(CTRL(gb__sysgui,ctl_id,1,gb__win.view_sn),4)
GOSUB show_sn
new_product_code$=snm01.product$
new_platform_code$=snm01.platform$
new_os_level_code$=snm01.os_level$
new_product_rev_code$=snm01.product_rev$
new_license_code$=snm01.license_type$
user1=snm01.users,user2=0
u1_prop$=snm02.lic_property1$
u2_prop$=snm02.lic_property2$
if snm02.users1+snm02.users2 then user1=snm02.users1,user2=snm02.users2
IF !(sn_editable) THEN RETURN
temp_os_level_code$=snm01.os_level$
hold_days=days_expired
days_expired=days_expired+365
gosub revision_list
days_expired=hold_days
temp$=revision_desc_list$
temp=pos("CUR"=temp$)
if temp=0 then temp=pos("NEXT"=cvs(temp$,7))
IF temp THEN 
  p1=0
  while 1
  p=pos($0a$=temp$)
  if p=0 then break
  p1=p1+1
  if p>temp then break
  wend
  IF p1>0 AND p1*3<=LEN(revision_list$) THEN new_product_rev_code$=revision_list$((p1-1)*3+1,3)
fi
new_item$=snm01.product$+snm01.platform$+snm01.os_level$+new_product_rev_code$+snm01.license_type$
cur_item$=new_item$(1,9)+snm01.product_rev$+new_item$(13,3)

jul_renew=fnjul(smc01.annual_dt$)+365
new_dt$=date(jul_renew:"%D %Ms %Yl")
sam_flag=1
rent_item=0
no_rif=0
uncounted_change=0
add_tsi=0
if contract_type$="RN1" then rent_item=1
qty=1
DIM type$[0:1],price[0:1],cur_users[2],new_users[2],cur_lprop$[2],new_lprop$[2]
cur_lprop$[0]=snm02.lic_property1$
cur_lprop$[1]=snm02.lic_property2$
cur_users[0]=snm02.users1
cur_users[1]=snm02.users2
if cur_users[0]+cur_users[1]=0 then cur_users[0]=snm01.users
new_lprop$[0]=cur_lprop$[0]
new_lprop$[1]=cur_lprop$[1]
new_users[0]=cur_users[0]
new_users[1]=cur_users[1]
hold_contract$=contract$
hold_dt=jul_renew
contract$=""
jul_renew=jul(0,0,0)+365

gosub ec_price
contract$=hold_contract$
jul_renew=hold_dt
if ok=0 then return
gosub total_price
win_renewal$=fngb__get_screen$(win_id_renewal$,win_renewal$)
win_renewal.sn$=cvs(sn$,3)
win_renewal.rev$=new_product_rev_code$
win_renewal.renew_dt$=new_dt$
win_renewal.comments$=comments$
win_renewal.price$=CVS(STR(price:amount_mask$),3+64) 
win_renewal.listprice$=CVS(STR(listprice:amount_mask$),3+64) 
win_renewal.reference$=""

win_renewal$=fngb__put_screen$(win_id_renewal$,win_renewal$)
focus_id=NUM(FATTR(win_renewal$,"reference","ID"))
new_context=gb__win.renewal
old_context=gb__win.view_sn
print(gb__sysgui)'context'(new_context),'enable'(0),'show'(0),'focus'(0),'raise','setcursor'(0),'flush'
if focus_id then print(gb__sysgui)'context'(new_context),'focus'(focus_id)
currentWindow! = sysgui!.getWindow(new_context)

return

w120_c1_push_button:
gosub init_cart_record
IF LEN(status$) THEN return
win_renewal$=fngb__get_screen$(win_id_renewal$,win_renewal$)
ece11.po_ref_number$=win_renewal.reference$
ece11.serial_nbr$=win_renewal.sn$
ece11.item_number$=new_item$
ece11.qty=1
ece11.users=new_users[0],ece11.lic_property1$=new_lprop$[0]
ece11.users2=new_users[1],ece11.lic_property2$=new_lprop$[1]
if ece11.users=0 then
  ece11.users=ece11.users2,ece11.users2=0
  ece11.lic_property1$=ece11.lic_property2$,ece11.lic_property2$="  "
fi
ece11.sam_coverage$="N"
if pos(contract_type$="SM1") then ece11.sam_coverage$="S"
ece11.support_only$="N"
ece11.add_support=0
ece11.uncounted_flag$="N"
if cur_uncounted then ece11.uncounted_flag$="Y"
ece11.annual_dt$=date(jul_renew:"%Yl%Mz%Dz")
ffl$=FATTR(ece11$,"available"),ffl=DEC(ffl$(10,2))
ece11.available$=FILL(ffl)
ece11.modify_flag$="R"
gosub w120_c2_push_button
goto edit_to_cart

return

w120_c2_push_button:
old_context=gb__win.renewal
new_context=gb__win.view_sn
focus_id=0
gosub show_window
return

REM ' ---------------------------------------------------------------
REM ' Win=102 Ctl=2 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W102_C2_PUSH_BUTTON: 
REM ' Go from View_SN Window to Main Window
LET focus_id=NUM(FATTR(win_main$,"View_SN","ID"))
new_context=gb__win.main
old_context=gb__win.view_sn
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=102 Ctl=100 (Window Event) INPUTE_KEY (N1:104)
REM ' ---------------------------------------------------------------

W102_C100_INPUTE_KEY: 
REM ' Notify Event - INPUTE - Keypress (gb__notice.key$)

IF gb__notice.key<>13 THEN RETURN; REM ' ignore all except CR

LET ctl_id=NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
DIM sn$(20)
LET sn$(1)=CVS(CTRL(gb__sysgui,ctl_id,1,gb__win.view_sn),4)

GOSUB show_sn

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=103 Ctl=147 (Window Event) LOST_FOCUS (f0)
REM ' ---------------------------------------------------------------

W103_C147_LOST_FOCUS: 
W103_C160_LOST_FOCUS: 
REM ' Control lost focus

LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"users,users2")
GOSUB update_edit_sn_price
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"comments,price,listprice")

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=103 Ctl=1012 (Window Event) LOST_FOCUS (f0)
REM ' ---------------------------------------------------------------

W103_C1012_LOST_FOCUS: 
LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"additional_support")
if fnnum(win_edit_sn.additional_support$)>2 then let win_edit_sn.additional_support$="2"
GOSUB update_edit_sn_price
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"additional_support,comments,price,listprice")
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=105 Ctl=99 (Window Event) GRID_DCLICK (N3:107)
REM ' ---------------------------------------------------------------

W105_C99_GRID_DCLICK: 
REM ' Notify Event - Grid - Grid Double Clicked (TBLINF)
REM ' .col,.row = cell clicked
REM ' .ptx,.pty = point clicked
REM ' .x,.y,.w,.h = cell boundaries
REM ' .wparam$ = $01$(Ctrl)/$02$(Shift)

IF gb__notice.row<0 THEN RETURN; REM ' no row where the user double-clicked

PRINT (gb__sysgui)'SETCURSOR'(3)

LET cart_rec$=SENDMSG(gb__sysgui,win_cart_grid_id,81,gb__notice.row,$04$,gb__win.cart)

READ RECORD (ece11,KEY=firm_id$+cust_num$+user_code$+cart_rec.line$,DOM=missing_ece11)ece11$

LET edit_action$="chg"
LET pricecheck=0
GOSUB check_for_trade
IF trade_tran THEN 
  LET product_code$=m_item$(1,3),platform_code$=m_item$(4,3)
  LET os_level_code$=m_item$(7,3),revision_code$=m_item$(10,3)
  LET license_code$=m_item$(13,3)
  LET win_trade.reference$=ece11.po_ref_number$
  LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"reference")
  PRINT (gb__sysgui)'SETCURSOR'(0)
  LET trade_window=1
  cur_uncounted=(cvs(ece11.uncounted_flag$,4)="Y")
  GOSUB trade_page
  RETURN
FI 
if ece11.modify_flag$="R" or pos("RN1"=ece11.item_number$)=13 then 
    gosub delete_cart_record
    return
fi

IF LEN(CVS(ece11.serial_nbr$,3)) THEN 
  GOSUB edit_cart_sn 
ELSE 
  GOSUB edit_cart_item
fi

PRINT (gb__sysgui)'SETCURSOR'(0)
RETURN

missing_ece11: 
PRINT (gb__sysgui)'SETCURSOR'(0)
LET i=MSGBOX("Shopping cart record not found.",0,"Can't Edit")
RETURN

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=105 Ctl=99 (Window Event) GRID_KEYPRESS (N12:107)
REM ' ---------------------------------------------------------------

W105_C99_GRID_KEYPRESS: 
REM ' Notify Event - Grid - Grid Key Pressed (TBLINF)
REM ' .wparam$ = key pressed (event 't' encoding)

IF gb__notice.row>=0 THEN LET cart_rec$=SENDMSG(gb__sysgui,win_cart_grid_id,81,gb__notice.row,$04$,gb__win.cart)

IF gb__notice.row>=0 AND DEC(gb__notice.wparam$)=DEC($007F$) THEN GOTO delete_cart_record; REM ' Delete key was pressed

IF DEC(gb__notice.wparam$)=DEC($0138$) THEN GOTO insert_cart_record; REM ' Insert key was pressed

RETURN

insert_cart_record: 

RETURN

delete_cart_record: 
PRINT (gb__sysgui)'context'(gb__win.cart),'SETCURSOR'(0)
junk$="M7"+$0a$+cvs(cart_rec.serial_number$,3)+$0a$+cvs(cart_rec.item_number$,3)+$0a$
mb_mode=1
gosub translate_mbox
IF i<>1 THEN RETURN

ece11.line_number$=cart_rec.line$
GOSUB clear_ece83
REMOVE (ece11,KEY=firm_id$+cust_num$+user_code$+cart_rec.line$,ERR=delete_ece11_keypress)
delete_ece11_keypress: 

GOSUB init_cart

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=110 Ctl=2 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W110_C2_PUSH_BUTTON: 
REM ' Go from Account Window to Main Window
close(ecm02,err=*next)

LET init_account=0; REM ' refresh the screen next time the user goes back

LET focus_id=NUM(FATTR(win_main$,"Account","ID"))
new_context=gb__win.main
old_context=gb__win.account
gosub show_window

RETURN

W110_C3_PUSH_BUTTON: 
REM ' Go from Account Window to Invoice Window
ctx=dec(ctrl(gb__sysgui))
dim loc$:"x:i(2),y:i(2),w:u(2),h:u(2)"
loc$=ctrl(gb__sysgui,0,0,ctx)
c$=c$+str(ctx:"000)")+$0a$+str(loc.x:"0000")+$0a$+str(loc.y:"0000")+$0a$
c$=c$+firm_id$+$0a$+cust_num$+$0a$+user_code$+$0a$+lang$+$0a$
call "invoice.bbj",err=*next,c$
return

w110_c121_push_button:
rem ' Go from Account window to Send_Rpt
win_send_rpt.email$=cvs(ecm01.e_mail$,3)
LET win_send_rpt$=fngb__put_fields$(win_id_send_rpt$,win_send_rpt$,"email")
LET focus_id=NUM(FATTR(win_send_rpt$,"email","ID"))
new_context=gb__win.send_rpt
old_context=gb__win.account
print(gb__sysgui)'context'(new_context),'enable'(0),'show'(0),'focus'(0),'raise','setcursor'(0),'flush'
if focus_id then print(gb__sysgui)'context'(new_context),'focus'(focus_id)
currentWindow! = sysgui!.getWindow(new_context)
return

REM ' ---------------------------------------------------------------
REM ' Win=114 Ctl=2 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W114_C2_PUSH_BUTTON: 
REM ' Switch from Credit_Card window to Account window

LET focus_id=NUM(FATTR(win_account$,"Grid","ID"))
new_context=gb__win.account
old_context=gb__win.credit_card
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=104 Ctl=99 (Window Event) LIST_SELECT (N2:19)
REM ' ---------------------------------------------------------------

W104_C99_LIST_SELECT: 
REM ' Notify Event - List Button Control - List Selection
REM ' Item screen -- product list changed -- update subsequent lists

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"product")

LET temp$=win_item.product$,temp=POS($FF$=temp$)
if temp=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET temp=NUM(temp$(temp+1))
LET temp$=item_product_list$(temp*3+1,3)
IF temp$=item_product_code$ THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET item_product_code$=temp$
READ RECORD (csm01,KEY=firm_id$+item_product_code$)csm01$
LET sam_required$=csm01.ctr_required$

gosub new_item_props

REM ' *** update platform list ***
LET temp_product_code$=item_product_code$,temp_platform_code$=""
lb_id=num(fattr(win_item$,"platform","ID"))
GOSUB platform_list
LET item_platform_list$=platform_list$,win_item.platform$=platform_desc_list$
LET win_item.oslevel$="",item_os_level_list$="",item_os_level_code$=""
LET win_item.revision$="",item_revision_list$="",item_revision_code$=""

REM ' *** update license list ***
LET ltcode$="",prdcode$=item_product_code$
lb_id=num(fattr(win_item$,"license","ID"))
GOSUB license_list
LET item_license_list$=license_list$
LET item_license_code$=item_license_list$(1,3)
LET win_item.license$=license_desc_list$
LET win_item.sam_standard$=STR(sam_required$="R")

GOSUB update_item_price

LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"platform,oslevel,revision,license,item_number,description,comments,price,listprice,sam_standard")
PRINT (gb__sysgui)'context'(new_context),
if pos(item_product_code$=runtime_products$) then 
  PRINT(gb__sysgui)'enable'(runtime_id)
ELSE 
  PRINT (gb__sysgui)'disable'(runtime_id)
  win_item.runtime$="0"
  LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"runtime")
fi
IF sam_required$<>"A" THEN PRINT (gb__sysgui)'DISABLE'(sam_std_id) ELSE PRINT (gb__sysgui)'ENABLE'(sam_std_id)
IF sam_required$="R" THEN PRINT (gb__sysgui)'enable'(renew_dt_id,renew_dt_btn_id) ELSE PRINT (gb__sysgui)'disable'(renew_dt_id,renew_dt_btn_id)
PRINT (gb__sysgui)'SETCURSOR'(0)
if temp_platform_code$<>"" then gosub W104_C101_LIST_SELECT
LET item_platform_code$=temp_platform_code$

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=104 Ctl=101 (Window Event) LIST_SELECT (N2:19)
REM ' ---------------------------------------------------------------

W104_C101_LIST_SELECT: 
REM ' Notify Event - List Button Control - List Selection
REM ' Item screen -- platform list changed -- update subsequent lists

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"platform")

LET temp$=win_item.platform$,temp=POS($FF$=temp$)
IF temp=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET temp=NUM(temp$(temp+1))
LET temp$=item_platform_list$(temp*3+1,3)
IF temp$=item_platform_code$ THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET item_platform_code$=temp$

REM ' *** prepare os level list ***
LET temp_platform_code$=item_platform_code$,temp_os_level_code$="",temp_product_code$=item_product_code$
lb_id=num(fattr(win_item$,"oslevel","ID"))
GOSUB os_level_list
LET item_os_level_list$=os_level_list$
LET win_item.oslevel$=os_level_desc_list$
LET win_item.revision$="",item_revision_list$="",item_revision_code$=""

GOSUB update_item_price

LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"oslevel,revision,item_number,description,comments,price,listprice")
PRINT (gb__sysgui)'SETCURSOR'(0)
if temp_os_level_code$<>"" then gosub W104_C103_LIST_SELECT 
LET item_os_level_code$=temp_os_level_code$

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=104 Ctl=103 (Window Event) LIST_SELECT (N2:19)
REM ' ---------------------------------------------------------------

W104_C103_LIST_SELECT: 
REM ' Notify Event - List Button Control - List Selection
REM ' Item screen -- os level list changed -- update subsequent lists

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"oslevel")
LET temp$=win_item.oslevel$,temp=POS($FF$=temp$)
IF temp=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET temp=NUM(temp$(temp+1))
LET temp$=item_os_level_list$(temp*3+1,3)
IF temp$=item_os_level_code$ THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET item_os_level_code$=temp$

REM ' *** prepare revision list ***
LET temp_os_level_code$=item_os_level_code$,temp_product_rev_code$=""
lb_id=num(fattr(win_item$,"revision","ID"))
GOSUB revision_list
LET item_revision_list$=revision_list$
LET win_item.revision$=revision_desc_list$

GOSUB update_item_price

LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"revision,item_number,description,comments,price,listprice")
PRINT (gb__sysgui)'SETCURSOR'(0)
if temp_product_rev_code$<>"" then gosub W104_C105_LIST_SELECT
LET item_revision_code$=temp_product_rev_code$
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=104 Ctl=112 (Window Event) LIST_SELECT (N2:19)
REM ' ---------------------------------------------------------------

W104_C112_LIST_SELECT: 
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"license")

LET temp$=win_item.license$,temp=POS($FF$=temp$)
IF temp=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET temp=NUM(temp$(temp+1))
LET temp$=item_license_list$(temp*3+1,3)
IF temp$=item_license_code$ THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET item_license_code$=temp$

GOSUB update_item_price

LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"item_number,description,comments,price,listprice")

PRINT (gb__sysgui)'SETCURSOR'(0)
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=104 Ctl=105 (Window Event) LIST_SELECT (N2:19)
REM ' ---------------------------------------------------------------

W104_C105_LIST_SELECT: 
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"revision")
LET temp$=win_item.revision$,temp=POS($FF$=temp$)
IF temp=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET temp=NUM(temp$(temp+1))
LET temp1=1,temp2=0,revision$=""
IF temp THEN LET temp1=POS($0A$=temp$,1,temp)+1
IF temp1 THEN LET temp2=POS($0A$=temp$(1))
IF temp2 THEN LET revision$=temp$(temp1,temp2-1)
LET temp$=item_revision_list$(temp*3+1,3)
IF temp$=item_revision_code$ THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET item_revision_code$=temp$

GOSUB update_item_price

LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"item_number,description,comments,price,listprice")

PRINT (gb__sysgui)'SETCURSOR'(0)
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=104 Ctl=121 (Window Event) LOST_FOCUS (f0)
REM ' ---------------------------------------------------------------

W104_C121_LOST_FOCUS: 
REM ' Control lost focus

LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"quantity")

GOSUB update_item_price

LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"item_number,description,comments,price,listprice")

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=104 Ctl=124 (Window Event) LOST_FOCUS (f0)
REM ' ---------------------------------------------------------------

W104_C124_LOST_FOCUS: 
W104_C126_LOST_FOCUS: 
REM ' Control lost focus
LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"users,users2")
GOSUB update_item_price
LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"comments,price,listprice")
RETURN

item_sam_checkbox: 
LET win_item.sam_standard$=STR(sam_flag=1)
GOSUB update_item_price
LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"comments,price,listprice,sam_standard")
renew_dt!.focus() 
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=104 Ctl=202 (Window Event) CHECK_ON (c1)
REM ' ---------------------------------------------------------------

W104_C202_CHECK_ON: 
LET sam_flag=1
GOSUB item_sam_checkbox
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=104 Ctl=202 (Window Event) CHECK_OFF (c0)
REM ' ---------------------------------------------------------------

W104_C202_CHECK_OFF: 
LET sam_flag=0
GOSUB item_sam_checkbox
RETURN

W104_C204_LOST_FOCUS:
rem ' Control lost focus
jul_renew=renew_dt!.getValue()
temp$=DATE(jul_renew:"%Mz%Dz")
if pos("0229"=temp$) then jul_renew=jul_renew+1
gosub renew_range

if jul_renew<jul_begin or jul_renew>jul_end then
  gosub invalid_date
  jul_renew=jul_default
  PRINT (gb__sysgui)'flush'
  renew_dt!.focus()
fi

renew_dt!.setValue(jul_renew)
gosub update_item_price
LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"comments,price,listprice")
RETURN

W104_C204_GOT_FOCUS:
rem ' Control got focus
jul_renew=renew_dt!.getValue()
RETURN

W104_C232_TOOL_BUTTON:
rem ' Tool button operated
print(gb__sysgui)'flush'
renew_dt!.focus()
renew_dt!.calendar()
RETURN

W104_C233_CHECK_ON: 
REM ' Runtime checked
ltcode$="RTM"
goto rtm_item_display
RETURN

W104_C233_CHECK_OFF: 
REM ' Runtime checked off
ltcode$=""
rtm_item_display:
if pos("BAS"=win_item.item_number$)=1 then return
lb_id=num(fattr(win_item$,"license","ID"))
GOSUB license_list
ivm_item$=pad(win_item.item_number$,20)
if pos(ltcode$=license_list$) then ivm_item$(13,3)=ltcode$
gosub ivm_item
if ivmok then 
  win_item.item_number$=ivm_item$
  win_item.description$=CVS(ivm01.item_desc$,3)
  win_item.license$=license_desc_list$
  win_item$=fngb__put_fields$(win_id_item$,win_item$,"item_number,license,description")
else 
  win_item.runtime$="0"
  win_item$=fngb__put_fields$(win_id_item$,win_item$,"runtime")
fi
RETURN

W104_C234_CHECK_ON: 
W104_C234_CHECK_OFF: 
LET uncounted_chg=1
RETURN

W104_C200_PUSH_BUTTON: 
LET win_item$=fngb__get_screen$(win_id_item$,win_item$)
gosub update_item_price
LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"comments,price,listprice")
return

REM ' ---------------------------------------------------------------
REM ' Win=104 Ctl=1 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W104_C1_PUSH_BUTTON: 
REM ' Update Item change and return to Cart Window

PRINT (gb__sysgui)'SETCURSOR'(3)

GOSUB update_item_price
IF !(ok) THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M5"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

IF edit_action$="new" THEN 
  LET sn$=""
  GOSUB init_cart_record
  IF LEN(status$) THEN 
    PRINT (gb__sysgui)'SETCURSOR'(0)
    return  
  fi
fi
LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"item_number,quantity,reference,sam_standard,uncounted")
rem 'user & prop arrays dimmed & set in update_item_price
LET users=new_users[0]
LET users2=new_users[1]
LET qty=fnnum(win_item.quantity$)
LET ece11.po_ref_number$=win_item.reference$
LET ece11.item_number$=win_item.item_number$
LET ece11.qty=qty
LET ece11.users=users
LET ece11.users2=users2
LET ece11.lic_property1$=new_lprop$[0]
LET ece11.lic_property2$=new_lprop$[1]
if users=0 and users2 then
 LET ece11.users=users2
 LET ece11.users2=users
 LET ece11.lic_property1$=new_lprop$[1]
 LET ece11.lic_property2$=new_lprop$[0]
fi
LET ece11.sam_coverage$="N"
IF win_item.sam_standard$="1" THEN LET ece11.sam_coverage$="S"
LET ece11.uncounted_flag$="N"
IF win_item.uncounted$="1" THEN LET ece11.uncounted_flag$="Y"
LET ffl$=FATTR(ece11$,"available"),ffl=DEC(ffl$(10,2))
LET ece11.available$=FILL(ffl)
LET ece11.annual_dt$=fill(8)
if sam_flag or rent_item then
  gosub renew_range
  if jul_renew<=jul_end and jul_renew>=jul_begin then ece11.annual_dt$=date(jul_renew:"%Yl%Mz%Dz")
fi
gosub upg_to
LET ece11$=FIELD(ece11$)
WRITE RECORD (ece11)ece11$

GOSUB init_cart

LET focus_id=NUM(FATTR(win_cart$,"View_Item","ID"))
new_context=gb__win.cart
old_context=gb__win.item
gosub show_window
rent_item=0

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=102 Ctl=102 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W102_C102_PUSH_BUTTON: 
REM ' Go from View_SN Window to Find_SN Window

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_view_sn$=fngb__get_screen$(win_id_view_sn$,win_view_sn$)

LET win_find_sn_grid_id=NUM(FATTR(win_find_sn$,"Grid","ID"))
DIM find_sn_rec$:"Serial_Number:c(16*):ALIGN=0 SHOW=1 LABEL=Serial_Number LENGTH=16:,"+"Sold:c(16*):ALIGN=0 SHOW=1 LABEL=Sold LENGTH=16:,"+"Users:c(8*):ALIGN=1 SHOW=1 LABEL=Users LENGTH=8:,"+"Description:c(60*):ALIGN=0 SHOW=1 LABEL=Description LENGTH=60:"

IF find_sn_file THEN CLOSE (find_sn_file)
LET find_sn_file=UNT
INITFILE find_sn_file$
OPEN (find_sn_file)find_sn_file$

REM ' populate the grid

LET win_find_sn$=fngb__get_screen$(win_id_find_sn$,win_find_sn$)

LET count=MAX(1,fnnum(win_find_sn.limit$))
LET prev_sn$=""
READ (snm01,KNUM=1,KEY=firm_id$+cust_num$+CVS(win_view_sn.serial_number$,6),DOM=find_next_sn)

find_next_sn: 
READ RECORD (snm01,END=find_last_sn)snm01$
IF snm01.firm_id$<>firm_id$ OR snm01.customer_nbr$<>cust_num$ THEN GOTO find_last_sn
IF win_find_sn.active_only AND snm01.active_flag$="N" THEN GOTO find_next_sn

LET grid_sn$=snm01.serial_nbr$
IF prev_sn$="" THEN LET prev_sn$=CVS(grid_sn$,2)

LET grid_date$=fnaondate$(snm01.orig_sale_date$)
IF snm01.users THEN LET grid_users$=STR(snm01.users) ELSE LET grid_users$="N/A"

DIM grid_item$(20)
LET grid_item$(1)=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$
ivm_item$=grid_item$
gosub ivm_item
LET grid_desc$=ivm01.item_desc$
LET grid_desc$=CVS(grid_desc$,3)+" ("+CVS(grid_item$,3)+")"

WRITE (find_sn_file,KEY=grid_sn$)CVS(grid_sn$,3),CVS(grid_date$,3),CVS(grid_users$,3),CVS(grid_desc$,3)

LET win_find_sn.serial_number$=CVS(snm01.serial_nbr$,7)
LET count=count-1
IF count THEN GOTO find_next_sn

find_last_sn: 
CLOSE (find_sn_file)
OPEN (find_sn_file)find_sn_file$

LET win_find_sn$=fngb__put_fields$(win_id_find_sn$,win_find_sn$,"serial_number")

LET batch!=sysgui!.get_message_batch()
batch!.addSendMsg(win_find_sn_grid_id,80,find_sn_file,FATTR(find_sn_rec$),gb__win.find_sn)
batch!.addSendMsg(win_find_sn_grid_id,81,0,$01$,gb__win.find_sn); REM ' read-only grid
batch!.addSendMsg(win_find_sn_grid_id,49,1,$$,gb__win.find_sn); REM ' highlight row
batch!.addSendMsg(win_find_sn_grid_id,57,1,$$,gb__win.find_sn); REM ' highlight colour
batch!.addSendMsg(win_find_sn_grid_hdr,84,0,$$,gb__win.find_sn); REM ' alignment
REM # batch!.addSendMsg(win_find_sn_grid_hdr,20,0,$$,gb__win.find_sn); rem ' info block
batch!.processAll()

LET focus_id=NUM(FATTR(win_find_sn$,"Close","ID"))
new_context=gb__win.find_sn
old_context=gb__win.view_sn
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=102 Ctl=101 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W102_C101_PUSH_BUTTON: 
REM ' Push button operated

LET ctl_id=NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
DIM sn$(20)
LET sn$(1)=CVS(CTRL(gb__sysgui,ctl_id,1,gb__win.view_sn),4)

GOSUB show_sn

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=109 Ctl=141 (Window Event) LIST_SELECT (N2:19)
REM ' ---------------------------------------------------------------

W109_C141_LIST_SELECT: 
REM ' Notify Event - List Button Control - List Selection

LET win_checkout_2$=fngb__get_screen$(win_id_checkout_2$,win_checkout_2$)
LET temp$=win_checkout_2.credit_card_list$,temp=POS($FF$=temp$)
IF temp=0 THEN RETURN; REM ' no selection
LET cc_count=NUM(temp$(temp+1))

LET win_checkout_2.visa=0
LET win_checkout_2.mastercard=0
LET win_checkout_2.american_express=0

IF cc_type$[cc_count]="V" THEN LET win_checkout_2.visa=1
IF cc_type$[cc_count]="M" THEN LET win_checkout_2.mastercard=1
IF cc_type$[cc_count]="A" THEN LET win_checkout_2.american_express=1

LET win_checkout_2.number$=fnformat_cc$(cc_num$[cc_count])

LET win_checkout_2.name$=cc_name$[cc_count]

LET temp$=win_checkout_2.expiry_month$+$FF$,temp=POS($FF$=temp$)
LET index=cc_month[cc_count]-1
LET temp$=temp$(1,temp)+STR(index)
LET win_checkout_2.expiry_month$=temp$

LET temp$=win_checkout_2.expiry_year$+$FF$,temp=POS($FF$=temp$)
LET index=cc_year[cc_count]-NUM(DATE(0:"%Yl"))
LET temp$=temp$(1,temp)+STR(index)
LET win_checkout_2.expiry_year$=temp$

LET win_checkout_2$=fngb__put_screen$(win_id_checkout_2$,win_checkout_2$)
print(gb__sysgui)'flush';wait 1
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=110 Ctl=111 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W110_C111_PUSH_BUTTON: 
REM ' Push button operated

GOSUB insert_cc

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=105 Ctl=119 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W105_C119_PUSH_BUTTON: 
REM ' Delete selected item from the shopping cart
LET row=DEC(SENDMSG(gb__sysgui,win_cart_grid_id,45,0,$$,gb__win.cart))
IF row<0 THEN RETURN
LET cart_rec$=SENDMSG(gb__sysgui,win_cart_grid_id,81,row,$04$,gb__win.cart)
gosub delete_cart_record

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=105 Ctl=165 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W105_C165_PUSH_BUTTON: 
REM ' Go from Cart Window to trade_select Window

old_context=gb__win.cart
GOSUB change_to_trade_select

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=105 Ctl=100 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W105_C100_PUSH_BUTTON: 
REM ' Print/Email Pro-forma Order

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_cart$=fngb__get_screen$(win_id_cart$,win_cart$)

LET ctl_id=NUM(FATTR(win_cart$,"Reference","ID"))
IF DEC(CTRL(gb__sysgui,ctl_id,2,gb__win.cart))=0 THEN LET reference$="" ELSE LET reference$=CVS(CTRL(gb__sysgui,ctl_id,1,gb__win.cart),3)

LET mailtext$="Current contents of your shopping cart:" + $0A$ + $0A$

IF LEN(reference$) THEN LET mailtext$=mailtext$+"Purchase Order: "+reference$ + $0A$ + $0A$

DIM detail$:"Line:c(4),Item:c(31),Users:c(5),Price:c(11),Qty:c(4),Ext:c(11)"
LET detail.Item$="Description"
LET detail.Users$="Users"
LET detail.Price$="     Price"
LET detail.Qty$=" Qty"
LET detail.Ext$=" Extension"
LET mailtext$=mailtext$+CVS(detail$,2) + $0A$

LET total=0

REM ' Now loop through the detail lines from the shopping cart
READ (ece11,KEY=firm_id$+cust_num$+user_code$,DOM=print_ece11_loop)

print_ece11_loop: 
LET ece11_key$=KEY(ece11,END=print_ece11_endloop)
READ RECORD (ece11,KEY=ece11_key$)ece11$
IF ece11.firm_id$<>firm_id$ OR ece11.customer_nbr$<>cust_num$ or ece11.user_code$<>user_code$ THEN GOTO print_ece11_endloop
rem 'reference can be 10 spaces
IF reference$<>"" AND cvs(reference$,3)<>CVS(ece11.po_ref_number$,3) THEN GOTO print_ece11_loop

LET contract$=""
DIM sn$(20)
IF LEN(CVS(ece11.serial_nbr$,3)) THEN LET sn$(1)=ece11.serial_nbr$
GOSUB sn_ec_price_setup

LET sam_flag=POS(ece11.sam_coverage$="S")

GOSUB check_for_trade
IF trade_tran THEN GOTO done_price

GOSUB ece11_ec_price

done_price: 
REM ' Skip this shopping cart line if we can't calculate a price
IF POS("**"=comments$)=1 OR type$[0]="" THEN GOTO print_ece11_loop

REM ' can be many detail lines for each ECE11 record
LET total=total+price
LET last_line=nbr_trans

FOR line=0 TO last_line
  REM ' CSM07 - Retrieve Type Of Sale record
  LET csm07.description$=type$[line](1,3)
  READ RECORD (csm07,KEY=firm_id$+type$[line](1,3),ERR=proforma_csm07)csm07$
proforma_csm07: 
  REM ' IVM01 - Retrieve Inventory Master record
  ivm_item$=type$[line](5)
  gosub ivm_item

  IF type$[line](1,3)="ADD" THEN LET users=ece11.users-original_users ELSE LET users=ece11.users
  IF line<last_line THEN IF type$[line+1](1,3)="ADD" THEN LET users=original_users

LET detail$=line_number$+" "+csm07.description$+" "
IF line THEN LET detail$=detail$+sn$ ELSE LET detail$=detail$+ece11.serial_nbr$
LET mailtext$=mailtext$+CVS(detail$,2) + $0A$

LET detail$=line_number$+" "+ivm01.item_desc$
LET mailtext$=mailtext$+CVS(detail$,2) + $0A$

DIM detail$:FATTR(detail$)
LET detail.Item$=type$[line](5)
LET detail.Users$=STR(users:"###0-")
LET detail.Price$=CVS(STR(price[line]/ece11.qty:"#######.00-"),64)
LET detail.Qty$=STR(ece11.qty:"###0")
LET detail.Ext$=CVS(STR(price[line]:"#######.00-"),64)
LET mailtext$=mailtext$+CVS(detail$,2) + $0A$ + $0A$

NEXT line

GOTO print_ece11_loop

print_ece11_endloop: 

DIM detail$:FATTR(detail$)
LET detail.Item$="Subtotal"
LET detail.Ext$=CVS(STR(total:"#######.00-"),64)
LET mailtext$=mailtext$+CVS(detail$,2) + $0A$

LET errmsg$="Couldn't find mailcall"

from$=CVS(arm10f.slspsn_name$,3)+" <"+CVS(arm10f.e_mail$,3)+">"
subject$="Your BASIS Shopping Cart"
attach$=""
to$=CVS(ecm01.e_mail$,3)
ccaddr$ = ""
bcc$ = ""
msgtxt$=mailtext$

call "sendEmail.src", from$, to$, ccaddr$, bcc$, subject$, msgtxt$, attach$
print_order_done: 
PRINT (gb__sysgui)'SETCURSOR'(0)
IF LEN(errmsg$) THEN LET i=MSGBOX(errmsg$,0,"Couldn't Send Mail") ELSE LET i=MSGBOX("Sent to "+CVS(ecm01.e_mail$,3),0,"Shopping Cart Sent")

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=114 Ctl=200 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W114_C200_PUSH_BUTTON: 
REM ' Switch from Credit_Card window to Account window

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_credit_card$=fngb__get_screen$(win_id_credit_card$,win_credit_card$)

IF win_credit_card.visa=0 AND win_credit_card.mastercard=0 AND win_credit_card.american_express=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M23"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

LET cc$="",temp$=CVS(win_credit_card.number$,3)
LET cckey$="",cckey$=FIELD(cc_rec$,"cc_key",ERR=continue_cc_check)
continue_cc_check: 
IF POS("*"=temp$) THEN LET temp$=cckey$

IF LEN(temp$) THEN FOR temp=1 TO LEN(temp$); IF temp$(temp,1)>="0" AND temp$(temp,1)<="9" THEN LET cc$=cc$+temp$(temp,1) FI ; NEXT temp

GOSUB verify_credit_card
IF !(valid) THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M24"+$0a$,mb_mode=0;gosub translate_mbox; LET ctl_id=NUM(FATTR(win_credit_card$,"Number","ID")); PRINT (gb__sysgui)'FOCUS'(ctl_id); RETURN

IF win_credit_card.american_express AND POS("3"=cc$)<>1 then junk$="American Express";goto wrong_cc_type

IF win_credit_card.visa AND POS("4"=cc$)<>1 THEN junk$="Visa";goto wrong_cc_type

IF win_credit_card.mastercard AND POS("5"=cc$)<>1 THEN junk$="MasterCard";goto wrong_cc_type

LET name$=CVS(win_credit_card.name$,3)
IF name$="" THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M26"+$0a$,mb_mode=0;gosub translate_mbox; LET ctl_id=NUM(FATTR(win_credit_card$,"Name","ID")); PRINT (gb__sysgui)'FOCUS'(ctl_id); RETURN

LET temp$=win_credit_card.expiry_month$,temp=POS($FF$=temp$)
IF temp=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M27"+$0a$,mb_mode=0;gosub translate_mbox; LET ctl_id=NUM(FATTR(win_credit_card$,"Expiry_Month","ID")); PRINT (gb__sysgui)'FOCUS'(ctl_id); RETURN
LET expiry_month=fnnum(win_credit_card.expiry_month$(temp+1))+1

LET temp$=win_credit_card.expiry_year$,temp=POS($FF$=temp$)
IF temp=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M28"+$0a$,mb_mode=0;gosub translate_mbox;LET ctl_id=NUM(FATTR(win_credit_card$,"Expiry_Year","ID")); PRINT (gb__sysgui)'FOCUS'(ctl_id); RETURN
LET expiry_year=fnnum(win_credit_card.expiry_year$(temp+1))+NUM(DATE(0:"%Yl"))

REM ' Now write the credit card record

LET ecm02.firm_id$=firm_id$
LET ecm02.customer_nbr$=cust_num$
LET ecm02.user_code$=user_code$
LET cce$=""
CALL "BCC.11",cc$,cce$
LET ecm02.credit_card_num$=cce$
IF win_credit_card.visa THEN LET ecm02.cc_type$="V"
IF win_credit_card.mastercard THEN LET ecm02.cc_type$="M"
IF win_credit_card.american_express THEN LET ecm02.cc_type$="A"
LET ecm02.cc_name$=CVS(win_credit_card.name$,3)
LET ecm02.cc_expires_mo$=STR(expiry_month:"00")
LET ecm02.cc_expires_yr$=STR(expiry_year:"0000")

LET ecm02$=FIELD(ecm02$)

rem 'No update by salesperson
if user_code$<>"**" then 
  WRITE RECORD (ecm02)ecm02$
  rem 'Update salesperson's credit card data
  LET ecm02.user_code$="**"
  WRITE RECORD (ecm02)ecm02$
  LET ecm02.user_code$=user_code$
fi

GOSUB init_account
IF init_checkout_2 THEN GOSUB init_checkout_2

LET focus_id=NUM(FATTR(win_account$,"Grid","ID"))
old_context=gb__win.credit_card
new_context=gb__win.account
gosub show_window

RETURN

wrong_cc_type:

PRINT (gb__sysgui)'SETCURSOR'(0)
junk$="M25"+$0a$+junk$+$0a$,mb_mode=0
gosub translate_mbox
ctl_id=NUM(FATTR(win_credit_card$,"Number","ID"))
PRINT (gb__sysgui)'FOCUS'(ctl_id); RETURN

return


REM ' ---------------------------------------------------------------
REM ' Win=114 Ctl=201 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W114_C201_PUSH_BUTTON: 
REM ' Switch from Credit_Card window to Account window

LET win_credit_card$=fngb__get_screen$(win_id_credit_card$,win_credit_card$)

LET cc$="",temp$=CVS(win_credit_card.number$,3)
LET cckey$="",cckey$=FIELD(cc_rec$,"cc_key",ERR=continue_cc_delete)
continue_cc_delete: 
IF POS("*"=temp$) THEN LET temp$=cckey$

IF LEN(temp$) THEN FOR temp=1 TO LEN(temp$); IF temp$(temp,1)>="0" AND temp$(temp,1)<="9" THEN LET cc$=cc$+temp$(temp,1) FI ; NEXT temp

LET ecm02.firm_id$=firm_id$
LET ecm02.customer_nbr$=cust_num$
LET ecm02.user_code$=user_code$
LET cce$=""
CALL "BCC.11",cc$,cce$
LET ecm02.credit_card_num$=cce$

FIND (ecm02,KEY=ecm02.firm_id$+ecm02.customer_nbr$+ecm02.user_code$+ecm02.credit_card_num$,ERR=no_cc)

rem 'No update by salesperson
if user_code$<>"**" then
  junk$="M38"+$0a$+fnobscure_cc$(cc$)+$0a$,mb_mode=4+256
  gosub translate_mbox
  IF i=7 THEN GOTO no_cc
  REMOVE (ecm02,KEY=ecm02.firm_id$+ecm02.customer_nbr$+ecm02.user_code$+ecm02.credit_card_num$,ERR=*next)
  rem 'Update salesperson's credit card data
  LET ecm02.user_code$="**"
  REMOVE (ecm02,KEY=ecm02.firm_id$+ecm02.customer_nbr$+ecm02.user_code$+ecm02.credit_card_num$,ERR=*next)
  LET ecm02.user_code$=user_code$
fi

no_cc: 
GOSUB init_account
IF init_checkout_2 THEN GOSUB init_checkout_2

LET focus_id=NUM(FATTR(win_account$,"Grid","ID"))
old_context=gb__win.credit_card
new_context=gb__win.account
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=109 Ctl=101 (Window Event) CHECK_ON (c1)
REM ' ---------------------------------------------------------------

W109_C101_CHECK_ON: 
REM ' Control checked (ON)

GOSUB disable_checkout_2_cc_info

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=109 Ctl=136 (Window Event) CHECK_ON (c1)
REM ' ---------------------------------------------------------------

W109_C136_CHECK_ON: 
REM ' Control checked (ON)

GOSUB enable_checkout_2_cc_info

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=110 Ctl=1 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W110_C1_PUSH_BUTTON: 
REM ' Go from Account Window to Main Window

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_account$=fngb__get_screen$(win_id_account$,win_account$)

IF win_account.password$<>win_account.confirm_password$ THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M40"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

IF LEN(win_account.password$)=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M39"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

IF LEN(win_account.password$)<6 OR LEN(win_account.password$)>8 THEN PRINT (gb__sysgui)'SETCURSOR'(0);junk$="M41"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

LET i=1
REPEAT
    LET alpha=POS(win_account.password$(i,1)="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
    LET i=i+1
UNTIL !(alpha) OR i>LEN(win_account.password$)

IF alpha THEN PRINT (gb__sysgui)'SETCURSOR'(0);junk$="M42"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

IF CVS(ecm01.e_mail$,3)=CVS(win_account.email$,3) AND CVS(ecm01.e_mail2$,3)=CVS(win_account.email2$,3) AND CVS(ecm01.password$,3)=CVS(win_account.password$,3) THEN GOTO account_no_change

LET init_account=0; REM ' ensure that the screen is redrawn next time

PRINT (gb__sysgui)'SETCURSOR'(0)
junk$="M43"+$0a$,mb_mode=1;gosub translate_mbox
IF i=2 THEN GOTO account_no_change

LET ecm01.e_mail$=win_account.email$
LET ecm01.e_mail2$=win_account.email2$
LET ecm01.password$=win_account.password$; REM ' TODO - encrypt password?

LET ecm01$=FIELD(ecm01$)

REM ' ========== TODO: this should be a TRANSACTION ==========
WRITE RECORD (ecm01)ecm01$
EXTRACT RECORD (ecm01,TIM=10,KEY=firm_id$+cust_num$+user_code$)ecm01$
REM ' ========== TODO: this should be a TRANSACTION ==========

account_no_change: 

LET focus_id=NUM(FATTR(win_main$,"Account","ID"))
new_context=gb__win.main
old_context=gb__win.account
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=100 Ctl=1 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W100_C1_PUSH_BUTTON: 
REM ' Login

IF logged_in THEN RETURN

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_login$=fngb__get_fields$(win_id_login$,win_login$,"user_id,password")

LET firm_id$=pass_firm$
LET cust_num$=""
LET user_code$=""

REM ' Format is FFCCCCCCUU
REM ' FF is a 2-digit Firm ID (usually 01 or 02)
REM ' CCCCCC is a 1-6 digit customer number, typically 4 digits
REM ' UU is an optional 1- or 2-letter user code

LET temp$=CVS(win_login.user_id$,3)
x=LEN(temp$)
IF x<3 OR x>10 THEN GOTO login_error

x$=temp$(1,2)
if pos(x$="0102",2) and x>5 then temp$=temp$(3),firm_id$=x$,x=x-2 else x$=""
for n=x-1 to x
if pos(temp$(n,1)="0123456789")=0 then 
  user_code$=user_code$+temp$(n,1)
  temp$(n,1)=" "
fi
next n
user_code$=PAD(user_code$,2)
temp$=cvs(temp$,3)
cust_num$=STR(NUM(temp$):"000000",err=*next)

GOSUB open_files

REM ' get customer EC record
tries=0
get_ecm01:
EXTRACT RECORD (ecm01,KEY=firm_id$+cust_num$+user_code$,TIM=3,DOM=ecm01_not_found,ERR=login_error)ecm01$
GOTO check_password

ecm01_not_found: 
if x$<>"" and pos("00"=cust_num$)=1 then
  firm_id$=pass_firm$
  cust_num$(1,2)=x$
  x$=""
  goto get_ecm01
fi
tries=tries+1
if tries<3 then 
  firm_id$=str(tries:"00")
  goto get_ecm01
fi

LET firm_id$="",cust_num$="",user_code$=""
GOTO login_error

check_password: 

temp$=DATE(0:"%Y%Mz%Dz%Hz%mz")
if temp$<"200612311700" and temp$>"200612290853" and firm_id$="02" then
  junk$="M48"+$0a$+"01.01.2007"+$0a$
  goto login_error
fi

IF CVS(ecm01.password$,3)<>CVS(win_login.password$,3) THEN LET firm_id$="",cust_num$="",user_code$=""; GOTO login_error
IF len(CVS(ecm01.password$,3))<4 THEN LET firm_id$="",cust_num$="",user_code$=""; GOTO login_error

REM ' Attempt to create work files
LET cc_file$=temp_dir$+"EC"+firm_id$+cust_num$+"ACCOUNT"+cvs(user_code$,3)
ERASE cc_file$,ERR=setup_cc_workfile
setup_cc_workfile: 
LET message$="Couldn't initialize ACCOUNT work file"
MKEYED cc_file$,20,0,128,ERR=config_error
LET cc_file=0

LET clients_file$=temp_dir$+"EC"+firm_id$+cust_num$+"CLIENTS"+cvs(user_code$,3)
ERASE clients_file$,ERR=setup_clients_workfile
setup_clients_workfile: 
LET message$="Couldn't initialize CLIENTS work file"
MKEYED clients_file$,20,0,128,ERR=config_error
LET clients_file=0

LET history_file$=temp_dir$+"EC"+firm_id$+cust_num$+"HISTORY"+cvs(user_code$,3)
ERASE history_file$,ERR=setup_history_workfile
setup_history_workfile: 
LET message$="Couldn't initialize HISTORY work file"
MKEYED history_file$,20,0,128,ERR=config_error
LET history_file=0

LET cart_file$=temp_dir$+"EC"+firm_id$+cust_num$+"CART"+cvs(user_code$,3)
ERASE cart_file$,ERR=setup_cart_workfile
setup_cart_workfile: 
LET message$="Couldn't initialize CART work file"
MKEYED cart_file$,20,0,128,ERR=config_error
LET cart_file=0

LET find_sn_file$=temp_dir$+"EC"+firm_id$+cust_num$+"FIND_SN"+cvs(user_code$,3)
ERASE find_sn_file$,ERR=setup_find_sn_workfile
setup_find_sn_workfile: 
LET message$="Couldn't initialize FIND_SN work file"
MKEYED find_sn_file$,20,0,128,ERR=config_error
LET find_sn_file=0

REM ' get inventory parameters (Warehouse ID)
LET message$="Couldn't retrieve inventory parameters record"
READ RECORD (ivs01,KEY=firm_id$+"IV00",ERR=config_error)ivs01$

REM ' Get A/R codes
LET message$="Couldn't retrieve A/R parameters record"
READ RECORD (arm10e,KEY=firm_id$+"E"+"S",ERR=config_error)arm10e$

REM ' get customer master info
LET message$="Couldn't retrieve customer info (ARM01)"
READ RECORD (arm01,KEY=firm_id$+cust_num$,ERR=config_error)arm01$

LET message$="Couldn't retrieve customer info (ARM02)"
READ RECORD (arm02,KEY=firm_id$+cust_num$+"  ",ERR=config_error)arm02$

LET message$="Couldn't retrieve tax parameters (ARM10B)"
READ RECORD (ARM10B,KEY=firm_id$+"B"+arm02.tax_code$,ERR=config_error)arm10b$

LET message$="Customer not configured in TeleMaster"
READ record(tmm01,KNUM=0,KEY=firm_id$+cust_num$+"000000",DOM=config_error)tmm01$
REM ' get salesperson contact info
LET message$="Couldn't retrieve salesperson contact info (ARM10F)"
READ RECORD (arm10f,KEY=firm_id$+"F"+arm02.slspsn_code$,ERR=config_error)arm10f$
IF POS("@"=arm10f.e_mail$)=0 THEN LET arm10f.e_mail$="sales@basis.com"
IF CVS(arm10f.phone_1$,3)="" THEN LET arm10f.phone_1$="+1 505.345.5232"
IF CVS(arm10f.phone_2$,3)="" THEN LET arm10f.phone_2$="+1 505.938.6120"

REM ' Set freight parameters
READ RECORD (country,KEY=tmm01.country_code$,DOM=*next)country$
LET freight_zone$=country.zone$
IF firm_id$="02" THEN LET freight_zone$=country.zone2$
LET freight_type$=" " 
if tmm01.country_code$="US" then LET freight_zone$="001",freight_type$="3"
LET standard_freight_type$=freight_type$

REM ' Set numeric display to US standard
LET amount_mask$="$#,###,##0.00-"
LET opt$=OPTS,opt$(5,1)=$00$,opt$(6,1)=$00$
REM ' if BSG set numerics to Europe standard: . for , and vice-versa
IF firm_id$="02" THEN LET amount_mask$=" #,###,##0.00-",opt$(3,1)=IOR(opt$(3,1),$02$),opt$(5,1)=$2E$,opt$(6,1)=$2C$
SETOPTS opt$

REM ' Initialize list of products available for sale online

LET item_product_list$=""
READ (csm01,KEY=firm_id$,DOM=read_csm01)
read_csm01: 
READ RECORD (csm01,END=end_csm01)csm01$
IF csm01.firm_id$<>firm_id$ THEN GOTO end_csm01
IF csm01.online_flag$="Y" THEN LET item_product_list$=item_product_list$+csm01.product$
GOTO read_csm01
end_csm01: 
runtime_products$="VP5,PR5,BAS"

rem 'check for special SAM expiration date
CALL "ec_open::SPEC_DATE"
readrecord(spec_date,key=firm_id$+cust_num$,dom=*next)spec_date$
close(spec_date)
special_date$=""
jul_spec_date=0
p1=pos(spec_date.mmdd$(1,2)="010305070810120406091102",2)
p2=fnnum(spec_date.mmdd$(3,2))
while p1
  if spec_date.date_active$<>"Y" then break
  if p2<1 or p2>31 then break
  if p1>14 and p2>30 then break
  if p1>22 and p2>28 then break
  temp$=DATE(0:"%Y%Mz%Dz")
  tmp=fnjul(temp$)
  special_date$=temp$(1,4)+spec_date.mmdd$
  jul_spec_date=fnjul(special_date$)
  if jul_spec_date<=tmp then 
    special_date$(1,4)=str(num(temp$(1,4))+1:"0000")
    jul_spec_date=fnjul(special_date$)
  fi
  if jul_spec_date-tmp<32 then
    special_date$(1,4)=str(num(special_date$(1,4))+1:"0000")
    jul_spec_date=fnjul(special_date$)
  fi
  break
wend

rem "open other resource file, if necessary
hold_resource$=gb__resource$
rem if firm_id$="02" then gb__resource$="ec_de.arc" else gb__resource$="ec.arc"
if hold_resource$<>gb__resource$ then 
  gosub open_resource_file
  gosub load_login
  gosub load_remaining_forms
  gosub initialize_structure
fi

REM ' Switch from Login to Main
LET focus_id=NUM(FATTR(win_main$,"Logout","ID"))
new_context=fngb__context("101")
old_context=gb__win.login
print(gb__sysgui)'context'(old_context)
gosub show_window

REM BWH
mainWindow! = sysgui!.getWindow(gb__win.MAIN)
mainWindow!.getControl(1009).setOpaque(sysgui!.FALSE)
mainWindow!.getControl(1000).setOpaque(sysgui!.FALSE)
mainWindow!.getControl(1001).setOpaque(sysgui!.FALSE)
mainWindow!.getControl(1002).setOpaque(sysgui!.FALSE)
LET logged_in=1
RETURN

Login_Error: 
GOSUB close_files
PRINT (gb__sysgui)'SETCURSOR'(0)
if pos("M48"=junk$)<>1 then
  IF cust_num$="" THEN 
    junk$="M1"+$0a$
  ELSE 
    junk$="M44"+$0a$
  fi
fi
mb_mode=0
gosub translate_mbox
LET firm_id$="",cust_num$="",user_code$=""
LET ctl_id=NUM(FATTR(win_login$,"User_ID","ID"))
PRINT (gb__sysgui)'FOCUS'(ctl_id)
RETURN

Config_Error: 
GOSUB close_files
PRINT (gb__sysgui)'SETCURSOR'(0)
LET i=MSGBOX(message$,0,"Configuration Error")
LET firm_id$="",cust_num$="",user_code$=""
LET ctl_id=NUM(FATTR(win_login$,"User_ID","ID"))
PRINT (gb__sysgui)'FOCUS'(ctl_id)

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=100 Ctl=2 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W100_C2_PUSH_BUTTON: 
REM ' Push button operated

LET gb__eoj=1

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=101 Ctl=118 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W101_C118_PUSH_BUTTON: 
REM ' Logout

PRINT (gb__sysgui)'SETCURSOR'(3)

FIND (ecm01,KEY=firm_id$+cust_num$+user_code$,ERR=unlock_ecm01)
unlock_ecm01: 

IF find_sn_file THEN CLOSE (find_sn_file); LET find_sn_file=0
IF LEN(find_sn_file$) THEN ERASE find_sn_file$,ERR=erase_find_sn_file
erase_find_sn_file: 

IF cc_file THEN CLOSE (cc_file); LET cc_file=0
IF LEN(cc_file$) THEN ERASE cc_file$,ERR=erase_cc_file
erase_cc_file: 

IF clients_file THEN CLOSE (clients_file); LET clients_file=0
IF LEN(clients_file$) THEN ERASE clients_file$,ERR=erase_clients_file
erase_clients_file: 

IF history_file THEN CLOSE (history_file); LET history_file=0
IF LEN(history_file$) THEN ERASE history_file$,ERR=erase_history_file
erase_history_file: 

IF cart_file THEN CLOSE (cart_file); LET cart_file=0
IF LEN(cart_file$) THEN ERASE cart_file$,ERR=erase_cart_file
erase_cart_file: 

REM ' win_login$ = fngb__get_screen$(win_id_login$,win_login$)
LET win_login.user_id$=""
LET win_login.password$=""
LET win_login$=fngb__put_fields$(win_id_login$,win_login$,"user_id,password")

GOSUB initialize_structure

GOSUB close_files

REM ' Switch from Main to Login
LET focus_id=NUM(FATTR(win_login$,"User_ID","ID"))
new_context=gb__win.login
old_context=gb__win.main
gosub show_window

LET logged_in=0

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=113 Ctl=110 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W113_C110_PUSH_BUTTON: 
REM ' Find_SN: Scan Back

PRINT (gb__sysgui)'SETCURSOR'(3)

CLOSE (find_sn_file)
INITFILE find_sn_file$
OPEN (find_sn_file)find_sn_file$

LET win_find_sn$=fngb__get_screen$(win_id_find_sn$,win_find_sn$)

LET count=MAX(1,fnnum(win_find_sn.limit$))
READ (snm01,KNUM=1,DIR=-1,KEY=firm_id$+cust_num$+prev_sn$,DOM=prev_sn)

prev_sn: 
READ RECORD (snm01,DIR=-1,END=first_sn)snm01$
IF snm01.firm_id$<>firm_id$ OR snm01.customer_nbr$<>cust_num$ THEN GOTO first_sn
IF win_find_sn.active_only AND snm01.active_flag$="N" THEN GOTO prev_sn

LET grid_sn$=snm01.serial_nbr$

LET grid_date$=fnaondate$(snm01.orig_sale_date$)
IF snm01.users THEN LET grid_users$=STR(snm01.users) ELSE LET grid_users$="N/A"

DIM grid_item$(20)
LET grid_item$(1)=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$
ivm_item$=grid_item$
gosub ivm_item
LET grid_desc$=ivm01.item_desc$
LET grid_desc$=CVS(grid_desc$,3)+" ("+CVS(grid_item$,3)+")"

WRITE (find_sn_file,KEY=grid_sn$)CVS(grid_sn$,3),CVS(grid_date$,3),CVS(grid_users$,3),CVS(grid_desc$,3)
LET prev_sn$=CVS(grid_sn$,7)
LET count=count-1
IF count THEN GOTO prev_sn

first_sn: 
LET win_find_sn.serial_number$=prev_sn$
LET win_find_sn$=fngb__put_fields$(win_id_find_sn$,win_find_sn$,"serial_number")

CLOSE (find_sn_file)
OPEN (find_sn_file)find_sn_file$

LET batch!=sysgui!.get_message_batch()
batch!.addSendMsg(win_find_sn_grid_id,80,find_sn_file,FATTR(find_sn_rec$),gb__win.find_sn)
batch!.addSendMsg(win_find_sn_grid_id,81,0,$01$,gb__win.find_sn); REM ' read-only grid
batch!.addSendMsg(win_find_sn_grid_id,49,1,$$,gb__win.find_sn); REM ' highlight row
batch!.addSendMsg(win_find_sn_grid_id,57,1,$$,gb__win.find_sn); REM ' highlight colour
batch!.addSendMsg(win_find_sn_grid_hdr,84,0,$$,gb__win.find_sn); REM ' alignment
REM # batch!.addSendMsg(win_find_sn_grid_hdr,20,0,$$,gb__win.find_sn); rem ' info block
batch!.processAll()

PRINT (gb__sysgui)'SETCURSOR'(0)

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=111 Ctl=113 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W111_C113_PUSH_BUTTON: 
REM ' Go from History Window to Clients Window

IF CVS(server_sn$,3)="" THEN RETURN

LET snm01.serial_nbr$=server_sn$
READ RECORD (snm01,KNUM=0,KEY=snm01.serial_nbr$,ERR=no_clients)snm01$
GOTO got_clients_snm01

no_clients: 
RETURN

got_clients_snm01: 
PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_clients_grid_id=NUM(FATTR(win_clients$,"Grid","ID"))
DIM clients_rec$:"Serial_Number:c(16*):ALIGN=0 SHOW=1 LABEL=Client_S/N LENGTH=16:,"+"Item_Number:c(16*):ALIGN=0 SHOW=1 LABEL=Item_Number LENGTH=16:,"+"Users:c(8*):ALIGN=1 SHOW=1 LABEL=Users LENGTH=8:,"+"Description:c(60*):ALIGN=0 SHOW=1 LABEL=Description LENGTH=60:"

IF clients_file THEN CLOSE (clients_file)
LET clients_file=UNT
INITFILE clients_file$
OPEN (clients_file)clients_file$

LET win_clients$=fngb__get_screen$(win_id_clients$,win_clients$)

ivm_item$=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$+FILL(5)
gosub ivm_item

LET win_clients.serial_number$=CVS(server_sn$,3)
LET win_clients.item_number$=CVS(ivm01.item_number$,3)
LET win_clients.description$=CVS(ivm01.item_desc$,3)

get_cs_info: 
LET client_count=0,user_count=0
READ (snt02,KNUM=0,KEY=server_sn$,DOM=client_loop)

client_loop: 
READ RECORD (snt02,END=client_endloop)snt02$
IF CVS(snt02.data_server$,3)<>CVS(server_sn$,3) THEN GOTO client_endloop
READ RECORD (snm01,KNUM=0,KEY=snt02.serial_nbr$,ERR=client_loop)snm01$
ivm_item$=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$+FILL(5)
gosub ivm_item

WRITE (clients_file,KEY=snm01.serial_nbr$)CVS(snm01.serial_nbr$,3),CVS(ivm01.item_number$,3),STR(snm01.users),CVS(ivm01.item_desc$,3)

LET client_count=client_count+1
LET user_count=user_count+snm01.users

GOTO client_loop

client_endloop: 
CLOSE (clients_file)
OPEN (clients_file)clients_file$

IF client_count=1 THEN LET win_clients.message$="There is "+STR(client_count)+" client with a total of "+STR(user_count)+" users."+"  Double-click in the grid to see details for this client license." ELSE LET win_clients.message$="There are "+STR(client_count)+" clients with a total of "+STR(user_count)+" users."+"  Double-click in the grid to see details for a specific client license."

LET win_clients$=fngb__put_screen$(win_id_clients$,win_clients$)

LET batch!=sysgui!.get_message_batch()
batch!.addSendMsg(win_clients_grid_id,80,clients_file,FATTR(clients_rec$),gb__win.clients)
batch!.addSendMsg(win_clients_grid_id,81,0,$01$,gb__win.clients); REM ' read-only grid
batch!.addSendMsg(win_clients_grid_id,49,1,$$,gb__win.clients); REM ' highlight row
batch!.addSendMsg(win_clients_grid_id,57,1,$$,gb__win.clients); REM ' highlight colour
batch!.addSendMsg(win_clients_grid_hdr,84,0,$$,gb__win.clients); REM ' alignment
REM # batch!.addSendMsg(win_clients_grid_hdr,20,0,$$,gb__win.clients); rem ' info block
batch!.processAll()

LET focus_id=NUM(FATTR(win_clients$,"Close","ID"))
new_context=gb__win.clients
old_context=gb__win.view_sn
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=116 Ctl=1 Yes  (Push Button) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W116_C1_PUSH_BUTTON: 
REM ' Push button operated
LET win_reset_license$=fngb__get_fields$(win_id_reset_license$,win_reset_license$,"reset_reason")
LET temp$=win_reset_license.reset_reason$
temp=pos($ff$=temp$)
if temp then temp=num(temp$(temp+1))
reset_code$=reset_code_list$(temp*2+1,2)
if reset_code$="??" then
  junk$="M34"+$0a$+cvs(snm01.serial_nbr$,2)+$0a$
  gosub translate_mbox
  return
fi
ece11.reset_code$=reset_code$
rem RETURN ; let it fall through to next routine - they end the same

REM ' ---------------------------------------------------------------
REM ' Win=116 Ctl=2 No (Push Button) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W116_C2_PUSH_BUTTON: 
REM ' Push button operated
PRINT (gb__sysgui)'CONTEXT'(new_context),'HIDE'(0),'CONTEXT'(old_context),'ENABLE'(0)
gosub edit_to_cart
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=111 Ctl=114 (Window Event) TAB_SELECT (N2:106)
REM ' ---------------------------------------------------------------

W111_C114_TAB_SELECT: 
REM ' Notify Event - Tab - Tab gb__notice.tabidx Selected

if gb__notice.tabidx=0 then print (gb__sysgui)'CONTEXT'(gb__notice.context),'DISABLE'(reset_id,reset_reason_id)

while gb__notice.tabidx=1 
  print (gb__sysgui)'CONTEXT'(gb__notice.context),'DISABLE'(reset_id,reset_reason_id)
  IF license_status<>1 or snm01.dist_reset>=arm02.allowed_resets or snm01.active_flag$<>"Y" then break
  enable=0
  if cvs(snm01.contract$,3)<>"" and snm01.sam_active$<>"N" then enable=1
  if snm01.avail_support>0 or snm01.product$="DS5" THEN enable=1
  if enable THEN print (gb__sysgui)'CONTEXT'(gb__notice.context),'ENABLE'(reset_id,reset_reason_id)
  break
wend

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=111 Ctl=116 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W111_C116_PUSH_BUTTON: 
IF snm01.dist_reset>=arm02.allowed_resets THEN RETURN

GOSUB license_status
IF license_status<1 THEN GOTO reset_button_end

LET win_history$=fngb__get_fields$(win_id_history$,win_history$,"reset_reason")
LET temp$=win_history.reset_reason$
temp=pos($ff$=temp$)
if temp then temp=num(temp$(temp+1))
reset_code$=reset_code_list$(temp*2+1,2)
if reset_code$="??" then
  junk$="M34"+$0a$+cvs(snm01.serial_nbr$,2)+$0a$
  gosub translate_mbox
  goto reset_button_end
fi
reduce_support=0
if (cvs(snm01.contract$,2)="" or snm01.sam_active$="N") and snm01.product$<>"DS5" then reduce_support=1
junk$="M45"+$0a$+str(snm01.avail_support-reduce_support)+$0a$
mb_mode=4+32+256
gosub translate_mbox

IF gb__temp=7 then GOTO reset_button_end

IF license_status_channel=are83 THEN 
  EXTRACT RECORD (license_status_channel,TIM=5,KEY=license_status_key$,ERR=reset_button_end)are83$
  LET are83.license_cnt=0,are83$=FIELD(are83$)
  WRITE RECORD (license_status_channel,KEY=license_status_key$)are83$
ELSE 
  EXTRACT RECORD (license_status_channel,TIM=5,KEY=license_status_key$,ERR=reset_button_end)snt01$
  LET snt01.license_cnt=0,snt01$=FIELD(snt01$)
  WRITE RECORD (license_status_channel,KEY=license_status_key$)snt01$
fi
PRINT (gb__sysgui)'DISABLE'(reset_id,reset_reason_id)
EXTRACT RECORD (snm01,TIM=5,KEY=snm01.serial_nbr$,ERR=reset_button_end)snm01$
LET snm01.dist_reset=snm01.dist_reset+1
snm01.avail_support=snm01.avail_support-reduce_support
LET snm01$=FIELD(snm01$)
WRITE RECORD (snm01,KEY=snm01.serial_nbr$)snm01$
READ RECORD (snm01,KEY=snm01.serial_nbr$)snm01$

LET license_reset.serial_nbr$=snm01.serial_nbr$
LET license_reset.reset_date$=DATE(0:"%Y%Mz%Dz")
LET license_reset.reset_time$=DATE(0:"%Hz%mz%sz")
LET license_reset.reset_by$=firm_id$+cust_num$
LET license_reset.reset_to$="0"
LET license_reset.reset_code$=reset_code$
LET ffl$=FATTR(license_reset$,"available"),ffl=DEC(ffl$(10,2))
LET license_reset.available$=FILL(ffl)
LET license_reset$=FIELD(license_reset$)
WRITE RECORD (LICENSE_RESET,KEY=license_reset.serial_nbr$+license_reset.reset_date$+license_reset.reset_time$)license_reset$

rreason$=""
GOSUB license_history

LET win_history.list_box$=lbox$
LET win_history$=fngb__put_fields$(win_id_history$,win_history$,"list_box")

REM " send email to sales rep
LET errmsg$="Couldn't find mailcall"

from$=CVS(arm01.cust_name$,3)+" <"+CVS(ecm01.e_mail$,2)+">"
to$=CVS(arm10f.slspsn_name$,3)+" <"+CVS(arm10f.e_mail$,3)+">"
subject$=cust_num$+", "+CVS(snm01.serial_nbr$,2)+" license reset"
attach$=""
ccaddr$="BASIS Customer Service <cust@basis.com>"
bcc$ = ""

if rreason$<>"" then rreason$=cvs(rreason$,3)+ $0A$
msgtxt$=license_reset.reset_date$(5,2)+"/"+license_reset.reset_date$(7,2)+"/"+license_reset.reset_date$(1,4)+"  "+license_reset.reset_time$(1,2)+":"+license_reset.reset_time$(3,2)+ $0A$ + CVS(snm01.serial_nbr$,3)+" license status was reset by "+CVS(arm01.cust_name$,3)+"." + $0A$ + rreason$+"This is reset #"+STR(resets)+" for this serial number."

call "sendEmail.src", from$, to$, ccaddr$, bcc$, subject$, msgtxt$, attach$

reset_button_end: 
win_history.reset_reason$=reset_reason_list$
win_history$=fngb__put_fields$(win_id_history$,win_history$,"reset_reason")

RETURN

initialize_structure: 
win_id_login$=fngb__win_id$(gb__win.login)
DIM win_login$:fngb__template$(win_id_login$)

win_id_main$=fngb__win_id$(gb__win.main)
DIM win_main$:fngb__template$(win_id_main$)

win_id_view_sn$=fngb__win_id$(gb__win.view_sn)
DIM win_view_sn$:fngb__template$(win_id_view_sn$)

win_id_edit_sn$=fngb__win_id$(gb__win.edit_sn)
DIM win_edit_sn$:fngb__template$(win_id_edit_sn$)
init_edit_sn=0

win_id_item$=fngb__win_id$(gb__win.item)
DIM win_item$:fngb__template$(win_id_item$)
init_item=0

win_id_cart$=fngb__win_id$(gb__win.cart)
DIM win_cart$:fngb__template$(win_id_cart$)
win_cart_grid_hdr=102
init_cart=0

win_id_checkout_1$=fngb__win_id$(gb__win.checkout_1)
DIM win_checkout_1$:fngb__template$(win_id_checkout_1$)
init_checkout_1=0

win_id_ship_usa$=fngb__win_id$(gb__win.ship_usa)
DIM win_ship_usa$:fngb__template$(win_id_ship_usa$)
DIM temp_ship_usa$:FATTR(win_ship_usa$)
init_ship_usa=0

win_id_ship_intl$=fngb__win_id$(gb__win.ship_intl)
DIM win_ship_intl$:fngb__template$(win_id_ship_intl$)
DIM temp_ship_intl$:FATTR(win_ship_intl$)
init_ship_intl=0

win_id_checkout_2$=fngb__win_id$(gb__win.checkout_2)
DIM win_checkout_2$:fngb__template$(win_id_checkout_2$)
init_checkout_2=0

win_id_account$=fngb__win_id$(gb__win.account)
DIM win_account$:fngb__template$(win_id_account$)
win_account_grid_hdr=107
init_account=0

win_id_history$=fngb__win_id$(gb__win.history)
DIM win_history$:fngb__template$(win_id_history$)
win_history_grid_hdr=109
init_history=0

win_id_clients$=fngb__win_id$(gb__win.clients)
DIM win_clients$:fngb__template$(win_id_clients$)
win_clients_grid_hdr=102
init_clients=0

win_id_find_sn$=fngb__win_id$(gb__win.find_sn)
DIM win_find_sn$:fngb__template$(win_id_find_sn$)
win_find_sn_grid_hdr=109
init_find_sn=0

win_id_credit_card$=fngb__win_id$(gb__win.credit_card)
DIM win_credit_card$:fngb__template$(win_id_credit_card$)
init_credit_card=0

win_id_reset_license$=fngb__win_id$(gb__win.reset_license)
DIM win_reset_license$:fngb__template$(win_id_reset_license$)
init_reset_license=0

win_id_trade_select$=fngb__win_id$(gb__win.trade_select)
DIM win_trade_select$:fngb__template$(win_id_trade_select$)

win_id_trade$=fngb__win_id$(gb__win.trade)
DIM win_trade$:fngb__template$(win_id_trade$)
init_trade=0

win_id_send_rpt$=fngb__win_id$(gb__win.send_rpt)
dim win_send_rpt$:fngb__template$(win_id_send_rpt$)

win_id_renewal$=fngb__win_id$(gb__win.renewal)
dim win_renewal$:fngb__template$(win_id_renewal$)

RETURN

REM ' -----------------------------------------------------------------
total_price: 
REM ' -----------------------------------------------------------------
LET price=0,listprice=0,promo_discount=0
FOR nbr=0 TO nbr_trans
IF type$[nbr]<>"" THEN 
  dsc=(disc_pct+partner_disc)/100
  rem 'KITs, re-instatement fees not discountable
  if pos("KIT"=new_item$) or pos("RIF"=type$[nbr]) then dsc=0
  LET price=price+price[nbr] 
  listprice=listprice+price[nbr]/(1-dsc)
fi
p=pos($0a$=comments$,1,nbr+1)
if p=0 then continue
comments$=comments$(1,p-1)+str(price[nbr]:"######.00-")+comments$(p)
NEXT nbr
disc_incl$=""
if partner_disc=0 or price=0 then return
rem tmppct=0,promo_line_code$=""
rem if inhouse or user_code$="**" or pos("P"=arm02.cust_type$)<>1 then return
rem tmppct=.05
rem promo_line_code$="o"
rem LET promo_discount=listprice*tmppct
rem LET price=price-promo_discount
rem LET m$=STR(promo_discount:"######.00"),m$=CVS(m$,3)
disc_incl$="(Online discount applied)"
rem if lang$="DE" then m$="Rabatt inbegriffen"
comments$=comments$+disc_incl$+$0a$
RETURN

disable_edits: 
temp_list$="product/platform/oslevel/revision/license/users/sam_standard/renew_dt/renew_dt_btn/runtime/uncounted/no_rif/"
WHILE LEN(temp_list$)
  p=POS("/"=temp_list$)
  ctl$=temp_list$(1,p-1),temp_list$=temp_list$(p+1)
  ctl_id=NUM(FATTR(win_edit_sn$,ctl$,"ID"))
  x$=CTRL(gb__sysgui,ctl_id,8),disabled=DEC(x$)
  IF support_only=0 AND disabled THEN PRINT (gb__sysgui)'ENABLE'(ctl_id)
  IF support_only AND disabled=0 THEN PRINT (gb__sysgui)'DISABLE'(ctl_id)
WEND
RETURN

REM ' -----------------------------------------------------------------
trade_page: 
REM ' -----------------------------------------------------------------

PRINT (gb__sysgui)'SETCURSOR'(3)
GOSUB get_itemlist
IF items=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN

IF edit_action$="new" THEN 
  LET sam_flag=1,sam_required$="R"
  LET product_code$="",platform_code$="",os_level_code$=""
  LET revision_code$="",license_code$=""
  std_users=default_std_users
  ent_users=default_ent_users
  ent_add=0,std_add=0
  dummy$=stbl("sam_dt",sam_dt$)
  gosub renew_range
  jul_renew=jul_default
else
  std_add=std_users-default_std_users
  ent_add=ent_users-default_ent_users
FI 

LET msg$=""
if expired_sam then 
  junk$="M46"+$0a$
  mb_mode=0
  gosub translate_mbox
  PRINT (gb__sysgui)'SETCURSOR'(0)
  RETURN
fi
IF edit_action$="new" OR !(init_trade) THEN LET win_trade$=fngb__get_screen$(win_id_trade$,win_trade$),init_trade=1

LET ilen=POS($0A$=itemlist$),product_code_list$="",product_desc_list$=""
LET index=0,product_index=-1
new_context=gb__win.trade

FOR i=0 TO items-1
  LET product$=itemlist$(ilen*i+1,3)
  READ (CSM13D,KEY=firm_id$+"D"+product$,DOM=*next)
  while 1
    READ RECORD (CSM13D,END=*break)csm13d$
    IF csm13d.firm_id$+csm13d.cm_file_type$+csm13d.product$<>firm_id$+"D"+product$ THEN break
    if pos(csm13d.type_of_sale$="TRD,EXC")=0 then continue
    READ RECORD (csm01,KEY=firm_id$+csm13d.new_product$,DOM=*continue)csm01$
    if csm01.online_flag$<>"Y" then continue
    LET p=POS(csm01.description$=product_desc_list$)
    IF p=0 THEN 
      LET product_desc_list$=product_desc_list$+csm01.description$+$0A$
      LET product_code_list$=product_code_list$+csm01.product$
      IF product_code$=csm01.product$ THEN LET product_index=index
      LET index=index+1
    FI 
  wend
NEXT i
if index=1 then product_index=0,product_code$=product_code_list$(1,3)
IF product_index>=0 THEN LET product_desc_list$=product_desc_list$+$FF$+STR(product_index)
lb_id=num(fattr(win_trade$,"product","ID"))
gosub disable_list_button

REM *** Platform list, license type list
LET platform_desc_list$="",license_desc_list$=""
IF product_code$<>"" THEN 
  LET temp_product_code$=product_code$,temp_platform_code$=platform_code$
  lb_id=num(fattr(win_trade$,"platform","ID"))
  GOSUB platform_list
  LET ltcode$=license_code$,prdcode$=product_code$
  lb_id=num(fattr(win_trade$,"license","ID"))
  GOSUB license_list
  platform_code$=temp_platform_code$
FI 

REM *** Os level list
LET os_level_desc_list$=""
IF platform_code$<>"" THEN 
  LET temp_platform_code$=platform_code$,temp_os_level_code$=os_level_code$
  GOSUB os_level_list
  WHILE os_level_index<0
    READ RECORD (csm03,KEY=firm_id$+os_level_code$,DOM=*break)csm03$
    LET os_level_list$=os_level_code$+os_level_list$
    LET os_level_desc_list$=fnosdesc$(x$)+$0A$+os_level_desc_list$+$FF$+STR(0),os_level_index=1
  WEND
  os_level_code$=temp_os_level_code$
FI 

REM *** Revision list
LET revision_desc_list$=""
IF os_level_code$<>"" THEN 
  LET temp_os_level_code$=os_level_code$
  LET temp_product_rev_code$=revision_code$
  lb_id=num(fattr(win_trade$,"revision","ID")) 
  GOSUB revision_list
  WHILE product_rev_index<0
    READ RECORD (csm04,KEY=firm_id$+product_rev_code$,DOM=*break)csm04$
    LET revision_list$=product_rev_code$+revision_list$
    LET revision_desc_list$=CVS(csm04.description$,3)+$0A$+revision_desc_list$+$FF$+STR(0),product_rev_index=1
  WEND
  revision_code$=temp_product_rev_code$
FI 

LET win_trade.product$=product_desc_list$
LET win_trade.platform$=platform_desc_list$
LET win_trade.oslevel$=os_level_desc_list$
LET win_trade.revision$=revision_desc_list$
LET win_trade.license$=license_desc_list$
LET win_trade.price$=""
LET win_trade.listprice$=""
LET win_trade.comments$=""
LET win_trade.ent_users$=STR(ent_users)
LET win_trade.std_users$=STR(std_users)
LET win_trade.sam_standard$=STR(sam_flag=1)
LET win_trade.runtime$="0"
LET win_trade.uncounted$=str(cur_uncounted)
IF edit_action$="chg" THEN 
  if pos("R"=ece11.lic_property1$)=2 or pos("R"=ece11.lic_property2$)=2 then win_trade.runtime$="1"
  win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"runtime,uncounted")
fi
LET win_trade.selected_sn_lbox$=snlist$
READ RECORD (csm01,KEY=firm_id$+product_code$,DOM=*NEXT)csm01$
LET sam_required$=csm01.ctr_required$
LET prod_group_id=NUM(FATTR(win_trade$,"new_product","ID"))
LET cart_id=NUM(FATTR(win_trade$,"accept","ID"))
LET cancel_id=NUM(FATTR(win_trade$,"cancel","ID"))
LET std_cbox_id=NUM(FATTR(win_trade$,"sam_standard","ID"))
focus_id=0

tradeWindow! = sysgui!.getWindow(gb__win.trade)
renew_dt_btn_id=num(fattr(win_trade$,"renew_dt_btn","ID"))
renew_dt_id=num(fattr(win_trade$,"renew_dt","ID"))
renew_dt!=tradeWindow!.getControl(renew_dt_id)
if jul_renew then renew_dt!.setValue(jul_renew) else renew_dt!.setText(" ")
temp$=renew_dt!.getText()
win_trade.renew_dt$=temp$

old_context=gb__win.trade_select
IF edit_action$="chg" THEN 
  LET trade_window=1
  GOSUB trade_price
  old_context=gb__win.cart
fi
LET win_trade$=fngb__put_screen$(win_id_trade$,win_trade$)
gosub show_window

PRINT (gb__sysgui)'context'(new_context),'ENABLE'(std_cbox_id,renew_dt_id,renew_dt_btn_id)
uncounted_id=num(fattr(win_trade$,"uncounted","ID"))
if (edit_action$="new" and cur_uncounted) or (edit_action$="chg" and uncounted_ok) then print (gb__sysgui)'ENABLE'(uncounted_id) else print (gb__sysgui)'disable'(uncounted_id)
rem BWH 
tradeWindow!.getControl(prod_group_id).setOpaque(sysgui!.FALSE)

PRINT (gb__sysgui)'DISABLE'(std_cbox_id)

RETURN

REM ' -----------------------------------------------------------------
start_sn_description: 
REM ' -----------------------------------------------------------------

LET tmpdesc$=CVS(snm01.serial_nbr$,3)+" - "
READ RECORD (csm01,KEY=firm_id$+item$(1,3),DOM=*NEXT)csm01$; LET tmpdesc$=tmpdesc$+CVS(csm01.description$,3)+" - "
READ RECORD (csm02,KEY=firm_id$+item$(4,3),DOM=*NEXT)csm02$; LET tmpdesc$=tmpdesc$+CVS(csm02.description$,3)+" - "
READ RECORD (csm03,KEY=firm_id$+item$(7,3),DOM=*NEXT)csm03$; LET tmpdesc$=tmpdesc$+CVS(csm03.description$,3)+" - "
READ RECORD (csm04,KEY=firm_id$+item$(10,3),DOM=*NEXT)csm04$; LET tmpdesc$=tmpdesc$+"Revision "+CVS(csm04.description$,3)+" - "
READ RECORD (csm05,KEY=firm_id$+item$(13,3),DOM=*NEXT)csm05$; LET tmpdesc$=tmpdesc$+CVS(csm05.description$,3)+" - "+STR(start_users)+" user"
IF start_users>1 THEN LET tmpdesc$=tmpdesc$+"s"
READ RECORD (smc01,KEY=snm01.contract$,DOM=start_sn_description_done)smc01$
LET days_expired=JUL(0,0,0)-fnjul(smc01.annual_dt$)
LET tmp$=smc01.annual_dt$,tmpandt$=tmp$(5,2)+"/"+tmp$(7,2)+"/"+tmp$(1,4)
LET tmpdesc$=tmpdesc$+" -- SAM date "+tmpandt$
IF smc01.sam_active$="N" or days_expired>0 or snm01.sam_active$="N" then tmpdesc$=tmpdesc$+" (INACTIVE)"
p=pos(snm01.serial_nbr$=xreflist$)
if p=0 then goto start_sn_description_done
temp$=xreflist$(p),p=pos($0a$=temp$)
if p=41 then tmpdesc$=tmpdesc$+" -- Data server "+cvs(temp$(21,20),3)+" is linked to allow exchange to Extended"
start_sn_description_done: 
RETURN

REM ' -----------------------------------------------------------------
listbox_changes: 
REM ' -----------------------------------------------------------------

LET list1$="",list2$=""
LET ctl_id=NUM(FATTR(win_trade_select$,lbox1$,"ID"))
LET changelist$=CTRL(gb__sysgui,ctl_id,ctl_function,gb__win.trade_select)
LET temp=LEN(changelist$)
IF temp AND changelist$(temp,1)<>$0A$ THEN LET changelist$=changelist$+$0A$
LET changecount=POS($0A$=changelist$,1,0)
IF changecount=0 THEN RETURN
LET list1$=CTRL(gb__sysgui,ctl_id,7,gb__win.trade_select)

LET ctl_id=NUM(FATTR(win_trade_select$,lbox2$,"ID"))
LET list2$=CTRL(gb__sysgui,ctl_id,7,gb__win.trade_select)

LET start_sn$=""

FOR a=1 TO changecount
  IF a=1 THEN LET x=1 ELSE LET x=POS($0A$=changelist$,1,a-1)+1
  LET p=POS($0A$=changelist$,1,a),temp$=changelist$(x,p-x)
  ds$="",p=pos(temp$=xreflist$)
  if p then 
     ds$=xreflist$(p),p=pos($0a$=ds$)
     if p=41 then ds$=ds$(21,20) else ds$=temp$
  fi
  rem 'never move ds by itself from 1 list to another, but always add it along w/ the client
  if ds$<>temp$ then
    if POS(temp$=list2$)=0 THEN LET list2$=list2$+temp$+$0a$
    if ds$<>"" and pos("available"=lbox1$) and POS(ds$=list2$)=0 THEN LET list2$=list2$+ds$+$0a$
  fi
  LET p=POS(temp$=list1$),q=LEN(temp$)+1
  if p then  
    IF p=1 THEN LET list1$=list1$(q+1) ELSE LET list1$=list1$(1,p-1)+list1$(p+q)
    LET start_sn$=list1$(p)+FILL(20),start_sn$=start_sn$(1,20)
    IF CVS(start_sn$,3)="" THEN LET l=LEN(list1$); IF l>20 THEN LET start_sn$=list1$(l-20,20)
  fi
  rem 'if removing client from selected list, also remove linked ds
  if ds$="" then continue
  p=pos(ds$=list1$),q=len(ds$)+1
  if p=0 then continue
  if p=1 THEN LET list1$=list1$(q+1) ELSE LET list1$=list1$(1,p-1)+list1$(p+q)
NEXT a

LET list2$=SSORT(list2$,21)

LET changecount=POS($0A$=list2$,1,0)
IF changecount=0 THEN RETURN

REM - Find index of start_sn if list1$ is available list
IF POS("available"=lbox1$) THEN 
  LET i=0,p=POS(CVS(start_sn$,3)=list1$)
  IF p THEN LET i=POS($0A$=list1$(1,p),1,0)
  IF i THEN LET list1$=list1$+$FF$+STR(i)
FI 
IF CVS(start_sn$,3)<>"" THEN GOSUB set_starting_sn

RETURN

REM ' -----------------------------------------------------------------
get_itemlist: 
REM ' -----------------------------------------------------------------

REM ' selected_sn_list$ must be set before calling this
LET itemlist$="",snlist$="",sam_dt$="",sam_contract$=""
LET default_std_users=0,default_ent_users=0,expired_sam=0,cl_usr=0,ds_usr=0
LET items=POS($0A$=selected_sn_list$,1,0)
IF items=0 THEN RETURN

LET templist$=selected_sn_list$
LET hold_sam_flag=sam_flag
use_date=1
LET lf=POS($0A$=templist$)
while lf
  LET tempsn$=templist$(1,lf-1),templist$=templist$(lf+1)
  lf=POS($0A$=templist$)
  READ RECORD (snm01,KEY=tempsn$,KNUM=0,DOM=*continue)snm01$
  if snm01.active_flag$<>"Y" then continue

  GOSUB get_contract_info
  if sam_active$="N" and sam_renew_status>1 then LET expired_sam=expired_sam+1
  IF sam_active$="N" OR sam_active$="" THEN 
    smc01.contract$=FILL(6)
    smc01.contr_type$="   "
    sam_flag=0,use_date=0
  fi
  if sam_flag and sam_dt$<>"" and smc01.annual_dt$<>sam_dt$ then use_date=0 
  if sam_flag and smc01.annual_dt$>sam_dt$ then 
    sam_dt$=smc01.annual_dt$
    sam_contract$=smc01.contract$
  fi
  dim snm02$:fattr(snm02$)
  READ RECORD (snm02,KEY=tempsn$,KNUM=0,DOM=*next)snm02$
  if pos("E"=snm02.lic_property1$)=1 then default_ent_users=default_ent_users+snm02.users1
  if pos("E"=snm02.lic_property2$)=1 then default_ent_users=default_ent_users+snm02.users2
  if pos("S"=snm02.lic_property2$)=1 then default_std_users=default_std_users+snm02.users2
  if pos("S"=snm02.lic_property1$)=1 then default_std_users=default_std_users+snm02.users1
  item$=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$
  p=POS(item$=itemlist$)
  IF p=0 THEN LET itemlist$=itemlist$+item$+$0A$

  snlist$=snlist$+snm01.serial_nbr$+STR(snm01.users)+" user"+$0A$+"     "+item$+$0A$
  if snm02.users1+snm02.users2=0 then
    IF snm01.product$="DS5" THEN 
      ds_usr=ds_usr+snm01.users 
    else
      cl_usr=cl_usr+snm01.users
    fi
  fi
wend

LET items=POS($0A$=itemlist$,1,0)
tmp=POS($0A$=snlist$,1,0)
rem 'if there is only 1 SN and it's a BAS product, don't do anything
if tmp=2 and pos("BAS"=itemlist$)=1 then items=0,itemlist$=""

ds_usr=min(cl_usr,ds_usr)
default_ent_users=ds_usr+default_ent_users
default_std_users=max(0,cl_usr-ds_usr)+default_std_users

if default_std_users+default_ent_users=0 then items=0,itemlist$=""

LET sam_flag=hold_sam_flag
if sam_dt$="" then 
  sam_dt$=date(jul(0,0,0)+365:"%Y%Mz%Dz")+"1"
else
  sam_dt$=sam_dt$+str(use_date)
fi
if special_date$<>"" then sam_dt$=special_date$
RETURN

REM ' -----------------------------------------------------------------
trade_price: 
REM ' -----------------------------------------------------------------

REM 'm_item$,sam_flag,default_std_users,default_ent_users,ent_add,std_add,itemlist$ must all be set before calling this routine 
LET items=POS($0A$=itemlist$,1,0),ilen=POS($0A$=itemlist$),tranlist$="",commentlist$="",ok=0
IF items=0 THEN RETURN
LET z=43; REM length of tranlist entry
REM Dim sn array elements>number of possible transactions - sn's
REM (terminated by $0a$) are stored in the element of the array 
REM corresponding to transaction # (zero based)
DIM sn_array$[items*10]

if pos($0a$=selected_sn_list$)=0 then return
if pos("   "=m_item$)<16 then return

if trade_window then
  jul_renew=renew_dt!.getValue()
  if jul_renew<0 then jul_renew=0
fi
LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"runtime,uncounted")
ffun=(win_trade.runtime$="0")
rem 'pass runtime flag in tranlist - clear tranlist in ec_trade
if ffun=0 then tranlist$="R"
gosub get_discount
xtra$=lang$+$0a$+str(disc_pct+partner_disc)+$0a$+"0"+$0a$+"0"+$0a$+"0"+$0a$
call "ec_trade.bbj",firm_id$,cust_num$,arm02,arm10i,csm01,csm02,csm03,csm04,csm05,csm07,csm10,csm13,ivm01,smc01,snm01,snm02,snt01,selected_sn_list$,m_item$,ent_add,std_add,jul_renew,commentlist$,tranlist$,xtra$
i=0,tempcom$=commentlist$,addcom$=""
while len(tempcom$)
 p=pos($0a$=tempcom$);if p=0 then break
 temp$=tempcom$(1,p-1),tempcom$=tempcom$(p+1)
 if pos(" to "=temp$) then addcom$=cvs(temp$,3); rem 'save user change comment for later use 
 if pos("decrease"=temp$)=0 or len(temp$)<9 then continue
 temp$=temp$(len(temp$)-8)
 if pos(temp$=selected_sn_list$) then sn_array$[0]=sn_array$[0]+temp$+$0a$,i=1
wend
sn_array$[i]=selected_sn_list$
DIM new_users[2],new_lprop$[2],cur_users[2],cur_lprop$[2]
std_users=default_std_users+std_add 
ent_users=default_ent_users+ent_add 
temp$="RF"
i=0
if ent_users then new_lprop$[i]="E"+temp$(ffun+1,1),new_users[i]=ent_users,i=i+1
if std_users then new_lprop$[i]="S"+temp$(ffun+1,1),new_users[i]=std_users
LET ok=!(POS("**"=commentlist$)=1)
if ok=0 then goto set_trade_comments

dummy$=stbl("sam_dt",sam_dt$)

gosub renew_dt_info 
if jul_renew=0 then jul_renew=jul_default
if jul_renew=jul_default then commentlist$=commentlist$+renew_dt_info$

if trade_window then renew_dt!.setValue(jul_renew)

IF LEN(tranlist$)<z THEN GOTO set_trade_comments

REM "Reset nbr_trans, type/price arrays for create_order subroutine in
REM "checkout, putting transactions and associated sn's in proper order
LET nbr_trans=LEN(tranlist$)/z-1,tran=0
DIM type$[nbr_trans],price[nbr_trans],are83_snlist$[nbr_trans],t_qty[nbr_trans],t_users[nbr_trans],t_desc$[nbr_trans]

FOR y=0 TO 3; REM put in line_sort order (0 - 3)
  FOR x=0 TO nbr_trans
    IF STR(y)=tranlist$(x*z+1,1) THEN 
      LET type$[tran]=tranlist$(x*z+2,3)+"|"+tranlist$(x*z+5,20)
      LET t_desc$[tran]=type$[tran](5)
      if pos("ADD"=type$[tran]) and addcom$<>"" then t_desc$[tran]=addcom$
      LET price[tran]=NUM(tranlist$(x*z+34,10))
      LET t_qty[tran]=NUM(tranlist$(x*z+31,3))
      LET t_users[tran]=NUM(tranlist$(x*z+25,6))
      LET are83_snlist$[tran]=sn_array$[x]
      LET tran=tran+1
    FI 
  NEXT x
NEXT y

GOSUB total_price
IF partner_disc THEN LET commentlist$=commentlist$+disc_incl$+$0a$
LET win_trade.price$=CVS(STR(price:amount_mask$),3+64)
LET win_trade.listprice$=CVS(STR(listprice:amount_mask$),3+64)

set_trade_comments: 
LET win_trade.comments$=commentlist$
IF trade_window THEN 
  LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"price,listprice,comments")
  IF sam_flag=0 AND hold_sam_flag THEN 
    LET win_trade.sam_standard$="0"
    LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"sam_standard")
  FI 
FI 
dim csm03$:fattr(csm03$)
readrecord(csm03,key=firm_id$+m_item$(7,3),dom=*next)csm03$
uncounted_ok=(csm03.fixed_lic_flag$="Y")
uncounted_id=num(fattr(win_trade$,"uncounted","ID"))
if uncounted_ok and new_users[0]+new_users[1]=1 then
  PRINT (gb__sysgui)'context'(gb__win.trade),'enable'(uncounted_id)
else
  win_trade.uncounted$="0"
  PRINT (gb__sysgui)'context'(gb__win.trade),'disable'(uncounted_id)
fi
LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"uncounted")
trade_price_end: 
RETURN

REM ' -----------------------------------------------------------------
trade_newitem: 
REM ' -----------------------------------------------------------------

DIM m_item$(20)
LET m_item$(1,3)=product_code$,m_item$(4,3)=platform_code$
LET m_item$(7,3)=os_level_code$,m_item$(10,3)=revision_code$
LET m_item$(13,3)=license_code$

LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"sam_standard,ent_users,std_users")

LET sam_flag=(win_trade.sam_standard$="1")
LET ent_users=fnnum(win_trade.ent_users$)
std_users=fnnum(win_trade.std_users$)
std_add=std_users-default_std_users
ent_add=ent_users-default_ent_users

RETURN

REM ' -----------------------------------------------------------------
check_for_trade: 
REM ' -----------------------------------------------------------------

LET trade_tran=0
LET trade_window=0
GOSUB ece83_serial_numbers

IF selected_sn_list$="" THEN RETURN

LET trade_tran=1
DIM m_item$(20)
LET m_item$(1)=ece11.item_number$
LET sam_flag=POS(ece11.sam_coverage$="S")
if pos("E"=ece11.lic_property1$)=1 then 
  ent_users=ece11.users
  std_users=ece11.users2
else
  ent_users=ece11.users2
  std_users=ece11.users
fi
std_add=0,ent_add=0
LET current_rev$=m_item$(10,3)

temp$=ece11.annual_dt$
if fnnum(temp$) then
  jul_renew=fnjul(temp$)
else
  jul_renew=0
fi

IF pricecheck THEN 
  GOSUB get_itemlist
  std_add=std_users-default_std_users
  ent_add=ent_users-default_ent_users
  GOSUB trade_price
  LET comments$=commentlist$
FI 

RETURN

REM ' -----------------------------------------------------------------
ece83_serial_numbers: 
REM ' -----------------------------------------------------------------

LET selected_sn_list$=""
LET ece83key$=firm_id$+cust_num$+user_code$+ece11.line_number$
READ (ece83,KEY=ece83key$,DOM=get_ece83)
get_ece83: 
READ RECORD (ece83,END=get_ece83_end)ece83$
IF POS(ece83key$=ece83$)=1 THEN 
  LET selected_sn_list$=selected_sn_list$+ece83.serial_nbr$+$0A$
  GOTO get_ece83
FI 
get_ece83_end: 
RETURN

REM ' -----------------------------------------------------------------
clear_ece83: 
REM ' -----------------------------------------------------------------
LET ece83key$=firm_id$+cust_num$+user_code$+ece11.line_number$
ece83.firm_id$=firm_id$
ece83.customer_nbr$=cust_num$
ece83.user_code$=user_code$
ece83.line_number$=ece11.line_number$

READ (ece83,KEY=ece83key$,DOM=next_ece83)
next_ece83: 
LET k$=KEY(ece83,END=clear_ece83_end)
IF pos(ece83key$=k$)=1 THEN REMOVE (ece83,KEY=k$); GOTO next_ece83
clear_ece83_end: 

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=117 Ctl=100 (Window Event) LIST_CLICK (l0)
REM ' ---------------------------------------------------------------

W117_C100_LIST_CLICK: 
LET ctl_id=NUM(FATTR(win_trade_select$,"available_sn_lbox","ID"))
LET x$="selected_sn_lbox"

process_list_click: 
LET x_id=NUM(FATTR(win_trade_select$,x$,"ID"))
LET tmplist$=CTRL(gb__sysgui,x_id,7,gb__win.trade_select)
IF POS("selected"=x$) THEN LET win_trade_select.selected_sn_lbox$=tmplist$ ELSE LET win_trade_select.available_sn_lbox$=tmplist$
LET win_trade_select$=fngb__put_fields$(win_id_trade_select$,win_trade_select$,x$)

LET addlist$=CTRL(gb__sysgui,ctl_id,1,gb__win.trade_select)

DIM start_sn$(20)
IF LEN(addlist$) THEN LET addlist$=addlist$+$0A$
LET selected=POS($0A$=addlist$,1,0)
IF selected=0 THEN RETURN

LET start_sn$(1)=addlist$(1,POS($0A$=addlist$)-1)

set_starting_sn: 
READ RECORD (snm01,KEY=start_sn$,KNUM=0)snm01$
LET item$=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$,start_users=snm01.users
GOSUB start_sn_description
LET win_trade_select.selected_desc$=tmpdesc$

LET win_trade_select$=fngb__put_fields$(win_id_trade_select$,win_trade_select$,"selected_desc")

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=117 Ctl=101 (Window Event) LIST_CLICK (l0)
REM ' ---------------------------------------------------------------

W117_C101_LIST_CLICK: 
LET ctl_id=NUM(FATTR(win_trade_select$,"selected_sn_lbox","ID"))
LET x$="available_sn_lbox"
GOSUB process_list_click

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=117 Ctl=104 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W117_C104_PUSH_BUTTON: 
REM ' Add button 
ctl_function=1
LET lbox1$="available_sn_lbox",lbox2$="selected_sn_lbox"
GOSUB listbox_changes

LET selected=POS($0A$=list2$,1,0)
IF selected=0 THEN RETURN

IF selected>50 THEN RETURN

LET win_trade_select.selected_sn_lbox$=list2$
LET win_trade_select.available_sn_lbox$=list1$
LET win_trade_select$=fngb__put_fields$(win_id_trade_select$,win_trade_select$,"available_sn_lbox,selected_sn_lbox")

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=117 Ctl=105 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W117_C105_PUSH_BUTTON: 
REM ' Remove button
ctl_function=1
remove_btn_routine: 
LET lbox1$="selected_sn_lbox",lbox2$="available_sn_lbox"
GOSUB listbox_changes
IF changecount=0 THEN RETURN

LET win_trade_select.selected_sn_lbox$=list1$
LET win_trade_select.available_sn_lbox$=list2$
LET win_trade_select$=fngb__put_fields$(win_id_trade_select$,win_trade_select$,"available_sn_lbox,selected_sn_lbox")

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=117 Ctl=106 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W117_C106_PUSH_BUTTON: 
REM ' Remove all button

LET ctl_function=7
GOSUB remove_btn_routine

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=117 Ctl=107 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W117_C107_PUSH_BUTTON: 
REM ' Exchange button - go from trade_select to trade page
LET ctl_id=NUM(FATTR(win_trade_select$,"selected_sn_lbox","ID"))
LET selected_sn_list$=CTRL(gb__sysgui,ctl_id,7,gb__win.trade_select)
cur_uncounted=0
GOSUB trade_page
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=117 Ctl=109 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W117_C109_PUSH_BUTTON: 
REM ' Go from trade_select Window to Main Window
LET focus_id=NUM(FATTR(win_main$,"trade_btn","ID"))
new_context=gb__win.main
old_context=gb__win.trade_select
gosub show_window
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=117 Ctl=1 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W117_C1_PUSH_BUTTON: 
REM ' Scan forward 
LET scan_dir=1

available_sn_list_box: 
PRINT (gb__sysgui)'SETCURSOR'(3)
xreflist$=""
LET ctl_id=NUM(FATTR(win_trade_select$,"starting_sn","ID"))
LET sn_count=0,availablelist$=""
DIM start_sn$(20)
LET start_sn$(1)=CVS(CTRL(gb__sysgui,ctl_id,1,gb__win.trade_select),7)
LET last_sn$=start_sn$
LET ctl_id=NUM(FATTR(win_trade_select$,"selected_sn_lbox","ID"))
LET templist$=CTRL(gb__sysgui,ctl_id,7,gb__win.trade_select)

LET k$=firm_id$+cust_num$+start_sn$
READ RECORD (snm01,KNUM=1,DIR=scan_dir,KEY=k$,DOM=available_sn_read)snm01$
GOTO check_available_sn
available_sn_read: 
READ RECORD (snm01,DIR=scan_dir,END=available_sn_read_end)snm01$
check_available_sn: 
IF snm01.firm_id$<>firm_id$ OR snm01.customer_nbr$<>cust_num$ then goto available_sn_read_end
if snm01.active_flag$="N" OR POS(snm01.serial_nbr$=templist$) or POS(snm01.serial_nbr$(1,1)="19CT") THEN GOTO available_sn_read
rem 'check ds xref - don't list any special dataservers
read(sam2_ds_xref,key=snm01.serial_nbr$,knum=1,dom=*next);goto available_sn_read

READ RECORD (csm05,KEY=firm_id$+snm01.license_type$,DOM=available_sn_read)csm05$
IF csm05.online_flag$="N" THEN GOTO available_sn_read
IF csm05.expires$="Y" THEN GOTO available_sn_read
trd=0
READ(csm13,KEY=firm_id$+"D"+snm01.product$,DOM=*next)
while 1
  READ RECORD (csm13,END=*break)csm13d$
  IF pos(firm_id$+"D"+snm01.product$=csm13d$)<>1 THEN break
  IF pos(csm13d.type_of_sale$="TRD,EXC") THEN trd=1;break
wend
if trd=0 then goto available_sn_read
IF scan_dir=1 THEN LET availablelist$=availablelist$+snm01.serial_nbr$+$0A$ ELSE LET availablelist$=snm01.serial_nbr$+$0A$+availablelist$
xref=0
readrecord(sam2_ds_xref,key=snm01.serial_nbr$,knum=0,dom=*next)sam2_ds_xref$;xref=1
if xref then xreflist$=xreflist$+sam2_ds_xref$(1,40)+$0a$
LET sn_count=sn_count+1,last_sn$=snm01.serial_nbr$
IF sn_count>14 THEN GOTO available_sn_read_end
IF sn_count=1 THEN LET item$=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$,start_sn$=snm01.serial_nbr$,start_users=snm01.users
GOTO available_sn_read
available_sn_read_end: 
IF sn_count=0 THEN GOTO available_sn_list_box_end
LET index=0
LET availablelist$=availablelist$+$FF$+STR(index)
READ RECORD (snm01,KNUM=0,KEY=start_sn$,DOM=available_sn_list_box_end)snm01$
GOSUB start_sn_description

LET win_trade_select.selected_desc$=tmpdesc$
LET win_trade_select.available_sn_lbox$=availablelist$
LET win_trade_select.starting_sn$=last_sn$
LET win_trade_select$=fngb__put_fields$(win_id_trade_select$,win_trade_select$,"selected_desc,available_sn_lbox,starting_sn")

available_sn_list_box_end: 
PRINT (gb__sysgui)'SETCURSOR'(0)

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=117 Ctl=119 (Window Event) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W117_C119_PUSH_BUTTON: 
REM ' Scan back button

LET scan_dir=-1
GOTO available_sn_list_box

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=118 Ctl=118 Product (List Button) LIST_SELECT (N2:19)
REM ' ---------------------------------------------------------------

W118_C118_LIST_SELECT: 
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"product")
LET temp$=win_trade.product$,temp=POS($FF$=temp$)
IF temp=0 THEN GOTO trade_product_end

LET temp=NUM(temp$(temp+1)),temp$=product_code_list$(temp*3+1,3)
IF temp$=product_code$ THEN GOTO trade_product_end

LET ilen=POS($0A$=itemlist$),items=POS($0A$=itemlist$,1,0)
FOR i=0 TO items-1
  LET product_code$=itemlist$(ilen*i+1,3)
  LET msg$="",lb_id=num(fattr(win_trade$,"product","ID"))
  GOSUB product_list
  IF POS(temp$=product_list$,3)=0 THEN LET i=items,msg$="**Can't change product "+product_code$+" to "+temp$
NEXT i

LET product_code$=temp$
IF msg$<>"" THEN 
  LET ok=0,win_trade.comments$=msg$+$0A$,win_trade.price$="",win_trade.listprice$=""
  LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"price,listprice,comments")
  GOTO trade_product_end
FI 

REM ' *** update platform list ***
LET temp_product_code$=product_code$,temp_platform_code$=platform_code$
lb_id=num(fattr(win_trade$,"platform","ID"))
GOSUB platform_list
LET win_trade.platform$=platform_desc_list$
LET ltcode$=license_code$,prdcode$=product_code$
lb_id=num(fattr(win_trade$,"license","ID"))
GOSUB license_list
LET license_code$=ltcode$
LET win_trade.license$=license_desc_list$
LET win_trade.oslevel$=""
LET win_trade.revision$=""
LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"platform,oslevel,revision,license")

LET std_cbox_id=NUM(FATTR(win_trade$,"sam_standard","ID"))

READ RECORD (csm01,KEY=firm_id$+product_code$,DOM=trade_product_end)csm01$
LET sam_required$=csm01.ctr_required$
IF sam_required$="R" THEN PRINT (gb__sysgui)'CHECK'(std_cbox_id)
PRINT (gb__sysgui)'DISABLE'(std_cbox_id)
IF sam_required$="A" THEN PRINT (gb__sysgui)'ENABLE'(std_cbox_id)
GOSUB trade_recalc

trade_product_end: 
PRINT (gb__sysgui)'SETCURSOR'(0)
if temp_platform_code$<>"" then gosub w118_c127_list_select
platform_code$=temp_platform_code$

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=118 Ctl=2 Cancel (Push Button) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W118_C2_PUSH_BUTTON: 
REM ' Go from Trade window to trade_select
ctl_id=NUM(FATTR(win_trade$,"selected_sn_lbox","ID"))
templist$=CTRL(gb__sysgui,ctl_id,7,gb__win.trade)
selected_sn_list$=""
p=POS($0A$=templist$,1,2)
while p>20
  IF templist$(1,1)<>"(" THEN LET selected_sn_list$=selected_sn_list$+templist$(1,20)+$0A$
  templist$=templist$(p+1)
  p=POS($0A$=templist$,1,2)
wend

old_context=gb__win.trade
gosub change_to_trade_select
LET win_trade_select.selected_sn_lbox$=selected_sn_list$
LET win_trade_select$=fngb__put_fields$(win_id_trade_select$,win_trade_select$,"selected_sn_lbox")

RETURN

W118_C1015_PUSH_BUTTON: 
REM ' Go from trade Window to Main Window
LET focus_id=NUM(FATTR(win_main$,"trade_btn","ID"))
new_context=gb__win.main
old_context=gb__win.trade
gosub show_window
RETURN


REM ' ---------------------------------------------------------------
REM ' Win=118 Ctl=127 Platform (List Button) LIST_SELECT (N2:19)
REM ' ---------------------------------------------------------------

W118_C127_LIST_SELECT: 
REM ' Notify Event - List Button Control - List Selection
PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"platform")
LET temp$=win_trade.platform$,temp=POS($FF$=temp$)
IF temp=0 THEN GOTO trade_platform_end

LET temp=NUM(temp$(temp+1)),temp$=platform_list$(temp*3+1,3)
IF temp$=platform_code$ THEN GOTO trade_platform_end

REM ' *** prepare os level list ***
LET platform_code$=temp$
LET temp_platform_code$=platform_code$,temp_os_level_code$=os_level_code$
lb_id=num(fattr(win_trade$,"oslevel","ID"))
GOSUB os_level_list
LET win_trade.oslevel$=os_level_desc_list$
LET win_trade.revision$=""
LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"oslevel,revision")
GOSUB trade_recalc

trade_platform_end: 
PRINT (gb__sysgui)'SETCURSOR'(0)
if temp_os_level_code$<>"" then gosub w118_c135_list_select
os_level_code$=temp_os_level_code$
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=118 Ctl=135 OS Level (List Button) LIST_SELECT (N2:19)
REM ' ---------------------------------------------------------------

W118_C135_LIST_SELECT: 
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"oslevel")
LET temp$=win_trade.oslevel$,temp=POS($FF$=temp$)
IF temp=0 THEN GOTO trade_os_level_end

LET temp=NUM(temp$(temp+1)),temp$=os_level_list$(temp*3+1,3)
IF temp$=os_level_code$ THEN GOTO trade_os_level_end
LET os_level_code$=temp$

REM ' *** prepare revision list ***
LET temp_os_level_code$=os_level_code$,temp_product_rev_code$=revision_code$
lb_id=num(fattr(win_trade$,"revision","ID"))
GOSUB revision_list
LET win_trade.revision$=revision_desc_list$
LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"revision")
GOSUB trade_recalc

trade_os_level_end: 
PRINT (gb__sysgui)'SETCURSOR'(0)
if temp_product_rev_code$<>"" then gosub w118_c138_list_select
LET revision_code$=temp_product_rev_code$

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=118 Ctl=138 Revision (List Button) LIST_SELECT (N2:19)
REM ' ---------------------------------------------------------------

W118_C138_LIST_SELECT: 
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"revision")
LET temp$=win_trade.revision$,temp=POS($FF$=temp$)
IF temp=0 THEN GOTO trade_revision_end

LET temp=NUM(temp$(temp+1)),temp$=revision_list$(temp*3+1,3)
IF temp$=revision_code$ THEN GOTO trade_revision_end
LET revision_code$=temp$
GOSUB trade_recalc
gosub W118_C141_LIST_SELECT 

trade_revision_end: 
PRINT (gb__sysgui)'SETCURSOR'(0)
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=118 Ctl=141 License (List Button) LIST_SELECT (N2:19)
REM ' ---------------------------------------------------------------

W118_C141_LIST_SELECT: 
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"license")
LET temp$=win_trade.license$,temp=POS($FF$=temp$)
IF temp=0 THEN GOTO trade_license_end

LET temp=NUM(temp$(temp+1)),temp$=license_list$(temp*3+1,3)
IF temp$=license_code$ THEN GOTO trade_license_end
LET license_code$=temp$
GOSUB trade_recalc

trade_license_end: 
PRINT (gb__sysgui)'SETCURSOR'(0)
RETURN

W118_C142_LOST_FOCUS:
W118_C143_LOST_FOCUS:
LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"ent_users,std_users")

ent_add=fnnum(win_trade.ent_users$)-default_ent_users
std_add=fnnum(win_trade.std_users$)-default_std_users
gosub trade_recalc
LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"comments,price,listprice")

return

rem ' ---------------------------------------------------------------
rem ' Win=118 Ctl=145 renew_dt (INPUTD) LOST_FOCUS (f0)
rem ' ---------------------------------------------------------------

W118_C145_LOST_FOCUS:
rem ' Control lost focus
jul_renew=renew_dt!.getValue()
temp$=DATE(jul_renew:"%Mz%Dz")
if pos("0229"=temp$) then jul_renew=jul_renew+1
dummy$=stbl("sam_dt",sam_dt$)
gosub renew_range

if jul_renew<jul_begin or jul_renew>jul_end then
  gosub invalid_date
  jul_renew=jul_default
  PRINT (gb__sysgui)'flush'
  renew_dt!.focus()
fi

renew_dt!.setValue(jul_renew)
gosub trade_recalc
LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"comments,price,listprice")
RETURN

invalid_date:
  junk$="M6"+$0a$+begin_dt$+$0a$+end_dt$+$0a$
  mb_mode=64
  gosub translate_mbox
return

rem ' ---------------------------------------------------------------
rem ' Win=118 Ctl=145 renew_dt (INPUTD) GOT_FOCUS (f1)
rem ' ---------------------------------------------------------------

W118_C145_GOT_FOCUS:
rem ' Control got focus
jul_renew=renew_dt!.getValue()
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=118 Ctl=146 renew_dt_btn (Tool Button) TOOL_BUTTON (b)
rem ' ---------------------------------------------------------------

W118_C146_TOOL_BUTTON:
rem ' Tool button operated
print(gb__sysgui)'flush'
renew_dt!.focus()
renew_dt!.calendar()

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=118 Ctl=200 Recalculate (Push Button) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W118_C200_PUSH_BUTTON: 
REM ' Push button operated
trade_recalc:
GOSUB trade_newitem
LET trade_window=1
GOSUB trade_price
PRINT (gb__sysgui)'context'(gb__win.trade),'ENABLE'(renew_dt_id,renew_dt_btn_id)
RETURN

REM ' ---------------------------------------------------------------
REM ' Win=118 Ctl=1007 Checkbox (Check Box) LOST_FOCUS (f0)
REM ' ---------------------------------------------------------------

trade_sam_checkbox: 
LET win_trade.sam_standard$=STR(sam_flag=1)

LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"sam_standard")

GOSUB trade_recalc

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=118 Ctl=1008 Checkbox (Check Box) CHECK_ON (c1)
REM ' ---------------------------------------------------------------

W118_C1008_CHECK_ON: 
REM ' Control checked (ON)
LET sam_flag=1
GOSUB trade_sam_checkbox

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=118 Ctl=1008 Checkbox (Check Box) CHECK_OFF (c0)
REM ' ---------------------------------------------------------------

W118_C1008_CHECK_OFF: 
REM ' Control unchecked (OFF)
LET sam_flag=0
GOSUB trade_sam_checkbox

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=118 Ctl=1 Accept (Push Button) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

W118_C1_PUSH_BUTTON: 
REM ' Go from Trade window to cart window
LET ctl_id=NUM(FATTR(win_trade$,"selected_sn_lbox","ID"))
LET templist$=CTRL(gb__sysgui,ctl_id,7,gb__win.trade)
LET selected_sn_list$=""
templist_sn_loop: 
LET p=POS($0A$=templist$,1,2)
IF p>20 THEN 
  IF templist$(1,1)<>"(" THEN LET selected_sn_list$=selected_sn_list$+templist$(1,20)+$0A$
  LET templist$=templist$(p+1)
  GOTO templist_sn_loop
FI 

GOSUB get_itemlist
IF items=0 THEN RETURN
GOSUB trade_newitem
LET trade_window=0
GOSUB trade_price
IF !(ok) THEN 
  PRINT (gb__sysgui)'SETCURSOR'(0)
  junk$="M5"+$0a$+begin_dt$+$0a$+end_dt$+$0a$
  mb_mode=0
  gosub translate_mbox
  RETURN
fi

REM 'Build list of sn's that didn't change, remove from selected_sn_list$ so they don't get processed
LET nclist$=""
FOR n=0 TO nbr_trans
 IF POS("*NC"=type$[n]) THEN LET nclist$=nclist$+are83_snlist$[n]
NEXT n
IF nclist$<>"" THEN 
  LET templist$=""
  WHILE selected_sn_list$<>""
   LET p=POS($0A$=selected_sn_list$); IF p=0 THEN BREAK
   IF POS(selected_sn_list$(1,p-1)=nclist$)=0 THEN LET templist$=templist$+selected_sn_list$(1,p)
   LET selected_sn_list$=selected_sn_list$(p+1)
  WEND
  LET selected_sn_list$=templist$
FI 

LET selected=POS($0A$=selected_sn_list$,1,0)
IF selected=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN

LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"reference,uncounted")
IF edit_action$="new" THEN 
  LET sn$=selected_sn_list$
  GOSUB init_cart_record
  LET sn$=""
  IF LEN(status$) THEN 
    PRINT (gb__sysgui)'SETCURSOR'(0)
    RETURN
  fi
FI 
LET ece11.serial_nbr$=FILL(20)
LET ece11.po_ref_number$=win_trade.reference$
LET ece11.item_number$=m_item$
LET ece11.qty=1
LET temp$="NS",ece11.sam_coverage$=temp$(sam_flag+1,1)
LET ece11.users=new_users[0],ece11.lic_property1$=new_lprop$[0]
LET ece11.users2=new_users[1],ece11.lic_property2$=new_lprop$[1]
if ece11.users=0 then
 LET ece11.users=ece11.users2,ece11.users2=0
 LET ece11.lic_property1$=ece11.lic_property2$,ece11.lic_property2$="  "
fi
LET ffl$=FATTR(ece11$,"available"),ffl=DEC(ffl$(10,2))
LET ece11.available$=FILL(ffl)
ece11.uncounted_flag$="N"
if win_trade.uncounted$="1" and ece11.users+ece11.users2=1 then ece11.uncounted_flag$="Y"
gosub upg_to
LET ece11.annual_dt$=fill(8)
if sam_flag then
  dummy$=stbl("sam_dt",sam_dt$)
  gosub renew_range
  if jul_renew<=jul_end and jul_renew>=jul_begin then ece11.annual_dt$=date(jul_renew:"%Yl%Mz%Dz")
fi
LET ece11$=FIELD(ece11$)
WRITE RECORD (ece11)ece11$

LET sncount=1
GOSUB clear_ece83
LET ffl$=FATTR(ece83$,"available"),ffl=DEC(ffl$(10,2))
LET ece83.available$=FILL(ffl)

write_ece83: 
LET p=POS($0A$=selected_sn_list$,1,sncount)
IF p>20 THEN 
    LET ece83.serial_nbr$=selected_sn_list$(p-20,20)
    LET ece83$=FIELD(ece83$)
    WRITE RECORD (ece83)ece83$
    LET sncount=sncount+1
    GOTO write_ece83
 FI 

GOSUB init_cart
LET focus_id=NUM(FATTR(win_cart$,"Close","ID"))
new_context=gb__win.cart
old_context=gb__win.trade
gosub show_window

RETURN

REM ' ---------------------------------------------------------------
REM ' Win=119 Ctl=1 Accept (Push Button) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

w119_c1_push_button:

LET win_send_rpt$=fngb__get_screen$(win_id_send_rpt$,win_send_rpt$)
IF win_send_rpt$.sn_rpt=0 and win_send_rpt$.ar_rpt=0 then
  junk$="M35"+$0a$,mb_mode=0;gosub translate_mbox
  RETURN
fi
e_mail$=win_send_rpt.email$
if cvs(e_mail$,3)="" or pos("@"=e_mail$)=0 then
  junk$="M36"+$0a$,mb_mode=0;gosub translate_mbox
  RETURN
fi
PRINT (gb__sysgui)'SETCURSOR'(3)
ok_id=num(fattr(win_send_rpt$,"ok","ID"))
cancel_id=num(fattr(win_send_rpt$,"cancel","ID"))
PRINT (gb__sysgui)'context'(gb__win.send_rpt),'disable'(ok_id,cancel_id)
call "ec_open::job_queue"
job_queue.firm_id$=firm_id$
job_queue.customer_nbr$=cust_num$
job_queue.e_mail$=e_mail$
IF win_send_rpt$.sn_rpt then
  job_queue.job$="ACTIVE_SN"
else
  job_queue.job$="AR_AGING"
fi
writerecord(job_queue)job_queue$
close(job_queue)

PRINT (gb__sysgui)'SETCURSOR'(0)
PRINT (gb__sysgui)'context'(gb__win.send_rpt),'enable'(ok_id,cancel_id)
junk$="M37"+$0a$,mb_mode=0;gosub translate_mbox

LET focus_id=NUM(FATTR(win_account$,"email","ID"))
old_context=gb__win.send_rpt
new_context=gb__win.account
gosub show_window
Return

nolock:
if err=12 then 
  string outfile$,err=*next
  wait 1
  a=scall("chmod 666 "+outfile$+" 2>/dev/null")
fi
if err=0 then
  wait 1
  waited=waited+1
  if waited>10 then return
fi
retry

REM ' ---------------------------------------------------------------
REM ' Win=119 Ctl=2 cancel (Push Button) PUSH_BUTTON (B)
REM ' ---------------------------------------------------------------

w119_c2_push_button:
rem ' Go from send_rpt to View_SN window 
LET focus_id=NUM(FATTR(win_account$,"email","ID"))
old_context=gb__win.send_rpt
new_context=gb__win.account
gosub show_window

return

nc_up_routine:
LET mailtext$="This confirmation is for a NO CHARGE transaction." + $0A$ + "No invoice will be sent to you." + $0A$ + $0A$
IF CVS(user_code$,3)="" THEN user$="" ELSE user$=" "+CVS(user_code$,3)
LET mailtext$=mailtext$+"Customer Number: "+firm_id$+"-"+cust_num$+user$+" ("+CVS(arm01.cust_name$,3)+")"  + $0A$
IF LEN(reference$) THEN LET mailtext$=mailtext$+"Purchase Order: "+reference$ + $0A$
IF LEN(contact$) THEN LET mailtext$=mailtext$+"Contact: "+contact$ + $0A$
LET mailtext$=mailtext$ + $0A$

LET line_number=0,nc_sn$="",nc_item$="",nc_type$=""
email1$=win_checkout_1.license_1$, email2$=win_checkout_1.license_2$
READ (ece11,KEY=firm_id$+cust_num$+user_code$,DOM=nc_ece11_loop)

nc_ece11_loop: 
LET ece11_key$=KEY(ece11,END=nc_ece11_endloop)
READ RECORD (ece11,KEY=ece11_key$)ece11$
IF ece11.firm_id$<>firm_id$ OR ece11.customer_nbr$<>cust_num$ or ece11.user_code$<>user_code$ THEN GOTO nc_ece11_endloop
rem 'reference$ can be 10 spaces
IF reference$<>"" AND cvs(reference$,3)<>CVS(ece11.po_ref_number$,3) THEN GOTO nc_ece11_loop

rem 'Check for multiple sn's - if not multi sn, put ece11 sn in array to be processed
GOSUB ece83_serial_numbers
if selected_sn_list$="" then selected_sn_list$=ece11.serial_nbr$+$0a$

while pos(ece11.line_number$=nc_trans$)=1
  type$=nc_trans$(5,3), nc_trans$=nc_trans$(9), users=ece11.users
  REM 'CSM07 - Retrieve Type Of Sale record-skip this line if not found
  READ RECORD (csm07,KEY=firm_id$+type$,DOM=*continue)csm07$
  rem 'Skip if this isn't a modify only
  IF csm07.modify_snum$="N" or csm07.retire_snum$<>"N" or csm07.create_snum$<>"N" THEN continue

  ivm_item$=ece11.item_number$
  gosub ivm_item
  if ivmok=0 then continue

  LET mailtext$=mailtext$+CVS(csm07.description$,3) + $0A$
  LET mailtext$=mailtext$+"    "+CVS(ivm01.item_desc$,3) + $0A$
  LET mailtext$=mailtext$+"    "+ece11.item_number$
  LET mailtext$=mailtext$+STR(users:"####0-")+" User" + $0A$

  rem 'Build list of sn's,item#'s,saletypes for later update
  while pos($0a$=selected_sn_list$)
   s=pos($0a$=selected_sn_list$)
   sn$=selected_sn_list$(1,s-1),selected_sn_list$=selected_sn_list$(s+1)
   nc_sn$=nc_sn$+pad(sn$,20)+$0a$
   nc_item$=nc_item$+ece11.item_number$+$0a$
   nc_type$=nc_type$+type$+ece11.uncounted_flag$+$0a$
   win_checkout_2.message$="S/N: "+sn$
   win_checkout_2$=fngb__put_fields$(win_id_checkout_2$,win_checkout_2$,"message")
   mailtext$=mailtext$+"    "+sn$ + $0A$
  wend
wend

REMOVE (ece11,KEY=ece11_key$)
GOSUB clear_ece83

GOTO nc_ece11_loop

nc_ece11_endloop: 
templist$=nc_sn$
Rem 'Now update all the sn's collected above
rem 'pass po# in msg$
msg$=win_checkout_2.reference$

call "nc_update.bbj",nc_sn$,nc_item$,nc_type$,email1$,email2$,msg$
rem 'msg$ returns list of sn's processed - should be same as list passed
if templist$<>msg$ then x=1; rem 'what to do if not all processed?
return

show_window:
print(gb__sysgui)'context'(old_context),'setcursor'(3)
if inhouse then
  dim loc$:"x:i(2),y:i(2),w:u(2),h:u(2)"
  loc$=ctrl(gb__sysgui,0,0,old_context)
  print(gb__sysgui)'context'(new_context),'move'(0,loc.x,loc.y)
fi
gosub win_title
print(gb__sysgui)'context'(old_context),'hide'(0),'context'(new_context),'enable'(0),'show'(0),'focus'(0),'raise','setcursor'(0),'flush'

if focus_id then print(gb__sysgui)'context'(new_context),'focus'(focus_id)
currentWindow! = sysgui!.getWindow(new_context)
return

user_sort:
if cvs(cur_lprop$[0],3)<>cvs(new_lprop$[0],3) and cvs(cur_lprop$[1],3)<>cvs(new_lprop$[1],3) then
  hold$=cvs(new_lprop$[0],3)
  hold=new_users[0]
  new_lprop$[0]=cvs(new_lprop$[1],3)
  new_users[0]=new_users[1]
  new_lprop$[1]=hold$
  new_users[1]=hold
fi
return

translate_mbox:
dim param$:"mbid:c(4),lang:c(2*=0),text1:c(1*=0),text2:c(1*=0)"
param.lang$=lang$
j1=pos($0a$=junk$)
if j1 then param.mbid$=junk$(1,j1-1),junk$=junk$(j1+1)
j1=pos($0a$=junk$)
if j1 then param.text1$=junk$(1,j1-1),junk$=junk$(j1+1)
j1=pos($0a$=junk$)
if j1 then param.text2$=junk$(1,j1-1),junk$=junk$(j1+1)
call "ec_translate.bbj",param$
i=MSGBOX(param.text2$,mb_mode,param.text1$)
Return

get_discount:
disc_pct=0,partner_disc=0,discount_code$=arm02.disc_code$
Readrecord (arm10i,KEY=firm_id$+"I"+discount_code$,ERR=*NEXT)arm10i$
disc_pct=arm10i.disc_percent
if inhouse=0 and user_code$<>"**" and pos("P"=arm02.cust_type$)=1 then 
  FIND (arm10i,KEY=firm_id$+"I"+str(disc_pct+5:"00"),ERR=*endif)arm10i$
  partner_disc=5
  discount_code$=arm10i.disc_code$
fi
return

open_ecm02:
close(ecm02,err=*next)
call "ec_open::ECM02"
return


REM gb_std.cod - Put your standard subroutines/functions/etc. here.

END
