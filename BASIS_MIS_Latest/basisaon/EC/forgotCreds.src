   rem ' Program Name: forgotCreds.src
   rem ' Resource File: forgotCreds.arc
   rem ' Generated by GUIBuilder 4.0 (June 21, 2022 at 17:00:56)
   rem ' Portions Copyright (C) 1997-2022 BASIS International Ltd.  All rights reserved.

   seterr gb__no_arg
   enter gb__arg$; gb__args=-1,gb__args=pos($0a$=fattr(gb__arg$,$$),1,0)
gb__no_arg:
   seterr 0

   precision 99
   gb__show_forms=2; rem ' Create all forms at the beginning

   rem ' gb_ini.cod - GUIBuilder generated programs: Initialization
   rem ' Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
   rem
   rem ' ***** I N I T I A L I Z A T I O N *****
   rem ' The first part of the initialization section ensures that the
   rem ' environment will support the requirements of the generated 
   rem ' program.  These requirements are:
   rem '     1.  The interpreter supports GUI
   rem '     2.  The interpreter is Visual PRO/5 2.0 or above
   rem '     3.  A SYSGUI device is defined in config.bbx
   rem

   rem ' 1. Make sure the interpreter in use supports GUI
   if info(6,0)="" then
:     print 'cs',;
:     print "This interpreter does not support GUI.";
:     print "Press any key to continue.",;
:     read record(0,siz=1);
:     stop
   rem

   rem ' 2. Make sure the interpreter in use is Visual PRO/5 2.0 or above
   if sys<"LEVEL 5" or (cvs(sys,3)="LEVEL 5" and cvs(rev,3)<"REV 2.0") then
:     input(0,err=gb__eoj)
:      	'ask'("",4,"Requires at least Visual PRO/5 Rev. 2.0.  "+
:      	"This program will now terminate.","&Terminate:Y"+$0a$),
:      	'ee',gb__temp$,'be',;
:     goto gb__eoj
   rem

   seterr gb__err; setesc gb__esc

   rem ' 3. Check config.bbx for SYSGUI and SYSPRINT devices
   gb__alias=0,gb__sysgui$="",gb__sysprint$=""
   dim gb__tsk$:"type:u(1),opens:u(1),name:c(1*=0),dname:c(1*=0),pname:c(1*=0),modes:c(1*=0)"

gb__check_tsk:
   gb__tsk$=tsk(gb__alias,err=gb__done_with_tsk)

   if gb__sysgui$="" and cvs(gb__tsk.pname$,7)="SYSGUI" then
:     gb__sysgui$=gb__tsk.name$

   if gb__sysprint$="" and cvs(gb__tsk.pname$,7)="SYSPRINT" then
:     gb__sysprint$=gb__tsk.name$

   if gb__sysgui$="" or gb__sysprint$="" then
:     gb__alias=gb__alias+1;
:     goto gb__check_tsk

gb__done_with_tsk:
   if gb__sysgui$="" then
:     gb__sysgui$="not defined in config.bbx";
:     goto gb__cannot_open_sysgui

   rem ' Open SYSGUI device
   gb__sysgui=unt; open (gb__sysgui,err=gb__cannot_open_sysgui)gb__sysgui$
   goto gb__opened_sysgui

gb__cannot_open_sysgui:
   gb__err$="Unable to open the SYSGUI device (alias "+gb__sysgui$+
:    ") in program "+pgm(-2)+".  Visual PRO/5 cannot maintain a graphical "+
:    "user interface without this device.  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"SYSGUI error")
   goto gb__eoj

gb__opened_sysgui:
   dim gb__sysgui_fin$:tmpl(gb__sysgui,ind=0)
   gb__sysgui_fin$=fin(gb__sysgui)

   rem ' splash screen, if any, can go here
   rem ' splash=gb__sysgui_fin.available_context
   rem ' print (gb__sysgui)'context'(splash),'window'(0,0,500,400,$$,$01000000$),'image'(0,0,500,400,"mysplash.gif")

   dim gb__event$:tmpl(gb__sysgui)
   gb__event=len(gb__event$)

   rem ' Open the resource file (try both .arc and .brc if necessary)
   gb__resource$="forgotCreds.arc"
   if pos("ec.bbj"= pgm(-2)) then gosub prep_routine
   gb__handle=resopen(gb__resource$,err=gb__resource_fallback);
:  goto gb__opened_resource

gb__resource_fallback:
   gb__temp=pos(".brc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"arc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

   gb__temp=pos(".arc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"brc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

gb__cannot_open_resource:
   gb__err$="Unable to open resource file forgotCreds.arc"+
:    " in program "+pgm(-2)+".  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"Resource file error")
   goto gb__eoj

   rem ' ------------------------------------------------------------------------
   rem ' Functions to manipulate screens and data
   rem ' ------------------------------------------------------------------------

   rem ' Get data from screen into template record
   def fngb__get_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put data from template record to screen
   def fngb__put_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Get fields from screen into template record
   def fngb__get_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put fields from template record to screen
   def fngb__put_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Set focus to specified Window ID
   def fngb__focus_win_id(xx__win_id$)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui,err=gb__focus_win_id)'context'(xx__context),'focus'(0),'raise',
      return xx__context
   gb__focus_win_id:
      xx__form=fngb__form(xx__win_id$)
      print (gb__sysgui)'context'(xx__context),
:                       'resource'(len(gb__resource$[xx__form])),gb__resource$[xx__form],
      return xx__context
   fnend


   rem ' Get form number given Window ID
   def fngb__form(xx__win_id$)
       gb__form=-1,xx__form_id$=xx__win_id$
       xx__form=pos("."=xx__form_id$)
       if xx__form then
:         xx__form_id$=xx__form_id$(1,xx__form-1)
       for xx__form=1 to gb__forms
           if gb__form.id$[xx__form]=xx__form_id$ then
:             gb__form=xx__form;
:             break
       next xx__form
       return gb__form
   fnend


   rem ' Set focus to specified Window ID + Control ID
   def fngb__focus_ctl_id(xx__win_id$,xx__ctl_id)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Set focus to specified Window ID + Control Name
   def fngb__focus_ctl_name(xx__win_id$,xx__ctl_name$)
      dim xx__rec$:fngb__template$(xx__win_id$)
      xx__ctl_id=num(fattr(xx__rec$,xx__ctl_name$,"ID"))
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Get Window ID given Context
   def fngb__win_id$(xx__context)
       xx__win_id$=""
       for xx__window=1 to gb__windows
           if gb__window.context[xx__window]=xx__context then
:             xx__win_id$=gb__window.win_id$[xx__window];
:             break
       next xx__window
       return xx__win_id$
   fnend


   rem ' Get Context given Window ID
   def fngb__context(xx__win_id$)
      gb__window=-1,gb__context=-1
      for xx__window=1 to gb__windows
          if gb__window.win_id$[xx__window]=xx__win_id$ then
:            gb__window=xx__window,gb__context=gb__window.context[gb__window];
:            break
      next xx__window
      if gb__context>=0 or gb__window<0 then
:        return gb__context
      return fngb__window(xx__win_id$)
   fnend


   rem ' Get Window Information given Window ID
   def fngb__win_info$(xx__win_id$)
      dim gb__win_info$(0)
      xx__context=fngb__context(xx__win_id$)
      if xx__context<0 then
:        return gb__win_info$
      dim gb__win_info$:"class:u(1),type:u(1),hidden:u(1),disabled:u(1),"
:                      +"context:u(2),eventmask:u(4),flags:u(4),focus:u(2),"
:                      +"x:i(2),y:i(2),w:u(2),h:u(2),title:c(16*=)"
      gb__win_info$=ctrl(gb__sysgui,0,4,xx__context)
:                  +ctrl(gb__sysgui,0,8,xx__context)
:                  +bin(xx__context,2)
:                  +sendmsg(gb__sysgui,0,21,0,"",xx__context)
:                  +sendmsg(gb__sysgui,0,22,0,"",xx__context)
:                  +ctrl(gb__sysgui,0,2,xx__context)
:                  +ctrl(gb__sysgui,0,0,xx__context)
:                  +ctrl(gb__sysgui,0,1,xx__context)
      return gb__win_info$
   fnend

gb__opened_resource:

   rem ==================== End of gb_ini.cod ====================

rem ' Instantiate form(s)

gb__forms = 1
dim gb__form_context[gb__forms],gb__resource$[gb__forms],gb__form$:"id[1]:c(4*=10)"

gb__windows=1; rem ' includes child windows, if any
gb__win_id$ = "101"

dim gb__win$:"FORGOTCREDSFORM:I(2)"

gb__win.FORGOTCREDSFORM=-1

dim gb__window$:"win_id[1]:c(8*=10),win_name[1]:c(16*=10),context[1]:n(4*=10)"
gb__window.win_id$[1]="101",gb__window.win_name$[1]="FORGOTCREDSFORM",gb__window.context[1]=-1,gb__form.id$[1]="101"

gb__context = fngb__window("101"); rem ' forgotCredsForm

rem ' Instantiate the form corresponding to a given window

   def fngb__window(xx__win_id$)
      gb__window = 0
      for xx__window=1 to gb__windows
         if gb__window.win_id$[xx__window]=xx__win_id$ then
:           gb__window = xx__window;
:           break
      next xx__window
      if gb__window = 0 then 
:        return -1
      if gb__window.context[gb__window] >= 0 then
:        return gb__window.context[gb__window]

      switch fngb__form(xx__win_id$)

         case 1; rem ' Load Form ID 101 (FORGOTCREDSFORM)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[1]=gb__sysgui_fin.available_context
         gb__resource$[1]=resget(gb__handle,1,101)
         print (gb__sysgui)'context'(gb__form_context[1]),'resource'(len(gb__resource$[1])),gb__resource$[1]
         gb__win.FORGOTCREDSFORM=gb__form_context[1]
         gb__window.context[1]=gb__win.FORGOTCREDSFORM
         break
      swend

      return gb__window.context[gb__window]
   fnend

rem ' Get template for controls on a given window

   def fngb__template$(xx__win_id$)
      if xx__win_id$="101" then return "CUSTOMERNUMBER:C(64*=0):ID=100 TYPE=16 X=160 Y=80 W=200 H=25:,CUSTOMERNBRLABEL:C(64*=0):ID=101 TYPE=17 X=30 Y=85 W=120 H=20:,GETPASSWORD:C(1*=0):ID=102 TYPE=11 X=370 Y=80 W=135 H=25:,FORGOTPASSWORDGROUP:C(1*=0):ID=103 TYPE=21 X=20 Y=50 W=750 H=75:,EMAILADDRESSLABEL:C(64*=0):ID=104 TYPE=17 X=30 Y=170 W=120 H=20:,EMAILADDRESS:C(64*=0):ID=105 TYPE=16 X=160 Y=165 W=200 H=25:,GETCUSTOMERNUMBER:C(1*=0):ID=106 TYPE=11 X=370 Y=165 W=135 H=25:,FORGOTCUSTNBRGROUP:C(1*=0):ID=107 TYPE=21 X=20 Y=135 W=750 H=75:,MESSAGELABEL:C(64*=0):ID=108 TYPE=17 X=20 Y=220 W=90 H=15:,STATUSMESSAGE:C(64*=0):ID=109 TYPE=22 X=20 Y=240 W=750 H=75:,DONE:C(1*=0):ID=110 TYPE=11 X=650 Y=460 W=120 H=25:,HEADERTEXT:C(64*=0):ID=111 TYPE=17 X=0 Y=0 W=790 H=25:"
      return ""
   fnend

rem ' open files
rem ' gosub openFiles

rem ' build object reference
gosub buildObjectReferences
gosub openFiles

rem ' lang$ is always passed
lang$ = gb__arg$(1,2); gb__arg$ = gb__arg$(3)

rem ' get the pass in customer number if any
if gb__arg$ <> "" then
    customerNbr$ = gb__arg$
    customerNumber!.setText(customerNbr$)
else
    customerNbr$ = ""
fi

if lang$ = "DE" then 
    gosub lang_substitution
fi

if lang$ = "MR" then
    rem ' marriott reset'
    forgotCredsForm!.setTitleBarVisible(1)
    header!.setVisible(0)
fi

forgotCredsForm!.setVisible(1)
forgotCredsForm!.focus()
rem ' ---------------------------------------------------------------
rem ' Event Loop
rem ' ---------------------------------------------------------------

dim gb__closed[gb__windows]; rem ' track window status
dim gb__generic$:noticetpl(0,0); rem ' generic notice template
gb__eoj=0
goto gb__event

rem ' Load gb__notice$ string only if we're handling the event

gb__notice:
   gb__generic$=notice(gb__sysgui,gb__event.x%)
   dim gb__notice$:noticetpl(gb__generic.objtype%,gb__event.flags%)
   gb__notice$=gb__generic$
return

gb__event: repeat
   read record (gb__sysgui,siz=gb__event,err=gb__event_loop_end)gb__event$

   rem ' Get Window ID or Popup ID
   gb__win_id$=$$,gb__popup_id=gb__event.x*(gb__event.code$="P")
   if gb__popup_id=0 then gb__win_id$=fngb__win_id$(gb__event.context)

   rem ' Track whether event was handled
   gb__event_handled=0

   rem ' Handle events for Window ID 101 (forgotCredsForm)
   while gb__win_id$="101"
      if gb__event.code$="X" then
:        gosub W101_C0_WIN_CLOSE;
:        gb__closed[1]=1;
:        gb__event_handled=1;
:        break
      if gb__event.id=102 and gb__event.code$="B" then
:        gosub W101_C102_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=106 and gb__event.code$="B" then
:        gosub W101_C106_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=109 and gb__event.code$="f" and gb__event.flags=1 then
:        gosub W101_C109_GOT_FOCUS;
:        gb__event_handled=1;
:        break
      if gb__event.id=110 and gb__event.code$="B" then
:        gosub W101_C110_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      break; rem ' Catch unhandled events
   wend; rem ' End of Window ID 101

   rem ' We're done when all windows have been closed.
   rem ' Developer can terminate event loop by setting
   rem ' gb__eoj=1 in any event handler.

   if !(gb__eoj) then
:     gb__eoj=1;
:     for gb__window=1 to gb__windows;
:        gb__eoj=(gb__eoj and gb__closed[gb__window]);
:     next gb__window

until gb__eoj

gb__event_loop_end: rem ' -------------------------------------

gosub closeFiles
rem gb_eoj.cod - GUIBuilder generated programs: End of Job
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** P R O G R A M   E X I T **************************************
rem
gb__eoj:
   if gb__forms and gb__sysgui then
:     for gb__temp=1 to gb__forms;
:        print (gb__sysgui)'context'(gb__form_context[gb__temp]),'destroy'(0);
:     next gb__temp

   if gb__sysgui then
:     close (gb__sysgui)

   resclose (gb__handle,err=gb__eoj_final)

gb__eoj_final:

   if tcb(13) then
:     exit
:  else
:     release

rem gb_err.cod - GUIBuilder generated programs: Error handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E R R O R   H A N D L E R ************************************
rem
gb__err:
   
   rem ' terminate on Network Lost Errors
   if err = 71 or err = 72 then goto gb__eoj

   gb__temp=msgbox(errmes(-1)+" ("+str(err)+")"+
:      " occurred at line "+str(tcb(5))+
:      " in program "+pgm(-2),5+48,"Error handler")

   if gb__temp=4 then
:     retry
:  else
:     goto gb__eoj

rem gb_esc.cod - GUIBuilder generated programs: Escape handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E S C A P E   H A N D L E R ***********************************
rem
gb__esc:
   
   rem ' terminate program when ESCAPE detected.
   goto gb__eoj
   
   gb__temp=msgbox("An ESCAPE has been detected.  Do you want to end this "+
:     "program?",4+32+256,"ESCAPE handler")
   if gb__temp=7 then
:     return
:  else
:     goto gb__eoj

rem ' -----------------------------------------------------------------
rem ' buildDBURL
rem ' -----------------------------------------------------------------

buildDBURL:

USE java.io.File
USE java.io.FileInputStream
USE java.io.BufferedInputStream
USE java.util.Properties
USE java.lang.StringBuffer

DECLARE File file!
DECLARE FileInputStream fis!
DECLARE BufferedInputStream bis!
DECLARE Properties props!
DECLARE StringBuffer sqlBuilder!

rem ' locate the properties file
props=unt
open(props)"ec_sql.properties"
props$=fid(props), props$=props$(9)
close(props)

file!= new java.io.File(props$)
fis!=new java.io.FileInputStream(file!)
bis!=new java.io.BufferedInputStream(fis!)
props!=new java.util.Properties()
props!.load(bis!)

sqlBuilder!= new StringBuffer(props!.getProperty("sqlURL.urlprefix") + props!.getProperty("sqlURL.server")+":")
sqlBuilder!.append(props!.getProperty("sqlURL.port")+"?database=")
sqlBuilder!.append(props!.getProperty("sqlURL.database")+"&user="+props!.getProperty("sqlURL.user")+"&password=")
sqlBuilder!.append(props!.getProperty("sqlURL.password"))
ourDbUrl$ = sqlBuilder!.toString()


return
rem ' -----------------------------------------------------------------
rem ' buildObjectReferences
rem ' -----------------------------------------------------------------

buildObjectReferences:

declare BBjAPI bbjapi!
declare BBjSysGui sysgui!

declare BBjTopLevelWindow forgotCredsForm!

declare BBjEditBox customerNumber!
declare BBjEditBox emailAddress!
declare BBjCEdit statusMessage!

declare BBjGroupBox forgotPasswordGroup!
declare BBjGroupBox forgotCustNbrGroup!

declare BBjStaticText customerNbrLabel!
declare BBjStaticText emailAddressLabel!

declare BBjButton getPassword!
declare BBjButton getCustomerNumber!

declare BBjStaticText header!

declare BBjButton done!

declare BBjRecordSet ecm01RecordSet!
declare BBjRecordData ecm01RecordData!


bbjapi! = BBjAPI()
sysgui! = bbjapi!.getSysGui()

rem ' forgot Creds Form
forgotCredsForm! = cast(BBjTopLevelWindow, sysgui!.getWindow("forgotCredsForm"))

customerNumber! = cast(BBjEditBox, forgotCredsForm!.getControl("customerNumber"))
emailAddress! = cast(BBjEditBox, forgotCredsForm!.getControl("emailAddress"))
statusMessage! = cast(BBjCEdit, forgotCredsForm!.getControl("statusMessage"))

forgotPasswordGroup! = cast(BBjGroupBox, forgotCredsForm!.getControl("forgotPasswordGroup"))
forgotCustNbrGroup! = cast(BBjGroupBox, forgotCredsForm!.getControl("forgotCustNbrGroup")) 

customerNbrLabel! = cast(BBjStaticText, forgotCredsForm!.getControl("customerNbrLabel"))
emailAddressLabel! = cast(BBjStaticText, forgotCredsForm!.getControl("emailAddressLabel"))

getPassword! = cast(BBjButton, forgotCredsForm!.getControl("getPassword"))
getCustomerNumber! = cast(BBjButton, forgotCredsForm!.getControl("getCustomerNumber"))

header! = cast(BBjStaticText, forgotCredsForm!.getControl("headertext"))

done! = cast(BBjButton, forgotCredsForm!.getControl("done"))

gosub buildDBURL

return
rem ' -----------------------------------------------------------------
rem ' closeFiles
rem ' -----------------------------------------------------------------

closeFiles:

close(ecm01, err=*next)
close(arm02, err=*next)
close(arm10f, err=*next)

return
rem ' -----------------------------------------------------------------
rem ' generateNewPassword
rem ' -----------------------------------------------------------------

generateNewPassword:

characters$ = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789~!@#$%^*()+="
start = num(date(0,"%D")) * num(date(0,"%M"))
interval = round(rnd(0) * len(characters$),0)

password$ = ""
nextpos = start
for x = 1 to 9
    nextpos = nextpos + interval
    while nextpos > len(characters$)
        nextpos = nextpos - len(characters$)
    wend
    password$ = password$ + characters$(nextpos, 1)
next x

return
rem ' -----------------------------------------------------------------
rem ' lang_substitution
rem ' -----------------------------------------------------------------

lang_substitution:

rem ' locate the file
props=unt
open(props)"forgotCreds.DE.properties"
props$=fid(props), props$=props$(9)
close(props)

file! = new File(props$)
fis! = new FileInputStream(file!)
bis! = new BufferedInputStream(fis!)
langProps! = new Properties()
langProps!.load(bis!)
bis!.close()
fis!.close()


forgotCredsForm!.setTitle(langProps!.getProperty("title"))

forgotPasswordGroup!.setText(langProps!.getProperty("forgotPasswordGroup"))
forgotCustNbrGroup!.setText(langProps!.getProperty("forgotCustNbrGroup"))

customerNbrLabel!.setText(langProps!.getProperty("customerNbrLabel"))
emailAddressLabel!.setText(langProps!.getProperty("emailAddressLabel"))

getPassword!.setText(langProps!.getProperty("getPassword"))
getCustomerNumber!.setText(langProps!.getProperty("getCustomerNumber"))

done!.setText(langProps!.getProperty("done"))

return
rem ' -----------------------------------------------------------------
rem ' lookupCustomerNbr
rem ' -----------------------------------------------------------------

lookupCustomerNbr:

custEmailAddress$ = cvs(emailAddress!.getText(), 3)

if custEmailAddress$ = "" then

    statusMessage!.setText("You must enter an email address.")
    emailAddress!.focus()

else
    atPos = pos("@" = custEmailAddress$)
    lengthEmailAddress = len(custEmailAddress$)
    lenBefore = atPos - 1
    lenAfter = lengthEmailAddress - atPos
    if atPos = 0 or lenBefore < 1 or lenAfter < 3 then

        statusMessage!.setText("The email address entered appears to be invalid.")
        emailAddress!.focus()

    else
    
        sql$ = "SELECT * FROM ECM01 WHERE E_MAIL LIKE ('%" + custEmailAddress$ + "%')"
        ecm01RecordSet! = bbjapi!.createSQLRecordSet(ourDbUrl$,"",sql$)

        acctCount = 0
        acctList$ = ""
        acctEmail$ = ""

        if ecm01RecordSet!.isEmpty() then
       
            gosub sendEmailWithCustNbr
       
        else
            
            ecm01RecordSet!.first()
            while 1
                ecm01RecordData! = ecm01RecordSet!.getCurrentRecordData()
                acctCount = acctCount + 1
                account$ = ecm01RecordData!.getFieldValue("FIRM_ID") + ecm01RecordData!.getFieldValue("CUSTOMER_NBR") + ecm01RecordData!.getFieldValue("USER_CODE")
                eaddr$ = cvs(ecm01RecordData!.getFieldValue("E_MAIL"), 3)
                
                acctList$ = acctList$ + account$ + $0A$
                acctEmail$ = acctEmail$ + eaddr$ + $0A$
    
                ecm01RecordSet!.next(err=*break)
            wend
            gosub sendEmailWithCustNbr

        fi

        ecm01RecordSet!.close()
    fi
 fi       

return
rem ' -----------------------------------------------------------------
rem ' openFiles
rem ' -----------------------------------------------------------------

openFiles:

call "ec_open::ECM01"
call "ec_open::ARM02"
call "ec_open::ARM10F"

return
rem ' -----------------------------------------------------------------
rem ' sendEmailWithCustNbr
rem ' -----------------------------------------------------------------

sendEmailWithCustNbr:

from$ = "customer-service@basis.cloud"
to$ = ""
cc$  = ""
bcc$ = ""

if acctCount < 1 then
    rem ' no account found
    to$ = custEmailAddress$
    cc$ = "customer-service@basis.cloud"
    bcc$ = "kw5121151@gmail.com"
    subject$ = "Email Address is not associated with a Basis B-comm Customer Number"

    msgtxt$ = "A request to find the BASIS B-comm customer number associated with the email address, " + custEmailAddress$ + ", "
    msgtxt$ = msgtxt$ + "was received and no customer number was found. " + $0A$ + $0A$
    msgtxt$ = msgtxt$ + "If you have any questions please contact a BASIS representative at 1.505.938.6120 in the U.S. "
    msgtxt$ = msgtxt$ + "or +49 681 968 14 0 in Europe." + $0A$ + $0A$ + $0A$
    msgtxt$ = msgtxt$ + "BASIS Customer Service Department" + $0A$ + "customer-service@basis.cloud" 
    
    rem ' un rem for debugging
    rem ' xresp = msgbox("From: " + from$ + " To: " + to$ + " CC: " + cc$ + " BCC: " + bcc$, 0, "debug")
    rem ' to$ = "kurt.e.williams@comcast.net"
    rem ' cc$ = "williams.kurt@comcast.net"
    rem ' xresp = msgbox("From: " + from$ + " To: " + to$ + " CC: " + cc$ + " BCC: " + bcc$, 0, "debug")
    rem ' escape

    file$ = ""

    call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msgtxt$, file$

    statusMessage!.setText("This address is not associated with any customer numbers.")

else
    
    acctList2$ = acctList$

    while pos($0A$ = acctList$)
        
        lfpos = pos($0A$ = acctList$)
        account$ = acctList$(1, lfpos - 1)
        acctList$ = acctList$(lfpos + 1)

        lfpos = pos($0A$ = acctEmail$)
        eaddr$ = acctEmail$(1, lfpos - 1)
        acctEmail$ = acctEmail$(lfpos + 1)

        rem ' set to address
        while len(eaddr$) > 0
            cpos = pos("," = eaddr$)
            if cpos <> 0 then
                temp$ = eaddr$(1, cpos - 1)
                eaddr$ = eaddr$(cpos + 1)
            else
                temp$ = eaddr$
                eaddr$ = ""
            fi
            if pos(temp$ = to$) = 0 then
                if len(to$) > 0 then
                    to$ = to$ + "," + temp$
                else
                    to$ = temp$
                fi
            fi
        wend
        
        rem ' set cc address
        read record(arm02, key = account$(1,8) + "  ")arm02$
        dim arm10f$:fattr(arm10f$)
        if cvs(arm02.slspsn_code$, 3) <> "" then
            read record(arm10f, key = account$(1,2) + "F" + arm02.slspsn_code$)arm10f$
        fi
        if cvs(arm10f.e_mail$, 3) <> "" then
            if len(cc$) = 0 then
                cc$ = cvs(arm10f.e_mail$, 3)
            else
                cc$ = cc$ + ", " + cvs(arm10f.e_mail$, 3)
            fi
        fi

    wend

    if cc$ = "" then
        cc$ = "customer-service@basis.cloud"
    else
        cc$ = cc$ +  ", " + "customer-service@basis.cloud"
    fi

    bcc$ = "kw5121151@gmail.com"

    subject$ = "BASIS B-comm customer number associated with a specific email address"

    msgtxt$ = "A request to find the BASIS B-comm customer number(s) associated with the email address, " + custEmailAddress$ + ", "
    msgtxt$ = msgtxt$ + "was received and the following customer number(s) were found. " + $0A$ + $0A$

    while pos($0A$ = acctList2$)

        lfpos = pos($0A$ = acctList2$)
        account$ = acctList2$(1, lfpos - 1)
        acctList2$ = acctList2$(lfpos + 1)

        msgtxt$ = msgtxt$ + "Customer Number: " + account$ +$0A$
    
    wend
        
    msgtxt$ = msgtxt$ + $0A$ + "If you have any questions please contact a BASIS representative at 1.505.938.6120 in the U.S. "
    msgtxt$ = msgtxt$ + "or +49 681 968 14 0 in Europe." + $0A$ + $0A$ + $0A$
    msgtxt$ = msgtxt$ + "BASIS Customer Service Department" + $0A$ + "customer-service@basis.cloud" 

    rem ' un rem for debugging
    rem ' xresp = msgbox("From: " + from$ + " To: " + to$ + " CC: " + cc$ + " BCC: " + bcc$, 0, "debug")
    rem ' to$ = "kurt.e.williams@comcast.net"
    rem ' cc$ = "williams.kurt@comcast.net"
    rem ' xresp = msgbox("From: " + from$ + " To: " + to$ + " CC: " + cc$ + " BCC: " + bcc$, 0, "debug")
    rem ' escape

    file$ = ""

    call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msgtxt$, file$

    statusMessage!.setText("An Account associated with this email address was found. An email with details has been sent to the appropriate email addresses.")

fi

return
rem ' -----------------------------------------------------------------
rem ' sendEmailWithPassword
rem ' -----------------------------------------------------------------

sendEmailWithPassword:

read record(arm02, key = firm_id$ + cust_num$ + "  ")arm02$
dim arm10f$:fattr(arm10f$)
if cvs(arm02.slspsn_code$, 3) <> "" then
    read record(arm10f, key = firm_id$ + "F" + arm02.slspsn_code$)arm10f$
fi

haveCustomerEmail = 0

from$ = "customer-service@basis.cloud"

to$ = ""
if cvs(ecm01.e_mail$, 3) <> "" then
    to$ = cvs(ecm01.e_mail$, 3)
fi

rem ' if cvs(ecm01.e_mail2$, 3) <> "" then
rem '    if cvs(to$, 3) <> "" then
rem '        to$ = to$ + "," + cvs(ecm01.e_mail2$, 3)
rem '     else
rem '        to$ = cvs(ecm01.e_mail2$, 3)
rem '    fi
rem ' fi

if to$ = "" then
    to$ = "customer-service@basis.cloud"
else
    haveCustomerEmail = 1
fi

cc$ = ""
if cvs(arm10f.e_mail$, 3) <> "" then
    cc$ = cvs(arm10f.e_mail$, 3) + ",customer-service@basis.cloud"
fi
if cvs(cc$, 3) = "" then
    cc$ = "customer-service@basis.cloud"
fi

bcc$ = "kw5121151@gmail.com"

rem ' un rem for debugging
rem ' xresp = msgbox("From: " + from$ + " To: " + to$ + " CC: " + cc$ + " BCC: " + bcc$, 0, "debug")
rem ' to$ = "kurt.e.williams@comcast.net"
rem ' cc$ = "williams.kurt@comcast.net"
rem ' xresp = msgbox("From: " + from$ + " To: " + to$ + " CC: " + cc$ + " BCC: " + bcc$, 0, "debug")
rem ' escape

subject$ = "BASIS B-comm password reset to known value for " + firm_id$ + cust_num$ + user_code$

nametext$ = ""
if cvs(ecm01.first_name$,3) <> "" then nametext$ = cvs(ecm01.first_name$,3)
if cvs(ecm01.last_name$,3) <> "" then
    if nametext$ <> "" then
        nametext$ = nametext$ + " " + cvs(ecm01.last_name$,3)
    else
        nametext$ = cvs(ecm01.last_name$,3)
    fi
fi

msgtxt$ = "Someone requested a reset of the password for the BASIS B-comm account " + firm_id$ + cust_num$ + user_code$
if nametext$ <> "" then 
    msgtxt$ = msgtxt$ + ", " + nametext$ + ". "
else
    msgtxt$ = msgtxt$ + ". "
fi

msgtxt$ = msgtxt$ + $0A$ + $0A$ + "The password was reset to: " + password$ + $0A$ + $0A$
msgtxt$ = msgtxt$ + "If you requested this password reset, you may log into b-commerce using the above password. You will "
msgtxt$ = msgtxt$ + "be prompted to change it to a password of your own choosing. " + $0A$ + $0A$
msgtxt$ = msgtxt$ + "If this was an unauthorized request please log into b-commerce with the above password. You will be "
msgtxt$ = msgtxt$ + "prompted to change the password to one of your own choosing. This email is the only way that the temporary "
msgtxt$ = msgtxt$ + "password was communicated to anyone. The person requesting the reset was not given this password." + $0A$ + $0A$
msgtxt$ = msgtxt$ + "If you have any issues please contact a BASIS representative at 1.505.938.6120 in the U.S. "
msgtxt$ = msgtxt$ + "or +49 681 968 14 0 in Europe." + $0A$ + $0A$ + $0A$
msgtxt$ = msgtxt$ + "BASIS Customer Service Department" + $0A$ + "customer-service@basis.cloud" 

file$ = ""

call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msgtxt$, file$

return
rem ' -----------------------------------------------------------------
rem ' validCustomerNbr
rem ' -----------------------------------------------------------------

validCustomerNbr:

rem ' Format is FFCCCCCCUU
rem ' FF is a 2-digit Firm ID (usually 01 or 02)
rem ' CCCCCC is a 1-6 digit customer number, typically 4 digits
rem ' UU is an optional 1- or 2-letter user code

custNbrValid = 0

firm_id$ = "01"
cust_num$=""
user_code$=""
statusMessage!.setText("")
recordBusy = 0

while 1

    temp$ = cvs(customerNumber!.getText() ,3)
    
    basisSalesAccount = 1
    if pos("**" = temp$) <> 0 then break
    basisSalesAccount = 0

    x = len(temp$)
    if x < 3 or x > 10 then break

    x$ = temp$(1,2)
    if pos(x$ = "0102", 2) and x > 5 then 
        temp$ = temp$(3), firm_id$ = x$, x = x-2 
    else 
        x$=""
    fi

    for n = x - 1 to x
        if pos(temp$(n, 1) = "0123456789") = 0 then 
            user_code$ = user_code$ + temp$(n,1)
            temp$(n,1) = " "
        fi
    next n

    user_code$  =   pad(user_code$, 2)
    temp$ = cvs(temp$, 3)
    cust_num$ = str(num(temp$):"000000", err=*break)

    rem ' get customer ECM01 record
    tries=0
    get_ecm01:
    extract record (ecm01, KEY = firm_id$ + cust_num$ + user_code$, tim = 3, dom = ecm01_not_found, err = recordbusy)ecm01$
    custNbrValid = 1
    break

    recordbusy:
    firm_id$="",cust_num$="",user_code$=""    
    if err <> 0 then break
    recordBusy = 1
    break
    
    ecm01_not_found: 
    if x$ <> "" and pos("00" = cust_num$) = 1 then
        firm_id$ = "01"
        cust_num$(1, 2) = x$
        x$=""
        goto get_ecm01
    fi
    tries = tries + 1
    if tries < 3 then 
        firm_id$ = str(tries:"00")
        goto get_ecm01
    fi

    firm_id$="",cust_num$="",user_code$=""
    
    break
 
wend

if !custNbrValid then
    if basisSalesAccount then
        statusMessage!.setText("** Acount cannot be reached in this way.")
    else
        if recordBusy then
            statusMessage!.setText("Customer Number is already logged into B-commerce else where.")
        else
            statusMessage!.setText("Customer Number is invalid.")
        fi
    fi
else
    customerNumber!.setText(firm_id$ + cust_num$ + user_code$)
fi

return
rem ' -----------------------------------------------------------------
rem ' writeECM01
rem ' -----------------------------------------------------------------

writeECM01:

ecm01.password$ = password$
ecm01$ = field(ecm01$)
write record (ecm01, KEY = firm_id$ + cust_num$ + user_code$)ecm01$
extract record (ecm01, KEY = firm_id$ + cust_num$ + user_code$)ecm01$

return

rem ' ---------------------------------------------------------------
rem ' Win=101 forgotCredsForm (Window) WIN_CLOSE (X)
rem ' ---------------------------------------------------------------

W101_C0_WIN_CLOSE:
rem ' Window Closed
rem ' gb__event! = cast(BBjCloseEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__window! = gb__event!.getControl()

gosub closeFiles
goto gb__eoj
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 forgotCredsForm Ctl=102 getPassword (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C102_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()



gosub validCustomerNbr

if custNbrValid then
    gosub generateNewPassword
    gosub writeECM01
    gosub sendEmailWithPassword

    message$ = "A temporary password has been emailed to the address associated with this account. "
    message$ = message$ + "Please use it to log into B-commerce. You will be prompted then to reset "
    message$ = message$ + "it to a password of your choosing."
    statusMessage!.setText(message$)
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 forgotCredsForm Ctl=106 getCustomerNumber (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C106_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' get the customer number associated with this email address

gosub lookupCustomerNbr
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 forgotCredsForm Ctl=109 statusMessage (Custom Edit) GOT_FOCUS (f1)
rem ' ---------------------------------------------------------------

W101_C109_GOT_FOCUS:
rem ' Control got focus
rem ' gb__event! = cast(BBjGainedFocusEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

done!.focus()
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 forgotCredsForm Ctl=110 done (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C110_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub closeFiles
goto gb__eoj
RETURN


rem gb_std.cod - Put your standard subroutines/functions/etc. here.

END
