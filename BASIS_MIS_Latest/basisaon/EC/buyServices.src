   rem ' Program Name: buyServices.src
   rem ' Resource File: buyServices.arc
   rem ' Generated by GUIBuilder 4.0 (January 29, 2020 at 17:22:20)
   rem ' Portions Copyright (C) 1997-2020 BASIS International Ltd.  All rights reserved.

   seterr gb__no_arg
   enter gb__arg$; gb__args=-1,gb__args=pos($0a$=fattr(gb__arg$,$$),1,0)
gb__no_arg:
   seterr 0

   precision 99
   gb__show_forms=2; rem ' Create all forms at the beginning

   rem ' gb_ini.cod - GUIBuilder generated programs: Initialization
   rem ' Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
   rem
   rem ' ***** I N I T I A L I Z A T I O N *****
   rem ' The first part of the initialization section ensures that the
   rem ' environment will support the requirements of the generated 
   rem ' program.  These requirements are:
   rem '     1.  The interpreter supports GUI
   rem '     2.  The interpreter is Visual PRO/5 2.0 or above
   rem '     3.  A SYSGUI device is defined in config.bbx
   rem

   rem ' 1. Make sure the interpreter in use supports GUI
   if info(6,0)="" then
:     print 'cs',;
:     print "This interpreter does not support GUI.";
:     print "Press any key to continue.",;
:     read record(0,siz=1);
:     stop
   rem

   rem ' 2. Make sure the interpreter in use is Visual PRO/5 2.0 or above
   if sys<"LEVEL 5" or (cvs(sys,3)="LEVEL 5" and cvs(rev,3)<"REV 2.0") then
:     input(0,err=gb__eoj)
:      	'ask'("",4,"Requires at least Visual PRO/5 Rev. 2.0.  "+
:      	"This program will now terminate.","&Terminate:Y"+$0a$),
:      	'ee',gb__temp$,'be',;
:     goto gb__eoj
   rem

   seterr gb__err; setesc gb__esc

   rem ' 3. Check config.bbx for SYSGUI and SYSPRINT devices
   gb__alias=0,gb__sysgui$="",gb__sysprint$=""
   dim gb__tsk$:"type:u(1),opens:u(1),name:c(1*=0),dname:c(1*=0),pname:c(1*=0),modes:c(1*=0)"

gb__check_tsk:
   gb__tsk$=tsk(gb__alias,err=gb__done_with_tsk)

   if gb__sysgui$="" and cvs(gb__tsk.pname$,7)="SYSGUI" then
:     gb__sysgui$=gb__tsk.name$

   if gb__sysprint$="" and cvs(gb__tsk.pname$,7)="SYSPRINT" then
:     gb__sysprint$=gb__tsk.name$

   if gb__sysgui$="" or gb__sysprint$="" then
:     gb__alias=gb__alias+1;
:     goto gb__check_tsk

gb__done_with_tsk:
   if gb__sysgui$="" then
:     gb__sysgui$="not defined in config.bbx";
:     goto gb__cannot_open_sysgui

   rem ' Open SYSGUI device
   gb__sysgui=unt; open (gb__sysgui,err=gb__cannot_open_sysgui)gb__sysgui$
   goto gb__opened_sysgui

gb__cannot_open_sysgui:
   gb__err$="Unable to open the SYSGUI device (alias "+gb__sysgui$+
:    ") in program "+pgm(-2)+".  Visual PRO/5 cannot maintain a graphical "+
:    "user interface without this device.  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"SYSGUI error")
   goto gb__eoj

gb__opened_sysgui:
   dim gb__sysgui_fin$:tmpl(gb__sysgui,ind=0)
   gb__sysgui_fin$=fin(gb__sysgui)

   rem ' splash screen, if any, can go here
   rem ' splash=gb__sysgui_fin.available_context
   rem ' print (gb__sysgui)'context'(splash),'window'(0,0,500,400,$$,$01000000$),'image'(0,0,500,400,"mysplash.gif")

   dim gb__event$:tmpl(gb__sysgui)
   gb__event=len(gb__event$)

   rem ' Open the resource file (try both .arc and .brc if necessary)
   gb__resource$="buyServices.arc"
   if pos("ec.bbj"= pgm(-2)) then gosub prep_routine
   gb__handle=resopen(gb__resource$,err=gb__resource_fallback);
:  goto gb__opened_resource

gb__resource_fallback:
   gb__temp=pos(".brc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"arc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

   gb__temp=pos(".arc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"brc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

gb__cannot_open_resource:
   gb__err$="Unable to open resource file buyServices.arc"+
:    " in program "+pgm(-2)+".  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"Resource file error")
   goto gb__eoj

   rem ' ------------------------------------------------------------------------
   rem ' Functions to manipulate screens and data
   rem ' ------------------------------------------------------------------------

   rem ' Get data from screen into template record
   def fngb__get_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put data from template record to screen
   def fngb__put_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Get fields from screen into template record
   def fngb__get_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put fields from template record to screen
   def fngb__put_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Set focus to specified Window ID
   def fngb__focus_win_id(xx__win_id$)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui,err=gb__focus_win_id)'context'(xx__context),'focus'(0),'raise',
      return xx__context
   gb__focus_win_id:
      xx__form=fngb__form(xx__win_id$)
      print (gb__sysgui)'context'(xx__context),
:                       'resource'(len(gb__resource$[xx__form])),gb__resource$[xx__form],
      return xx__context
   fnend


   rem ' Get form number given Window ID
   def fngb__form(xx__win_id$)
       gb__form=-1,xx__form_id$=xx__win_id$
       xx__form=pos("."=xx__form_id$)
       if xx__form then
:         xx__form_id$=xx__form_id$(1,xx__form-1)
       for xx__form=1 to gb__forms
           if gb__form.id$[xx__form]=xx__form_id$ then
:             gb__form=xx__form;
:             break
       next xx__form
       return gb__form
   fnend


   rem ' Set focus to specified Window ID + Control ID
   def fngb__focus_ctl_id(xx__win_id$,xx__ctl_id)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Set focus to specified Window ID + Control Name
   def fngb__focus_ctl_name(xx__win_id$,xx__ctl_name$)
      dim xx__rec$:fngb__template$(xx__win_id$)
      xx__ctl_id=num(fattr(xx__rec$,xx__ctl_name$,"ID"))
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Get Window ID given Context
   def fngb__win_id$(xx__context)
       xx__win_id$=""
       for xx__window=1 to gb__windows
           if gb__window.context[xx__window]=xx__context then
:             xx__win_id$=gb__window.win_id$[xx__window];
:             break
       next xx__window
       return xx__win_id$
   fnend


   rem ' Get Context given Window ID
   def fngb__context(xx__win_id$)
      gb__window=-1,gb__context=-1
      for xx__window=1 to gb__windows
          if gb__window.win_id$[xx__window]=xx__win_id$ then
:            gb__window=xx__window,gb__context=gb__window.context[gb__window];
:            break
      next xx__window
      if gb__context>=0 or gb__window<0 then
:        return gb__context
      return fngb__window(xx__win_id$)
   fnend


   rem ' Get Window Information given Window ID
   def fngb__win_info$(xx__win_id$)
      dim gb__win_info$(0)
      xx__context=fngb__context(xx__win_id$)
      if xx__context<0 then
:        return gb__win_info$
      dim gb__win_info$:"class:u(1),type:u(1),hidden:u(1),disabled:u(1),"
:                      +"context:u(2),eventmask:u(4),flags:u(4),focus:u(2),"
:                      +"x:i(2),y:i(2),w:u(2),h:u(2),title:c(16*=)"
      gb__win_info$=ctrl(gb__sysgui,0,4,xx__context)
:                  +ctrl(gb__sysgui,0,8,xx__context)
:                  +bin(xx__context,2)
:                  +sendmsg(gb__sysgui,0,21,0,"",xx__context)
:                  +sendmsg(gb__sysgui,0,22,0,"",xx__context)
:                  +ctrl(gb__sysgui,0,2,xx__context)
:                  +ctrl(gb__sysgui,0,0,xx__context)
:                  +ctrl(gb__sysgui,0,1,xx__context)
      return gb__win_info$
   fnend

gb__opened_resource:

   rem ==================== End of gb_ini.cod ====================

rem ' Instantiate form(s)

gb__forms = 1
dim gb__form_context[gb__forms],gb__resource$[gb__forms],gb__form$:"id[1]:c(4*=10)"

gb__windows=1; rem ' includes child windows, if any
gb__win_id$ = "101"

dim gb__win$:"BUYSERVICES:I(2)"

gb__win.BUYSERVICES=-1

dim gb__window$:"win_id[1]:c(8*=10),win_name[1]:c(16*=10),context[1]:n(4*=10)"
gb__window.win_id$[1]="101",gb__window.win_name$[1]="BUYSERVICES",gb__window.context[1]=-1,gb__form.id$[1]="101"

gb__context = fngb__window("101"); rem ' buyServices

rem ' Instantiate the form corresponding to a given window

   def fngb__window(xx__win_id$)
      gb__window = 0
      for xx__window=1 to gb__windows
         if gb__window.win_id$[xx__window]=xx__win_id$ then
:           gb__window = xx__window;
:           break
      next xx__window
      if gb__window = 0 then 
:        return -1
      if gb__window.context[gb__window] >= 0 then
:        return gb__window.context[gb__window]

      switch fngb__form(xx__win_id$)

         case 1; rem ' Load Form ID 101 (BUYSERVICES)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[1]=gb__sysgui_fin.available_context
         gb__resource$[1]=resget(gb__handle,1,101)
         print (gb__sysgui)'context'(gb__form_context[1]),'resource'(len(gb__resource$[1])),gb__resource$[1]
         gb__win.BUYSERVICES=gb__form_context[1]
         gb__window.context[1]=gb__win.BUYSERVICES
         break
      swend

      return gb__window.context[gb__window]
   fnend

rem ' Get template for controls on a given window

   def fngb__template$(xx__win_id$)
      if xx__win_id$="101" then return "HEADERTEXT:C(64*=0):ID=101 TYPE=17 X=0 Y=0 W=790 H=25:,BUYNOW:C(1*=0):ID=1 TYPE=11 X=510 Y=460 W=120 H=25:,EXIT:C(1*=0):ID=2 TYPE=11 X=650 Y=460 W=120 H=25:,FORMLABEL:C(64*=0):ID=100 TYPE=17 X=20 Y=50 W=600 H=25:,ONEHOURLABEL:C(64*=0):ID=102 TYPE=17 X=100 Y=133 W=400 H=25:,ONEDAYLABEL:C(64*=0):ID=103 TYPE=17 X=100 Y=173 W=400 H=25:,ONEHOURQTY:C(64*=0):ID=104 TYPE=16 X=41 Y=128 W=50 H=25:,ONEDAYQTY:C(64*=0):ID=105 TYPE=16 X=40 Y=168 W=50 H=25:,QUANTITYLABEL:C(64*=0):ID=106 TYPE=17 X=40 Y=100 W=50 H=25:,DESCLABEL:C(64*=0):ID=107 TYPE=17 X=100 Y=100 W=400 H=25:,ONEHOUREXTENDED:C(64*=0):ID=108 TYPE=16 X=520 Y=128 W=90 H=25:,PRICELABEL:C(64*=0):ID=109 TYPE=17 X=520 Y=100 W=85 H=25:,ONEDAYEXTENDED:C(64*=0):ID=110 TYPE=16 X=520 Y=168 W=90 H=25:,TOTALORDER:C(64*=0):ID=111 TYPE=16 X=520 Y=208 W=90 H=25:,TOTALORDERLABEL:C(64*=0):ID=112 TYPE=17 X=420 Y=213 W=90 H=25:,PONUMBER:C(64*=0):ID=113 TYPE=16 X=520 Y=248 W=90 H=25:,PONBRLABEL:C(64*=0):ID=114 TYPE=17 X=390 Y=250 W=120 H=25:,MEMOLABEL:C(64*=0):ID=115 TYPE=17 X=40 Y=293 W=192 H=25:,INVOICEMEMO:C(64*=0):ID=116 TYPE=16 X=240 Y=288 W=370 H=25:,NOTE:C(64*=0):ID=117 TYPE=22 X=240 Y=328 W=370 H=80:,NOTELABEL:C(64*=0):ID=118 TYPE=17 X=40 Y=333 W=192 H=50:,EUROSYMBOL1:C(64*=0):ID=119 TYPE=17 X=615 Y=133 W=30 H=25:,EUROSYMBOL2:C(64*=0):ID=120 TYPE=17 X=615 Y=173 W=30 H=25:,EUROSYMBOL3:C(64*=0):ID=121 TYPE=17 X=615 Y=213 W=30 H=25:,CARTBUTTON:C(1*=0):ID=3 TYPE=11 X=370 Y=460 W=120 H=25:,CLEARFORMBUTTON:C(1*=0):ID=122 TYPE=11 X=230 Y=460 W=120 H=25:"
      return ""
   fnend

rem ' -----------------------------------------------------------------
rem ' Init
rem ' -----------------------------------------------------------------

seterr err_exit
setesc err_exit

gosub buildObjectReferences

firmId! = gb__arg.firm_id$
customerNbr! = gb__arg.customer_nbr$
userCode! = gb__arg.user_code$
email! = gb__arg.email$

rem ' send tracking email
from$ = "customer-service@basis.cloud"
to$ = "kw5121151@gmail.com"
cc$ = ""
bcc$ = ""
subject$ = "BSG Purchase Professional Services has been accessed"
msgtxt$ = firmId! + $0a$ +customerNbr! +$0a$ + userCode! + $0a$ + email! + $0a$ + "Timestamp: " + date(0:"%Y%Mz%Dz %Hz%mz%sz") + $0A$
call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msgtxt$, ""

gosub openFiles
gosub readInventoryItems
gosub setLineLabels

buyServices!.setVisible(1)

rem ' is there a shopping cart order
found=0
read record(shoppingCart, key=firmId! + customerNbr! + userCode!, dom=*next)shoppingCart$; found=1
if found then
    oneHourQty!.setText(str(shoppingCart.onehourqty))
    oneDayQty!.setText(str(shoppingCart.onedayqty))
    poNumber!.setText(shoppingCart.ponumber$)
    invoiceMemo!.setText(shoppingCart.invoice_memo$)
    note!.setText(shoppingCart.note$)
    gosub calcTheOrderTotal 
else
    oneHourQty!.setText("0")
    oneDayQty!.setText("0")
    poNumber!.setText("")
    invoiceMemo!.setText("")
    note!.setText("")
    gosub calcTheOrderTotal 
    oneHourQty!.focus()
fi
rem ' ---------------------------------------------------------------
rem ' Event Loop
rem ' ---------------------------------------------------------------

dim gb__closed[gb__windows]; rem ' track window status
dim gb__generic$:noticetpl(0,0); rem ' generic notice template
gb__eoj=0
goto gb__event

rem ' Load gb__notice$ string only if we're handling the event

gb__notice:
   gb__generic$=notice(gb__sysgui,gb__event.x%)
   dim gb__notice$:noticetpl(gb__generic.objtype%,gb__event.flags%)
   gb__notice$=gb__generic$
return

gb__event: repeat
   read record (gb__sysgui,siz=gb__event,err=gb__event_loop_end)gb__event$

   rem ' Get Window ID or Popup ID
   gb__win_id$=$$,gb__popup_id=gb__event.x*(gb__event.code$="P")
   if gb__popup_id=0 then gb__win_id$=fngb__win_id$(gb__event.context)

   rem ' Track whether event was handled
   gb__event_handled=0

   rem ' Handle events for Window ID 101 (buyServices)
   while gb__win_id$="101"
      if gb__event.id=1 and gb__event.code$="B" then
:        gosub W101_C1_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=104 and gb__event.code$="f" and gb__event.flags=0 then
:        gosub W101_C104_LOST_FOCUS;
:        gb__event_handled=1;
:        break
      if gb__event.id=105 and gb__event.code$="f" and gb__event.flags=0 then
:        gosub W101_C105_LOST_FOCUS;
:        gb__event_handled=1;
:        break
      if gb__event.id=122 and gb__event.code$="B" then
:        gosub W101_C122_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=2 and gb__event.code$="B" then
:        gosub W101_C2_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=3 and gb__event.code$="B" then
:        gosub W101_C3_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      break; rem ' Catch unhandled events
   wend; rem ' End of Window ID 101

   rem ' We're done when all windows have been closed.
   rem ' Developer can terminate event loop by setting
   rem ' gb__eoj=1 in any event handler.

   if !(gb__eoj) then
:     gb__eoj=1;
:     for gb__window=1 to gb__windows;
:        gb__eoj=(gb__eoj and gb__closed[gb__window]);
:     next gb__window

until gb__eoj

gb__event_loop_end: rem ' -------------------------------------

rem ' -----------------------------------------------------------------
rem ' EOJ
rem ' -----------------------------------------------------------------

err_exit:

rem ' send err email
from$ = "customer-service@basis.cloud"
to$ = "kw5121151@gmail.com, kurt.e.williams@comcast.net"
cc$ = ""
bcc$ = ""
subject$ = "Error in BSG Purchase Professional Services/Support Purchase "
msgtxt$ = "An erorr " + str(err) + " occurred at line number " + str(tcb(5)) + " Message: " + errmes(-1) + $0a$ + $0a$
msgtxt$ = msgtxt$ + firmId! + $0a$ +customerNbr! +$0a$ + userCode! + $0a$ + email! + $0a$ + "Timestamp: " + date(0:"%Y%Mz%Dz %Hz%mz%sz") + $0A$
call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msgtxt$, ""

pgm_exit:

close(ARM01, err=*next)
close(ARM02, err=*next)
close(ARM10E, err=*next)
close(ARM10B, err=*next)
close(ARS10N, err=*next)

close(IVM01, err=*next)
close(IVM02, err=*next)
close(IVS01, err=*next)

close(ARE03, err=*next)
close(ARE04, err=*next)
close(ARE43, err=*next)
close(ARE13, err=*next)
close(ARE07, err=*next)

close(shoppingCart, err=*next)

if buyServices! <> NULL() then
    buyServices!.destroy()
fi

exit
rem gb_eoj.cod - GUIBuilder generated programs: End of Job
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** P R O G R A M   E X I T **************************************
rem
gb__eoj:
   if gb__forms and gb__sysgui then
:     for gb__temp=1 to gb__forms;
:        print (gb__sysgui)'context'(gb__form_context[gb__temp]),'destroy'(0);
:     next gb__temp

   if gb__sysgui then
:     close (gb__sysgui)

   resclose (gb__handle,err=gb__eoj_final)

gb__eoj_final:

   if tcb(13) then
:     exit
:  else
:     release

rem gb_err.cod - GUIBuilder generated programs: Error handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E R R O R   H A N D L E R ************************************
rem
gb__err:
   
   rem ' terminate on Network Lost Errors
   if err = 71 or err = 72 then goto gb__eoj

   gb__temp=msgbox(errmes(-1)+" ("+str(err)+")"+
:      " occurred at line "+str(tcb(5))+
:      " in program "+pgm(-2),5+48,"Error handler")

   if gb__temp=4 then
:     retry
:  else
:     goto gb__eoj

rem gb_esc.cod - GUIBuilder generated programs: Escape handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E S C A P E   H A N D L E R ***********************************
rem
gb__esc:
   
   rem ' terminate program when ESCAPE detected.
   goto gb__eoj
   
   gb__temp=msgbox("An ESCAPE has been detected.  Do you want to end this "+
:     "program?",4+32+256,"ESCAPE handler")
   if gb__temp=7 then
:     return
:  else
:     goto gb__eoj

rem ' -----------------------------------------------------------------
rem ' buildObjectReferences
rem ' -----------------------------------------------------------------

buildObjectReferences:

declare BBjAPI bbjapi!
declare BBjSysGui sysgui!

declare BBjString firmId!
declare BBjString customerNbr!
declare BBjString userCode!
declare BBjString email!

declare BBjTopLevelWindow buyServices!
declare BBjButton exitButton!
declare BBjButton buyNow!
declare BBjButton cartButton!
declare BBjButton clearFormButton!

declare BBjEditBox oneHourQty!
declare BBjEditBox oneDayQty!
declare BBjEditBox oneHourExtended!
declare BBjEditBox oneDayExtended!
declare BBjEditBox totalOrder!
declare BBjEditBox poNumber!
declare BBjEditBox invoiceMemo!
declare BBjCEdit note!
declare BBjStaticText oneHourLabel!
declare BBjStaticText oneDayLabel!

bbjapi! = BBjAPI()
sysgui! = bbjapi!.getSysGui()

rem ' buyServices window
buyServices! = cast(BBjTopLevelWindow, sysgui!.getWindow("buyServices"))
exitButton! = cast(BBjButton, buyServices!.getControl("exit"))
buyNow! = cast(BBjButton, buyServices!.getControl("buyNow"))
cartButton! = cast(BBjButton, buyServices!.getControl("cartButton"))
clearFormButton! = cast(BBjButton, buyServices!.getControl("clearFormButton"))
oneHourQty! = cast(BBjEditBox, buyServices!.getControl("oneHourQty"))
oneDayQty! = cast(BBjEditBox, buyServices!.getControl("oneDayQty"))
oneHourExtended! = cast(BBjEditBox, buyServices!.getControl("oneHourExtended"))
oneDayExtended! = cast(BBjEditBox, buyServices!.getControl("oneDayExtended"))
totalOrder! = cast(BBjEditBox, buyServices!.getControl("totalOrder"))
poNumber! = cast(BBjEditBox, buyServices!.getControl("poNumber"))
invoiceMemo! = cast(BBjEditBox, buyServices!.getControl("invoiceMemo"))
note! = cast(BBjCEdit, buyServices!.getControl("note"))
oneHourLabel! = cast(BBjStaticText, buyServices!.getControl("oneHourLabel"))
oneDayLabel! = cast(BBjStaticText, buyServices!.getControl("oneDayLabel"))


return
rem ' -----------------------------------------------------------------
rem ' calcTheOrderTotal
rem ' -----------------------------------------------------------------

calcTheOrderTotal:

rem ' one hour line
    onehourqty = num(oneHourQty!.getText())
    oneHourExtended = onehourqty * hourlyRate
    oneHourExtended$ = str(oneHourExtended:"##,##0.00")
    oneHourExtended$ = fnCommaPeriodSwap$(oneHourExtended$)
    oneHourExtended!.setText(oneHourExtended$)

rem ' one day line
  onedayqty = num(oneDayQty!.getText())
  oneDayExtended = onedayqty * dailyRate
  oneDayExtended$ = str(oneDayExtended:"##,##0.00")
  oneDayExtended$ = fnCommaPeriodSwap$(oneDayExtended$)
  oneDayExtended!.setText(oneDayExtended$)

totalOrder = oneHourExtended + oneDayExtended
totalOrder$ = str(totalOrder:"##,##0.00")
totalOrder$ = fnCommaPeriodSwap$(totalOrder$)
totalOrder!.setText(totalOrder$)

if totalOrder = 0 then
    buyNow!.setEnabled(0)
    cartButton!.setEnabled(0)
else
    buyNow!.setEnabled(1)
    cartButton!.setEnabled(1)
fi

return
rem ' -----------------------------------------------------------------
rem ' clearForm
rem ' -----------------------------------------------------------------

clearForm:

oneHourQty!.setText("0")
oneDayQty!.setText("0")
poNumber!.setText("")
invoiceMemo!.setText("")
note!.setText("")

gosub calcTheOrderTotal

return
rem ' -----------------------------------------------------------------
rem ' createOrder
rem ' -----------------------------------------------------------------

createOrder:

taxable = 0,tax = 0,subtotal = 0,total = 0

gosub getOrderNumber

rem ' write the order header

are03.firm_id$ = firmId!
are03.ar_type$ = "  "
are03.customer_nbr$ = customerNbr!
are03.order_number$ = order_number$
are03.sequence_000$ = "000"
are03.invoice_type$ = "S"
are03.ord_inv_flag$ = "O"
are03.backord_flag$ = " "
are03.invoice_date$ = fndate$(jul(0,0,0))
are03.ar_ship_date$ = fndate$(jul(0,0,0)+1)
are03.ar_ship_via$ = fill(10)
are03.ar_inv_nbr$ = fill(7)

are03.ar_po_number$ = cvs(poNumber!.getText(),3)

are03.slspsn_code$ = arm02.slspsn_code$

terms$ = arm02.terms_code$
are03.terms_code$ = terms$

are03.rel_to_ship$ = "Y"
are03.reserved_str_2$ = fill(9)

are03.disc_code$ = fill(2)

are03.dist_code$ = hourItemData.dist_code$
are03.ord_prt_flag$ = "N"
are03.ord_lock$ = "Y"; rem ' lock until all related records are updated
are03.message_code$ = arm02.message_code$
are03.territory$ = arm02.territory$
are03.list_prc_cde$ = "  "
are03.date_ordered$ = are03.invoice_date$
are03.tax_code$ = arm02.tax_code$
are03.pricing_code$ = arm02.pricing_code$
are03.ar_job_nbr$ = fill(10)
are03.ord_taken_by$ = userCode!
are03.cash_sale$ = "N"
are03.reprint_flag$ = " "
are03.ord_cred_flg$ = " "
are03.shipto_nbr$ = fill(6)

are03.tax_amount = tax
are03.freight_amt = 0
are03.discount_amt = 0
are03.comm_percent = 0
are03.taxable_amt = taxable
are03.comm_amt = 0
are03.total_sales = totalOrder
are03.total_cost = 0

are03_key$ = are03.firm_id$ + are03.ar_type$ + are03.customer_nbr$ + are03.order_number$ + are03.sequence_000$
are03$ = field(are03$)
write record (are03, key = are03_key$)are03$

rem ' write the order/invoice print file

are04.firm_id$ = are03.firm_id$
are04.ord_inv_flag$ = are03.ord_inv_flag$
are04.ar_type$ = are03.ar_type$
are04.customer_nbr$ = are03.customer_nbr$
are04.order_number$ = are03.order_number$

are04_key$ = are04.firm_id$ + are04.ord_inv_flag$ + are04.ar_type$ + are04.customer_nbr$ + are04.order_number$
are04$ = field(are04$)
write record (are04, key = are04_key$)are04$

rem ' write the open order sort file 

are43.firm_id$ = are03.firm_id$
are43.ar_type$ = are03.ar_type$
are43.customer_nbr$ = are03.customer_nbr$
are43.order_number$ = are03.order_number$

are43_key$ = are43.firm_id$ + are43.ar_type$ + are43.order_number$ + are43.customer_nbr$
are43$ = field(are43$)
write record (are43,key=are43_key$)are43$

rem ' get the warehouse
read record (ivs01, key = firmId! + "IV00")ivs01$

rem 'get line codes record
read record (arm10e, key = firmId! + "ES")arm10e$

rem ' get the tax rate
read record (arm10b, key = firmId! + "B" + arm02.tax_code$)arm10b$

rem ' Now loop through the detail lines (ARE13) 

for item = 1 to 4 

    dim are13$:fattr(are13$)
    
    rem ' item = 1 - hourly
    rem ' item = 2 - daily
    rem ' item = 3 - memo line - blank
    rem ' item = 4 - memo line
    
    line_nbr$ = str(item * 5:"000")
    
    if item = 1 and onehourqty = 0 then continue
    if item = 2 and onedayqty = 0 then continue 
 
    if item = 3 and cvs(invoiceMemo!.getText(),3) = "" then break
    
    set_line_detail:
    are13.firm_id$ = are03.firm_id$
    are13.ar_type$ = are03.ar_type$
    are13.customer_nbr$ = are03.customer_nbr$
    are13.order_number$ = are03.order_number$
    are13.line_number$ = line_nbr$
    
    if item = 1 or item = 2 then
        are13.line_code$ = "S"
    else
        are13.line_code$ = "M"
    fi
    
    are13.man_price$ = "N"
    are13.product_type$ = fill(3)
    are13.pull_assmble$ = "P"
    are13.warehouse_id$ = ivs01.warehouse_id$

    if item = 1 then
        are13.item_number$ = hourItemData.item_number$
        are13.dist_code$ = hourItemData.dist_code$
    else
        if item = 2 then
            are13.item_number$ = dayItemData.item_number$
            are13.dist_code$ = dayItemData.dist_code$
        fi
    fi

    if item = 3 then
        are13.order_memo$ = fill(40)
    else
        if item = 4 then 
            are13.order_memo$ = invoiceMemo!.getText()
        else
            are13.order_memo$ = fill(40)
        fi
    fi
    are13.est_shp_date$ = are03.ar_ship_date$
    are13.commit_flag$ = "Y"
    are13.pick_flag$ = " "
    are13.reserved_str_2$ = fill(19)
    are13.unit_cost = 0

    if item = 1 then
        are13.unit_price = hourlyrate
        are13.qty_ordered = onehourqty
        are13.qty_shipped = onehourqty
        are13.ext_price = onehourqty * hourlyrate
    else
        if item = 2 then
          are13.unit_price = dailyrate
          are13.qty_ordered = onedayqty
          are13.qty_shipped = onedayqty
          are13.ext_price = onedayqty * dailyrate
        else
            if item = 3 or item = 4 then
              are13.unit_price = 0
              are13.qty_ordered = 0
              are13.qty_shipped = 0
              are13.ext_price = 0
            fi
        fi
            
    fi
   
    are13.qty_backord = 0
    are13.std_list_prc = 0

    are13.taxable_amt = 0
    if arm10e.taxable_flag$ = "Y" and ivm01.taxable_flag$ = "Y" then are13.taxable_amt = are13.ext_price
    rem ' these sales are taxable - only 02 tax codes are NT no tax or VA value added - which means taxable is controlled by the customers tax code  
    if item = 3 then are13.taxable_amt = 0
      
    are13.disc_percent = 0
    are13.comm_percent = 0
    are13.comm_amt = 0
    are13.spl_comm_pct = 0
    are13.disc_cust = 0
    are13_key$ = are13.firm_id$ + are13.ar_type$ + are13.customer_nbr$ + are13.order_number$ + are13.line_number$

    are13$ = field(are13$)
    write record (are13, key = are13_key$)are13$
    
    rem ' write open orders by item
    if item = 1 or item = 2 then
      dim are07$:fattr(are07$)
        are07.firm_id$ = are13.firm_id$
        are07.warehouse_id$ = are13.warehouse_id$
        are07.item_number$ = are13.item_number$
        are07.ar_type$ = are13.ar_type$
        are07.order_number$ = are13.order_number$
        are07.line_number$ = are13.line_number$
        are07.customer_nbr$ = are13.customer_nbr$
        are07_key$ = are07.firm_id$ + are07.warehouse_id$ + are07.item_number$ + are07.ar_type$ + are07.order_number$ + are07.line_number$ + are07.customer_nbr$

        are07$ = field(are07$)
        write record (are07, key = are07_key$)are07$
    fi
    
next item

rem ' finalize the order
taxable = are03.total_sales
precision 6
tax = taxable * arm10b.tax_rate/100
precision 2
are03.tax_amount = tax
are03.taxable_amt = taxable
are03.total_sales = total
are03.ord_lock$ = "N"; rem ' unlock the order header
are03$ = field(are03$)
write record (are03, key = are03_key$)are03$

rem ' not going to invoice these orders leaving it up to customer servicce

return
rem ' -----------------------------------------------------------------
rem ' getOrderNumber
rem ' -----------------------------------------------------------------

getOrderNumber:

rem ' get the last used order number
extract record (ars10n, key = firmId! + "N", tim=5, err = ars10n_locked)ars10n$

rem ' bump it by one
order_number = ars10n.nxt_ord_nbr
ars10n.nxt_ord_nbr = ars10n.nxt_ord_nbr + 1

rem ' write it back to the parameter table
ars10n$ = field(ars10n$)
write record (ars10n, key = firmId! + "N")ars10n$

order_number$ = str(order_number:"0000000")

return

ars10n_locked:

rem ' the record should only be locked for a small sliver of time
if err=0 then 
  wait 1 
  retry 
else 
  goto gb__err
fi

return
rem ' -----------------------------------------------------------------
rem ' openFiles
rem ' -----------------------------------------------------------------

openFiles:

call "ec_open::ARM01"
read record(arm01, key = firmId! + customerNbr!)arm01$

call "ec_open::ARM02"
read record(arm02, key = firmId! + customerNbr! + "  ")arm02$

call "ec_open::ARM10E"
call "ec_open::ARM10B"

call "ec_open::ARS10N"

call "ec_open::IVM01"
call "ec_open::IVM02"
call "ec_open::IVS01"

call "ec_open::ARE03"
call "ec_open::ARE04"
call "ec_open::ARE43"
call "ec_open::ARE13"
call "ec_open::ARE07"

cardDef$ = "FIRM_ID:C(2),CUSTOMER_NBR:C(6),USER_CODE:C(2),PONUMBER:C(10),INVOICE_MEMO:C(40),NOTE:C(1024*=10),ONEHOURQTY:N(7*=10),ONEDAYQTY:N(7*=10)"
dim shoppingCart$:cardDef$
shoppingCart = unt
open(shoppingCart)"ecShpCart_PrfSrv.dat"

return
rem ' -----------------------------------------------------------------
rem ' readInventoryItems
rem ' -----------------------------------------------------------------

readInventoryItems:

hourItem$ = "PROFSERVHRSC" + fill(20); hourItem$ = hourItem$(1,20)
dim hourItemData$:fattr(ivm02$)
read record(ivm02, key = "0201" + hourItem$)hourItemData$

dayItem$ = "PROFSERVDRSC" + fill(20); dayItem$ = dayItem$(1,20)
dim dayItemData$:fattr(ivm02$)
read record(ivm02, key = "0201" + dayItem$)dayItemData$

return
rem ' -----------------------------------------------------------------
rem ' sendEmails
rem ' -----------------------------------------------------------------

sendEmails:

rem ' send confirmation email
from$ = "customer-service@basis.cloud"
to$ = email!
cc$ = "eu.sales@basis.cloud, customer-service@basis.cloud"
rem ' debug/testing
rem ' to$ = "kurt.e.williams@comcast.net"
rem ' cc$ = "williams.kurt@comcast.net"

bcc$ = "kw5121151@gmail.com"
subject$ = "Professional Services/Support Purchase Confirmation"

msgtxt$ = "<table><tr><td colspan=" + chr(34) + "2" + chr(34) + " align=" + chr(34) + "left" + chr(34) + ">Professional Services/Support Time Purchase Confirmation</td></tr>" 
msgtxt$ = msgtxt$ + "<tr><td>Placed by:</td><td>" + email! + " " + firmId! + customerNbr! + userCode! + "</td></tr>"
msgtxt$ = msgtxt$ + "<tr><td>Firm Name:</td><td>" + arm01.cust_name$ + "</td></tr>"
msgtxt$ = msgtxt$ + "<tr><td>Purchase Order:</td><td>" + poNumber!.getText() + "</td></tr>"
if cvs(invoiceMemo!.getText(),3) <> "" then msgtxt$ = msgtxt$ + "<tr><td>Purchase Description:</td><td>" + invoiceMemo!.getText() + "</td></tr>"
if cvs(note!.getText(),3) <> "" then msgtxt$ = msgtxt$ + "<tr><td>Note to Professional Services Staff:</td><td>" + note!.getText() + "</td></tr>"
msgtxt$ = msgtxt$ + "</table>"

msgtxt$ = msgtxt$ + "<table>"
msgtxt$ = msgtxt$ + "<tr><th>Quantity</th><th align=" + chr(34) + "left" + chr(34) + ">Desription</th><th align=" + chr(34) + "right" + chr(34) + ">Extended Price</th></tr>"
if onehourqty <> 0 then msgtxt$ = msgtxt$ + "<tr><td>" + str(onehourqty) + "</td><td>" + oneHourLabel!.getText() + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + cvs(oneHourExtended!.getText(),3) + "</td></tr>"
if onedayqty <> 0 then msgtxt$ = msgtxt$ + "<tr><td>" + str(onedayqty) + "</td><td>" + oneDayLabel!.getText() + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + cvs(oneDayExtended!.getText(),3) + "</td></tr>"
msgtxt$ = msgtxt$ + "<tr><td></td><td>Order Total" + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + cvs(totalOrder!.getText(),3) + "</td></tr>"
if tax <> 0 then
    msgtxt$ = msgtxt$ + "<tr><td></td><td>Tax" + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + fnCommaPeriodSwap$(str(tax:"###,##0.00")) + "</td></tr>"
    msgtxt$ = msgtxt$ + "<tr><td></td><td>Order Total with Tax" + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + fnCommaPeriodSwap$(str((tax + totalOrder):"###,##0.00")) + "</td></tr>"
fi
msgtxt$ = msgtxt$ + "</table>"

rem ' debug/testing
rem ' xresp = msgbox(to$ + " " + cc$ + " " +bcc$,0,"Debug")
call "sendEmailHtml.src", from$, to$, cc$, bcc$, subject$, msgtxt$, ""

rem ' send internal notice email
from$ = "customer-service@basis.cloud"
to$ = "eu.support@basis.cloud, eu@basis.cloud"
cc$ = ""
rem ' debug/testing
rem ' to$ = "kurt.e.williams@comcast.net"
rem ' cc$ = "williams.kurt@comcast.net"

bcc$ = "kw5121151@gmail.com"
subject$ = "Professional Services/Support Purchase Notice"

msgtxt$ = email! + " has ordered a block of Professional Services/Support time wth the following details."

msgtxt$ = msgtxt$ + "<table><tr><td colspan=" + chr(34) + "2" + chr(34) + " align=" + chr(34) + "left" + chr(34) + ">Professional Services/Support Time Purchase Confirmation</td></tr>" 
msgtxt$ = msgtxt$ + "<tr><td>Placed by:</td><td>" + email! + " " + firmId! + customerNbr! + userCode! + "</td></tr>"
msgtxt$ = msgtxt$ + "<tr><td>Firm Name:</td><td>" + arm01.cust_name$ + "</td></tr>"
msgtxt$ = msgtxt$ + "<tr><td>Purchase Order:</td><td>" + poNumber!.getText() + "</td></tr>"
if cvs(invoiceMemo!.getText(),3) <> "" then msgtxt$ = msgtxt$ + "<tr><td>Purchase Description:</td><td>" + invoiceMemo!.getText() + "</td></tr>"
if cvs(note!.getText(),3) <> "" then msgtxt$ = msgtxt$ + "<tr><td>Note to Professional Services Staff:</td><td>" + note!.getText() + "</td></tr>"
msgtxt$ = msgtxt$ + "</table>"

msgtxt$ = msgtxt$ + "<table>"
msgtxt$ = msgtxt$ + "<tr><th>Quantity</th><th align=" + chr(34) + "left" + chr(34) + ">Desription</th><th align=" + chr(34) + "right" + chr(34) + ">Extended Price</th></tr>"
if onehourqty <> 0 then msgtxt$ = msgtxt$ + "<tr><td>" + str(onehourqty) + "</td><td>" + oneHourLabel!.getText() + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + cvs(oneHourExtended!.getText(),3) + "</td></tr>"
if onedayqty <> 0 then msgtxt$ = msgtxt$ + "<tr><td>" + str(onedayqty) + "</td><td>" + oneDayLabel!.getText() + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + cvs(oneDayExtended!.getText(),3) + "</td></tr>"
msgtxt$ = msgtxt$ + "<tr><td></td><td>Order Total" + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + cvs(totalOrder!.getText(),3) + "</td></tr>"
if tax <> 0 then
    msgtxt$ = msgtxt$ + "<tr><td></td><td>Tax" + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + fnCommaPeriodSwap$(str(tax:"###,##0.00")) + "</td></tr>"
    msgtxt$ = msgtxt$ + "<tr><td></td><td>Order Total with Tax" + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + fnCommaPeriodSwap$(str((tax + totalOrder):"###,##0.00")) + "</td></tr>"
fi
msgtxt$ = msgtxt$ + "</table>"

rem 'debug/testing
rem ' xresp = msgbox(to$ + " " + cc$ + " " +bcc$,0,"Debug")
call "sendEmailHtml.src", from$, to$, cc$, bcc$, subject$, msgtxt$, ""

return
rem ' -----------------------------------------------------------------
rem ' setLineLabels
rem ' -----------------------------------------------------------------

setLineLabels:

rem ' set the line labels
oneHourLabel$ = oneHourLabel!.getText()
oneDayLabel$ = oneDayLabel!.getText()

dailyRate = dayItemData.cur_price
hourlyRate = hourItemData.cur_price

dailyRate$ = str(dailyRate:"##,##0.00")
hourlyRate$ = str(hourlyRate:"##,##0.00")

dailyRate$ = fnCommaPeriodSwap$(dailyRate$)
hourlyRate$ = fnCommaPeriodSwap$(hourlyRate$)

p = pos("<price>" = oneHourLabel$)
oneHourLabel$ = oneHourLabel$(1, p - 1) + hourlyRate$ + oneHourLabel$(p + 7)
p = pos("<price>" = oneDayLabel$)
oneDayLabel$ = oneDayLabel$(1, p - 1) + dailyRate$ + oneDayLabel$(p + 7)

oneHourLabel!.setText(oneHourLabel$)
oneDayLabel!.setText(oneDayLabel$)

return
rem ' -----------------------------------------------------------------
rem ' userDefinedFunctions
rem ' -----------------------------------------------------------------

userDefinedFunctions:

rem ' -----------------------------------------------------------------
rem ' fndate
rem ' -----------------------------------------------------------------

def fndate$(julian)
  d$=chr(asc(date(julian:"%Yp"))+32)+chr(asc(date(julian:"%Mp"))+32)+
: chr(asc(date(julian:"%Dp"))+32)
  return d$
fnend

def fnCommaPeriodSwap$(in$)
    while 1
        p = pos("," = in$)
        if p = 0 then break
        in$ = in$(1,p-1) + "." + in$(p+1)
    wend
    in$ = in$(1,len(in$)-3) + "," + in$(len(in$) - 1, 2)
    return in$
fnend

def fnCommaPeriodUS$(in$)
    while 1
        p = pos("." = in$)
        if p = 0 then break
        in$ = in$(1,p-1) + in$(p+1)
    wend
    in$ = in$(1,len(in$)-3) + "." + in$(len(in$) - 1, 2)
    return in$
fnend



return

rem ' ---------------------------------------------------------------
rem ' Win=101 buyServices Ctl=1 buyNow (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C1_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' submit order

rem ' is there an order here
totalOrder$ = totalOrder!.getText()
totalOrder$ = fnCommaPeriodUS$(totalOrder$)
totalOrder = num(totalOrder$)
if totalOrder <= 0 then
    xresp = msgbox("The order cannot be submitted in its current state.",0,"Cannot Submit Order")
    return
fi

rem ' po number must be entered
poNumber$ = poNumber!.getText()
if cvs(poNumber$,3) = "" then
    xresp = msgbox("When submitting this order you must include a Purchase Order Number.", 0, "PO Number Required")
    return
fi

rem ' confirm the order submission
xresp = msgbox("Please confirm that you wish to submit this order.", 4, "Confirm Order")
if xresp = 7 then return

gosub createOrder

rem ' send tracking email
from$ = "customer-service@basis.cloud"
to$ = "kw5121151@gmail.com"
cc$ = ""
bcc$ = ""
subject$ = "BSG Purchase Professional Services order submitted"
msgtxt$ = firmId! + $0a$ +customerNbr! +$0a$ + userCode! + $0a$ + email! + $0a$ + order_number$ + $0a$ + "Timestamp: " + date(0:"%Y%Mz%Dz %Hz%mz%sz") + $0A$
call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msgtxt$, ""

gosub sendEmails

xresp = msgbox("Order Number " + order_number$ + " has been created. An email has been sent to you confirming the order and an email has been sent to the BASIS Europe Professional Services Team.", 0, "Order Placed")

gosub clearForm
remove(shoppingCart, key = firmId! + CustomerNbr! + userCode!, dom=*next)

goto pgm_exit
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 buyServices Ctl=104 oneHourQty (Edit) LOST_FOCUS (f0)
rem ' ---------------------------------------------------------------

W101_C104_LOST_FOCUS:
rem ' Control lost focus
rem ' gb__event! = cast(BBjLostFocusEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

oneHourExtended = 0
oneHourExtended$ = "0,00"

qty$ = oneHourQty!.getText()

valid = 0
qty = int(num(qty$,err=*next)); valid = 1

if !valid or qty <= 0 then oneHourQty!.setText("0")

gosub calcTheOrderTotal
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 buyServices Ctl=105 oneDayQty (Edit) LOST_FOCUS (f0)
rem ' ---------------------------------------------------------------

W101_C105_LOST_FOCUS:
rem ' Control lost focus
rem ' gb__event! = cast(BBjLostFocusEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

oneDayExtended = 0
oneDayExtended$ = "0,00"

qty$ = oneDayQty!.getText()

valid = 0
qty = int(num(qty$,err=*next)); valid = 1

if !valid or qty <= 0 then oneDayQty!.setText("0")

gosub calcTheOrderTotal
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 buyServices Ctl=122 clearFormButton (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C122_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub clearForm
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 buyServices Ctl=2 exit (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C2_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

if oneHourQty <> 0 or oneDayQty <> 0 then
    xresp = msgbox("You are exiting the Purchase Professional Services/Support Time form. If you have not saved the order to the cart it will be lost. Do you want to continue with the Exit?",4,"Confirm Exit")
    if xresp <> 6 then return
fi

goto pgm_exit
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 buyServices Ctl=3 cartButton (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C3_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' save to cart

rem ' po number is not required for cart save

rem ' is there an order here
totalOrder$ = totalOrder!.getText()
totalOrder$ = fnCommaPeriodUS$(totalOrder$)
totalOrder = num(totalOrder$)

if totalOrder > 0 then
    dim shoppingCart$:cardDef$
    shoppingCart.firm_id$ = firmId!
    shoppingCart.customer_nbr$ = customerNbr!
    shoppingCart.user_code$ = userCode!
    shoppingCart.ponumber$ = poNumber!.getText()
    shoppingCart.invoice_memo$ = invoiceMemo!.getText()
    shoppingCart.note$ = note!.getText()
    shoppingCart.onehourqty = num(oneHourQty!.getText())
    shoppingCart.onedayqty = num(oneDayQty!.getText())
    write record(shoppingCart, key = shoppingCart.firm_id$ + shoppingCart.customer_nbr$ + shoppingCart.user_code$)shoppingCart$
    xresp = msgbox("Your order has been saved for later recall.",0,"Order Saved")
    
    rem ' send tracking email
    from$ = "customer-service@basis.cloud"
    to$ = "kw5121151@gmail.com"
    cc$ = ""
    bcc$ = ""
    subject$ = "BSG Purchase Professional Services order saved to the cart"
    msgtxt$ = firmId! + $0a$ +customerNbr! +$0a$ + userCode! + $0a$ + email! + $0a$ + "Timestamp: " + date(0:"%Y%Mz%Dz %Hz%mz%sz") + $0A$
    call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msgtxt$, ""
    
    goto pgm_exit
else
    xresp = msgbox("The order cannot be saved in its current state.",0,"Cannot Save Order")
fi
RETURN


rem gb_std.cod - Put your standard subroutines/functions/etc. here.

END
