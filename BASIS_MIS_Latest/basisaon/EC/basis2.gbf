[Program]
Creation Date=2001-12-06
Creation Time=08:39:10
Event Set=LEGACY
Generator Program=gb_func
Last Build Date=2024-01-24
Last Build Time=18:4:28
Precision=2
Program Name=basis2
Remarks=Yes
Resource File=basis2.arc
Show Forms=First

[Init]
rem ' -----------------------------------------------------------------
rem ' Init
rem ' -----------------------------------------------------------------

gosub buildDBURL

use ::HostId.src::HostId
use ::HostId.src::HostIdConstants

declare BBjTopLevelWindow mainWindow!
declare BBjTopLevelWindow customerWindow!
declare BBjButton exitButton!
declare BBjTopLevelWindow serial_number!
declare BBjChildWindow host_ids!
declare BBjChildWindow customerSales!
declare BBjChildWindow customerAging!
declare BBjButton hostIdLimitBtn!
declare BBjEditBox hostidLimitedTo!
declare BBjTopLevelWindow vendorFeatures!
declare BBjEditBox appHost!
declare BBjColor green!
declare BBjColor red!

mainWindow! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow("Main"))
exitButton! = mainWindow!.getButton("exit")
appHost! = mainWindow!.getEditBox("appHost")

platformName$ = INFO(3,4)
if platformName$ = "ip-172-30-0-15.us-west-2.compute.internal" then
    appHost!.setText("Upgrade")
    green! = BBjAPI().getSysGui().makeColor(128, 255,128)
    appHost!.setBackColor(green!)
else
    if platformName$ = "ip-172-30-0-74.us-west-2.compute.internal"
        appHost!.setText("Production")
        red! = BBjAPI().getSysGui().makeColor(255,128,128)
        appHost!.setBackColor(red!)
    fi
fi

rem ' (1) Don't show borders on button controls
rem ' (2) Force XP borders on list and edit controls
if (info(3,6)="0" and info(0,0)="Windows XP" and info(1,1)>="1.4.2")
:  or (info(3,6)<>"0" and
:  bbjapi().getThinClient(err=*next).getClientOSName(err=*next)="Windows XP" and
:  bbjapi().getThinClient(err=*next).getClientJavaVersion(err=*next)>="1.4.2")
:  then bbjapi().getSysGui().setLookAndFeel("WindowsXPLookAndFeel")
precision 2

rem ' only load these when needed
rem ' gb__context = fngb__window("101"); rem ' Main (ALREADY LOADED)
rem ' gb__context = fngb__window("103"); rem ' Customer
rem ' gb__context = fngb__window("104"); rem ' serial_number
rem ' gb__context = fngb__window("105"); rem ' ic_select
rem ' gb__context = fngb__window("106"); rem ' ic_invoice
rem ' gb__context = fngb__window("107"); rem ' ops_menu

chan$=""
call "ec_open::ARE83"; chan$=chan$+str(ARE83:"00000")
call "ec_open::ARM01"; chan$=chan$+str(ARM01:"00000")
call "ec_open::ARM02"; chan$=chan$+str(ARM02:"00000")
rem ' will only open ARM04 when it is needed and close it right away
rem ' call "ec_open::ARM04A"; chan$=chan$+str(ARM04A:"00000")
call "ec_open::ARM06"; chan$=chan$+str(ARM06:"00000")
call "ec_open::ARM10A"; chan$=chan$+str(ARM10A:"00000")
call "ec_open::ARS10N"; chan$=chan$+str(ARS10N:"00000")
call "ec_open::COUNTRY"; chan$=chan$+str(COUNTRY:"00000")
call "ec_open::CSM01"; chan$=chan$+str(CSM01:"00000")
call "ec_open::CSM02"; chan$=chan$+str(CSM02:"00000")
call "ec_open::CSM03"; chan$=chan$+str(CSM03:"00000")
call "ec_open::CSM04"; chan$=chan$+str(CSM04:"00000")
call "ec_open::CSM05"; chan$=chan$+str(CSM05:"00000")
call "ec_open::CSM06"; chan$=chan$+str(CSM06:"00000")
call "ec_open::CSM07"; chan$=chan$+str(CSM07:"00000")
call "ec_open::CSM10"; chan$=chan$+str(CSM10:"00000")
call "ec_open::CSM13"; chan$=chan$+str(CSM13:"00000")
call "ec_open::ECEIN"; chan$=chan$+str(ECEIN:"00000")
call "ec_open::ECM01"; chan$=chan$+str(ECM01:"00000")
call "ec_open::IVM01"; chan$=chan$+str(IVM01:"00000")
call "ec_open::languages"; chan$=chan$+str(languages:"00000")
call "ec_open::LICENSE_RESET"; chan$=chan$+str(LICENSE_RESET:"00000")
call "ec_open::LOGEXTRACT"; chan$=chan$+str(LOGEXTRACT:"00000")
call "ec_open::SN_LICENSE"; chan$=chan$+str(SN_LICENSE:"00000")
call "ec_open::SN_HOST"; chan$=chan$+str(sn_host:"00000")

call "ec_open::SMC01"; chan$=chan$+str(SMC01:"00000")
smc01alt = smc01
dim smc01alt$:fattr(smc01$)
call "ec_open::SMC01"; chan$=chan$+str(SMC01:"00000")

call "ec_open::SNM01"; chan$=chan$+str(SNM01:"00000")
snm01alt = snm01
dim snm01alt$:fattr(snm01$)
call "ec_open::SNM01"; chan$=chan$+str(SNM01:"00000")

call "ec_open::SNM02"; chan$=chan$+str(SNM02:"00000")
call "ec_open::SNM04"; chan$=chan$+str(SNM04:"00000")
call "ec_open::SNMEL"; chan$=chan$+str(SNMEL:"00000")
call "ec_open::SNMEU"; chan$=chan$+str(SNMEU:"00000")
call "ec_open::SNT01"; chan$=chan$+str(SNT01:"00000")
call "ec_open::SNT02"; chan$=chan$+str(SNT02:"00000")
call "ec_open::SNT03"; chan$=chan$+str(SNT03:"00000")
call "ec_open::SNT04"; chan$=chan$+str(SNT04:"00000")
call "ec_open::STATES"; chan$=chan$+str(STATES:"00000")
call "ec_open::SYM02"; chan$=chan$+str(SYM02:"00000")
call "ec_open::TMM01"; chan$=chan$+str(TMM01:"00000")
call "ec_open::TMM02"; chan$=chan$+str(TMM02:"00000")
call "ec_open::TMM03"; chan$=chan$+str(TMM03:"00000")
call "ec_open::TMM05"; chan$=chan$+str(TMM05:"00000")
call "ec_open::SN_HOST_MULTI_SN"; chan$=chan$+str(SN_MULTI_HOST_SN:"00000")
sn_excl_basis = unt
open(sn_excl_basis)"sn_excl_basis.dat"


call "ec_open::sn_limit_hostid"
call "ec_open::sn_limit_rejects"

call "ec_open::SN_PROD_BACKUP"; chan$=chan$+str(SN_PROD_BACKUP:"00000")

marr_sn_marsha = unt
open(marr_sn_marsha)"marr_sn_marsha.dat"; chan$=chan$+str(marr_sn_marsha:"00000")
dim marr_sn_marsha$:"SERIAL_NBR:C(20),MARSHA_CODE:C(5)"

firm$=""
rem ' server_name$=info(3,4),p=pos("."=server_name$)
rem ' if p then server_name$=server_name$(1,p-1)
server_name$="["+cvs(appHost!.getText(),3)+"]"

win_id_main$=fngb__win_id$(gb__win.main)
dim win_main$:fngb__template$(win_id_main$)

rem ' do this when the window is created
rem ' win_id_customer$=fngb__win_id$(gb__win.customer)
rem ' dim win_customer$:fngb__template$(win_id_customer$)
rem ' win_id_serial_number$=fngb__win_id$(gb__win.serial_number)
rem ' dim win_serial_number$:fngb__template$(win_id_serial_number$)
rem ' cw_id_sn_detail$=fngb__win_id$(gb__win.detail_child_window)
rem ' dim cw_sn_detail$:fngb__template$(cw_id_sn_detail$)
rem ' cw_id_sn_license$=fngb__win_id$(gb__win.license_child_window)
rem ' dim cw_sn_license$:fngb__template$(cw_id_sn_license$)
rem ' cw_id_sn_sam$=fngb__win_id$(gb__win.sam_child_window)
rem ' dim cw_sn_sam$:fngb__template$(cw_id_sn_sam$)
rem ' cw_id_sn_links$=fngb__win_id$(gb__win.links_child_window)
rem ' dim cw_sn_links$:fngb__template$(cw_id_sn_links$)
rem ' cw_id_end_user$=fngb__win_id$(gb__win.end_user_child_window)
rem ' dim cw_end_user$:fngb__template$(cw_id_end_user$)
rem ' win_id_ic_select$=fngb__win_id$(gb__win.ic_select)
rem ' dim win_ic_select$:fngb__template$(win_id_ic_select$)

win_id_ic_invoice$=fngb__win_id$(gb__win.ic_invoice)
dim win_ic_invoice$:fngb__template$(win_id_ic_invoice$)

rem ' win_id_ops_menu$=fngb__win_id$(gb__win.ops_menu)
rem ' dim win_ops_menu$:fngb__template$(win_id_ops_menu$)

rem ' get reset reasons & close file - no need to keep it open
call "ec_open::reset_reason"
reset_reason_list$="Select a reason for reset:"+$0a$
reset_code_list$="??"
while 1
  readrecord(reset_reason,err=*break)reset_reason$
  reset_reason_list$=reset_reason_list$+cvs(reset_reason.reason$,3)+$0a$
  reset_code_list$=reset_code_list$+reset_reason.reset_code$
wend
close(reset_reason,err=*next)
reset_reason_list$=reset_reason_list$+$ff$+"0"
rem ' Firm numbers, names
sym06=unt
firm_list$=""
open(sym06)stbl("DATA_SERVER")+"/basisaon/aon/ADATA/SYM-06"
while 1
  read (sym06,end=*break)f$,n$
  firm_list$=firm_list$+f$+" "+cvs(n$,3)+$0a$
wend
close(sym06)
firm_list$=firm_list$+$ff$+"0"
win_main.firm_list$=firm_list$

rem ' check to see if running from goldmine for a single customer get the url parmeters
bypassLogin = 0
goldmineInstance = 0
licensePanel = 0
found = 0
gm_cust$ = clientenv("link",err=*next); found = 1
if found then
    if  pos("BASIS, US Customer" = gm_cust$) = 1 and len(gm_cust$) >= 24 then 
        bypassLogin = 1
        goldmineInstance = 1
        xUID$ = "PY "
        gm_cust$ = gm_cust$(len("BASIS, US Customer") + 1)
        if len(gm_cust$) = 8 and gm_cust$(7, 2) = "SN" then gm_cust$ = gm_cust$(1,6), licensePanel = 1
        if len(gm_cust$) > 6 then release
    else
        xresp = msgbox("The contact is not currently a BASIS Customer.", 0, "Not A Customer")
        release
    fi
fi 

rem ' Set Window Focus
ctl_id=num(fattr(win_main$,"User_ID","ID"))
firm01_id=num(fattr(win_main$,"firm_list","ID"))
customer_id=num(fattr(win_main$,"customer","ID"))
customer_x=num(fattr(win_main$,"customer","X"))
login_x=num(fattr(win_main$,"login","X"))
login_y=num(fattr(win_main$,"login","Y"))
exit_id=num(fattr(win_main$,"exit","ID"))
exit_x=num(fattr(win_main$,"exit","X"))
exit_y=num(fattr(win_main$,"exit","Y"))
serial_number_id=num(fattr(win_main$,"serial_number","ID"))
perpet_btn_id=num(fattr(win_main$,"perpetExpRepBtn","ID"))
backupLicense_id=num(fattr(win_main$,"backupLicenseBtn","ID"))
ic_btn_id=num(fattr(win_main$,"ops_menu_btn","ID"))
htmlEmailEdit_id = num(fattr(win_main$,"htmlEmailEditorbtn","ID"))
selgrp_id=num(fattr(win_main$,"select_grp","ID"))
email_id=num(fattr(win_main$,"email_btn","ID"))
main_title$="Customer Service Applications     "+server_name$

if !goldmineInstance then
    print (gb__sysgui)'context'(gb__win.main),'title'(0,main_title$),'hide'(firm01_id,ic_btn_id,customer_id,serial_number_id,selgrp_id,email_id,perpet_btn_id,htmlEmailEdit_id),'enable'(0),'show'(0),'focus'(0),'raise','focus'(ctl_id)
fi

rem ' --< Added to support the BBjAdmin login
log_id=num(fattr(win_main$,"login","ID"))
psw_id=num(fattr(win_main$,"password","ID"))
usr_id=num(fattr(win_main$,"user_id","ID"))
ulbl_id=num(fattr(win_main$,"user_id_lbl","ID"))
plbl_id=num(fattr(win_main$,"password_lbl","ID"))
lgrp_id=num(fattr(win_main$,"login_grp","ID"))
print (gb__sysgui)'hide'(log_id, exit_id, psw_id, usr_id, ulbl_id, plbl_id, lgrp_id),

if !bypassLogin then
    xContext = BBjAPI().getSysGui().getActiveContext()
    call "loginAddon60.src", xContext, xUID$, xPassword$, success
    if success = 0 then release
    BBjAPI().getSysGui().setContext(gb__win.main)
fi

gosub process_login
if len(gm_cust$) then
    rem ' debug - xresp = msgbox(uid$ + " " + gm_cust$,0,"debug")
    if licensePanel then
        gosub serial_number_button
        print (gb__sysgui)'focus'(101)
    else
        gosub customer_button
        rem ' debug - xresp = msgbox("customer button done",0,"debug")
        win_customer$=fngb__get_screen$(win_id_customer$,win_customer$)
        win_customer.customer_nbr$ = gm_cust$
        win_customer$=fngb__put_fields$(win_id_customer$,win_customer$,"customer_nbr")
        rem ' do the search to load the customer
        gosub W103_C1_PUSH_BUTTON
        print (gb__sysgui)'focus'(100)
   fi
fi

rem ' =--< above Added to support the BBjAdmin login

def fnFormatTime$(inTime$)
    if cvs(inTime$,3) = "" then
        retval$="No Time"
    else
        if len(inTime$)<0 then
            retval$=intime$
        else
            retval$=intime$(1,2)+":"+intime$(3,2)+":"+intime$(5,2)
        fi
    fi
return retval$
fnend


[Event Win=101 ID=0 Code=X <WIN_CLOSE> (W101_C0_WIN_CLOSE)]
goto win_main_exit
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=101 ID=1 Code=B <PUSH_BUTTON> (W101_C1_PUSH_BUTTON)]
rem ' Push button operated

rem ' this code is never executed
rem ' changed the way we login to be integerated with the BBjAdmin UID and Password

tmm01key$=""
win_main$=fngb__get_fields$(win_id_main$,win_main$,"user_id,password,firm_list")
win_main.firm_list$=firm_list$
uid$=cvs(win_main.user_id$,7)+"   ",uid$=uid$(1,3)
readrecord(sym02,key=uid$,dom=uid_error)sym02$
firm$=sym02.default_firm$
security_level=fnnum(sym02.security_level$)
if cvs(win_main.password$,3)<>cvs(sym02.password$,3) then
: i=msgbox("Password Incorrect",0,""); return
win_main.user_id$=""
win_main.password$=""
win_main$=fngb__put_fields$(win_id_main$,win_main$,"firm_list,user_id,password")
log_id=num(fattr(win_main$,"login","ID"))
psw_id=num(fattr(win_main$,"password","ID"))
usr_id=num(fattr(win_main$,"user_id","ID"))
ulbl_id=num(fattr(win_main$,"user_id_lbl","ID"))
plbl_id=num(fattr(win_main$,"password_lbl","ID"))
lgrp_id=num(fattr(win_main$,"login_grp","ID"))
directCommBtnId = num(fattr(win_main$,"directCommTestBtn","ID"))
print (gb__sysgui)'hide'(log_id,psw_id,usr_id,ulbl_id,plbl_id,lgrp_id),
:  'move'(exit_id,customer_x,exit_y)
exitButton!.setSize(120, 25)

print (gb__sysgui)'show'(selgrp_id,customer_id,serial_number_id,email_id),'flush','focus'(customer_id)
if security_level>7 then print (gb__sysgui)'show'(ic_btn_id)
if security_level>8 then print (gb__sysgui)'show'(firm01_id)

REM BWH: Do BBj 5.0 way of loading an image to gain optomization
REM print (gb__sysgui,err=*next)'image'(5,55,250,135,"basislogo.bmp")
imageCtrl! = fnAddImageControl!(5,55,250,135,"basislogo.jpg")

wait 1
return

uid_error:
i=msgbox("User ID Incorrect",0,"")

[Event Win=101 ID=100 Code=B <PUSH_BUTTON> (W101_C100_PUSH_BUTTON)]
rem ' Push button operated
customer_button:

rem ' load the customer form if needed
if gb__win.CUSTOMER=-1 then 
    gb__context = fngb__window("103")
    win_id_customer$=fngb__win_id$(gb__win.customer)
    dim win_customer$:fngb__template$(win_id_customer$)
fi

mask$="-#,###,##0.00"
state_list$="", country_list$="",terms_list$="",salesperson_list$="",discount_a_list$=""
discount_list$="",customer_type_list$="",tax_list$="",language_list$="",msg$=""
default_tax_code$="NT",default_customer_type$="SP ",default_terms_code$="04"
default_discount_code$="  ",default_ship_via$=""
if firm$="02" then
: default_tax_code$="VA",default_customer_type$="G  ",default_terms_code$="03"
credit_hold_id=num(fattr(win_customer$,"credit_hold","ID"))
active_renew_id=num(fattr(win_customer$,"active_renew","ID"))
exclPerpetEmail_id=num(fattr(win_customer$,"exclPerpetEmail","ID"))
ok_btn_id=num(fattr(win_customer$,"ok_btn","ID"))
name_id=num(fattr(win_customer$,"name","ID"))
customer_nbr_id=num(fattr(win_customer$,"customer_nbr","ID"))
options_id=num(fattr(win_customer$,"options","ID"))
ust_ctl_id=NUM(FATTR(win_customer$,"ust_id","ID"))
ust_lbl_id=NUM(FATTR(win_customer$,"ust_lbl","ID"))
control_list$="customer_nbr/name/main_contact/phone/fax/address1/address2/address3/
:address4/country/city/state/postal_code/email/credit_limit/salesperson/customer_type/
:discount/terms/tax_code/statements/ship_via/invoice_copy/send_notice/credit_hold_cbox/exclPerpetEmail/active_renew/language/ust_id/discount_a/"
action$=""
option_list$="Search"+$0a$+"Edit"+$0a$+"Contacts"+$0a$+"b-commerce"+$0a$
:+"Comments"+$0a$+"Sales/Aging/Invoices"+$0a$+"Invoice History"+$0a$
:+"Reseller Partner Program"+$0a$+"Send Renewals to Web"+$0a$
:+"Add New Customer"+$0a$+"Add Non-customer record"+$0a$
:+"Change Non-customer to Customer"+$0a$+$ff$+"0"
cust_title$="BASIS Customer     "+server_name$
if firm$="02" then cust_title$="BASIS GmbH Customer     "+server_name$
p=pos(firm$=firm_list$)
if p then
  tmp$=firm_list$(p+3)
  p1=pos($0a$=tmp$)
  if p1 then tmp$=tmp$(1,p1-1)
  cust_title$=cvs(tmp$,3)+" Customer      "+server_name$
fi
new_context=gb__win.customer
old_context=gb__win.main

gosub show_window
print (gb__sysgui)'context'(new_context)

gosub setup_for_search
print (gb__sysgui)'context'(new_context),'title'(0,cust_title$),'flush','focus'(customer_nbr_id)

[Event Win=101 ID=101 Code=B <PUSH_BUTTON> (W101_C101_PUSH_BUTTON)]
rem ' Push button operated
serial_number_button:

if gb__win.SERIAL_NUMBER=-1 then 
    gb__context = fngb__window("104")
    win_id_serial_number$=fngb__win_id$(gb__win.serial_number)
    dim win_serial_number$:fngb__template$(win_id_serial_number$)
    cw_id_sn_detail$=fngb__win_id$(gb__win.detail_child_window)
    dim cw_sn_detail$:fngb__template$(cw_id_sn_detail$)
    cw_id_sn_license$=fngb__win_id$(gb__win.license_child_window)
    dim cw_sn_license$:fngb__template$(cw_id_sn_license$)
    cw_id_sn_sam$=fngb__win_id$(gb__win.sam_child_window)
    dim cw_sn_sam$:fngb__template$(cw_id_sn_sam$)
    cw_id_sn_links$=fngb__win_id$(gb__win.links_child_window)
    dim cw_sn_links$:fngb__template$(cw_id_sn_links$)
    cw_id_end_user$=fngb__win_id$(gb__win.end_user_child_window)
    dim cw_end_user$:fngb__template$(cw_id_end_user$)
    cw_id_host_ids$=fngb__win_id$(gb__win.host_ids_child_window)
    dim cw_host_ids$:fngb__template$(cw_id_host_ids$)

    serial_number! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow(gb__context))
    host_ids! = cast(BBjChildWindow, serial_number!.getChildWindow(138))
    hostIdLimitBtn! = host_ids!.getButton("hostIdLimitBtn")
    hostidLimitedTo! = host_ids!.getEditBox("hostidLimitedTo")
fi

buynow_id=num(fattr(win_serial_number$,"buynow","ID"))

serial_number_id=num(fattr(win_serial_number$,"serial_number","ID"))
search_btn_id=num(fattr(win_serial_number$,"search_btn","ID"))
sn_tab_id=num(fattr(win_serial_number$,"sn_tab","ID"))
inactive_id=num(fattr(cw_sn_detail$,"inactive","ID"))
hostIdLimitlbl_id=num(fattr(cw_sn_detail$,"hostIdLimitlbl","ID"))
reset_id=num(fattr(cw_sn_license$,"reset_btn","ID"))
reset_reason_id=num(fattr(cw_sn_license$,"reset_reason","ID"))
generate_license_id=num(fattr(cw_sn_license$,"generate_license_btn","ID"))
send_license_id=num(fattr(cw_sn_license$,"send_license_btn","ID"))
bar_lbl_id=num(fattr(cw_sn_detail$,"bar_users_lbl","ID"))
bar_usr_id=num(fattr(cw_sn_detail$,"barista_users","ID"))
rem if security_level<8 then
  print(gb__sysgui)'context'(gb__win.detail_child_window),'hide'(bar_usr_id,bar_lbl_id)
rem else
rem   print(gb__sysgui)'context'(gb__win.detail_child_window),'show'(bar_usr_id,bar_lbl_id)
rem fi
serial_num_title$="Serial Number     "+server_name$
new_context=gb__win.serial_number
old_context=gb__win.main
gosub show_window
print (gb__sysgui)'context'(gb__win.serial_number),'title'(0,serial_num_title$),
: 'flush','focus'(serial_number_id)
if pos(cvs(uid$,3)="LG,+ON") then 
  print(gb__sysgui)'context'(gb__win.serial_number),'show'(buynow_id)
else
  print(gb__sysgui)'context'(gb__win.serial_number),'hide'(buynow_id)
fi

idx$=sendmsg(gb__sysgui,sn_tab_id,34,0,$$)

if len(load_serial_nbr$) = 9 then
    serial_number!.getControl(serial_number_id).setText(load_serial_nbr$)
    gosub sn_search_button_pushed
fi

[Event Win=101 ID=105 Code=e <EDIT_CHANGE> (W101_C105_EDIT_CHANGE)]
rem ' Edit control was modified

ctl_id=num(fattr(win_main$,"login","ID"))
print(gb__sysgui)'enable'(ctl_id)

[Event Win=101 ID=106 Code=N2:19 <LIST_SELECT> (W101_C106_LIST_SELECT)]
rem ' Notify Event - List Control - List Selection (2)
rem ' gb__event! = cast(BBjListSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

tmpfirm$=CTRL(gb__sysgui,firm01_id,1)
firm$=tmpfirm$(1,2)

[Event Win=101 ID=107 Code=B <PUSH_BUTTON> (W101_C107_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' load the direct comm form if needed
if gb__win.directCommStatus=-1 then 
    gb__context = fngb__window("108")
    win_id_directCommStatus$=fngb__win_id$(gb__win.directCommStatus)
    dim win_directCommStatus$:fngb__template$(win_id_directCommStatus$)
fi

new_context=gb__win.directCommStatus
old_context=gb__win.main

gosub show_window
print (gb__sysgui)'context'(new_context)

gosub runDirectCommTest

[Event Win=101 ID=108 Code=B <PUSH_BUTTON> (W101_C108_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' lauch the Basis Pricing Objects Test Interface

testintCmd$ = "/mnt/data/bbj/bin/bbj -c/mnt/data/basis/bbj/client-config/basisaon_config.web BasisPricingObjectsTest.src &"
a = scall(testintCmd$, err=*next)

[Event Win=101 ID=111 Code=B <PUSH_BUTTON> (W101_C111_PUSH_BUTTON)]
rem ' Push button operated

if gb__win.OPS_MENU=-1 then 
    gb__context = fngb__window("107")
    win_id_ops_menu$=fngb__win_id$(gb__win.ops_menu)
    dim win_ops_menu$:fngb__template$(win_id_ops_menu$)
fi

new_context=gb__win.ops_menu
old_context=gb__win.main
gosub show_window
print (gb__sysgui)'context'(gb__win.ops_menu),'flush'
return

[Event Win=101 ID=112 Code=B <PUSH_BUTTON> (W101_C112_PUSH_BUTTON)]
rem ' Push button operated
call_pgm$="email_search.bbj"
ctx=dec(ctrl(gb__sysgui))
dim loc$:"x:i(2),y:i(2),w:u(2),h:u(2)"
loc$=ctrl(gb__sysgui,0,0,ctx)
c$=str(ctx:"000")+$0a$+str(loc.x:"0000")+str(loc.y:"0000")+$0a$
call call_pgm$,err=*next,c$
if c$="" then return
dim tmp$:fattr(tmm01$)
readrecord(tmm01,key=c$,dom=*next)tmp$
if pos(tmp.firm_id$=c$)<>1 then return
if firm$<>tmp.firm_id$ then
  i=msgbox("You are not logged in to firm "+tmp.firm_id$,0,"Incorrect Firm")
  return
fi
tmm01key$=c$
gosub customer_button

[Event Win=101 ID=113 Code=B <PUSH_BUTTON> (W101_C113_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

respx = msgbox("The Perpetual License Expired report has been queued and will be emailed to " + repemail$ +".",0,"Perpetual Expired")

call "perpetualLicExpireReport.src",repemail$,firm$,""

[Event Win=101 ID=114 Code=B <PUSH_BUTTON> (W101_C114_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()


call "emailUsed.bbj"

[Event Win=101 ID=115 Code=B <PUSH_BUTTON> (W101_C115_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

print(gb__sysgui)'context'(gb__win.main),'hide'(0)
ret_sn$ = "" + $0A$
call "backupLicense.bbj",ret_sn$
if len(ret_sn$) > 1 then 
    load_serial_nbr$ = cvs(ret_sn$,3)
else
    load_serial_nbr$ = ""
fi
print(gb__sysgui)'context'(gb__win.main),'show'(0)
print (gb__sysgui)'context'(gb__win.main),'flush'

if len(load_serial_nbr$) > 0 then 
    gosub serial_number_button
fi

[Event Win=101 ID=116 Code=B <PUSH_BUTTON> (W101_C116_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' launch the HTML Email Editor
pad$ = fill(len(xUID$),xUID$(1,1))
passedUser$ = hta(xUID$) + hta(pad$)
url$ = "https://bbjserver.basis.cloud:8443/apps/HtmlEmailEditor?context=" + passedUser$
BBjAPI().getThinClient().browse(url$)

[Event Win=101 ID=117 Code=B <PUSH_BUTTON> (W101_C117_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()


msg$ = "The Active Serial Numbers with Addon Features Report will be created and emailed to " + repemail$ + ". Do you want to continue?"
xresp = msgbox(msg$, 4 + 32 + 256,"Continue?")
if xresp = 6 then

    sql$ = "SELECT trim(t1.serial_nbr) as serial_nbr,  t1.license_type, t1.active_flag, substring(t6.expire_on_dt,1,4) + '-' + substring(t6.expire_on_dt,5,2) + '-' + "
    sql$ = sql$ + "substring(t6.expire_on_dt,7,2) as sam_expire_date, t1.users as license_users, trim(t2.feature) as feature, t2.feature_rev, t2.prod_code, " 
    sql$ = sql$ + "t2.users, t3.firm_id, t3.customer_nbr, t3. cust_type, t3.cont_firm, t3.address_1, t3.address_2, t3.address_3, t3.address_4, t3.city, t3.state, t3.zip_code, " 
    sql$ = sql$ + "t3.slsperson, t5.company_name as end_user "
    sql$ = sql$ + "FROM SNM01 t1 "
    sql$ = sql$ + "INNER JOIN SNT04 t2 on t1.serial_nbr = t2.serial_nbr "
    sql$ = sql$ + "INNER JOIN TMM01 t3 on t1.firm_id = t3.firm_id and t1.customer_nbr = t3.customer_nbr "
    sql$ = sql$ + "LEFT OUTER JOIN SNMEL t4 on t1.serial_nbr = t4.serial_nbr "
    sql$ = sql$ + "LEFT OUTER JOIN SNMEU t5 on t4.end_user_nbr = t5.end_user_nbr "
    sql$ = sql$ + "LEFT OUTER JOIN SMC01 t6 on t1.contract = t6.contract "
    sql$ = sql$ + "where t1.active_flag = 'Y' and (feature like '01007514%' or feature = '01004419PRB')"

    sqlChan = sqlunt
    sqlopen(sqlChan,mode="UID=basisaon,PWD=kQbmV7vAXRTyhazJ_ggAxD54@pRaCT-X*rH_7ww")"AddOnData"
    sqlprep(sqlChan)sql$
    sqlexec(sqlChan)
    dim rec$:sqltmpl(sqlChan)
    
    filename$ = "/tmp/snAddonFeatures" + date(0,"%Y%Mz%Dz%H%mz%sz") + ".csv" 
    erase filename$, err = *next
    string filename$ 
    outfile = unt
    open(outfile)filename$
    sep$ = chr(34) + "," + chr(34)
    header$ = chr(34) + "SERIAL_NBR" + sep$ + "LICENSE_TYPE" + sep$ + "ACTIVE_FLAG" + sep$ + "SAM_EXPIRE_DATE" + sep$ + "LICENSE_USERS" + sep$
    header$ = header$ + "FEATURE" + sep$ + "FEATURE_REV" + sep$ + "PROD_CODE" + sep$ + "ADDON_USERS" + sep$ + "FIRM_ID" + sep$ + "CUSTOMER_NBR" + sep$ 
    header$ = header$ + "CUST_TYPE" + sep$ + "CONT_FIRM" + sep$ + "ADDRESS_1" + sep$ + "ADDRESS_2" + sep$ + "ADDRESS_3" + sep$ + "ADDRESS_4" + sep$
    header$ = header$ + "CITY" + sep$ + "STATE" + sep$ + "ZIP_CODE" + sep$ + "SLSPERSON" + sep$ + "END_USER" + chr(34)
    write(outfile)header$
    
    while 1
        rec$=sqlfetch(sqlChan,end=*break)
        
        line$ = chr(34) + rec.serial_nbr$ + sep$ + rec.license_type$ + sep$ + rec.active_flag$ + sep$ + rec.sam_expire_date$ + sep$ + rec.license_users$ + sep$
        line$ = line$ + rec.feature$ + sep$ + rec.feature_rev$ + sep$ + rec.prod_code$ + sep$ + rec.users$ + sep$ + rec.firm_id$ + sep$ + rec.customer_nbr$ + sep$
        line$ = line$ + rec.cust_type$ + sep$ + rec.cont_firm$ + sep$ + rec.address_1$ + sep$ + rec.address_2$ + sep$ + rec.address_3$ + sep$ + rec.address_4$ + sep$
        line$ = line$ + rec.city$ + sep$ + rec.state$ + sep$ + rec.zip_code$ + sep$ + rec.slsperson$ + sep$ + rec.end_user$ + chr(34)
        
        write(outfile)line$
        line$ = ""
        
    wend
    
    sqlclose(sqlchan)
    close(outfile)
    
    msg$ = "The Active Serial Numbers with Addon Feature Lines Report that you requested is attached to this email (" + filename$ + "). Upload it to Google Drive and open it with Google Sheets."
    call "sendEmail.src", "cutomer-service@basis.cloud", repemail$, "", "", "Active SNs with Addon Feature Lines", msg$, filename$
    
    erase filename$, err = *next

    msg$ = "The Active Serial Numbers with Addon Features Report has been created and emailed to " + repemail$ + ". Upload the report file to Goole Drive and open it with Google Sheets."
    xresp = msgbox(msg$, 0 + 64, "Completed") 
fi

[Event Win=101 ID=120 Code=B <PUSH_BUTTON> (W101_C120_PUSH_BUTTON)]
rem ' Push button operated

win_main_exit:
if info(3,2)="thines" then escape

release

[Event Win=103 ID=0 Code=X <WIN_CLOSE> (W103_C0_WIN_CLOSE)]
rem ' simply release if running in Goldmine GM+View
if goldmineInstance then release

goto win_customer_exit

[Event Win=103 ID=1 Code=B <PUSH_BUTTON> (W103_C1_PUSH_BUTTON)]
rem ' Push button operated

focus_id=options_id
temp=dec(ctrl(gb__sysgui,options_id,2,gb__win.customer))
list_selection=temp
if tmm01key$="" and action$="add" then gosub customer_search
am=pos(action$="add,modify")
if (am=1 and temp>8) or (am>1 and temp=1) then
  gosub customer_add_update
  if updated then
    gosub setup_for_search
  else
    focus_id=customer_nbr_id
  fi  
  temp=99
else
  if am then gosub setup_for_search
fi  
switch temp
  case 0;action$="search";gosub customer_search;break
  case 1;action$="modify";gosub setup_add_modify;break
  case 2;action$="contacts";gosub basis_cust_call;break
  case 3;action$="bcomm";gosub basis_cust_call;break
  case 4;action$="comments";gosub basis_cust_call;break
  case 5;action$="sales";gosub basis_cust_call;break
  case 6;action$="invoice_history";gosub basis_cust_call;break
  case 7
    if pos(tmm01.cust_type$(1,1)="AMP") then
      action$="partner";gosub basis_cust_call
    else
      i=msgbox("Customer is not a reseller/partner.",0,"Access denied")
    fi    
    break
  case 8;action$="renew_contracts";gosub basis_cust_call;break
  case 9
    action$="add",create_cust=1,tmm01key$=""
    gosub setup_add_modify;focus_id=name_id
    break
  case 10
    action$="add",create_cust=0,tmm01key$=""
    gosub setup_add_modify;focus_id=name_id
    break
  case 11
    p=pos("000000"=tmm01key$),action$=""
    if p=3 then 
      action$="add",create_cust=1
      convertToCust = 1
      gosub setup_add_modify
      convertToCust = 0
      focus_id=name_id
    fi    
    break
  case default;action$="";break
swend
if (list_selection>1 and list_selection<9) or am*updated then list_selection=0
p=pos($ff$=option_list$)
if p then option_list$=option_list$(1,p)+str(list_selection)
:else option_list$=option_list$+$ff$+str(list_selection)
win_customer.options$=option_list$
win_customer$=fngb__put_fields$(win_id_customer$,win_customer$,"options")
print (gb__sysgui)'flush','focus'(focus_id)

[Event Win=103 ID=101 Code=c0 <CHECK_OFF> (W103_C101_CHECK_OFF)]
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

msg$ = "Note: Unsetting Active Renew will cause any auto generated contract renewal invoices to be generated with a Purchase Order Number of "
msg$ = msg$ + "SAM Renew, or RNT Renew or DVK Renew. The contract dates will be rolled when the invoice is paid or a Purchase Order Number is added "
msg$ = msg$ + "to the invoice via DIRECT-RENEW."
resp = msgbox(msg$, 0, "Active Renew")

[Event Win=103 ID=101 Code=c1 <CHECK_ON> (W103_C101_CHECK_ON)]
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

msg$ = "Note: With Active Renew set any auto generated contract renewal invoices will be generated with a Purchase Order Number of "
msg$ = msg$ + " SAM ROLL, RNT ROLL or DVK ROLL and the contract dates will be rolled when the order is invoiced."
resp = msgbox(msg$, 0, "Active Renew")

[Event Win=103 ID=1315 Code=B <PUSH_BUTTON> (W103_C1315_PUSH_BUTTON)]
rem ' Push button operated
xresp = msgbox("Would you like to run the Perpetual License Expired Report for this customer?",4,"Perpetual Expired Report")
if xresp = 6 then
    respx = msgbox("The Perpetual License Expired report has been queued and will be emailed to " + repemail$ +".",0,"Perpetual Expired")
    call "perpetualLicExpireReport.src",repemail$,firm$,arm01.customer_nbr$
else
    xresp = msgbox("Would you like to run the Customer Line Item Sales report?",4,"Line Item Detail Sales report")
    if xresp = 6 then
        thisContext = BBjAPI().getSysGui().getContext()
        dim args$:"FIRM_ID:C(2),CUSTOMER_NBR:C(6),REPEMAIL:C(60*)"
        args.firm_id$ = firm$
        args.customer_nbr$ = arm01.customer_nbr$
        args.repEmail$ = repemail$
        call "CustSalesReport.bbj",args$
        BBjAPI().getSysGui().setContext(thisContext)
    else
        action$="report"
        if pos(firm$=tmm01key$)<>1 then tmm01key$=firm$
        gosub basis_cust_call
    fi
fi

[Event Win=103 ID=1318 Code=B <PUSH_BUTTON> (W103_C1318_PUSH_BUTTON)]
rem ' Push button operated
gosub launch_bcomm

[Event Win=103 ID=1319 Code=B <PUSH_BUTTON> (W103_C1319_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' --- Create stacked bar  chart widget showing licensing information"

if len(tmm01key$) >= 8 then
    xfirm_id$ = tmm01key$(1,2)
    xcust_num$ = tmm01key$(3,6)
    rem ' xresp = msgbox(xfirm_id$ + xcust_num$, 0, "debug")
    call "ARM.WJ.called", xfirm_id$, xcust_num$
fi

[Event Win=103 ID=1320 Code=B <PUSH_BUTTON> (W103_C1320_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

if len(xUid$) < 3 then 
    xUid$ = xUid$ + "   "
    xUid$ = xUid$(1,3)
fi

if cvs(scust$,3) = "" then
    i = msgbox("A customer must be loaded in the customer form before you can execute this function.",0,"Select a Customer")
else
    emerCustName$ = cvs(win_customer.name$,3) + fill(30)
    emerCustName$ = emerCustName$(1,30)

    passData$ = xUid$ + firm$ + scust$ + emerCustName$ + repemail$

    call "emerLic.bbj", passData$
fi

[Event Win=103 ID=190 Code=l0 <LIST_CLICK> (W103_C190_LIST_CLICK)]
rem ' Click in list box
ok=0
readrecord(languages,key=tmm01.lang_code$,dom=*next)languages$;ok=1
if ok then return

ctl_id=num(fattr(win_customer$,"country","ID"))
dim cnkey$(30)
cnkey$(1)=ctrl(gb__sysgui,ctl_id,1)
dim country$:fattr(country$)
Readrecord(country,key=cnkey$,knum=1,dom=*next)country$
if cvs(country.lang_code$,3) = "" then country.lang_code$ = "EN"
tmm01.lang_code$=country.lang_code$
temp=pos(tmm01.lang_code$=language_list$)
index=-1
if temp then index=pos($0a$=language_list$(1,temp),1,0)
temp=pos($ff$=language_list$)
if temp then language_list$=language_list$(1,temp-1)
if index>=0 then language_list$=language_list$+$ff$+str(index)
win_customer.language$=language_list$
win_customer$=fngb__put_fields$(win_id_customer$,win_customer$,"language")

[Event Win=103 ID=251 Code=c0 <CHECK_OFF> (W103_C251_CHECK_OFF)]
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' this is the flag that will remove BASIS email addresses from emails to this customer from 
rem ' the perpetual License Scan program.


remove(sn_excl_basis, key = arm01.firm_id$+arm01.customer_nbr$, dom=*next)

[Event Win=103 ID=251 Code=c1 <CHECK_ON> (W103_C251_CHECK_ON)]
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()


write record(sn_excl_basis)arm01.firm_id$ + arm01.customer_nbr$

[Event Win=103 ID=300 Code=l0 <LIST_CLICK> (W103_C300_LIST_CLICK)]
rem ' Click in list box
temp=dec(ctrl(gb__sysgui,options_id,2,gb__win.customer))

if temp=0 and pos(action$="add modify") then gosub setup_for_search

[Event Win=103 ID=305 Code=B <PUSH_BUTTON> (W103_C305_PUSH_BUTTON)]
rem ' Push button operated

rem ' simply release if running in Goldmine GM+View
if goldmineInstance then release

action$=""
gosub win_customer_exit

[Event Win=104 ID=0 Code=X <WIN_CLOSE> (W104_C0_WIN_CLOSE)]
if goldmineInstance then release

goto sn_window_exit

[Event Win=104 ID=1 Code=B <PUSH_BUTTON> (W104_C1_PUSH_BUTTON)]
rem ' Push button operated
sn_search_button_pushed:

current_context=dec(ctrl(gb__sysgui))
print (gb__sysgui)'context'(gb__win.license_child_window),'disable'(reset_id,reset_reason_id),'context'(current_context)

win_serial_number$=fngb__get_fields$(win_id_serial_number$,win_serial_number$,"serial_number")
temp$=cvs(win_serial_number.serial_number$,7)
dim snm01$:fattr(snm01$)
read(snm01,key=temp$,knum=0,dom=*next)
readrecord(snm01,end=*next)snm01$
sn$=snm01.serial_nbr$
if err=2 then msg$="End of file reached" 
: else msg$=cvs(sn$,3)+" is the next record"

dim snm02$:fattr(snm02$)
readrecord(snm02,key=sn$,dom=*next)snm02$

found_sn=(temp$=cvs(sn$,3))
if found_sn=0 then i=msgbox(msg$,0,temp$+" Not found")
win_serial_number.serial_number$=cvs(sn$,3)
win_serial_number$=fngb__put_fields$(win_id_serial_number$,win_serial_number$,
:"serial_number")
print (gb__sysgui)'context'(gb__win.serial_number)
idx$=sendmsg(gb__sysgui,sn_tab_id,34,0,$$)

vendorFeaturesBTN! = cast(BBjButton, BBjAPI().getSysGui().getWindow(gb__win.serial_number).getChildWindow(126).getControl("vendorFeatures"))
vendorFeaturesBTN!.setToolTipText("This button will be active once the data is loaded.")
vendorFeaturesBTN!.setCursor(3)
vendorFeaturesBTN!.setText("Loading SN Data")

gosub show_sn

vendorFeaturesBTN!.setToolTipText("Click to view the Vendor Features on this serial number.")
vendorFeaturesBTN!.setText("Vendor Features")
vendorFeaturesBTN!.setCursor(0)

[Event Win=104 ID=117 Code=N1:106 <TAB_KEYPRESS> (W104_C117_TAB_KEYPRESS)]
rem ' Notify Event - Tab - Keypress (gb__notice.keycode$, gb__notice.syskey$)

[Event Win=104 ID=117 Code=N2:106 <TAB_SELECT> (W104_C117_TAB_SELECT)]
rem ' Notify Event - Tab - Tab gb__notice.tabidx Selected

on gb__notice.tabidx goto tab0,tab1,tab2,tab3,tab4

tab0: return

tab1:
print (gb__sysgui)'context'(gb__win.license_child_window)
print (gb__sysgui)'disable'(reset_id,reset_reason_id)
if !(licensed_product) or snm01.active_flag$<>"Y" then
  print (gb__sysgui)'disable'(generate_license_id,send_license_id)
  return
fi

print (gb__sysgui)'enable'(generate_license_id,send_license_id)

if license_status=0 then return
if snm01.avail_support>0 or (cvs(snm01.contract$,2)<>"" and snm01.sam_active$<>"N" and sam_status$ <> "No SAM") or snm01.product$="DS5" then
  print (gb__sysgui)'enable'(reset_id,reset_reason_id)
fi
return

tab2: 
print (gb__sysgui)'context'(gb__win.sam_child_window)
if sam_inactive_id = 0 then sam_inactive_id=num(fattr(cw_sn_sam$,"contract_inactive","ID"))
if smc01.sam_active$="N" then
: print (gb__sysgui)'show'(sam_inactive_id)
: else print(gb__sysgui)'hide'(sam_inactive_id)
if no_renew_id = 0 then no_renew_id=num(fattr(cw_sn_sam$,"no_renew","ID"))
if smc01.renew_flag$="N" then
: print (gb__sysgui)'show'(no_renew_id)
: else print(gb__sysgui)'hide'(no_renew_id)
ctl_id=num(fattr(cw_sn_sam$,"contract_search","ID"))
print (gb__sysgui)'disable'(ctl_id)

rem ' enable the direct renew button if needed
if xUID$(1,2) = "LC" or xUID$(1,2) = "GP" or xUID$(1,2) = "GR" or xUID$(1,2) = "MS" or xUID$(1,2) = "KW" or xUID$ = "+ON" then
    directRenew_ctl_id=num(fattr(cw_sn_sam$,"directRenew","ID"))
    print (gb__sysgui)'show'(directRenew_ctl_id)          
fi


return

tab3:

tab4:

[Event Win=104 ID=132 Code=B <PUSH_BUTTON> (W104_C132_PUSH_BUTTON)]
rem ' Push button operated

if goldmineInstance then release

sn_window_exit:
ctl_id=num(fattr(win_main$,"exit","ID"))
new_context=gb__win.main
old_context=gb__win.serial_number
gosub show_window
print (gb__sysgui)'context'(gb__win.main),'flush','focus'(ctl_id)

[Event Win=104 ID=136 Code=B <PUSH_BUTTON> (W104_C136_PUSH_BUTTON)]
rem ' Push button operated

rem ' save the current firm
firm_hold$ = firm$

firm$=snm01.firm_id$
cust$=snm01.customer_nbr$
gosub launch_bcomm

rem ' restore firm
firm$ = firm_hold$

[Event Win=104 ID=137 Code=B <PUSH_BUTTON> (W104_C137_PUSH_BUTTON)]
rem ' Push button operated
rem if info(3,2)="thines" then escape
call_pgm$="buy_now.bbj"
ctx=dec(ctrl(gb__sysgui))
dim loc$:"x:i(2),y:i(2),w:u(2),h:u(2)"
loc$=ctrl(gb__sysgui,0,0,ctx)

c$=str(ctx:"000")+$0a$+str(loc.x:"0000")+str(loc.y:"0000")+$0a$+str(security_level:"000")+$0a$+uid$+$0a$
call call_pgm$,err=*next,c$

[Event Win=104.126 ID=101 Code=B <PUSH_BUTTON> (W104_126_C101_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

if xUID$(1,2) <> "GP" and xUID$(1,3) <> "+ON" then
    accessMsg$ = "This function can only be performed by Customer Service or the Adminstrative User (+ON)."
    xrexp = msgbox(accessMsg$, 0, "Access Denied")
    return
fi

rem ' load the dissovle prod/backup license form if needed
if gb__win.removeBackupLic=-1 then 
    gb__context = fngb__window("109")
    win_id_removeBackupLic$=fngb__win_id$(gb__win.removeBackupLic)
    dim win_removeBackupLic$:fngb__template$(win_id_removeBackupLic$)
fi

new_context=gb__win.removeBackupLic
old_context=gb__win.serial_number

gosub show_window
print (gb__sysgui)'context'(new_context)

xCust$ = sysgui!.getWindow(gb__win.detail_child_window).getControl("Customer").getText()
sysgui!.getWindow(gb__win.removeBackupLic).getControl("customer").setText(xCust$)
sysgui!.getWindow(gb__win.removeBackupLic).getControl("productionLicense").setText(prodSN$)

if len(backSN$) > 10 then
    rem ' two backup serial numbers
    sysgui!.getWindow(gb__win.removeBackupLic).getControl("backupLicense").setText(backSN$(1,9))
    sysgui!.getWindow(gb__win.removeBackupLic).getControl("otherSN").setText(backSN$(11,9))
    sysgui!.getWindow(gb__win.removeBackupLic).getControl("otherSN").setVisible(1)
    sysgui!.getWindow(gb__win.removeBackupLic).getControl("switchSNBtn").setVisible(1)    
else
    if len(backSN$) = 10 then
        rem ' one backup serial number
        sysgui!.getWindow(gb__win.removeBackupLic).getControl("backupLicense").setText(backSN$(1,9))
        sysgui!.getWindow(gb__win.removeBackupLic).getControl("otherSN").setVisible(0)
        sysgui!.getWindow(gb__win.removeBackupLic).getControl("switchSNBtn").setVisible(0)    
    else
        sysgui!.getWindow(gb__win.removeBackupLic).getControl("otherSN").setVisible(0)
        sysgui!.getWindow(gb__win.removeBackupLic).getControl("switchSNBtn").setVisible(0)    
    fi
fi

sysgui!.getWindow(gb__win.removeBackupLic).getControl("dissolveDeactivate").setSelected(1)
sysgui!.getWindow(gb__win.removeBackupLic).getControl("dissolveLeave").setSelected(0)

[Event Win=104.126 ID=104 Code=B <PUSH_BUTTON> (W104_126_C104_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

serialNumbers$ = cvs(sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackLic").getText(),3)

while len(serialNumbers$)
    if len(serialNumbers$) = 9 then
        snMsg$ = serialNumbers$
        serialNumbers$ = ""
        msg$ = "Load this serial number, " + snMsg$
        xresp = msgbox(msg$, 4 + 32 + 256, "Load Serial Number")
        if xresp = 6 then
            rem ' yes
            rem ' load the serial number
            load_serial_nbr$ = snMsg$ 
            gosub serial_number_button
        fi
    else
        p=pos("," = serialNumbers$)
        snMsg$ = serialNumbers$(1,p-1)
        serialNumbers$ = serialNumbers$(p+2)
        msg$ = "Load this serial number, " + snMsg$
        xresp = msgbox(msg$, 4 + 32 + 256, "Load Serial Number")
        if xresp = 6 then
            rem ' yes
            load_serial_nbr$ = snMsg$ 
            gosub serial_number_button
            break
        fi
    fi
wend

[Event Win=104.126 ID=107 Code=B <PUSH_BUTTON> (W104_126_C107_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

vfSN$ = serial_number!.getControl("Serial_number").getText()



gosub showVendorFeatures

[Event Win=104.126 ID=108 Code=B <PUSH_BUTTON> (W104_126_C108_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' is there a serial number loaded'
prodSN$ = cvs(sysgui!.getWindow(gb__win.serial_number).getControl("Serial_number").getText(),3)
prodlicensetype$ = cvs(sysgui!.getWindow(gb__win.serial_number).getChildWindow(126).getControl("license").getText(),3)
prodUsers$ = cvs(sysgui!.getWindow(gb__win.serial_number).getChildWindow(126).getControl("users").getText(),3)
prodUsers = num(prodUsers$)
prodUsers$ = cvs(sysgui!.getWindow(gb__win.serial_number).getChildWindow(126).getControl("users2").getText(),3)
prodUsers = prodUsers + num(prodUsers$)
prodUsers$ = str(prodUsers)

if prodSN$ = "" then
    resp = msgbox("A serial number is not loaded in the form.",0,"No Serial Number")

else
    
    rem ' must be a STD or RN1 (rental) license'
    contract_type$ = cvs(sysgui!.getWindow(gb__win.serial_number).getChildWindow(133).getControl("contract_type").getText(),3)
    
    if contract_type$ <> "SM1" and contract_type$ <> "RN1" then
        resp = msgbox("The serial number contract must be either an SM1 or RN1.", 0, "Wrong Contract Type")

    else
 
        rem ' are there other serial numbers on this contract'
        contract$ = cvs(sysgui!.getWindow(gb__win.serial_number).getChildWindow(133).getControl("contract").getText(),3)
 
        sql$ = "SELECT * FROM SNM01 where contract = '" + contract$ + "'"
        sqlChan = sqlunt
        sqlopen(sqlChan,mode="UID=basisaon,PWD=kQbmV7vAXRTyhazJ_ggAxD54@pRaCT-X*rH_7ww")"AddOnData"
        sqlprep(sqlChan)sql$
        sqlexec(sqlChan)
        dim rec$:sqltmpl(sqlChan)
        snOnContract$ = ""
        count = 0
        while 1
            rec$=sqlfetch(sqlChan,end=*break)

            if cvs(rec.serial_nbr$,3) = prodSN$ then 
                theUsers$ = rec.users$
                theLicType$ = rec.license_type$
                continue
            fi

            snOnContract$ = snOnContract$ + rec.serial_nbr$
            count = count + 1

        wend
        sqlclose(sqlchan)

        if count = 0 then
            msgboxMsg$ = "The backup serial number must be on the same contract as the primary serial number. "
            msgboxMsg$ = msgboxMsg$ + "There are no other serial numbers on this contract (" + contract$ +")."
            resp = msgbox(msgboxMsg$, 0, "No other Serial Numbers on this Contract")
        else
            rem ' select serial number'
            snToUse$ = ""
            for x = 1 to len(snOnContract$) step 20
                backSN$ = snOnContract$(1,20)
                
                msg$ = "Use " + cvs(backSN$,3) + " as the backup?"
                resp = msgbox(msg$,36,"Use This SN")
                
                if resp = 7 then continue
                
                snToUse$ = backSN$
                break
            next
            
            if snToUse$ = "" then
                rem ' no serial number selected we are done'
            else
            
                rem ' same number of users?'
                backSN$ = snToUse$
                sql$ = "SELECT * FROM SNM01 where serial_nbr = '" + backSN$ + "'"
                    
                sqlChan = sqlunt
                sqlopen(sqlChan,mode="UID=basisaon,PWD=kQbmV7vAXRTyhazJ_ggAxD54@pRaCT-X*rH_7ww")"AddOnData"
                sqlprep(sqlChan)sql$
                sqlexec(sqlChan)
                dim rec$:sqltmpl(sqlChan)
                rec$=sqlfetch(sqlChan,end=*break)
                backUsers$ = rec.users$
                backlicensetype$ = rec.license_type$
                sqlclose(sqlchan)

                if num(prodUsers$) <> num(backUsers$)
                    msg$ = "The number of users on the production serial number is " + str(prodUsers) + "."
                    msg$ = msg$ + " It is not equal to the number of users on the selected backup serial number"
                    msg$ = msg$ + " which is " + str(backUsers) + "."
                    resp = msgbox(msg$, 0, "Users no Equal")
                else
                    rem 'license type the same'
                    if prodlicensetype$ <> backlicensetype$ then
                        msg$ = "The license type of production serial number is " + prodlicensetype$ + "."
                        msg$ = msg$ + " It is not equal to the license type of the selected backup serial number"
                        msg$ = msg$ + " which is " + backlicensetype$ + "."
                        resp = msgbox(msg$, 0, "License Type not Equal")
                    else
                        rem ' features the same?'
                        prodfeatures$ = ""
                        sql$ = "SELECT * FROM SNT04 where serial_nbr = '" + prodSN$ + "' order by serial_nbr, feature"
                        sqlChan = sqlunt
                        sqlopen(sqlChan,mode="UID=basisaon,PWD=kQbmV7vAXRTyhazJ_ggAxD54@pRaCT-X*rH_7ww")"AddOnData"
                        sqlprep(sqlChan)sql$
                        sqlexec(sqlChan)
                        dim rec$:sqltmpl(sqlChan)
                        while 1
                            rec$=sqlfetch(sqlChan,end=*break)
                            if cvs(rec.feature$,7) <> "SOFTWAREASSETMANAGEMENT" then
                                prodfeatures$ = prodfeatures$ + rec.feature$
                            fi
                        wend
                        sqlclose(sqlchan)
                        
                        backfeatures$ = ""
                        sql$ = "SELECT * FROM SNT04 where serial_nbr = '" + backSN$ + "' order by serial_nbr, feature"
                        sqlChan = sqlunt
                        sqlopen(sqlChan,mode="UID=basisaon,PWD=kQbmV7vAXRTyhazJ_ggAxD54@pRaCT-X*rH_7ww")"AddOnData"
                        sqlprep(sqlChan)sql$
                        sqlexec(sqlChan)
                        dim rec$:sqltmpl(sqlChan)
                        while 1
                            rec$=sqlfetch(sqlChan,end=*break)
                            if cvs(rec.feature$,7) <> "SOFTWAREASSETMANAGEMENT" then
                                backfeatures$ = backfeatures$ + rec.feature$
                            fi
                        wend
                        sqlclose(sqlchan)
                        
                        if prodfeatures$ <> backfeatures$ then
                            msg$ = "The features for " + cvs(prodSN$,3) + " do not match the features for " + cvs(backSN$,3) + "."
                            resp = msgbox(msg$, 0, "Features do not Match")
                        else
                            rem ' ready to write the SN_PROD_BACKUP entry'
                            sql$ = "SELECT * FROM (SELECT max(seq_no) as max_seq FROM SN_PROD_BACKUP where "
                            sql$ = sql$ + "prod_serial_nbr = '" + cvs(prodSN$,3) + "') where max_seq is not null "
                            sqlChan = sqlunt
                            sqlopen(sqlChan,mode="UID=basisaon,PWD=kQbmV7vAXRTyhazJ_ggAxD54@pRaCT-X*rH_7ww")"AddOnData"
                            sqlprep(sqlChan)sql$
                            sqlexec(sqlChan)
                            dim rec$:sqltmpl(sqlChan)
                            seq$ = ""
                            while 1
                                rec$=sqlfetch(sqlChan,end=*break)
                                seq$ = rec.max_seq$
                            wend
                            if seq$ = "" then
                                seq$ = "00"
                            else 
                                seq$ = str(num(seq$) + 1:"00")
                            fi
                            sql$ = "INSERT INTO SN_PROD_BACKUP values ('" + prodSN$ + "','" + seq$ + "','" +backSN$ + "')"
                            sqlprep(sqlChan)sql$
                            sqlexec(sqlChan)
                            sqlclose(sqlchan)
                            
                            rem ' remove the certificate.bls files if they exists
                            licDir$ = "/u/docfiles/flexlic/bin/bls_generator/bls_lic/"
                            
                            rem ' production certificate first
                            prodCert$ = licDir$ + cvs(prodSN$,3) + "-certificate.bls"
                            prodCert = unt, found = 0
                            open(prodCert, err = *next)prodCert$; found = 1
                            close(prodCert)
                            if found then
                                erase prodCert$
                            fi
                                
                            rem ' backup certificate next
                            backCert$ = licDir$ + cvs(backSN$,3) + "-certificate.bls"
                            backCert = unt, found = 0
                            open(backCert, err = *next)backCert$; found = 1
                            close(backCert)
                            if found then
                                erase backCert$
                            fi

                            from$ = "customer-service@basis.cloud"
                            to$ = "customer-service@basis.cloud, sales@basis.cloud"
                            rem ' to$ = "misdev@basis.cloud"
                            cc$ = ""
                            bcc$ = ""
                            subject$ = "Production/Backup License pair created"
                            msg$ = "The Production/Backup License pair made up of the prodction license, " + cvs(prodSN$,3) + " and the "
                            msg$ = msg$ + "backup license, " + cvs(backSN$,3) + " has been createded by " + cvs(xUID$,3) + "."
                            call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msg$, ""
                            
                            msg$ = "Serial Number " + cvs(prodSN$,3) + " has been paired with a backup serial number " + cvs(backSN$,3) + "."
                            resp = msgbox(msg$, 0, "Production/Backup Pair Created")
                            gosub sn_search_button_pushed
                            
                        fi  
                    fi
                fi
            fi        
        fi
    fi
fi

[Event Win=104.126 ID=285 Code=c0 <CHECK_OFF> (W104_126_C285_CHECK_OFF)]
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' the virtual flag can be unset regardless of the value of the annualFlag

msg$ = "Please confirm you are removing the license virtual flag."
resp = msgbox(msg$,4+32+256,"Setting Virtual License Flag")
if resp = 6 then
    setVirtualFlag = 0, unSetVirtualFlag=1
    gosub maintainVirtualFlag
    sysgui!.getWindow(gb__win.detail_child_window).getControl("virtualFlag").setSelected(0) 
else
    sysgui!.getWindow(gb__win.detail_child_window).getControl("virtualFlag").setSelected(1) 
fi

rem ' debug code
rem ' chkValue$ = str(sysgui!.getWindow(gb__win.detail_child_window).getControl("annualFlag").isSelected())
rem ' resp = msgbox("Annual Flag " + chkvalue$ ,0,"debug")

[Event Win=104.126 ID=285 Code=c1 <CHECK_ON> (W104_126_C285_CHECK_ON)]
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' verify they want to continue even though the license is not eligible for a virtual license
if !virtualEligible then
    msg$ = "This serial number is not eligible for a virtual license. Setting it virtual on will cause the license to be denied "
    msg$ = msg$ + "the next time it seeks a new license file. Do you want to continue with this change?"
    resp = msgbox(msg$, 4+32+256, "Not Eligible for Virtual")
    if resp = 7 then
        sysgui!.getWindow(gb__win.detail_child_window).getControl("virtualFlag").setSelected(0)
        return
    fi    
fi

rem ' we can not set the virtual flag on if the annual flag is already set on
if sysgui!.getWindow(gb__win.detail_child_window).getControl("annualFlag").isSelected() then
    msg$ = "The Virtual Flag can not be set on if the Annual Flag is already set on. Please set the Annual Flag off before setting the Virtual Flag on."
    resp = msgbox(msg$,0+6,"Annual Flag is Set")
    sysgui!.getWindow(gb__win.detail_child_window).getControl("virtualFlag").setSelected(0)
    return
fi

if snm01.product$ = "PR5" or snm01.product$ = "VP5" then
    msg$ = "PR5 and VP5 virtual licenses must use BLM 10.0 or greater. "
else
    msg$ = ""
fi
msg$ = msg$ + "Please confirm you are setting this license to virtual."
resp = msgbox(msg$,4+32+256,"Setting Virtual License Flag")
if resp = 6 then
    setVirtualFlag = 1, unSetVirtualFlag=0
    gosub maintainVirtualFlag
    sysgui!.getWindow(gb__win.detail_child_window).getControl("virtualFlag").setSelected(1)
else
    sysgui!.getWindow(gb__win.detail_child_window).getControl("virtualFlag").setSelected(0)
fi

rem ' debug code
rem ' chkValue$ = str(sysgui!.getWindow(gb__win.detail_child_window).getControl("annualFlag").isSelected())
rem ' resp = msgbox("Annual Flag " + chkvalue$ ,0,"debug")

[Event Win=104.126 ID=286 Code=c0 <CHECK_OFF> (W104_126_C286_CHECK_OFF)]
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' the annual flag can be unset regardless of the value of the virtualFlag

msg$ = "Please confirm you are removing the license annual flag."
resp = msgbox(msg$,4+32+256,"Setting Annual License Flag")
if resp = 6 then
    setAnnualFlag = 0, unSetAnnualFlag=1
    gosub maintainAnnualFlag
    sysgui!.getWindow(gb__win.detail_child_window).getControl("annualFlag").setSelected(0) 
else
    sysgui!.getWindow(gb__win.detail_child_window).getControl("annualFlag").setSelected(1) 
fi

rem ' debug code
rem ' chkValue$ = str(sysgui!.getWindow(gb__win.detail_child_window).getControl("annualFlag").isSelected())
rem ' resp = msgbox("Annual Flag " + chkvalue$ ,0,"debug")

[Event Win=104.126 ID=286 Code=c1 <CHECK_ON> (W104_126_C286_CHECK_ON)]
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' we can not set the annual flag on if the virtual flag is already set on
if sysgui!.getWindow(gb__win.detail_child_window).getControl("virtualFlag").isSelected() then
    msg$ = "The Annaul Flag can not be set on if the Virtual Flag is already set on. Plesed set the Virtual Flag off before setting the Annual Flag on."
    resp = msgbox(msg$,0+6,"Virtual Flag is Set")
    sysgui!.getWindow(gb__win.detail_child_window).getControl("annualFlag").setSelected(0)
else
    if snm01.product$ = "PR5" or snm01.product$ = "VP5" then
        msg$ = "PR5 and VP5 virtual licenses must use BLM 10.0 or greater. "
    else
        msg$ = ""
    fi
    msg$ = msg$ + "Please confirm you are setting this license to annual."
    resp = msgbox(msg$,4+32+256,"Setting Annaul License Flag")
    if resp = 6 then
        setAnnualFlag = 1, unSetAnnualFlag=0
        gosub maintainAnnualFlag
        sysgui!.getWindow(gb__win.detail_child_window).getControl("annualFlag").setSelected(1)
    else
        sysgui!.getWindow(gb__win.detail_child_window).getControl("annualFlag").setSelected(0)
    fi
fi

rem ' debug code
rem ' chkValue$ = str(sysgui!.getWindow(gb__win.detail_child_window).getControl("annualFlag").isSelected())
rem ' resp = msgbox("Annual Flag " + chkvalue$ ,0,"debug")

[Event Win=104.126 ID=290 Code=f0 <LOST_FOCUS> (W104_126_C290_LOST_FOCUS)]
rem ' Control lost focus
if cvs(snm01.serial_nbr$,3)="" then return
cw_sn_detail$=fngb__get_fields$(cw_id_sn_detail$,cw_sn_detail$,
:"available_support")
support=fnnum(cw_sn_detail.available_support$)
if support=snm01.avail_support then return
msg$=""
if support<0 or support>20 and security_level>7 then 
: msg$="Support must be 0 - 20"
if security_level<8 or msg$<>"" then
: support=snm01.avail_support;goto redisplay_support

i=msgbox("Confirm: Do you want to change support?",
:  4+32+256,"Change support to "+str(support))
if i=7 then support=snm01.avail_support;
: goto redisplay_support

snm01.avail_support=support,snm01$=field(snm01$)
writerecord(snm01,key=snm01.serial_nbr$,err=*next)snm01$;
: goto redisplay_support
msg$="Error "+str(err)+" trying to update record"

redisplay_support:
if msg$<>"" then i=msgbox(msg$,0,"Support Incident Change")
cw_sn_detail.available_support$=str(support)
cw_sn_detail$=fngb__put_fields$(cw_id_sn_detail$,cw_sn_detail$,
:"available_support")

[Event Win=104.126 ID=320 Code=N3:107 <GRID_DCLICK> (W104_126_C320_GRID_MOUSE_DOUBLE_CLICK)]
rem ' Notify Event - Grid - Grid Double Clicked (3)
rem ' gb__event! = cast(BBjGridDoubleClickEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()
rem ' Row is: gb__event!.getRow()
rem ' Column is: gb__event!.getColumn()
rem ' Point clicked: gb__event!.getXLocationInCell(), 
rem '     gb__event!.getYLocationInCell()
rem ' Cell boundaries: gb__event!.getCellBounds()
rem ' Meta keys: gb__event!.isShiftDown(), gb__event!.isControlDown()

gb__event! = bbjapi().getSysGui().getLastEvent()
col = gb__event!.getColumn()
row = gb__event!.getRow()
if col <> 1 then return

serialNumberWindow! = BBjAPI().getSysGui().getActiveWindow()
detailChildWIndow! = serialNumberWindow!.getChildWindow(126)
dd_invoice_number! = cast(BBjString, detailChildWindow!.getControl("transaction_history").getCell(row, col).getText())
dd_invoice_number$ = dd_invoice_number!.trim()
if dd_invoice_number$ = "" then return
if dd_invoice_number! = "0000000" then return

rem ' the invoice may have previously been owned by some other reseller and
rem ' has had onwershipt transferred to the current owner, so we can not rely on
rem ' the firm id and customer number in the serial number record
rem ' with the invoice number we'll track it down from invoice history

weOpenedART03 = 0
if art03 = 0 then
    call "ec_open::ART03"
    weOpenedART03 = 1
fi

found = 0
read record(art03, knum = 1, key = "01" + dd_invoice_number$, dom=*next)art03$; found = 1
if !found then
    read record(art03, knum = 1, key = "02" + dd_invoice_number$, dom=*next)art03$; found = 1
fi

if !found then 
    if weOpenedART03 then 
        close(art03)
        art03 = 0
    fi
    return
fi

tmm01key_hld$ = tmm01key$
tmm01key$ = art03.firm_id$ + art03.customer_nbr$ + "      "

action$ = "invoice_history"
misc$ = dd_invoice_number$

serialNumberWindow!.setVisible(0)

gosub basis_cust_call

if weOpenedART03 then 
    close(art03)
    art03 = 0
fi

serialNumberWindow!.setVisible(1)
detailChildWindow!.getControl("transaction_history").focus()
tmm01key$ = tmm01key_hld$
misc$ = ""
action$ = ""

[Event Win=104.126 ID=510 Code=e <EDIT_CHANGE> (W104_126_C510_EDIT_CHANGE)]
rem ' Edit control was modified

[Event Win=104.126 ID=510 Code=f0 <LOST_FOCUS> (W104_126_C510_LOST_FOCUS)]
rem ' Control lost focus
if cvs(snm01.serial_nbr$,3)="" then return
if security_level<8 then return
dim snt04$:fattr(snt04$)
snt04.serial_nbr$=snm01.serial_nbr$
snt04.feature$="BARISTA_RUNTIME"
readrecord(snt04,key=snt04$(1,50),dom=*next)snt04$
cw_sn_detail$=fngb__get_fields$(cw_id_sn_detail$,cw_sn_detail$,"barista_users")
barusr=fnnum(cw_sn_detail.barista_users$)
msg$=""
if barusr and snm01.product_rev$<>"8XX" then
  msg$="Serial # must be at Rev 8"
  goto redisplay_barista
fi
if snm01.active_flag$<>"Y" then
  msg$="Serial # is NOT Active"
  goto redisplay_barista
fi
if barusr>snm01.users then
  msg$="Too many users"
  goto redisplay_barista
fi
snt04.feature_rev$="8.0"
fl$=fattr(snt04$,"available"),fl=dec(fl$(10,2))
snt04.available$=fill(fl)
snt04.users=barusr
snt04$=field(snt04$)
k$=snt04$(1,50)
if barusr>0 then
  writerecord(snt04,key=k$)snt04$
else
  remove(snt04,key=k$,err=*next)
fi
redisplay_barista:
if msg$<>"" then i=msgbox(msg$,0,"Barista not valid")
rem cw_sn_detail.barista_users$=str(snt04.users)
rem cw_sn_detail$=fngb__put_fields$(cw_id_sn_detail$,cw_sn_detail$,"barista_users")
gosub show_sn

[Event Win=104.127 ID=101 Code=B <PUSH_BUTTON> (W104_127_C101_PUSH_BUTTON)]
rem ' Push button operated

lrContext = gb__event.context

gosub license_status
if license_status<1 then 
  print (gb__sysgui)'context'(lrContext),'disable'(reset_id,reset_reason_id)
  goto reset_button_end
fi
LET cw_sn_license$=fngb__get_fields$(cw_id_sn_license$,cw_sn_license$,"reset_reason")
LET temp$=cw_sn_license.reset_reason$
temp=pos($ff$=temp$)
if temp then temp=num(temp$(temp+1))
reset_code$=reset_code_list$(temp*2+1,2)
if reset_code$="??" then
  msg$="Please select a reason for this reset from the list box."
  i=msgbox(msg$,0,"Reset "+cvs(sn$,2))
  goto reset_button_end
fi
msg$="Confirm: Do you want to reset the status now?"

rem ' do we burn a support incident?
reduce_support=0
if (snm01.product$<>"DS5") then
    if (cvs(snm01.contract$,2)="" OR snm01.sam_active$="N") then
      reduce_support=1
    else
        rem ' or contract expxired
        if cvs(smc01.expire_on_dt$,3)="" OR smc01.expire_on_dt$ < date(0:"%Y%Mz%Dz")
            reduce_support=1
        fi
    fi
fi
if reduce_support then msg$=msg$+$0a$+"Support incident(s) will change from "+str(snm01.avail_support)+" to "+str(snm01.avail_support-1)+"."

rem ' confirm with the user
i=msgbox(msg$,4+32+256,"Reset "+cvs(sn$,2))
if i=7 then goto reset_button_end

if license_status_channel=are83 then
  extractrecord(license_status_channel,tim=5,key=license_status_key$,err=reset_button_end)are83$
  are83.license_cnt=0
  are83$=field(are83$)
  writerecord(license_status_channel,key=license_status_key$)are83$
else
  extractrecord(license_status_channel,tim=5,key=license_status_key$,err=reset_button_end)snt01$
  snt01.license_cnt=0
  snt01$=field(snt01$)
  writerecord(license_status_channel,key=license_status_key$)snt01$
fi
print (gb__sysgui)'context'(lrContext),'disable'(reset_id,reset_reason_id)
license_reset.serial_nbr$=snm01.serial_nbr$
license_reset.reset_date$=date(0:"%Y%Mz%Dz")
license_reset.reset_time$=date(0:"%Hz%mz%sz")
license_reset.reset_by$=uid$
license_reset.reset_to$="0"
license_reset.reset_code$=reset_code$
fl$=fattr(license_reset$,"available"),fl=dec(fl$(10,2))
license_reset.available$=fill(fl)
license_reset$=field(license_reset$)
writerecord(license_reset,key=license_reset.serial_nbr$+license_reset.reset_date$+license_reset.reset_time$)license_reset$

gosub license_history
cw_sn_license.license_history$=lbox$
cw_sn_license$=fngb__put_fields$(cw_id_sn_license$,cw_sn_license$,
:"license_history")
dim arm02$:fattr(arm02$)
readrecord(arm02,key=snm01.firm_id$+snm01.customer_nbr$+"  ",dom=*next)arm02$
new_reset=0
if arm02.allowed_resets and snm01.dist_reset>=arm02.allowed_resets then new_reset=1,snm01.dist_reset=1

if reduce_support then snm01.avail_support=snm01.avail_support-reduce_support
if reduce_support or new_reset then
  snm01$=field(snm01$)
  writerecord(snm01)snm01$
fi

cw_sn_detail.available_support$=str(snm01.avail_support)
cw_sn_detail$=fngb__put_fields$(cw_id_sn_detail$,cw_sn_detail$,
:"available_support")

reset_button_end:
cw_sn_license.reset_reason$=reset_reason_list$
cw_sn_license$=fngb__put_fields$(cw_id_sn_license$,cw_sn_license$,"reset_reason")

[Event Win=104.127 ID=107 Code=B <PUSH_BUTTON> (W104_127_C107_PUSH_BUTTON)]
rem ' Push button operated

sendlicense=0

sendlicense=1

generate_license:

cw_sn_license$=fngb__get_fields$(cw_id_sn_license$,cw_sn_license$,
:"host_id,authorization,host_name,email_fax,company_name,first_name,last_name,tamperResistant")

trl=cw_sn_license.tamperResistant
auth$=cvs(cw_sn_license.authorization$,3),host$=cvs(cw_sn_license.host_id$,3)
while 1
  p=pos($0a$=host$)
  if p=0 then break
  if p=1 then host$=host$(2);continue
  host$=host$(1,p-1)+host$(p+1)
wend
hostToken$ = host$
isBLSLicense = 0
gosub lookupFullHostid
host$ = hostFull$

if len(auth$)<>10 then i=msgbox("Invalid authorization number",0,"");return
if auth$="TEMPORARY*" then host$="1234567890ab"
temp$=cvs(cw_sn_license.email_fax$,3)
if temp$="" and sendlicense then return
hostname$=cvs(cw_sn_license.host_name$,3)
if pos("@"=temp$) then email$=temp$,fax$="",x$="Email" 
: else fax$=temp$,email$="",x$="Fax"
temp$="",i=1
while i<=len(fax$)
 if pos(fax$(i,1)="0123456789") then temp$=temp$+fax$(i,1)
 i=i+1
wend
fax$=temp$
msg$="Full Host id: "+host$+$0a$+"Host id Token: "+hostToken$+$0A$+"Authorization: "+auth$+$0a$+
:"Host name: "+hostname$
if trl then msg$ = msg$+$0a$+"Generate TRL License"
if sendlicense then msg$=x$+" to: "+fax$+email$+$0a$+msg$
rem ' i=msgbox(msg$,4+32+256,"Generate license")
if i=7 then return

rem ' bypass this
goto bypass_flexlic_direct_call
if trl then lic$="GEN TAMPER RESISTANT LICENSE" else lic$=""
call stbl("FLEXHOME")+"bin/flexlic.bbx",auth$,snm01.serial_nbr$,host$,lic$
host$ = hostFull$
if lic$="" then lic$="Error - no license generated"
i=msgbox(Lic$,0,"License result")
if pos("ERROR"=cvs(lic$,4)) or sendlicense=0 then goto show_license 
bypass_flexlic_direct_call:

platformName$ = INFO(3,4)
if platformName$ = "ip-172-30-0-15.us-west-2.compute.internal" then
    mailto$ = "license-test@addonsoftware.com"
else
    mailto$="license@basis.cloud"
fi
mailfrom$="customer-service@basis.cloud"
mailcc$=""
mailbcc$=""
mailsubject$="License"

mail$=""
mail$=mail$+"Company          : "+cvs(cw_sn_license.company_name$,3)+$0a$
mail$=mail$+"Last Name        : "+cvs(cw_sn_license.last_name$,3)+$0a$
mail$=mail$+"First Name       : "+cvs(cw_sn_license.first_name$,3)+$0a$
mail$=mail$+"Phone Number     : "+$0a$
mail$=mail$+"Fax Number       : "+fax$+$0a$
mail$=mail$+"Email Address    : "+email$+$0a$
mail$=mail$+"Host Name        : "+hostname$+$0a$
mail$=mail$+"Host ID          : "+host$+$0a$
mail$=mail$+"Serial Number    : "+cvs(snm01.serial_nbr$,3)+$0a$
mail$=mail$+"License Auth Num : "+auth$+$0a$
mail$=mail$+"License Delivery : "+x$+$0a$
mail$=mail$+"AutoResponderForceCheck: false"+$0A$
if trl then mail$=mail$+"UseTRL: true"+$0A$
if isBLSLicense then
    mail$=mail$+"bls: both"+$0A$
fi

resp = msgbox(mail$,1,"License Parameters")

if resp = 1 then
    call "sendEmail.src", mailfrom$, mailto$, mailcc$, mailbcc$, mailsubject$, mail$, ""
    msg$="License request sent to Autoresponder."
    endmail:
    i=msgbox(msg$,0,"License Parameters")
fi

show_license:
gosub license_history
cw_sn_license.license_history$=lbox$
cw_sn_license$=fngb__put_fields$(cw_id_sn_license$,cw_sn_license$,
:"license_history")

[Event Win=104.127 ID=109 Code=B <PUSH_BUTTON> (W104_127_C109_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

cw_sn_license$=fngb__get_fields$(cw_id_sn_license$,cw_sn_license$,
:"host_id,authorization,host_name,email_fax,company_name,first_name,last_name,tamperResistant")

temp$=cvs(cw_sn_license.email_fax$,3)

if temp$="" or pos("@" = temp$) = 0  then 
    sal_resp = msgbox("Please enter an email address.", 0, "No email address")
    return
fi

while pos(";" = temp$)
    p = pos(";" = temp$)
    temp$ = temp$(1,p-1) + "," + temp$(p+1)
wend
sal_to$ = temp$

dim sal_rec$:"number:c(10*=44),auth_key:c(10*=44),users:c(3*=44),order_no:c(7*=44),order_date:c(10*=44),part_num:c(22*=44),desc1:c(30*=44),rev_lvl:c(10*=44),system:c(48*=44),flex_feature:c(7*=44),flex_key:c(12*=44),flex_rev_lvl:c(10*=44),flex_host_id:c(10*=44),flex_expiry_date:c(11*=44),flex_checksum:c(2*=44),flex_users:c(10*=44),flex_number:c(10*=44),platform:c(1*=44),po:c(5*=44),cust:c(6)"

sal_rec.number$=cvs(snm01.serial_nbr$,3)
sal_rec.auth_key$=cvs(cw_sn_license.authorization$,3)
sal_rec.users$ = str(SNM01.USERS)
sal_rec.order_no$="0000000"
sal_rec.order_date$ = DATE(0:"%Mz/%Dz/%Y")
sal_rec.part_num$=snm01.product$ + snm01.platform$ + snm01.os_level$ + snm01.product_rev$ + snm01.license_type$


cw_sn_detail$=fngb__get_screen$(cw_id_sn_detail$,cw_sn_detail$)
sal_rec.desc1$=cw_sn_detail.product_desc$

rem ' get port id
sal_found=0
read record(csm03,key=firm$ + snm01.os_level$,dom=*next); sal_found=1
if sal_found
    sal_rec.system$ = "Port ID " + csm03.port_id$
fi

sal_rec.rev_lvl$=cw_sn_detail.revision_desc$

sal_rec.cust$=cvs(snm01.customer_nbr$,3)

sal_firm$=firm$
sal_toline$=""
sal_subjline$=""
sal_choice$ = "E"
sal_flex = 1
sal_html$=""

call "BLK.30",sal_firm$,sal_toline$,sal_subjline$,sal_choice$,sal_rec$,sal_flex,sal_html$

rem ' write the html
htmlfile$ = stbl("TEMP") + CVS(sal_rec.NUMBER$,2)+".htm"
attachfilelist$ = htmlfile$ +"|"
erase htmlfile$, err=*next
string htmlfile$
htmlfile = unt
open(htmlfile)htmlfile$
write record (htmlfile)sal_html$
close(htmlfile)

rem ' get the message text
msg_chan=unt
msg_text$=""
open(msg_chan)"BLK16.txt"
f1$=fin(msg_chan),s=dec(f1$(1,4))
readrecord(msg_chan,siz=s)msg_text$
close(msg_chan)
msg_text$ = msg_text$ + $0A$ + $0A$ + "basis2.bbj"

rem ' send email via email.bbj
sal_from$ = "BASIS Customer Service <customer-service@basis.cloud>"
sal_cc$ = "customer-service@basis.cloud"
sal_bcc$ = "kw5121151@gmail.com"; rem ' for monitoring
sal_subj$ = "BASIS Serial Number: " + cvs(snm01.serial_nbr$,3)

call "sendEmail.src", sal_from$, sal_to$, sal_cc$, sal_bcc$, sal_subj$, msg_text$, attachfilelist$

while pos("|" = attachfilelist$) <> 0 
ppos = pos("|" = attachfilelist$)
attachfile$ = attachfilelist$(1, ppos - 1)
attachfilelist$ = attachfilelist$(ppos + 1)
erase attachfile$,err=*next
wend

sal_resp = msgbox("License Authorization Form emailed to: " + sal_to$,0,"Form Sent")

[Event Win=104.127 ID=111 Code=B <PUSH_BUTTON> (W104_127_C111_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' xresp = msgbox("The Fulll Hostid is non-functional now. However, it will come into use as we implement the new BASIS License Server.", 0, "Notice")
rem ' return

rem ' load the hostid form if needed
if gb__win.fullHostid=-1 then 
    gb__context = fngb__window("110")
    win_id_fullHostid$=fngb__win_id$(gb__win.fullHostid)
    dim win_fullHostid$:fngb__template$(win_id_fullHostid$)
fi

new_context=gb__win.fullHostid
old_context=gb__win.serial_number

gosub show_window
print (gb__sysgui)'context'(new_context)

snLicense! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow(gb__win.serial_number))
snLicenseLic!= cast(BBjChildWindow, snLicense!.getChildWindow(127))
hostidToken! = cast(BBjCEdit, snLicenseLic!.getControl(103))
hostidToken$ = hostidToken!.getText()
hostidToken$ = cvs(hostidToken$,16)

hostIdType! = new HostIdConstants()
Hostid! = new HostId(hostIdType!.TOKEN(), hostidToken$)
extHostidWindow! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow(gb__win.fullHostid))
if Hostid!.exists() then
    extHostidWindow!.getControl("HostidToken").setText(Hostid!.getHostidToken())
    extHostidWindow!.getControl("hostidHash").setText(Hostid!.getHostidHash())
    extHostidWindow!.getControl("fullHostidText").setText(Hostid!.getHostidFull())
else
    extHostidWindow!.getControl("HostidToken").setText("")
    extHostidWindow!.getControl("hostidHash").setText("")
    extHostidWindow!.getControl("fullHostidText").setText("")
    resp = msgbox(hostidToken$ + "is not in the HostId cross reference table.", 0, "Not Found")
fi

[Event Win=104.127 ID=135 Code=B <PUSH_BUTTON> (W104_127_C135_PUSH_BUTTON)]
rem ' Push button operated
sendlicense=1
gosub generate_license

[Event Win=104.127 ID=136 Code=N2:19 <LIST_SELECT> (W104_127_C136_LIST_SELECT)]
rem ' Notify Event - List Button Control - List Selection

[Event Win=104.127 ID=137 Code=B <PUSH_BUTTON> (W104_127_C137_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

print(gb__sysgui)'context'(gb__win.serial_number),'hide'(0)

pass_sn$ = cvs(snm01.serial_nbr$, 3)
call "logExView.bbj", pass_sn$

print(gb__sysgui)'context'(gb__win.serial_number),'show'(0)
print (gb__sysgui)'context'(gb__win.serial_number),'flush'

[Event Win=104.127 ID=138 Code=B <PUSH_BUTTON> (W104_127_C138_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

licRSN$ = serial_number!.getControl("Serial_number").getText()

gosub showLicRegistrations

[Event Win=104.127 ID=139 Code=B <PUSH_BUTTON> (W104_127_C139_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

logfSN$ = serial_number!.getControl("Serial_number").getText()

gosub showLogFailures

[Event Win=104.127 ID=140 Code=B <PUSH_BUTTON> (W104_127_C140_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' confirn they want to remove the BLS block

msgtxt$ = "Removing " + cvs(sn$,3) + " from the return to BLM Block File will allow this license to be registered with the BLM after it was previously registerd with the BLS. Do you wish to continue?"
resp = msgbox(msgtxt$, 4 + 32 + 256, "Confirm the Removal of the Block")
if resp = 6 then
    call "ec_open::SNM01_BLS"
    remove (snm01_bls, key = sn$)
    
    rem ' write a comment to the snm04 table
    if cvs(uid$,3) <> "+ON" and cvs(uid$,3) <> "KW" then
        xComment$ = "Return to BLM Block removed by " + uid$ + " " + date(0:"%Y%Mz%Dz")
        gosub write_comment
    fi
    
    resp = msgbox(cvs(snm01.serial_nbr$,3) + " has been removed for the BLM Block File. It may now be registered with the BLM.", 0, "No Longer Limited to the BLS")

    gosub enable_disable_removeBLSBlkBtn    

    close(snm01_bls,err=*next)
fi

return

[Event Win=104.133 ID=101 Code=e <EDIT_CHANGE> (W104_133_C101_EDIT_CHANGE)]
rem ' Edit control was modified
ctl_id=num(fattr(cw_sn_sam$,"contract_search","ID"))
print (gb__sysgui)'context'(gb__win.sam_child_window),'enable'(ctl_id)

[Event Win=104.133 ID=102 Code=B <PUSH_BUTTON> (W104_133_C102_PUSH_BUTTON)]
rem ' Push button operated
print (gb__sysgui)'setcursor'(3)
cw_sn_sam$=fngb__get_fields$(cw_id_sn_sam$,cw_sn_sam$,"contract")
c=fnnum(cw_sn_sam.contract$)
if c<1 or c>999999 then return
contract$=str(c:"000000")
gosub show_sam
ctl_id=num(fattr(cw_sn_sam$,"contract_search","ID"))
print (gb__sysgui)'flush','disable'(ctl_id),'setcursor'(0)

[Event Win=104.133 ID=117 Code=B <PUSH_BUTTON> (W104_133_C117_PUSH_BUTTON)]
rem ' Push button operated
print (gb__sysgui)'setcursor'(3)
sn_list$="",rows=0
dim tempsn$:fattr(snm01$)
read(snm01,key=smc01.firm_id$+smc01.customer_nbr$,knum=1,dom=*next)
read_samsn:
read record(snm01,end=samsn_end)tempsn$
if tempsn.firm_id$+tempsn.customer_nbr$<>smc01.firm_id$+smc01.customer_nbr$ then
: goto samsn_end
if tempsn.contract$<>smc01.contract$ or tempsn.active_flag$="N" 
: then goto read_samsn
if tempsn.sam_active$<>"N" then tempsn.sam_active$="Y"
sn_list$=sn_list$+cvs(tempsn.serial_nbr$,3)+$0a$+tempsn.sam_active$+$0a$
rows=rows+1
goto read_samsn
samsn_end:
if rows=0 then sn_list$=fill(6,$0a$),rows=3
while mod(rows,3)
  sn_list$=sn_list$+$0a$+$0a$
  rows=rows+1
wend
rows=rows/3
ctl_id=num(fattr(cw_sn_sam$,"all_sns","ID"))
temp$=sendmsg(gb__sysgui,ctl_id,67,rows,$$,gb__win.SAM_CHILD_WINDOW)
temp$=sendmsg(gb__sysgui,ctl_id,87,0,sn_list$,gb__win.SAM_CHILD_WINDOW)
temp$=sendmsg(gb__sysgui,ctl_id,32,0,$$,gb__win.SAM_CHILD_WINDOW)
print (gb__sysgui)'flush','setcursor'(0)

[Event Win=104.133 ID=119 Code=B <PUSH_BUTTON> (W104_133_C119_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

drsn$ = cvs(snm01.serial_nbr$, 3)

ecm01.password$=""
readrecord(ecm01, key = snm01.firm_id$+snm01.customer_nbr$+"**",dom=*next)ecm01$
if cvs(ecm01.password$, 3) = ""
    drfirm$ = ""
    drcust$ = ""
    drpass$ = ""
else
    drfirm$ = snm01.firm_id$
    drcust$ = snm01.customer_nbr$
    drpass$ = ecm01.password$
fi    

if info(3,6) = "5" then
    rem ' running BUI
    Command$="/usr/local/bbj/bin/bbj -tNIO -c/mnt/data/basis/bbj/client-config/basisaon_config.web -q directRenew.bbj - " + drsn$ + " " + drfirm$ + " " + drcust$ + " " + drpass$ + " &"
else
    Command$="/usr/local/bbj/bin/bbj -tT2 -c/mnt/data/basis/bbj/client-config/basisaon_config.web -q directRenew.bbj - " + drsn$ + " " + drfirm$ + " " + drcust$ + " " + drpass$ + " &"
fi
a=scall(command$)

[Event Win=104.133 ID=120 Code=N5:19 <LIST_CHANGE> (W104_133_C120_LIST_CHANGE)]
rem ' Notify Event - List Control - List Changed (5)
rem ' gb__event! = cast(BBjListChangeEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rtIndex = renewTypeListButton!.getSelectedIndex()
rtIndex = rtIndex + 1
renTyp$ = renTypMast$(rtIndex,1)

if renTyp$ = "A" then
    msg$ = "The Active renew type means that when an auto-generated renewal order is created for this contract the expiration date will roll when the invoice is delivered." 
else
    if renTyp$ = "Y" then
        msg$ = "The Proforma renew type means that when an auto-generated renewal order is created for this contract the expiration date will not roll "
        msg$ = msg$ + "until the invoice is paid or a PO Number is added to the invoice via DIRECT-RENEW. However, if Active Renew is specified for the "
        msg$ = msg$ + "customer globally an active renew order will be generated and the expiration date will roll when the invoice is delivered."
    else
        msg$ = "Selecting No Renew means that this contract will not auto renew either via a Proforma invoice or an Active Renew invoice regardless of "
        msg$ = msg$ + " the Active Renew setting for the customer."
    fi
fi
resp = msgbox(msg$,0,"Renew Type Selected")

extract record(smc01,key=contract$)smc01$
smc01.renew_flag$ = renTyp$
smc01$ = field(smc01$)
write record(smc01,key=contract$)smc01$
gosub show_sam

[Event Win=104.138 ID=102 Code=B <PUSH_BUTTON> (W104_138_C102_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()


if hasHostIdLimit then
    rem ' removing host id Limit
    xhostid$ = cvs(hostidLimitedTo!.getText(),3)
    hostidLimitedTo!.setText("")
    
    remove (sn_limit_hostid, key = snm01.serial_nbr$)

    xComment$ = uid$ + " del limit " + xhostid$ + " " + date(0:"%Mz/%Dz/%Y")
    gosub write_comment

    hasHostIdLimit = 0
    gosub reverse_hostIdLimitBtn

else
    rem ' adding host id limit

    ctl_id = num(fattr(cw_host_ids$, "hostids_seq", "ID"))
    row$ = sendmsg(gb__sysgui, ctl_id, 45, 0, $$, gb__win.HOST_IDS_CHILD_WINDOW)
    row = dec(row$)

    rem ' row is zero based

    if row > -1 then
        rows$ = hostidsseq$
        for x = 1 to row + 1
            endthisrow = pos($0a$ = rows$, 1, 2)
            thisrow$ = rows$(1, endthisrow)
            rows$ = rows$(endthisrow + 1)
        next x
        firstsep = pos($0a$ = thisrow$)
        thisrow$ = thisrow$(firstsep + 1)
        thisrow$ = thisrow$(1, len(thisrow$) - 1)
        thishostid$ = thisrow$ 

        hostidLimitedTo!.setText(cvs(thishostid$,3))

        rem ' write the record
        dim sn_limit_hostid$:fattr(sn_limit_hostid$)
        sn_limit_hostid.serial_nbr$ = snm01.serial_nbr$
        sn_limit_hostid.hostid$ = cvs(thishostid$,3)

        write record (sn_limit_hostid)sn_limit_hostid$

        xComment$ = uid$ + " set limit " + cvs(thishostid$,3) + " " + date(0:"%Mz/%Dz/%Y")
        gosub write_comment

        hasHostIdLimit = 1
        gosub reverse_hostIdLimitBtn
    fi
fi

return

write_comment:
    seq = 1

    read record(snm04, key = cvs(snm01.serial_nbr$,3), dom=*next)snm04$

    while seq < 100
        read record(snm04, end=*break)snm04$
        if snm04.serial_nbr$=snm01.serial_nbr$ then 
            seq = NUM(snm04.comments_seq$) + 1
            continue
        fi
        snm04.serial_nbr$=snm01.serial_nbr$
        snm04.comments_seq$ = str(seq:"00"),seq=100
        snm04.cmt_line$=xComment$
        snm04$=field(snm04$)
        write record (snm04,key = snm04$(1,22))snm04$
    wend

return

[Event Win=105 ID=0 Code=X <WIN_CLOSE> (W105_C0_WIN_CLOSE)]
rem ' Close Button Operated
goto ic_cancel

[Event Win=105 ID=1 Code=B <PUSH_BUTTON> (W105_C1_PUSH_BUTTON)]
rem ' Push button operated
print (gb__sysgui)'setcursor'(3)
win_ic_select$=fngb__get_fields$(win_id_ic_select$,win_ic_select$,"invoice")
temp$=str(fnnum(win_ic_select.invoice$):"0000000")

art03k$=bsgfirm$+temp$,unbilled_lbox$="",readnxt=1,temp=0
readrecord(art03,key=art03k$,knum=1,dom=*next)art03$;readnxt=0
bsg_art03:
if readnxt then readrecord(art03,end=bsg_art03_end)art03$
readnxt=1
if art03.firm_id$<>bsgfirm$ then goto bsg_art03_end
if art03.invoice_type$="V" then goto bsg_art03; rem ' Skip voids
unbilled_lbox$=unbilled_lbox$+art03.ar_inv_nbr$+$0a$
temp=temp+1;if mod(temp,100) then goto bsg_art03
i=msgbox("Continue reading invoices?",4+32,str(temp)+" invoices read")
if i=6 then goto bsg_art03
bsg_art03_end:

win_ic_select.unbilled_lbox$=unbilled_lbox$
win_ic_select.invoice$=temp$
win_ic_select$=fngb__put_fields$(win_id_ic_select$,win_ic_select$,
:"unbilled_lbox,invoice")
print (gb__sysgui)'setcursor'(0)

[Event Win=105 ID=104 Code=B <PUSH_BUTTON> (W105_C104_PUSH_BUTTON)]
rem ' Push button operated

lbox1$="unbilled_lbox",lbox2$="selected_lbox"
gosub lbox_change
if changecount=0 then return

win_ic_select.selected_lbox$=list2$
win_ic_select.unbilled_lbox$=list1$
win_ic_select$=fngb__put_fields$(win_id_ic_select$,win_ic_select$,
: "unbilled_lbox,selected_lbox")
return

lbox_change:
list1$="",list2$=""
ctl_id=num(fattr(win_ic_select$,lbox1$,"ID"))
changelist$=ctrl(gb__sysgui,ctl_id,1,gb__win.ic_select)
temp=len(changelist$)
if temp and changelist$(temp,1)<>$0a$ then changelist$=changelist$+$0a$
changecount=pos($0a$=changelist$,1,0)
if changecount=0 then return
list1$=ctrl(gb__sysgui,ctl_id,7,gb__win.ic_select)
ctl_id=num(fattr(win_ic_select$,lbox2$,"ID"))
list2$=ctrl(gb__sysgui,ctl_id,7,gb__win.ic_select)
tmplist$=""
for a=1 to changecount
if a=1 then x=1 else x=pos($0a$=changelist$,1,a-1)+1
p=pos($0a$=changelist$,1,a),y=p-x+1
if pos(changelist$(x,y)=list2$) then goto list_delete
tmplist$=tmplist$+changelist$(x,y)
list2$=list2$+changelist$(x,y)
list_delete:
temp=pos(changelist$(x,y)=list1$),q=len(changelist$(x,y))
if temp=1 then list1$=list1$(q+1)
:  else list1$=list1$(1,temp-1)+list1$(temp+q)
next a
list2$=ssort(list2$,8)
changecount=pos($0a$=tmplist$,1,0)
return

[Event Win=105 ID=105 Code=B <PUSH_BUTTON> (W105_C105_PUSH_BUTTON)]
rem ' Push button operated

lbox1$="selected_lbox",lbox2$="unbilled_lbox"
gosub lbox_change
temp$=changelist$
gosub remove_art_recs
win_ic_select.selected_lbox$=list1$
win_ic_select.unbilled_lbox$=list2$
win_ic_select$=fngb__put_fields$(win_id_ic_select$,win_ic_select$,
:  "unbilled_lbox,selected_lbox")

[Event Win=105 ID=106 Code=B <PUSH_BUTTON> (W105_C106_PUSH_BUTTON)]
rem ' Push button operated

if gb__win.IC_INVOICE=-1 then
    gb__context = fngb__window("106")
    win_id_ic_invoice$=fngb__win_id$(gb__win.ic_invoice)
    dim win_ic_invoice$:fngb__template$(win_id_ic_invoice$)
fi

win_ic_select$=fngb__get_fields$(win_id_ic_select$,win_ic_select$,
: "selected_lbox")
temp$=win_ic_select.selected_lbox$
if len(temp$)=0 then return
total_ic_charge=0
while len(temp$)>6
k2$=bsgfirm$+temp$(1,7),temp$=temp$(9),k99$=icfirm$+k2$(3)

rem ' Don't recalculate & rewriterecords already in I/C part of file, just get total charges
found=0
readrecord(art03,key=k99$,knum=1,dom=*next)art03$;found=1
if found then total_ic_charge=total_ic_charge+art03.reserved_num_1;
: continue

readrecord(art03,key=k2$,knum=1)art03$
art03.reserved_num_1=0,curdisc=0
readrecord(arm10,key=art03.firm_id$+"I"+art03.disc_code$,dom=*next)arm10i$;curdisc=arm10i.disc_percent
k$=art03$(1,17),art03.firm_id$=icfirm$
read(art13,key=k$,dom=*next)
art_write:
k13$=key(art13,end=art_write_end)
if pos(k$=k13$)<>1 then goto art_write_end
art13rec=0,art73rec=0,samfactor=-1
readrecord(art13,key=k13$,dom=*next)art13$;art13rec=1
art13.std_list_prc=0, art13.reserved_num_1=0, art13.reserved_num_2=365

rem ' I believe that there is no requirement for the RNT Renew or DVK Renew here
if pos("SAM RENEW"=cvs(art03.ar_po_number$,4)) then
: art13.sam_renew$="Y" else art13.sam_renew$=" "

readrecord(art73,key=k13$,dom=*next)art73$;art73rec=1
if art13rec and art73rec then
: gosub price_calc; 
: art13.std_list_prc=listprice,
: art13.reserved_num_1=ic_price,
: art13.reserved_num_2=samfactor
art13.firm_id$=icfirm$
art73.firm_id$=icfirm$

rem ' map the distribution code
rem ' art13.dist_code$="IC"
rem ' if pos("SM"=art73.type_of_sale$) then art13.dist_code$="IS"
gosub map_dist_code

if art13rec then art13$=field(art13$);
: writerecord(art13,key=icfirm$+k13$(3))art13$
if art73rec then writerecord(art73,key=icfirm$+k13$(3))art73$
total_ic_charge=total_ic_charge+art13.reserved_num_1
art03.reserved_num_1=art03.reserved_num_1+art13.reserved_num_1
read(art13,key=k13$)
goto art_write
art_write_end:
art03$=field(art03$)
writerecord(art03,key=art03$(1,20))art03$
wend

win_ic_invoice$=fngb__get_screen$(win_id_ic_invoice$,win_ic_invoice$)
win_ic_invoice.invoice$=win_ic_select.selected_lbox$(1,7)
line_no$=""
gosub show_invoice
ctl_id=num(fattr(win_ic_invoice$,"invoice","ID"))
new_context=gb__win.ic_invoice
old_context=gb__win.ic_select
gosub show_window
print (gb__sysgui)'context'(gb__win.ic_invoice),'flush','focus'(ctl_id)

return

show_invoice:
k$=icfirm$+cvs(win_ic_invoice.invoice$,3)
readrecord(art03,key=k$,knum=1,dom=show_invoice_end)art03$
win_ic_invoice.invoice_date$="Invoice date: "+fnaondate$(art03.invoice_date$)
win_ic_invoice.order_date$="Order date: "+fnaondate$(art03.order_date$)
readrecord(arm01,key=bsgfirm$+art03.customer_nbr$,dom=*next)arm01$
win_ic_invoice.cust$="Customer: "+art03.customer_nbr$+" "+arm01.cust_name$
temp$="",k13$=art03$(1,17)
read(art13,key=k13$,dom=*next)

show_lines:
readrecord(art13,end=show_invoice_end)art13$
if pos(k13$=art13$)<>1 then goto show_invoice_end
item$=art13.item_number$, qty=art13.qty_ordered, usr=0,type$="   "
if cvs(item$,3)="" then item$=art13.order_memo$
art73rec=0;readrecord(art73,key=art13$(1,20),dom=*next)art73$;art73rec=1
if art73rec then usr=art73.users, type$=art73.type_of_sale$
price$=" ; Euro price"+str(art13.ext_price:mask$)+" ; I/C Price $"+
: str(art13.reserved_num_1:mask$)
if qty then qty$=" ; Qty "+str(qty:"-####") else qty$=" "
if usr then usr$=" ; Users "+str(usr:"-####") else usr$=" "
if art13.line_code$="M" then price$="" else 
: if line_no$="" then line_no$=art13.line_number$
temp$=temp$+art13.line_number$+" "+item$+"  "+type$+qty$+usr$+price$+$0a$
goto show_lines
show_invoice_end:
i=-1
p=pos(line_no$=temp$); if p=1 then i=0
p=pos($0a$+line_no$=temp$)
if p then i=pos($0a$=temp$(1,p),1,0)
if i>=0 then temp$=temp$+$ff$+str(i)
win_ic_invoice.line_lbox$=cvs(temp$,32)
gosub show_edit_fields
win_ic_invoice$=fngb__put_screen$(win_id_ic_invoice$,win_ic_invoice$)
return

price_calc:
dscnt=1; if art73.type_of_sale$="RIF" or art73.type_of_sale$="TSI" then dscnt=0
rem ' added the test here for the 100% discount on the HeimBAS account
if (1-curdisc*dscnt/100) = 0 then
    price = 0
else
    price=art13.unit_price/(1-curdisc*dscnt/100)
fi
listprice=price/eurorate*art13.qty_ordered
rem ' newdisc is the BSG discount it is never 100%
ic_price=listprice*(1-newdisc*dscnt/100)
return

show_edit_fields:
read record(art13,key=art03$(1,17)+line_no$,dom=show_edit_fields_end)art13$
art73rec=0
read record(art73,key=art03$(1,17)+line_no$,dom=*next)art73$;art73rec=1
win_ic_invoice.contract$=" ",win_ic_invoice.samfactor$="365"
if art73rec then readrecord(smc01,key=art73.contract$,dom=*next)smc01$;
: win_ic_invoice.contract$=art73.contract$+" "+smc01.annual_dt$(5,2)+"/"+
: smc01.annual_dt$(7,2)+"/"+smc01.annual_dt$(1,4),
: win_ic_invoice.samfactor$=str(art13.reserved_num_2)
win_ic_invoice.line_no$=line_no$
win_ic_invoice.dist_code$=art13.dist_code$
win_ic_invoice.euro_price$=str(art13.ext_price:mask$)
win_ic_invoice.dollar_price$=str(fneuro_to_dollar(art13.ext_price):mask$)
win_ic_invoice.list_price$=str(art13.std_list_prc:mask$)
win_ic_invoice.ic_price$=str(art13.reserved_num_1:mask$)
win_ic_invoice.grand_total$=str(total_ic_charge:mask$)
win_ic_invoice.ic_total$=str(art03.reserved_num_1:mask$)
ctl_id=num(fattr(win_ic_invoice$,"samfactor","ID"))
ct=dec(ctrl(gb__sysgui))
print(gb__sysgui)'context'(gb__win.ic_invoice)
if win_ic_invoice.contract$<>" " and pos("SM"=smc01.contr_type$) then 
: print(gb__sysgui)'enable'(ctl_id)
: else print(gb__sysgui)'disable'(ctl_id)
print(gb__sysgui)'context'(ct)
show_edit_fields_end:
return

[Event Win=105 ID=107 Code=B <PUSH_BUTTON> (W105_C107_PUSH_BUTTON)]
rem ' Push button operated

ic_cancel:
while len(tchn$)>2
  x=num(tchn$(1,3)),tchn$=tchn$(4)
  close(x,err=*next)
wend
firm$=holdfirm$
rem ctl_id=num(fattr(win_main$,"exit","ID"))
new_context=gb__win.ops_menu
old_context=gb__win.ic_select
gosub show_window
print (gb__sysgui)'context'(gb__win.ops_menu),'flush'

[Event Win=105 ID=110 Code=B <PUSH_BUTTON> (W105_C110_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' when the intercompany invoice is created an M is written into 
rem ' reserved_str_1 in the table ARE03 (order/invoice header)
rem ' this causes the invoice to print with memo lines only. 
rem ' the flag must be cleared to print the full invoice

read record(are03, key="01", dom=*next)are03$

flagCleared = 0

while 1
    let k$ = key(are03, end=*break)

    read record(are03, key=k$)are03$

    if cvs(are03.reserved_str_1$,3) = "" then continue
    
    if cvs(are03.reserved_str_1$,3) <> "M" then continue

    rem ' clear the flag
    are03.reserved_str_1$ = ""
    are03$ = field(are03$)

    msg$ = "Clear the M flag from order: " + are03.order_number$ + ", invoice number: " + are03.ar_inv_nbr$ + "?"
    resp = msgbox(msg$, 4, "Clear Flag")
    
    if resp = 6 then
        flagCleared = flagCleared + 1
        write record(are03, key=k$)are03$
    fi

wend

if flagCleared = 0 then
    resp = msgbox("There were no flags to clear.",0,"None Cleared.")
else
    if flagCleared = 1 then
        resp = msgbox("The flag was cleared from 1 order/invoice.",0,"Flag Cleared")
    else
        resp = msgbox("The flag was cleared from 2 orders/invoices.",0,"Flag Cleared")
    fi
fi

rem ' reposition key pointer
read record(are03, key="01", dom=*next)are03$

[Event Win=106 ID=0 Code=X <WIN_CLOSE> (W106_C0_WIN_CLOSE)]
rem ' Close Button Operated

goto ic_invoice_exit

[Event Win=106 ID=102 Code=B <PUSH_BUTTON> (W106_C102_PUSH_BUTTON)]
rem ' Push button operated

readdir=-1
gosub next_bsg_invoice

[Event Win=106 ID=103 Code=B <PUSH_BUTTON> (W106_C103_PUSH_BUTTON)]
rem ' Push button operated
readdir=1
next_bsg_invoice:
gosub rewrite_art13
win_ic_invoice$=fngb__get_fields$(win_id_ic_invoice$,win_ic_invoice$,"invoice")
temp$=str(fnnum(win_ic_invoice.invoice$):"0000000")
if temp$=art03.ar_inv_nbr$ then readnext=1 else readnext=0
found=0
dim artmp$:fattr(art03$)
readrecord(art03,dir=readdir,knum=1,key=icfirm$+temp$,dom=*next)artmp$;found=1
if readnext or found=0 then found=0;
: readrecord(art03,dir=readdir,err=*next)artmp$;found=1
if found=0 or artmp.firm_id$<>icfirm$ then found=0, 
: win_ic_invoice.invoice$=art03.ar_inv_nbr$
: else win_ic_invoice.invoice$=artmp.ar_inv_nbr$
win_ic_invoice$=fngb__put_fields$(win_id_ic_invoice$,win_ic_invoice$,"invoice")
if found then line_no$=""; gosub show_invoice
print (gb__sysgui)'flush'

[Event Win=106 ID=108 Code=l0 <LIST_CLICK> (W106_C108_LIST_CLICK)]
rem ' Click in list box

gosub rewrite_art13
ctl_id=num(fattr(win_ic_invoice$,"line_lbox","ID"))
temp$=ctrl(gb__sysgui,ctl_id,1,gb__win.ic_invoice)
line_no$=temp$(1,3)
gosub show_edit_fields
win_ic_invoice$=fngb__put_fields$(win_id_ic_invoice$,win_ic_invoice$,
: "line_no,dist_code,euro_price,dollar_price,list_price,ic_price,ic_total,
: contract,samfactor,grand_total")

[Event Win=106 ID=118 Code=f0 <LOST_FOCUS> (W106_C118_LOST_FOCUS)]
rem ' Control lost focus
print (gb__sysgui)'setcursor'(3)
win_ic_invoice$=fngb__get_fields$(win_id_ic_invoice$,win_ic_invoice$,"samfactor")
samfactor=fnnum(win_ic_invoice.samfactor$)
if art13.reserved_num_2=samfactor then goto edit_samfactor_end
art73rec=0;readrecord(art73,key=art13$(1,20),dom=*next)art73$;art73rec=1
if art73rec=0 then goto edit_samfactor_end
gosub price_calc
win_ic_invoice.ic_price$=str(ic_price:mask$)
win_ic_invoice.list_price$=str(listprice:mask$)
win_ic_invoice$=fngb__put_fields$(win_id_ic_invoice$,win_ic_invoice$,
: "ic_price,list_price")
gosub rewrite_art13
line_no$=art13.line_number$
gosub show_invoice

edit_samfactor_end:
print (gb__sysgui)'setcursor'(0)

[Event Win=106 ID=120 Code=f0 <LOST_FOCUS> (W106_C120_LOST_FOCUS)]
rem ' Control lost focus
win_ic_invoice$=fngb__get_fields$(win_id_ic_invoice$,win_ic_invoice$,"dist_code")
ok=0,x$=cvs(win_ic_invoice.dist_code$,3)
readrecord(arm10,key=firm$+"D"+x$,dom=*next)arm10d$;ok=1
if ok then gosub rewrite_art13 else
: i=msgbox("Distribution code "+x$+" not found",0,"Invalid code")

win_ic_invoice.dist_code$=art13.dist_code$
win_ic_invoice$=fngb__put_fields$(win_id_ic_invoice$,win_ic_invoice$,"dist_code")

[Event Win=106 ID=127 Code=f0 <LOST_FOCUS> (W106_C127_LOST_FOCUS)]
rem ' Control lost focus

gosub rewrite_art13
line_no$=art13.line_number$
gosub show_invoice

[Event Win=106 ID=135 Code=B <PUSH_BUTTON> (W106_C135_PUSH_BUTTON)]
rem ' Push button operated

ic_invoice_exit:
new_context=gb__win.ic_select
old_context=gb__win.ic_invoice
gosub show_window
print (gb__sysgui)'context'(gb__win.ic_select),'flush'

[Event Win=106 ID=136 Code=B <PUSH_BUTTON> (W106_C136_PUSH_BUTTON)]
rem ' Push button operated
i=msgbox("Create I/C order now?",4+32+256,"Confirm")
if i<>6 then return
print (gb__sysgui)'setcursor'(3)

ok=0;extractrecord(ars10n,key=firm$+"N",tim=5,err=*next)ars10n$;ok=1
if ok=0 then 
  if err=0 then 
    wait 1
    retry 
  else
    print (gb__sysgui)'setcursor'(0)
    i=msgbox("Can't get next order number",0,"Error "+str(err))
    goto invoice_done
  fi
fi

o=ars10n.nxt_ord_nbr,ars10n.nxt_ord_nbr=ars10n.nxt_ord_nbr+1
rem i=ars10n.next_inv_nbr,ars10n.next_inv_nbr=ars10n.next_inv_nbr+1
ars10n$=field(ars10n$)
writerecord (ars10n,key=firm$+"N")ars10n$
dim are03$:fattr(are03$)
are03.firm_id$=firm$
are03.customer_nbr$=bsgcust$
are03.order_number$=str(o:"0000000")
are03.sequence_000$="000"
are03.invoice_type$="S"
are03.ord_inv_flag$="O"
are03.invoice_date$=fndate$(jul(0,0,0))
are03.ar_ship_date$=fndate$(jul(0,0,0)+1)
are03.reserved_str_1$="M "; rem ' Flag to print memo lines only on invoice
rem are03.ar_inv_nbr$=str(i:"0000000")
are03.ar_po_number$="I/C"
are03.slspsn_code$=arm02.slspsn_code$
are03.terms_code$=arm02.terms_code$
are03.rel_to_ship$="Y"
fl$=fattr(are03$,"reserved_str_2"),fl=dec(fl$(10,2))
are03.reserved_str_2$=fill(fl)
are03.disc_code$=arm02.disc_code$
are03.dist_code$=arm02.dist_code$
are03.ord_prt_flag$="N"
are03.ord_lock$="Y"; rem ' lock until all related records are updated
are03.message_code$=arm02.message_code$
are03.territory$=arm02.territory$
are03.date_ordered$=fndate$(jul(0,0,0))
are03.tax_code$=arm02.tax_code$
are03.pricing_code$=arm02.pricing_code$
are03.ord_taken_by$=uid$
are03.cash_sale$="N"
are03.tax_amount=0
are03.freight_amt=0
are03.discount_amt=0
are03.comm_percent=0
are03.taxable_amt=0
are03.comm_amt=0
are03.total_sales=total_ic_charge
are03.total_cost=0
are03_key$=are03$(1,20)
are03$=field(are03$)
writerecord (are03,key=are03_key$)are03$

grandtotal=0,linecount=0,temp$=""
read(art03,key=icfirm$,knum=1,dom=invoice_loop)
invoice_loop:
readrecord(art03,end=invoice_loop_end)art03$
if art03.firm_id$<>icfirm$ then goto invoice_loop_end
grandtotal=grandtotal+art03.reserved_num_1
k$=art03$(1,17),itot=0
read(art13,key=k$,dom=line_loop)
line_loop:
readrecord(art13,end=line_loop_end)art13$
if pos(k$=art13$)<>1 then goto line_loop_end
if art13.line_code$="M" or art13.reserved_num_1=0 then goto line_loop
itot=itot+art13.reserved_num_1,linecount=linecount+1,art73rec=0
readrecord(art73,key=art13$(1,20),dom=*next)art73$;art73rec=1
are13$=field(art13$)
are13$(1,17)=are03$(1,17)
are13.line_number$=str(linecount:"000")
are13.unit_price=art13.reserved_num_1
if are13.qty_shipped then 
: are13.unit_price=art13.reserved_num_1/are13.qty_shipped
are13.ext_price=art13.reserved_num_1
are13.reserved_num_1=0,are13.reserved_num_2=0,are13.std_list_prc=0
fl$=fattr(are13$,"reserved_str_2"),fl=dec(fl$(10,2))
are13.reserved_str_2$=fill(fl)
if are13.line_code$<>"S" then 
  x$=bsgfirm$+"E"+are13.line_code$+fill(23),lc$="X",gl$=""
  readrecord(arm10a,key=x$(1,4),dom=*next)x$
  rem 'if commissionable flag=Y, use code 1 & gl acct from code X  
  if x$(27,1)="Y" then read(arm10a,key=firm$+"EX",dom=*next)*,gl$;lc$="1"
  are13.line_code$=lc$
  are13.gl_acct$=gl$
fi 
are13$=field(are13$)
writerecord(are13,key=are13$(1,20))are13$
if art73rec=0 then goto line_loop
are73$=art73$,are73$(1,20)=are13$(1,20)
are73$=field(are73$)
writerecord(are73,key=are73$(1,20))are73$
if linecount<997 then goto line_loop
print (gb__sysgui)'setcursor'(0)
i=msgbox(str(linecount+2)+" lines written",0,"Order "+art03.order_number$+
: " terminating")
line_loop_end:
temp$=temp$+art03.ar_inv_nbr$+$0a$
if itot<>art03.reserved_num_1 then
  print (gb__sysgui)'setcursor'(0)
  i=msgbox(art03.ar_inv_nbr$+$0a$+str(art03.reserved_num_1)+$0a$+str(itot),0,"Totals don't match")
else 
  if itot=0 then goto invoice_loop
fi
Rem ' write memo line w/ total for this BSG invoice 
dim are13$:fattr(are13$)
linecount=linecount+2
are13.line_code$="M"
are13.item_number$=fill(20)
fl$=fattr(are13$,"reserved_str_2"),fl=dec(fl$(10,2))
are13.reserved_str_2$=fill(fl)
are13.order_memo$="I/C Charge Inv #"+art03.ar_inv_nbr$+str(itot:mask$)
are13.line_number$=str(linecount:"000")
are13$(1,17)=are03$(1,17),are13$=field(are13$)
writerecord(are13,key=are13$(1,20))are13$
goto invoice_loop
invoice_loop_end:
if grandtotal<>total_ic_charge then
  print (gb__sysgui)'setcursor'(0)
  i=msgbox(str(total_ic_charge)+$0a$+str(grandtotal),0,"Grand total doesn't match")
fi
are04.firm_id$=are03.firm_id$,are04.ord_inv_flag$="O"
are04.customer_nbr$=are03.customer_nbr$,are04.order_number$=are03.order_number$
are04$=field(are04$)
writerecord (are04,key=are04$(1,18))are04$
are43.firm_id$=are03.firm_id$
are43.customer_nbr$=are03.customer_nbr$
are43.order_number$=are03.order_number$
are43$=field(are43$)
writerecord (are43,key=are43$(1,17))are43$
are03.ord_lock$="N"
writerecord (are03,key=are03_key$)are03$
gosub remove_art_recs
print (gb__sysgui)'setcursor'(0)
i=msgbox("Order number "+are03.order_number$+" done.",0,"")
invoice_done:
print (gb__sysgui)'context'(gb__win.ic_invoice),'hide'(0)
goto ic_cancel

[Event Win=106 ID=145 Code=B <PUSH_BUTTON> (W106_C145_PUSH_BUTTON)]
rem ' Push button operated

[Event Win=107 ID=100 Code=B <PUSH_BUTTON> (W107_C100_PUSH_BUTTON)]
rem ' Push button operated

if gb__win.IC_SELECT=-1 then
    gb__context = fngb__window("105")
    win_id_ic_select$=fngb__win_id$(gb__win.ic_select)
    dim win_ic_select$:fngb__template$(win_id_ic_select$)
fi

call "ec_open::ART03"; tchn$=str(ART03:"000")
call "ec_open::ARE03"; tchn$=tchn$+str(ARE03:"000")
call "ec_open::ARE04"; tchn$=tchn$+str(ARE04:"000")
call "ec_open::ARE07"; tchn$=tchn$+str(ARE07:"000")
call "ec_open::ARE43"; tchn$=tchn$+str(ARE43:"000")
call "ec_open::ARE13"; tchn$=tchn$+str(ARE13:"000")
call "ec_open::ART13"; tchn$=tchn$+str(ART13:"000")
call "ec_open::ARE73"; tchn$=tchn$+str(ARE73:"000")
call "ec_open::ART73"; tchn$=tchn$+str(ART73:"000")
call "ec_open::ART83"; tchn$=tchn$+str(ART83:"000")
call "ec_open::IVM02"; tchn$=tchn$+str(IVM02:"000")
rem 'get templates, then close - arm10a already open
call "ec_open::ARM10D"; close(arm10d)
call "ec_open::ARM10I"; close(arm10i)
arm10=arm10a
call "ec_open::SYS01S"; sys01x=sys01s
dim sys01x$:"RECORD_ID:C(1),AVAILABLE:C(99*),EXCH_RATE:N(7*),PRECISION:N(7*),NUM1:N(1*),NUM2:N(1*)"
readrecord(sys01x,key="X")sys01x$
close(sys01x)
holdfirm$=firm$
firm$="01",icfirm$="99",bsgfirm$="02",bsgcust$="007688",mask$="-#,###,##0.00"
decimals=tcb(14)
readrecord(arm02,key=firm$+bsgcust$+"  ")arm02$
newdisc=0
readrecord(arm10,key=firm$+"I"+arm02.disc_code$,dom=*next)arm10i$;newdisc=arm10i.disc_percent
rem 'find Euro/dollar rate by comparing firm 01 and firm 02 price from tables
eurorate=1,p1=0,p2=0
readrecord(csm10,key=firm$+"BSFNEW",dom=*next)csm10$;p1=csm10.price[1]
readrecord(csm10,key=bsgfirm$+"BSFNEW",dom=*next)csm10$;p2=csm10.price[1]
precision 4
if p1 and p2 then eurorate=p2/p1
precision 2
gosub read_art03_ic
win_ic_select$=fngb__get_screen$(win_id_ic_select$,win_ic_select$)
win_ic_select.selected_lbox$=temp$
win_ic_select.unbilled_lbox$=""
win_ic_select.invoice$=""
win_ic_select$=fngb__put_screen$(win_id_ic_select$,win_ic_select$)

ctl_id=num(fattr(win_ic_select$,"invoice","ID"))
new_context=gb__win.ic_select
old_context=gb__win.ops_menu
gosub show_window
print (gb__sysgui)'context'(gb__win.ic_select),'flush','focus'(ctl_id)
return

read_art03_ic:
temp$=""
read(art03,knum=1,key=icfirm$,dom=art03_ic)
art03_ic:
readrecord(art03,end=art03_ic_end)art03$
temp$=temp$+art03.ar_inv_nbr$+$0a$
goto art03_ic
art03_ic_end:
return

[Event Win=107 ID=101 Code=B <PUSH_BUTTON> (W107_C101_PUSH_BUTTON)]
rem ' Push button operated
ops_call:
ctx=dec(ctrl(gb__sysgui))
dim loc$:"x:i(2),y:i(2),w:u(2),h:u(2)"
loc$=ctrl(gb__sysgui,0,0,ctx)
action$="credit_sam"
c$=str(arm10a:"000")+str(tmm01:"000")+$0a$+str(ctx:"000")+$0a$+str(loc.x:"0000")+str(loc.y:"0000")+$0a$+action$+$0a$
c$=c$+str(security_level:"000")+$0a$+uid$+$0a$+misc$+$0a$
call "ops_call.bbj",err=*next,c$

[Event Win=107 ID=102 Code=B <PUSH_BUTTON> (W107_C102_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

print(gb__sysgui)'context'(gb__win.ops_menu),'hide'(0)
call "ccLogView.bbj",""
print(gb__sysgui)'context'(gb__win.ops_menu),'show'(0)
print (gb__sysgui)'context'(gb__win.ops_menu),'flush'

return

[Event Win=107 ID=103 Code=B <PUSH_BUTTON> (W107_C103_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

print(gb__sysgui)'context'(gb__win.ops_menu),'hide'(0)
call "ccCustServInterface.bbj",""
print(gb__sysgui)'context'(gb__win.ops_menu),'show'(0)
print (gb__sysgui)'context'(gb__win.ops_menu),'flush'

[Event Win=107 ID=104 Code=B <PUSH_BUTTON> (W107_C104_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

print(gb__sysgui)'context'(gb__win.ops_menu),'hide'(0)
call "ordersReadyForEmail.bbj",""
print(gb__sysgui)'context'(gb__win.ops_menu),'show'(0)
print (gb__sysgui)'context'(gb__win.ops_menu),'flush'

[Event Win=107 ID=105 Code=B <PUSH_BUTTON> (W107_C105_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

if info(3,6) = "5" then
    rem ' running BUI
    Command$="/usr/local/bbj/bin/bbj -tNIO -c/mnt/data/basis/bbj/client-config/basisaon_config.web -q directRenew.bbj &"
else
    Command$="/usr/local/bbj/bin/bbj -tT2 -c/mnt/data/basis/bbj/client-config/basisaon_config.web -q directRenew.bbj &"
fi
a=scall(command$)

[Event Win=107 ID=200 Code=B <PUSH_BUTTON> (W107_C200_PUSH_BUTTON)]
rem ' Push button operated
new_context=gb__win.main
old_context=gb__win.ops_menu
gosub show_window
ctl_id=num(fattr(win_main$,"exit","ID"))
print (gb__sysgui)'context'(gb__win.main),'flush','focus'(ctl_id)

[Event Win=108 ID=101 Code=B <PUSH_BUTTON> (W108_C101_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub runDirectCommTest

[Event Win=108 ID=104 Code=B <PUSH_BUTTON> (W108_C104_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

new_context=gb__win.main
old_context=gb__win.directCommStatus

gosub show_window
print (gb__sysgui)'context'(new_context)

[Event Win=108 ID=106 Code=B <PUSH_BUTTON> (W108_C106_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub reloadDirectcommLog

win_directCommStatus.tailOfLog$ = tailOfLog$
win_directCommStatus$ = fngb__put_fields$(win_id_directCommStatus$,win_directCommStatus$,"tailOfLog")

[Event Win=108 ID=108 Code=B <PUSH_BUTTON> (W108_C108_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub emailDirectCommLog

[Event Win=109 ID=106 Code=c0 <CHECK_OFF> (W109_C106_CHECK_OFF)]
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

sysgui!.getWindow(gb__win.removeBackupLic).getControl("dissolveDeactivate").setSelected(0)
sysgui!.getWindow(gb__win.removeBackupLic).getControl("dissolveLeave").setSelected(1)

[Event Win=109 ID=106 Code=c1 <CHECK_ON> (W109_C106_CHECK_ON)]
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

sysgui!.getWindow(gb__win.removeBackupLic).getControl("dissolveDeactivate").setSelected(1)
sysgui!.getWindow(gb__win.removeBackupLic).getControl("dissolveLeave").setSelected(0)

[Event Win=109 ID=107 Code=c0 <CHECK_OFF> (W109_C107_CHECK_OFF)]
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

sysgui!.getWindow(gb__win.removeBackupLic).getControl("dissolveDeactivate").setSelected(1)
sysgui!.getWindow(gb__win.removeBackupLic).getControl("dissolveLeave").setSelected(0)

[Event Win=109 ID=107 Code=c1 <CHECK_ON> (W109_C107_CHECK_ON)]
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

sysgui!.getWindow(gb__win.removeBackupLic).getControl("dissolveDeactivate").setSelected(0)
sysgui!.getWindow(gb__win.removeBackupLic).getControl("dissolveLeave").setSelected(1)

[Event Win=109 ID=108 Code=B <PUSH_BUTTON> (W109_C108_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

cancel_remove_prod_backup_pair:

new_context=gb__win.serial_number
old_context=gb__win.removeBackupLic

gosub show_window
print (gb__sysgui)'context'(new_context)

[Event Win=109 ID=110 Code=B <PUSH_BUTTON> (W109_C110_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' dissolve it

if sysgui!.getWindow(gb__win.removeBackupLic).getControl("dissolveDeactivate").isSelected() then
    msg$ = "Are you sure you want to dissolve this Production/Backup License Pair and deactivate the backup license. Please note the backup license will not be usable after this action is taken."
    deactivate = 1
else
    msg$ = "Are you sure you want to dissolve this Production/Backup License Pair and convert the backup license into a full license usable on it's own?"
    deactivate = 0
fi

xresp = msgbox(msg$, 4 + 32 +256, "Dissolve a Production/Backup License Pair")
if  xresp = 7 then
    return
else
    rem ' do the work
    gosub remove_prod_backup_pair
    if record_deleted then
        rem ' reload the serial number form
        gosub cancel_remove_prod_backup_pair
        sysgui!.getWindow(gb__win.serial_number).getControl("Serial_number").setText(rem_prod_backup_pair$)
        gosub sn_search_button_pushed
    else
        return
    fi
fi

[Event Win=109 ID=111 Code=B <PUSH_BUTTON> (W109_C111_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

sn1$ = sysgui!.getWindow(gb__win.removeBackupLic).getControl("backupLicense").getText()
sn2$ = sysgui!.getWindow(gb__win.removeBackupLic).getControl("otherSN").getText()

sysgui!.getWindow(gb__win.removeBackupLic).getControl("backupLicense").setText(sn2$)
sysgui!.getWindow(gb__win.removeBackupLic).getControl("otherSN").setText(sn1$)

[Event Win=110 ID=103 Code=B <PUSH_BUTTON> (W110_C103_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

new_context=gb__win.serial_number
old_context=gb__win.fullHostid

gosub show_window
print (gb__sysgui)'context'(new_context)

extHostidWindow! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow(gb__win.fullHostid))
extHostidWindow!.getControl("HostidToken").setText("")
extHostidWindow!.getControl("hostidHash").setText("")
extHostidWindow!.getControl("fullHostidText").setText("")

Hostid! = null

[Event Win=111 ID=0 Code=X <WIN_CLOSE> (W111_C0_WIN_CLOSE)]
rem ' Window Closed
rem ' gb__event! = cast(BBjCloseEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__window! = gb__event!.getControl()

vendorFeatures!.setVisible(0)
serial_number!.setVisible(1)

[Event Win=111 ID=100 Code=B <PUSH_BUTTON> (W111_C100_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

vendorFeatures!.setVisible(0)
serial_number!.setVisible(1)

[Event Win=112 ID=100 Code=B <PUSH_BUTTON> (W112_C100_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

regFailures!.setVisible(0)
serial_number!.setVisible(1)

[Event Win=113 ID=100 Code=B <PUSH_BUTTON> (W113_C100_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

licRegistrations!.setVisible(0)
serial_number!.setVisible(1)


[Function (FNAddImageCtrl)]
rem ' -----------------------------------------------------------------
rem ' fnAddImageControl
rem ' -----------------------------------------------------------------
rem Function called to add an image control to the window

def fnAddImageControl!(x,y,width,height,image$)
sysgui! = BBjAPI().getSysGui()
imageManager! = sysgui!.getImageManager()

REM Determine if running in an Applet or Web Start
rem ' if info(3,6) = "2" or info(3,6) = "3" then
rem '     REM Running in an Applet or Web Start, load image from client jar
rem '     image! = imageManager!.loadImageFromClientJar(image$)
rem ' else
rem '     REM Running in an Applet or Web Start, load image server
    image! = imageManager!.loadImageFromFile(image$)
rem ' endif


window! = sysgui!.getWindow(sysgui!.getContext())
imageCtrl! = window!.addImageCtrl(window!.getAvailableControlID(),x,y,width,height,image!)

return imageCtrl!
fnend

[Function (arm10_list)]
rem ' -----------------------------------------------------------------
rem ' arm10_list
rem ' -----------------------------------------------------------------

arm10_list:
index=-1, codelen=2
on pos(record_id$="ABFIL") 
: goto arm10_list_end,arm10a,arm10b,arm10f,arm10i,arm10l
arm10a: code$=tmm01.terms_code$,temp_list$=terms_list$
if cvs(code$,3)="" then code$=default_terms_code$
gosub arm10_read;terms_list$=temp_list$
goto arm10_list_end
arm10b: code$=arm02.tax_code$,temp_list$=tax_list$
if cvs(code$,3)="" then code$=default_tax_code$
gosub arm10_read;tax_list$=temp_list$
goto arm10_list_end
arm10f: code$=tmm01.slsperson$,codelen=3,temp_list$=salesperson_list$
gosub arm10_read;salesperson_list$=temp_list$
goto arm10_list_end
arm10i: code$=tmm01.disc_code$,temp_list$=discount_list$
gosub arm10_read;discount_list$=temp_list$
code$=tmm01.disc_code_a$,temp_list$=discount_a_list$
gosub arm10_read;discount_a_list$=temp_list$
goto arm10_list_end
arm10l: code$=tmm01.cust_type$,codelen=3,temp_list$=""
if cvs(code$,3)="" then code$=default_customer_type$
gosub arm10_read;customer_type_list$=temp_list$
arm10_list_end:
return

arm10_read:
if temp_list$<>"" then goto arm10_loop_end
read(arm10a,key=firm$+record_id$,dom=arm10_loop)
arm10_loop:
read record (arm10a,end=arm10_loop_end)temp$
if temp$(1,3)<>firm$+record_id$ then goto arm10_loop_end
if record_id$="L" and (action$="add" and create_cust=0) or (action$="modify" and fnnum(tmm01.customer_nbr$)=0) then if pos(temp$(4,1)="MPR") or pos(temp$(4,3)="DSI,DRI") then goto arm10_loop
temp_list$=temp_list$+temp$(4,codelen)+"-"+cvs(temp$(4+codelen,20),3)+$0a$
goto arm10_loop
arm10_loop_end:
temp=pos(code$+"-"=temp_list$)
if temp then index=pos($0a$=temp_list$(1,temp),1,0)
temp=pos($ff$=temp_list$)
if temp then temp_list$=temp_list$(1,temp-1)
if index>=0 then temp_list$=temp_list$+$ff$+str(index)

return

[Function (basis_cust_call)]
rem ' -----------------------------------------------------------------
rem ' basis_cust_call
rem ' -----------------------------------------------------------------

basis_cust_call:
if security_level<1 and pos(action$="contacts,bcomm,comments")=0 then return
if cvs(tmm01key$,3)="" and action$<>"search" then return
call_pgm$="basis_cust.bbj"
if action$="events" then call_pgm$="basis_events.bbj"
c$=str(tmm01:"000")+str(tmm02:"000")+str(tmm03:"000")+str(tmm05:"000")
c$=c$+str(ecm01:"000")+str(states:"000")+str(country:"000")+str(arm10a:"000")
c$=c$+str(arm02:"000")+str(arm06:"000")+str(sym02:"000")+$0a$
ctx=dec(ctrl(gb__sysgui))
dim loc$:"x:i(2),y:i(2),w:u(2),h:u(2)"
loc$=ctrl(gb__sysgui,0,0,ctx)
c$=c$+str(ctx:"000")+$0a$+str(loc.x:"0000")+str(loc.y:"0000")+$0a$+action$+$0a$
c$=c$+tmm01key$+$0a$+str(security_level:"000")+$0a$+uid$+$0a$+misc$+$0a$
call call_pgm$,err=*next,c$
if action$="contacts" then
  readrecord(tmm01,knum=0,key=tmm01key$,dom=*NEXT)tmm01$
  win_customer.main_contact$=cvs(tmm01.cont_name$,3)
  win_customer$=fngb__put_fields$(win_id_customer$,win_customer$,"main_contact")
  ok=0
  readrecord(arm01,key=tmm01.firm_id$+tmm01.customer_nbr$,dom=*next)arm01$;ok=1
  if ok and cvs(arm01.contact_name$,3)<>cvs(tmm01.cont_name$,3) then
    arm01.contact_name$=tmm01.cont_name$
    arm01$=field(arm01$)
    writerecord(arm01,key=arm01.firm_id$+arm01.customer_nbr$)arm01$
  fi
fi    
if action$="partner" then
  readrecord(tmm01,knum=0,key=tmm01key$,dom=*NEXT)tmm01$
  record_id$="I"
  gosub arm10_list
  win_customer.discount$=discount_list$
  record_id$="L"
  gosub arm10_list
  win_customer.customer_type$=customer_type_list$
  win_customer$=fngb__put_fields$(win_id_customer$,win_customer$,"customer_type,discount")
fi
return

[Function (buildDBURL)]
rem ' -----------------------------------------------------------------
rem ' buildDBURL
rem ' -----------------------------------------------------------------

buildDBURL:

DECLARE StringBuffer sqlBuilder!

rem ' locate the properties file
props=unt
open(props)"ec_sql.properties"
props$=fid(props), props$=props$(9)
close(props)

file! = new java.io.File(props$)
fis! = new java.io.FileInputStream(file!)
bis! = new java.io.BufferedInputStream(fis!)
props! = new java.util.Properties()
props!.load(bis!)

sqlBuilder!= new StringBuffer(props!.getProperty("sqlURL.urlprefix") + props!.getProperty("sqlURL.server")+":")
sqlBuilder!.append(props!.getProperty("sqlURL.port")+"?database=")
sqlBuilder!.append(props!.getProperty("sqlURL.database")+"&user="+props!.getProperty("sqlURL.user")+"&password=")
sqlBuilder!.append(props!.getProperty("sqlURL.password"))
ourDbUrl$ = sqlBuilder!.toString()

rem ' xresp = msgbox(ourDbUrl$,0,"debug")


return

[Function (countLicenseFailures)]
rem ' -----------------------------------------------------------------
rem ' countLicenseFailures
rem ' -----------------------------------------------------------------

countLicenseFailures:

call "ec_open::SN_LIC_REG_ERR"
rem ' xresp = msgbox("|" + sn$ + "|",0,"debug")
rem ' xresp = msgbox("|" + cvs(sn$,3) + "|",0,"debug")
read record(sn_lic_reg_err, key=cvs(sn$,3),dom=*next)sn_lic_reg_err$
failCount = 0
while 1
    read record(sn_lic_reg_err,end=*break)sn_lic_reg_err$
    if pos(cvs(sn$,3)=sn_lic_reg_err$) <> 1 then break
    failCount = failCount + 1
wend
close(sn_lic_reg_err,err=*next)

return

[Function (country_list)]
rem ' -----------------------------------------------------------------
rem ' country_list
rem ' -----------------------------------------------------------------

country_list:
dim country$:fattr(country$)
read record(country,key=tmm01.country_code$,knum=0,dom=*next)country$
temp$=cvs(country.country_name$,3)
lang$=country.lang_code$
readrecord(languages,key=tmm01.lang_code$,dom=*next);lang$=tmm01.lang_code$
index=-1
if country_list$<>"" then goto country_loop_end
read(country,key="",knum=1,dom=*next)
while 1
  read record (country,end=*break)country$
  country_list$=country_list$+cvs(country.country_name$,3)+$0a$
wend
country_loop_end:
temp=pos(temp$=country_list$)
if temp then index=pos($0a$=country_list$(1,temp),1,0)
temp=pos($ff$=country_list$)
if temp then country_list$=country_list$(1,temp-1)
rem ' if index>=0 then country_list$=country_list$+$ff$+str(index)
country_list$=country_list$+$ff$+str(index)

rem ' default Country
if firm$ = "01" then defCountry$ = "U.S.A." else defCountry$ = "GERMANY"
defaultCountryIndex = pos(defCountry$ = country_list$)
if defaultCountryIndex then defaultCountryIndex = pos($0A$ = country_list$(1, defaultCountryIndex),1,0)

if language_list$<>"" then goto language_list_end
read(languages,key="",dom=*next)
while 1
  readrecord(languages,end=*break)languages$
  language_list$=language_list$+languages.lang_code$+" - "+cvs(languages.language$,3)+$0a$
wend
language_list_end:
temp=pos(lang$=language_list$)
index=-1
if temp then index=pos($0a$=language_list$(1,temp),1,0)
temp=pos($ff$=language_list$)
if temp then language_list$=language_list$(1,temp-1)
rem ' if index>=0 then language_list$=language_list$+$ff$+str(index)
language_list$=language_list$+$ff$+str(index)

rem ' default language
if firm$ = "01" then defLang$ = "EN" else defLang$ = "DE"
defaultLanguageIndex = pos(defLang$ = language_list$)
if defaultLanguageIndex then defaultLanguageIndex = pos($0A$ = language_list$(1, defaultLanguageIndex),1,0)

return

[Function (createTheSalesAndAgingWidgets)]
rem ' -----------------------------------------------------------------
rem ' createTheSalesAndAgingWidgets
rem ' -----------------------------------------------------------------

createTheSalesAndAgingWidgets:

rem Use statements
use ::dashboard/dashboard.bbj::Dashboard
use ::dashboard/dashboard.bbj::DashboardCategory
use ::dashboard/dashboard.bbj::DashboardWidget
use ::dashboard/dashboard.bbj::WidgetControl
use ::dashboard/widget.bbj::Widget
use ::dashboard/widget.bbj::ChartWidget
use ::dashboard/widget.bbj::PieChartWidget
use ::dashboard/widget.bbj::BarChartWidget
use ::BBUtils.bbj::BBUtils
use ::BBXImage.bbj::BBXImageFactory
use ::BBXImage.bbj::BBXImage
use ::bbwindowutils.bbj::BBWindowUtils

use java.awt.TexturePaint
use java.awt.geom.Rectangle2D
use java.awt.image.BufferedImage

declare BBjChildWindow customerSales!
declare BBjChildWindow customerAging!

declare WidgetControl embeddedAgingWidgetControl!
declare WidgetControl embeddedSalesWidgetControl!

if customerSales! = null() then
    scw_id = customerWindow!.getAvailableControlID()
    scw_context = BBjAPI().getSysGui().getAvailableContext()
    customerSales! = customerWindow!.addChildWindow(scw_id, 10, 200, 300, 240, "Customer Sales", $00000800$, scw_context)
    customerSales!.setOpaque(0)
fi

if customerAging! = null() then
    acw_id = customerWindow!.getAvailableControlID()
    acw_context = BBjAPI().getSysGui().getAvailableContext()
    customerAging! = customerWindow!.addChildWindow(acw_id, 320, 200, 300, 240, "Customer Sales", $00000800$, acw_context)
    customerAging!.setOpaque(0)
fi

if firm$ = tmm01.firm_id$ then
  if cvs(firm$,3) = "" or cvs(cust$,3) = ""  then
      customerSales!.setVisible(0)
      customerAging!.setVisible(0)
  else
      gosub setCustomerAging
      customerAging!.setVisible(1)
      gosub setCustomerSales
      customerSales!.setVisible(1)
      
      rem ' call "ARM.WI.called",firm$, customer_nbr$, customerContext, salesdashboardWidget!, agingdashboardWidget!
  fi
else
  customerSales!.setVisible(0)
  customerAging!.setVisible(0)
fi

return

[Function (createWebBasedDashboard)]
rem ' -----------------------------------------------------------------
rem ' createWebBasedDashboard
rem ' -----------------------------------------------------------------

createWebBasedDashboard:


rem ' declare BBjHtmlView htmlviewer!

if firm$ = tmm01.firm_id$ then
  if cvs(firm$,3) <> "" and cvs(cust$,3) = ""  then
    rem ' displaying a prospect from TMM01 and not in ARM01
    if htmlviewer! <> null() then
      htmlviewer!.setVisible(0)
    fi  
  else  
    if cvs(firm$,3) <> "" and cvs(cust$,3) <> ""  then
        if htmlviewer! = null() then
          custWindow! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow("Customer"))
          htmlviewer! = custWindow!.addHtmlView(1500,25,250,950,365,"")
        fi  
        rem ' url$ = "https://bbjserver.basis.cloud:8443/apps/Addon-CustSalesandAging?firm=" + firm$ +"&cust=" +cust$
        if (info(3,6)="5") then 
            url$ = ""
        else
            url$ = "https://" + System.getProperty("com.basis.jetty.host") + ":8443"
        fi
        url$ = url$ + "/apps/Addon-CustSalesandAging?firm="  + firm$ +"&cust=" +cust$
        
        htmlviewer!.setUrl(url$)
        htmlviewer!.setVisible(1)
    fi
  fi
else
  if htmlviewer! <> null() then
    htmlviewer!.setVisible(0)
  fi  
fi

return

[Function (customer_add_update)]
rem ' -----------------------------------------------------------------
rem ' customer_add_update
rem ' -----------------------------------------------------------------
   
customer_add_update:

rem --- only open ARM04 when needed
call "ec_open::ARM04A"

updated=0
old_ctype$=""
print (gb__sysgui)'setcursor'(3)
win_customer$=fngb__get_screen$(win_id_customer$,win_customer$)
custnum=fnnum(cvs(win_customer.customer_nbr$,3))
if custnum and action$="add" and create_cust then
: i=msgbox("This is already a customer.",0,"");goto add_customer_end
if cvs(win_customer.name$,3)="" then
: i=msgbox("A name is required.",0,"");
: goto add_customer_end
dim tmm01$:fattr(tmm01$)
if action$="modify" or (action$="add" and tmm01key$<>"") then
  extracted=0  
  extractrecord(tmm01,knum=0,key=tmm01key$,err=*next)tmm01$;extracted=1
  if !(extracted) then  
    i=msgbox("Can't update: Telemaster record is in use.",0,"Error "+str(err))
    goto add_customer_end
  fi
fi
save_tmm01key$=firm$+tmm01.customer_nbr$+tmm01.tm_number$
tmm01.firm_id$=firm$
tmm01.cont_firm$=cvs(win_customer.name$,3)
tmm01.name_sort$=cvs(win_customer.name$,7)
tmm01.cont_name$=cvs(win_customer.main_contact$,3)
tmm01.contact_sort$=cvs(win_customer.main_contact$,7)
tmm01.address_1$=cvs(win_customer.Address1$,3)
tmm01.address_2$=cvs(win_customer.Address2$,3)
tmm01.address_3$=cvs(win_customer.Address3$,3)
tmm01.address_4$=cvs(win_customer.Address4$,3)
tmm01.city$=cvs(win_customer.city$,3)
ctl_id=num(fattr(win_customer$,"state","ID"))
tmm01.state$=ctrl(gb__sysgui,ctl_id,1)
tmm01.zip_code$=cvs(win_customer.postal_code$,3)
tmm01.ust_id$=cvs(win_customer.ust_id$,3)
ctl_id=num(fattr(win_customer$,"country","ID"))
dim cnkey$(30)
cnkey$(1)=ctrl(gb__sysgui,ctl_id,1)
country.country_code$=" ",country.country_name$=" "
Readrecord(country,key=cnkey$,knum=1,dom=*next)country$
tmm01.country_code$=country.country_code$
ctl_id=num(fattr(win_customer$,"language","ID"))
temp$=ctrl(gb__sysgui,ctl_id,1)
tmm01.lang_code$=temp$
tmm01.phone_number$=fnusphone$(win_customer.phone$)
tmm01.fax_num$=fnusphone$(win_customer.fax$)
ctl_id=num(fattr(win_customer$,"salesperson","ID"))
tmm01.slsperson$=ctrl(gb__sysgui,ctl_id,1)
ctl_id=num(fattr(win_customer$,"customer_type","ID"))
tmm01.cust_type$=ctrl(gb__sysgui,ctl_id,1)
if action$="add" and create_cust and cvs(tmm01.cust_type$,3)="" then tmm01.cust_type$=default_customer_type$
na=pos("NA"=tmm01.cust_type$)
ctl_id=num(fattr(win_customer$,"terms","ID"))
if custnum or create_cust then tmm01.terms_code$=ctrl(gb__sysgui,ctl_id,1)
if na then tmm01.terms_code$="04"
ctl_id=num(fattr(win_customer$,"discount","ID"))
if custnum or (action$="add" and create_cust) then tmm01.disc_code$=ctrl(gb__sysgui,ctl_id,1)
if na then tmm01.disc_code$="  "
ctl_id=num(fattr(win_customer$,"discount_a","ID"))
if custnum or (action$="add" and create_cust) then tmm01.disc_code_a$=ctrl(gb__sysgui,ctl_id,1)
if na then tmm01.disc_code_a$="  "
if action$="add" then
  fl$=fattr(tmm01$,"dealer_str"),fl=dec(fl$(10,2))
  tmm01.dealer_str$=fill(fl);rem ,tmm01.USR_DEF_DT$=fill(8)
  tmm01.USR_DEF_MEMO$=fill(50)
  tmm01.SSI_EU_YN$=" "
  if create_cust=0 then
    dim ctr$:"firm_id:c(2),rec_id:c(3),tm_number:c(6),available:c(19)"
    f$=fid(tmm01),f$=f$(9),l=len(f$)
    if l<7 then f$="" else f$=f$(1,l-6)
    tmm10=unt,tries=0
    open (tmm10)f$+"TMM-10"
    extractrecord (tmm10,key=firm$+"T  ",err=*next)ctr$; tries=3
    if tries<3 then tries=tries+2; wait 1; retry
    if tries>3 then 
      i=msgbox("Can't get next contact number.",0,"Error "+str(err))
      close (tmm10)
      goto add_customer_end
    fi    
    tmm01.tm_number$=ctr.tm_number$
    tmm01.customer_nbr$="000000"
    ctr.tm_number$=str(num(ctr.tm_number$)+1:"000000")
    ctr$=field(ctr$)
    writerecord (tmm10,key=firm$+"T  ")ctr$
    close (tmm10)
  else
    extractrecord (ars10n,key=firm$+"N",tim=5,err=*next)ars10n$;goto ars10_ok
    if err=0 then wait 1;retry
    i=msgbox("Can't get next customer number.",0,"Error "+str(err));goto add_customer_end
    ars10_ok:
    custnum=ars10n.nxt_cust_nbr
    ars10n.nxt_cust_nbr=ars10n.nxt_cust_nbr+1
    ars10n$=field(ars10n$)
    writerecord(ars10n,key=firm$+"N")ars10n$
  fi
fi
cust$=str(custnum:"000000")
if custnum then tmm01.tm_number$="000000"
dim arm01$:fattr(arm01$)
dim arm02$:fattr(arm02$)
find(arm01,key=firm$+cust$,dom=*next);
: if action$="add" and create_cust then
: i=msgbox("Record already exists."+cust$,0,firm$+cust$);
: goto add_customer_end
if action$="add" or custnum=0 then goto write_tmm01
extractrecord(arm01,key=firm$+cust$,err=arm_locked)arm01$
extractrecord(arm02,key=firm$+cust$+"  ",err=arm_locked)arm02$
goto write_tmm01
arm_locked:
i=msgbox("Can't update: A/R record is in use.",0,"Error "+str(err))
goto add_customer_end
write_tmm01:
tmm01.customer_nbr$=cust$
tmm01key$=firm$+tmm01.customer_nbr$+tmm01.tm_number$
tmm01$=field(tmm01$)
writerecord(tmm01,key=tmm01key$)tmm01$
updated=1
if save_tmm01key$<>tmm01key$ then
: remove(tmm01,key=save_tmm01key$,err=*next)
extractrecord(tmm01,knum=0,key=tmm01key$)tmm01$
if save_tmm01key$=tmm01key$ then goto main_sort_done
tmm02_main_sort:
read(tmm02,key=save_tmm01key$,err=*next)
k$=key(tmm02,end=tmm03_main_sort)
if pos(save_tmm01key$=k$)<>1 then goto tmm03_main_sort
readrecord (tmm02,key=k$)xx$
remove(tmm02,key=k$,err=*next)
xx$(1,14)=tmm01key$
writerecord(tmm02,key=xx$(1,len(k$)))xx$
goto tmm02_main_sort
tmm03_main_sort:
read(tmm03,key=save_tmm01key$,err=*next)
k$=key(tmm03,end=main_sort_done)
if pos(save_tmm01key$=k$)<>1 then goto main_sort_done
readrecord (tmm03,key=k$)xx$
remove(tmm03,key=k$,err=*next)
xx$(1,14)=tmm01key$
writerecord(tmm03,key=xx$(1,len(k$)))xx$
goto tmm03_main_sort
main_sort_done:
if (action$="add" and create_cust=0) or custnum=0 then goto contacts_and_email
temp_delete$="A"+arm01.alt_sequence$+$0a$+"B"+arm02.slspsn_code$+$0a$+"D"+
:arm01.contact_name$(1,10)+$0a$+"E"+arm01.zip_code$+$0a$+"F"+arm02.terms_code$+
:$0a$+"G"+arm02.disc_code$+$0a$+"L"+arm01.phone_number$+$0a$
arm01.firm_id$=firm$
arm01.customer_nbr$=cust$
arm01.cust_name$=tmm01.cont_firm$
arm01.alt_sequence$=cvs(arm01.cust_name$,4)
arm01.contact_name$=tmm01.cont_name$
arm01.addr_line_1$=tmm01.address_1$
arm01.addr_line_2$=tmm01.address_2$
arm01.addr_line_3$=tmm01.address_3$
arm01.addr_line_4$=tmm01.address_4$
temp$=cvs(tmm01.city$,3);if len(temp$)>21 then temp$=temp$(1,21)
arm01.addr_line_5$=temp$+" "+tmm01.state$
arm01.zip_code$=tmm01.zip_code$
arm01.phone_number$=fnundo$(tmm01.phone_number$)
if len(xx1$)>10 then arm01.phone_number$="*"+xx1$(len(xx1$)-8)
arm01.fax_number$=fnundo$(tmm01.fax_num$)
if len(xx1$)>10 then arm01.fax_number$="*"+xx1$(len(xx1$)-8)
arm01.ar_ship_via$=win_customer.ship_via$
if action$="add" or create_cust then arm01.retain_cust$="Y",
: arm01.opened_date$=fndate$(jul(0,0,0)),
: arm01.op_frt_terms$="  "
arm01.country$=country.country_name$
arm01$=field(arm01$)
writerecord(arm01,key=firm$+cust$)arm01$
extractrecord(arm01,key=firm$+cust$)arm01$
arm02.firm_id$=firm$
arm02.customer_nbr$=cust$
arm02.ar_type$="  "
arm02.slspsn_code$=tmm01.slsperson$
arm02.terms_code$=tmm01.terms_code$
arm02.disc_code$=tmm01.disc_code$
arm02.disc_code_a$=tmm01.disc_code_a$
if action$="add" then
  arm02.dist_code$="AR"
  arm02.finance_chg$="N"
  arm02.sa_flag$="I"
  arm02.inv_hist_flg$="Y"
  arm02.statements$="Y"
  arm02.send_notice$="Y"
  arm02.invoice_copy$="N"
else
  if win_customer.statements then arm02.statements$="Y" else arm02.statements$="N"
  if win_customer.send_notice then arm02.send_notice$="Y" else arm02.send_notice$="N"
  if win_customer.invoice_copy then arm02.invoice_copy$="N" else arm02.invoice_copy$=" "
  if win_customer.active_renew then arm02.active_renew$="Y" else arm02.active_renew$ = "N"
fi
ctl_id=num(fattr(win_customer$,"tax_code","ID"))
arm02.tax_code$=ctrl(gb__sysgui,ctl_id,1)
old_ctype$=arm02.cust_type$
arm02.cust_type$=tmm01.cust_type$
if win_customer.credit_hold_cbox then arm02.cred_hold$="Y" else arm02.cred_hold$="N"
arm02.credit_limit=fnnum(win_customer.credit_limit$)
fl$=fattr(arm02$,"reserved_str_3"),fl=dec(fl$(10,2))
arm02.reserved_str_3$=fill(fl)
arm02$=field(arm02$)
writerecord(arm02,key=arm02$(1,10))arm02$
while pos($0a$=temp_delete$)
  p=pos($0a$=temp_delete$),xx$=temp_delete$(1,p-1)
  temp_delete$=temp_delete$(p+1),xx$=firm$+xx$+cust$
  remove(arm04a,key=xx$,dom=*next)
wend
temp$="A"+arm01.alt_sequence$+$0a$+"B"+arm02.slspsn_code$+$0a$+"D"+
:arm01.contact_name$(1,10)+$0a$+"E"+arm01.zip_code$+$0a$+"F"+arm02.terms_code$+
:$0a$+"G"+arm02.disc_code$+$0a$+"L"+arm01.phone_number$+$0a$
while pos($0a$=temp$)
  p=pos($0a$=temp$),xx$=temp$(1,p-1),temp$=temp$(p+1)
  if len(cvs(xx$,3))>1 then xx$=firm$+xx$+cust$;write(arm04a,key=xx$)xx$
wend
contacts_and_email:
tmm05$(1,14)=tmm01key$
tmm05.email$=win_customer.email$
fl$=fattr(tmm05$,"available"),fl=dec(fl$(10,2))
tmm05.available$=fill(fl)
tmm05$=field(tmm05$)
remove(tmm05,key=tmm01key$,err=*next)
if cvs(tmm05.email$,3)<>"" then writerecord(tmm05,key=tmm01key$)tmm05$

gosub update_tmm03
if custnum then msg$="Customer added" else msg$="Telemaster contact added"
if action$="modify" then msg$="Update done"
gosub show_customer
if old_ctype$<>tmm01.cust_type$ and custnum then call "cust_web_updt.pgm",err=*next,firm$+cust$
wait 1
rem release extracts
read(arm01,err=*next)
add_customer_end:
print (gb__sysgui)'setcursor'(0),'flush','focus'(options_id)

rem --- close ARM04A 
close(ARM04A,err=*next)

return

[Function (customer_search)]
rem ' -----------------------------------------------------------------
rem ' customer_search
rem ' -----------------------------------------------------------------

customer_search:
print (gb__sysgui)'setcursor'(3),'flush'
matchlist$="",msg$=""
win_customer$=fngb__get_screen$(win_id_customer$,win_customer$)
temp$=cvs(win_customer.customer_nbr$+win_customer.name$+win_customer.main_contact$+
:win_customer.phone$,3)
if temp$="" then
: if action$="search" then
: msg$="Enter cust#/name/contact/phone" fi;
: goto end_search
number_search=(fnnum(tmm01.customer_nbr$)<>fnnum(win_customer.customer_nbr$))
name_search=(cvs(tmm01.cont_firm$,3)<>cvs(win_customer.name$,3))
contact_search=(cvs(tmm01.cont_name$,3)<>cvs(win_customer.main_contact$,3))
phone_search=(cvs(tmm01.phone_number$,3)<>cvs(win_customer.phone$,3))
if name_search+contact_search+phone_search+fnnum(win_customer.customer_nbr$)=0 
:then goto end_search
msg$="No match."
sname$=cvs(win_customer.name$,7)
scontact$=cvs(win_customer.main_contact$,7)
scust$="000000",scust$=str(fnnum(win_customer.customer_nbr$):"000000",err=*next)
if !(number_search) then goto name_search
readrecord(arm01,key=firm$+scust$,dom=name_search)arm01$
readrecord(tmm01,knum=0,key=firm$+scust$+"000000",dom=name_search)tmm01$
tempk$=tmm01.firm_id$+tmm01.customer_nbr$+tmm01.tm_number$
matchlist$=tempk$+$0a$
goto end_search

name_search:
i=0
while i<2 and name_search
  x$=sname$;if i then x$=scontact$
  i=i+1, lenx=min(19,len(x$));if lenx<1 then continue
  read(tmm01,knum=1,key=firm$+x$(1,lenx),dom=*next)
  while 1
   k$=key(tmm01,end=*break)
   if pos(x$(1,lenx)=k$(3))=0 then break
   readrecord(tmm01)tmm01$
   tempk$=tmm01.firm_id$+tmm01.customer_nbr$+tmm01.tm_number$
   if pos(tempk$=matchlist$)=0 then matchlist$=matchlist$+tempk$+$0a$
  wend
wend

contact_search:
i=0
while i<2 and contact_search
  x$=scontact$;if i then x$=sname$
  i=i+1, lenx=min(14,len(x$));if lenx<1 then continue
  read(tmm01,knum=2,key=firm$+x$(1,lenx),dom=*next)
  while 1
   k$=key(tmm01,end=*break)
   if pos(x$(1,lenx)=k$(3))=0 then break
   readrecord(tmm01)tmm01$
   tempk$=tmm01.firm_id$+tmm01.customer_nbr$+tmm01.tm_number$
   if pos(tempk$=matchlist$)=0 then matchlist$=matchlist$+tempk$+$0a$
  wend
wend
if action$="add" then goto phone_search
x$=scontact$,lenx=min(20,len(x$));if lenx<1 then goto phone_search
read(tmm03,knum=0,key=firm$,dom=*next)
while 1 and contact_search
 readrecord(tmm03,end=*break)tmm03$
 if tmm03.firm_id$<>firm$ then break
 if pos(x$(1,lenx)=cvs(tmm03.contact_name$,4)) and pos(tmm03$(1,14)=matchlist$)=0 then matchlist$=matchlist$+tmm03$(1,14)+$0a$
wend

phone_search:
sphone$=fnundo$(win_customer.phone$);if sphone$="" then goto misc_search
call "ec_open::ARM04A"
k$=firm$+"L"+sphone$,xx$=k$
read(arm04a,key=k$,dom=*next)xx$
while pos(k$=xx$) and phone_search
  if len(xx$)>18 then
    read(tmm01,knum=0,key=firm$+xx$(len(xx$)-5,6),dom=*next)
    readrecord(tmm01,err=*next)tmm01$
    tempk$=tmm01.firm_id$+tmm01.customer_nbr$+tmm01.tm_number$
    if tmm01.customer_nbr$=xx$(len(xx$)-5,6) and pos(tempk$=matchlist$)=0 then matchlist$=matchlist$+tempk$+$0a$
  fi
  read(arm04a,end=*break)xx$
wend
close(arm04a,err=*next)

misc_search: 
if action$="add" then goto end_search
rem ' Don't read the whole file if we've found a match
if pos($0a$=matchlist$) goto end_search
rem ' Don't read if search fields are blank
if cvs(sphone$+sname$+scontact$,3)="" or name_search+contact_search+phone_search=0 then goto end_search
read(tmm01,knum=0,key=firm$,dom=*next)
while 1
  ok=0
  readrecord(tmm01,end=*break)tmm01$
  if tmm01.firm_id$<>firm$ then break
  tempk$=tmm01.firm_id$+tmm01.customer_nbr$+tmm01.tm_number$
  if pos(tempk$=matchlist$) then continue
  if sphone$<>""  and phone_search then
:  x1$=fnundo$(tmm01.phone_number$);if pos(sphone$=x1$) then ok=1
  x1$=cvs(tmm01.cont_firm$+"|"+tmm01.cont_name$,4)
  if pos(sname$=x1$)*name_search or pos(scontact$=x1$)*contact_search then ok=1
  if ok then matchlist$=matchlist$+tempk$+$0a$
wend

end_search:
matches=pos($0a$=matchlist$,1,0),match=(matches<>0)
print (gb__sysgui)'setcursor'(0)
if matches=0 then
  if action$<>"search" then return
  win_customer.message$=msg$
  win_customer$=fngb__put_fields$(win_id_customer$,win_customer$,"message")
  print (gb__sysgui)'flush','focus'(options_id)
  return
fi
if action$="add" then
  temp$="Found "+str(matches)+" possible match"
  if matches>1 then temp$=temp$+"es"
  i=msgbox(temp$+"."+$0a$+"Review before continuing this add?",4+32,"")
  if i<>6 then matches=0;return
fi
msg$=""
if action$="search" and matches=1 then tmm01key$=matchlist$(1,pos($0a$=matchlist$)-1)
if matches>1 or action$="add" then
  misc$=matchlist$
  saveaction$=action$
  action$="search"
  gosub basis_cust_call
  action$=saveaction$
  print(gb__sysgui)'flush'
  if c$<>"" then tmm01key$=c$
  if action$="add" and c$="" then return
fi
gosub setup_for_search
print(gb__sysgui)'focus'(options_id)

return

[Function (defined functions)]
rem ' -----------------------------------------------------------------
rem ' defined functions
rem ' -----------------------------------------------------------------

defined_functions:
def fnnum(tempnum$)
tempnum1$=""
while len(tempnum$)
if pos(tempnum$(1,1)="-.0123456789") then tempnum1$=tempnum1$+tempnum$(1,1)
tempnum$=tempnum$(2)
wend
return num(tempnum1$,err=badnum)
badnum:
return 0
fnend

def fnusphone$(xx$)
if tmm01.country_code$<>"US" then return xx$
xx$=fnundo$(xx$)
if len(xx$)=10 then xx$=xx$(1,3)+"."+xx$(4,3)+"."+xx$(7)
return xx$
fnend

def fnundo$(xx$)
xx$=cvs(xx$,3),xx1$=""
while len(xx$)
 if pos(xx$(1,1)="0123456789") then xx1$=xx1$+xx$(1,1)
 xx$=xx$(2)
wend
return xx1$
fnend

def fndate$(julian)=chr(asc(date(julian:"%Yp"))+32)+
: chr(asc(date(julian:"%Mp"))+32)+chr(asc(date(julian:"%Dp"))+32)

def fnaondate$(ymd$)
y=1900+asc(ymd$(1))-32,m=asc(ymd$(2))-32,d=asc(ymd$(3))-32
if m<1 or d<1 then d$="Unknown" else d$=date(jul(y,m,d):"%Mz/%Dz/%Y")
return d$
fnend

def fneuro_to_dollar(xx)
precision sys01x.precision
xd=int(100*xx/sys01x.exch_rate)/100
precision decimals
return xd
fnend

[Function (emailDirectCommLog)]
rem ' -----------------------------------------------------------------
rem ' emailDirectCommLog
rem ' -----------------------------------------------------------------

emailDirectCommLog:

rem ' get the line count
win_directCommStatus$ = fngb__get_screen$(win_id_directCommStatus$,win_directCommStatus$)
linecount$ = win_directCommStatus.loglines$
linecount = 0
linecount = num(linecount$,err=*next)
if linecount = 0 then linecount = 1000
win_directCommStatus.loglines$ = str(linecount)
win_directCommStatus$ = fngb__put_fields$(win_id_directCommStatus$, win_directCommStatus$, "loglines")

rem ' get the tail of the log
msgfile$ = directCommLogLocation$ + "directcommlog." + date(0:"%Y%Mz%Dz%Hz%mz%sz") + ".txt"
cmd$ = "tail -" + str(linecount) + " " + directCommLogLocation$ + "directcommserver.log > " + msgfile$
a = scall(cmd$)

rem ' email it
emailrecep$ = stbl("SYSTEMUID")
from$="customer-service@basis.cloud"
to$ = "misdev@basis.cloud"
cc$ = ""
bcc$ = ""
subject$="directcomm log"
msgtxt$ = "Here are the last " + str(linecount) + " lines of the directcommserver log."
msgtxt$=msgtxt$ + $0A$ + $0A$ + "Timestamp: " + date(0:"%Y%Mz%Dz %Hz%mz%sz") + $0A$ + "sent via sendEmail.src" + $0A$ + $0A$
msgtxt$=msgtxt$
call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msgtxt$, msgfile$

d = msgbox("Log file (" + msgfile$ + ") sent to: " + to$, 0, "Email Sent")

erase msgfile$, err = *next

return

[Function (enable_disable_removeBLSBlkBtn)]
rem ' -----------------------------------------------------------------
rem ' enable_disable_removeBLSBlkBtn
rem ' -----------------------------------------------------------------

enable_disable_removeBLSBlkBtn:

rem ' enable or disable the removeBLSBLkBtn:

call "ec_open::SNM01_BLS"
temp1! = cast(BBjButton, BBjAPI().getSysGui().getWindow(gb__win.serial_number).getChildWindow(127).getControl("removeBLSBlkBtn"))
found = 0
read record(snm01_bls, key=sn$,dom=*next)snm01_bls$; found = 1
if found then
    temp1!.setEnabled(1)
else
    temp1!.setEnabled(0)
fi
close(snm01_bls, err=*next)

rem ' white listed?
call "ec_open::SN_BLMBLS_WHTLST"
temp1! = cast(BBjStaticText, BBjAPI().getSysGui().getWindow(gb__win.serial_number).getChildWindow(127).getControl("whiteListMsg"))
found = 0
read record(sn_blmbls_whtlst, key = sn$, dom=*next)sn_blmbls_whtlst$; found = 1
if found then
    temp1!.setVisible(1)
else
    temp1!.setVisible(0)
fi
close(sn_blmbls_whtlst, err=*next)

return

[Function (eu_info)]
rem ' -----------------------------------------------------------------
rem ' eu_info
rem ' -----------------------------------------------------------------

eu_info:
cw_end_user$=fngb__get_screen$(cw_id_end_user$,cw_end_user$)
cw_end_user.CompName$ = ""
cw_end_user.ContactName$ = ""
cw_end_user.AddrLnOne$ = ""
cw_end_user.AddrLnTwo$ = ""
cw_end_user.AddrLnThree$ = ""
cw_end_user.City$ = "" 
cw_end_user.State$ = ""
cw_end_user.PostalCode$ = ""
cw_end_user.Country$ = ""
cw_end_user.EmailAddress$ = ""
cw_end_user.PhoneNumber$ = ""
cw_end_user.Industry$ = ""
cw_end_user.OtherDesc$ = ""
cw_end_user.BasisProduct$ = ""
cw_end_user.AppModulesUsed$ = ""
cw_end_user.Advantage$ = ""
cw_end_user.Announcements$ = ""
cw_end_user.LinkedSerialNbrs$ = ""

dim snmel$:fattr(snmel$)
read record(snmel,key=SN$,knum=0,dom=show_eu_info)snmel$
endUserNbr$=snmel.end_user_nbr$

dim snmeu$:fattr(snmeu$)
read record(snmeu,key=endUserNbr$,dom=*next)snmeu$
if endUserNbr$<>snmel.end_user_nbr$ then return

rem ' get list of serial numbers linked to this end user
read (snmel,key=snmeu.end_user_nbr$,knum=1,err=*next)
while 1
  read record(snmel,end=*break)snmel$
  if snmel.end_user_nbr$<>snmeu.end_user_nbr$ then break
  cw_end_user.LinkedSerialNbrs$=cw_end_user.LinkedSerialNbrs$+snmel.serial_nbr$+$0a$
wend
ref$=cvs(snmeu.reference_nbr$,3)
if ref$<>"" then ref$="("+ref$+") "

cw_end_user.compname$ = ref$+cvs(snmeu.company_name$,3)
cw_end_user.contactname$ = snmeu.contact$
cw_end_user.AddrLnOne$ = snmeu.addr_1$
cw_end_user.AddrLnTwo$ = snmeu.addr_2$
cw_end_user.AddrLnThree$ = snmeu.addr_3$
cw_end_user.City$ = snmeu.city$
cw_end_user.state$ = snmeu.state$
cw_end_user.PostalCode$ = snmeu.postal_code$
cw_end_user.country$ = snmeu.country$
cw_end_user.EmailAddress$ = snmeu.email_address$
cw_end_user.PhoneNumber$ = snmeu.phone_number$

dim ecein$:fattr(ecein$)
readrecord(ecein,key=snmeu.industry$,dom=*next)ecein$
cw_end_user.industry$ = cvs(ecein.industry_name$,3)
cw_end_user.OtherDesc$ = snmeu.other_industry$
cw_end_user.basisproduct$ = snmeu.basis_prod$

cw_end_user.AppModulesUsed$ = fngb_spec_unesc_lf$(snmeu.app_modules_used$)
cw_end_user.advantage = (snmeu.advantage$="Y")
cw_end_user.announcements = (snmeu.announcements$="Y")

show_eu_info:
cw_end_user$=fngb__put_screen$(cw_id_end_user$,cw_end_user$)

return

[Function (fngb_spec_unesc_lf)]
rem ' -----------------------------------------------------------------
rem ' User Defined Function: fngb_spec_unesc_lf
rem ' -----------------------------------------------------------------

def fngb_spec_unesc_lf$(xx_inStr$)
sgb_temp$=xx_inStr$,xx_outStr$=""
  while len(sgb_temp$)
    sgb_pos=pos("\n"=sgb_temp$)
    if sgb_pos=0 then
      xx_outStr$=xx_outStr$+sgb_temp$+$0A$
      sgb_temp$=""
    else
     xx_outStr$=xx_outStr$+sgb_temp$(1,sgb_pos-1)+$0A$
     sgb_temp$=sgb_temp$(sgb_pos+2)
    fi
  wend
return xx_outStr$
fnend

[Function (getMARSHACode)]
rem ' -----------------------------------------------------------------
rem ' getMARSHACode
rem ' -----------------------------------------------------------------

getMARSHACode:

rem ' make the controls visible
BBjAPI().getSysGui().getWindow("serial_number").getControl("MARSHACode").setText("")

BBjAPI().getSysGui().getWindow("serial_number").getControl("marrMarshaCodeLbl").setVisible(1)
BBjAPI().getSysGui().getWindow("serial_number").getControl("MARSHACode").setVisible(1)

sql$ = sql$ + snm01.serial_nbr$ + "'"
foundMARSHACode$ = ""
found = 0
read record(marr_sn_marsha, knum = 0, key = snm01.serial_nbr$, dom=*next)marr_sn_marsha$; found = 1
if found then
    foundMARSHACode$ = marr_sn_marsha.marsha_code$
else
    foundMARSHACode$ = "Blank"
fi

BBjAPI().getSysGui().getWindow("serial_number").getControl("MARSHACode").setText(foundMARSHACode$)

return

[Function (inHostIdGroup)]
rem ' -----------------------------------------------------------------
rem ' inHostIdGroup
rem ' -----------------------------------------------------------------

inHostIdGroup:

rem ' is the serail number in a host id group
inHostIdGroup = 0
hostid_comment$ = ""
thissn$ = sn$
primarysn$ = ""
productseq$="ODBDS5VP5PR5BAS"
currentHighRank = 0, currentHighSN$ = ""

snfound = 0
read record (sn_host_multi_sn, key = thissn$, knum = 0, dom = *next)sn_host_multi_sn$; snfound = 1

if snfound then
    	thishostid$ = sn_host_multi_sn.hostid$
	rem ' position key pointer
	read record(sn_host_multi_sn, knum = 1, key = thishostid$, err = *next)sn_host_multi_sn$

        sn_count = 0

        while 1
       		dim sn_host_multi_sn$:fattr(sn_host_multi_sn$)
		read record(sn_host_multi_sn, end = *break)sn_host_multi_sn$
		if thishostid$ <> sn_host_multi_sn.hostid$ then break
                
                rem ' is it active
                read record(snm01alt, key = sn_host_multi_sn.serial_nbr$, dom=*continue)snm01alt$
                if snm01alt.active_flag$ = "N" then continue
                if cvs(snm01alt.contract$,3) <> "" then
                    read record(smc01alt, key = snm01alt.contract$)smc01alt$
		    rent_or_kit = pos(smc01alt.contr_type$(1,2) = "RN,DV")
		    if snm01alt.license_type$ = "EXP" and smc01alt.contr_type$ = "SM1" then rent_or_kit=1
      		    today$ = date(0:"%Y%Mz%Dz")
		    rem ' is it expired?
		    if rent_or_kit and smc01alt.expire_on_dt$ < today$ then continue
                fi

		rem ' is it primary
		rank = pos(snm01alt.product$ = productseq$)
		if rank > currentHighRank then
			currentHighRank = rank
			currentHighSN$ = snm01alt.serial_nbr$
		fi

                hostid_comment$ = hostid_comment$ + cvs(sn_host_multi_sn.serial_nbr$,3) + ", "
                sn_count = sn_count + 1
        wend
        
        if sn_count <= 1 then
            hostid_comment$ = ""
            inHostIdGroup = 0
        else
            inHostIdGroup = 1
            hostid_comment$ = cvs(hostid_comment$,3)
            if hostid_comment$(len(hostid_comment$),1) = "," then
                hostid_comment$ = hostid_comment$(1,len(hostid_comment$)-1)
            fi
            ppos = pos(cvs(currentHighSN$,3)=hostid_comment$)
            if ppos then
                hostid_comment$ = hostid_comment$(1, ppos + len(cvs(currentHighSN$,3))-1) + " is primary" + hostid_comment$(ppos + len(cvs(currentHighSN$,3)))
            fi
        fi

else
        inHostIdGroup = 0
fi

return

[Function (launch_bcomm)]
rem ' -----------------------------------------------------------------
rem ' launch_bcomm
rem ' -----------------------------------------------------------------

launch_bcomm:
if cvs(firm$,3)="" or cvs(cust$,3)="" or cust$="000000" then
  i=msgbox("Customer: "+firm$+cust$,0,"Invalid customer")
  return
fi
ecm01.password$=""
readrecord(ecm01,key=firm$+cust$+"**",dom=*next)ecm01$
if cvs(ecm01.password$,3)="" then 
  i=msgbox("No B-Comm record for "+firm$+cust$+"**",0,"Missing record")
  return
fi

rem ' b-comm only runs in bui now 2019-09-09
thepath$ = stbl("TEMP")
thefile$ = date(0:"%Y%Mz%Dz%Hz%mz%sz") + firm$ + cust$
erase thepath$ + thefile$, err = *next
string thepath$ + thefile$
thefile = unt
open(thefile)thepath$ + thefile$
thefilerec$ = firm$ + cust$ + cvs(ecm01.password$,3)
write(thefile)thefilerec$
close(thefile)

props=unt
properties$ = System.getProperty("basis.BBjHome") + "/cfg/BBj.properties"
file!= new java.io.File(properties$)
fis!=new java.io.FileInputStream(file!)
bis!=new java.io.BufferedInputStream(fis!)
props!=new java.util.Properties()
props!.load(bis!)
targetserver! = props!.getProperty("com.basis.jetty.host")
url$ = "https://" + targetserver! + ":8443/apps/b-commerce?param=" + thefile$
BBjAPI().getThinClient().browse(url$)

rem ' if info(3,6) = "5" then
rem '     rem ' running BUI
rem '     Command$="/usr/local/bbj/bin/bbj -tNIO -c/basisaon/config.web -q ec.bbj - inhouse "+firm$+cust$+" "+cvs(ecm01.password$,3)+"&"
rem ' else
rem '     Command$="/usr/local/bbj/bin/bbj -tT2 -c/basisaon/config.web -q ec.bbj - inhouse "+firm$+cust$+" "+cvs(ecm01.password$,3)+"&"
rem ' fi
rem ' a=scall(command$)

[Function (license_history)]
rem ' -----------------------------------------------------------------
rem ' license_history
rem ' -----------------------------------------------------------------

license_history:
let ichan=logextract,temp_item$="",lbox$="",l_hostid$="",l_hostname$="",l_auth$=""
hostidsused$ = "", hostidsused = 0, hostidsseq$ = "", hostidsseq = 0, last_host$ = "", hostname_hostid_xref$ = ""
newest_hostid$ = ""

dim tmpl$:fattr(logextract$); gosub build_temp_item
let ichan=sn_license
dim tmpl$:fattr(sn_license$); gosub build_temp_item
let ichan=license_reset,lrx$=cvs(fattr(license_reset$),4)
p=pos("RESET_DATE"=lrx$)
if p then lrx$=lrx$(1,p-1)+lrx$(p+6)
p=pos("RESET_TIME"=lrx$)
if p then lrx$=lrx$(1,p-1)+lrx$(p+6)
resets=0
dim tmpl$:lrx$; gosub build_temp_item
if len(temp_item$)<50 then goto current_status 
let temp_item$=ssort(temp_item$,50)
let holddate$="",fill$=fill(65,"_")

license_history_loop: 

xtemp_item$ = temp_item$(len(temp_item$)-49)
temp_item$ = temp_item$(1, len(temp_item$)-50)

date$=xtemp_item$(1,8)
time$=fnFormatTime$(xtemp_item$(9,6))
ichan=num(xtemp_item$(15,2))
k$=cvs(xtemp_item$(17,34),2)
rem ' temp_item$=temp_item$(51)

if holddate$=date$ then let lbox$=lbox$+$0a$ 
:  else let lbox$=lbox$+fill$+$0a$+date$(5,2)+"/"+date$(7,2)+"/"+date$(1,4)+$0a$
let holddate$=date$; rem ' time$=time$(1,2)+":"+time$(3,2)
switch ichan
case logextract; dim tmpl$:fattr(logextract$); break
case sn_license; dim tmpl$:fattr(sn_license$); break
case license_reset; dim tmpl$:lrx$; break
swend
read record(ichan,key=k$)tmpl$
let lbox$=lbox$+"  "; rem +time$+" "

switch ichan

case logextract; let lbox$=lbox$+"License Request Received at "+time$ + $0a$
let x$=cvs(tmpl.firstname$+tmpl.lastname$,35),y$=cvs(tmpl.company$,3)
if x$<>"" and y$<>"" then let x$=x$+"/"
if x$+y$<>"" then let lbox$=lbox$+"        From: "+x$+y$+$0a$
if cvs(tmpl.email$,2)<>"" then let lbox$=lbox$+"       Email: "+tmpl.email$+$0a$
if cvs(tmpl.fax$,2)<>"" then let lbox$=lbox$+"         Fax: "+tmpl.fax$+$0a$
if cvs(tmpl.hostname$,2)<>"" then 
:let lbox$=lbox$+"    HostName: "+tmpl.hostname$+$0a$
let lbox$=lbox$+"      HostId: "+tmpl.hostid$+$0a$
let lbox$=lbox$+"      Auth #: "+tmpl.authnum$+$0a$

rem ' do not show the LOGEXTRACT records in the host id group
rem ' if pos(cvs(tmpl.hostid$, 3) = hostidsused$) = 0 then
rem '     hostiddsused$ =  hostidsused$ + date$(5,2) + "/" + date$(7,2) + "/" + date$(1,4) + $0a$ + cvs(tmpl.hostid$,3) + $0A$
rem '     hostidsused = hostidsused + 1
rem ' fi

rem ' do not show the LOGEXTRACT records in the host id group
rem ' if cvs(tmpl.hostid$, 3) <> last_host$ then
rem '     last_host$ = cvs(tmpl.hostid$, 3)
rem '     hostidsseq$ = date$(5,2) + "/" + date$(7,2) + "/" + date$(1,4) + $0a$ + cvs(tmpl.hostid$,3) + $0A$ + hostidsseq$
rem '     hostidsseq = hostidsseq + 1
rem ' fi

break

case sn_license; dim sn_host$:fattr(sn_host$)
readrecord(sn_host,key=tmpl$(1,26),dom=*next)sn_host$
l_hostid$=tmpl.hostid$,xx$=""
if cvs(sn_host.hostid1$,3)<>"" then
  xx$=$0a$
  l_hostid$=cvs(sn_host.hostname1$,3)+" "+cvs(sn_host.hostid1$,3)+","+$0a$
  l_hostid$=l_hostid$+cvs(sn_host.hostname2$,3)+" "+cvs(sn_host.hostid2$,3)+","
  l_hostid$=l_hostid$+$0a$+cvs(sn_host.hostname3$,3)+" "+cvs(sn_host.hostid3$,3)
fi
let lbox$=lbox$+"License Generated at "+time$ + $0a$
let lbox$=lbox$+"      HostId: "+xx$+l_hostid$+$0a$
let lbox$=lbox$+"      Auth #: "+tmpl.authnum$+
:  fill(12)+"Revision: "+tmpl.prod_rev$+$0a$,l_auth$=tmpl.authnum$
rem ' let lbox$=lbox$+"       Users: "+str(tmpl.users:"###0")+
let lbox$=lbox$+"       Users: " + STR(tmpl.users:"###0 ")+cvs(tmpl.lic_property1$+str(tmpl.users2:"#### ")+tmpl.lic_property2$,35)+
:  fill(15)+"LicenseType: "+tmpl.prod_type$+$0a$
if cvs(tmpl.expire$,2)<>"" then let lbox$=lbox$+"     Expires: "+tmpl.expire$+$0a$

displayHostid$ = l_hostid$
if newest_hostid$ = "" then newest_hostid$ = l_hostid$
while pos($0A$=displayHostid$) <> 0
    p = pos($0A$=displayHostid$)
    displayHostId$(p,1) = ","
wend
if pos(cvs(displayHostId$, 3) = hostidsused$) = 0 then
    hostidsused$ = hostidsused$ + date$(5,2) + "/" + date$(7,2) + "/" + date$(1,4) + $0a$ + cvs(displayHostid$,3) + $0A$
    hostidsused = hostidsused + 1
fi
if cvs(l_hostid$, 3) <> last_host$ then
    last_host$ = cvs(l_hostid$, 3)
    hostidsseq$ = date$(5,2) + "/" + date$(7,2) + "/" + date$(1,4) + $0a$ + cvs(displayHostId$,3) + $0A$ + hostidsseq$
    hostidsseq = hostidsseq + 1
fi

break

case license_reset
xx$="",p=pos(tmpl.reset_code$=reset_code_list$)
if p>2 then
  p1=pos($0a$=reset_reason_list$,1,int(p/2))
  if p1 then 
    xx$=" ("+reset_reason_list$(p1+1)
    p=pos($0a$=xx$)
    if p then xx$=xx$(1,p-1)+")"
  fi
fi
let lbox$=lbox$+"License Status Reset by "+tmpl.reset_by$+" at " + time$ + " " + xx$+$0a$

break

swend

if temp_item$<>"" then goto license_history_loop
rem ' xresp = msgbox(displayHostId$ + " " + l_hostid$ + " " + newest_hostid$,0,"displayHostId$ l_hostid$ newest_hostid$")

current_status:
s$="" 
gosub license_status
if license_status<0 then goto current_status_end
let s$=$0a$+"Current License Status: "+str(license_status)
if snm01.active_flag$="Y" then if license_status then  
: let s$=s$+" (Licensed)" 
: else let s$=s$+" (Ready for licensing)"
s$=s$+$0a$+"Resets for this License: "+str(resets)+$0a$+fill$+$0a$
current_status_end:
rem ' let lbox$=s$+lbox$+$0a$

rem ' check for a licenes file on the server
if inHostIdGroup then
    x$=stbl("FLEXHOME")+"lic/"+cvs(currentHighSN$,3)+".lic"
else
    x$=stbl("FLEXHOME")+"lic/"+cvs(sn$,3)+".lic"
fi
l$="",sz=0,lchan=unt
found = 0
open(lchan,err=*next)x$; found = 1
if found = 0 then
    if inHostIdGroup then
        x$=stbl("FLEXHOME")+"lic_old/"+cvs(currentHighSN$,3)+".lic"
    else
        x$=stbl("FLEXHOME")+"lic_old/"+cvs(sn$,3)+".lic"
    fi
    found = 0
    open(lchan,err=*next)x$; found = 1
    if found = 0 then
        goto end_lic_file
    fi
fi
fin$=fin(lchan),sz=dec(fin$(1,4))
read record (lchan,siz=sz,err=*next)l$
close (lchan,err=*next)
if sz=0 then goto end_lic_file
pipe=unt
open(pipe)"| ls -l "+x$
read(pipe,end=*next)temp$
close(pipe,err=*next)
p=pos(str(sz)=temp$),l=len(str(sz))
if p then temp$=cvs(temp$(p+l),3)
rem ' lbox$=lbox$+fill(65,"=")+$0a$+"License file from our server:"+$0a$+temp$+$0a$+$0a$+l$+$0a$
lbox$=s$ + $0a$+"License file from our server:"+$0a$+temp$+$0a$+$0a$+l$+$0a$+lbox$
end_lic_file:

rem ' match hostname to host id
if hostname_hostid_xref$ <> "" and l_hostid$ <> "" then
    while len(hostname_hostid_xref$) > 0
        p = pos($0A$=hostname_hostid_xref$)
        if p = 0 then break
        c_hostname$ = hostname_hostid_xref$(1, p-1), hostname_hostid_xref$ = hostname_hostid_xref$(p+1)
        p = pos($0A$=hostname_hostid_xref$)
        if p = 0 then break
        c_hostid$ = hostname_hostid_xref$(1, p-1), hostname_hostid_xref$ = hostname_hostid_xref$(p+1)
        if c_hostid$ = cvs(l_hostid$,3) then 
            l_hostname$ = c_hostname$
            break
        fi
    wend
fi

return 

build_temp_item: 
read (ichan,key=cvs(sn$,2),dom=*next)
while 1
  let k$=key(ichan,end=*break)
  if pos(cvs(sn$,2)=k$)<>1 then break
  read record(ichan,key=k$)tmpl$
  if ichan=license_reset then 
    if tmpl.reset_to$="0" then resets=resets+1 else continue
  fi
  let time$=pad(tmpl.time$,6),p=pos(":"=time$)
  if p then let time$=time$(1,p-1)+time$(p+1)+" "
  rem ' if ichan=logextract then let time$="00000"+tmpl.seq_num$
  
  if ichan = logextract then
    if cvs(tmpl.hostname$,3) <> "" then l_hostname$ = tmpl.hostname$
    if pos(cvs(tmpl.hostname$,3)=hostname_hostid_xref$) = 0 then
        hostname_hostid_xref$ = hostname_hostid_xref$ + cvs(tmpl.hostname$,3) + $0A$ + cvs(tmpl.hostid$,3) + $0A$
    fi
  fi
  
let x$=pad(k$,34),temp_item$=temp_item$+tmpl.date$+time$+str(ichan:"00")+x$
wend
return

license_status:
let license_status=-1,license_status_channel=0
read (are83,key="",dom=license_status_are83)
license_status_are83: 
k$=key(are83,end=end_license_status_are83)
read record(are83,key=k$)are83$
if cvs(sn$,2) <> cvs(are83.serial_nbr$,2) 
:  or are83.snhist_flag$="Y" 
:  or len(cvs(are83.auth_code$,3)) <> 10 
:  then goto license_status_are83
if are83.action$="D" then 
:  license_status=-1;goto license_status_are83

let license_status=are83.license_cnt,
:  license_status_channel=are83,
:  license_status_key$=k$,
:  l_auth$=are83.auth_code$
goto license_status_are83
end_license_status_are83: 
if license_status >= 0 then goto license_status_end
read (snt01,key=cvs(sn$,2),err=license_status_snt01)
license_status_snt01: 
k$=key(snt01,end=license_status_end)
read record(snt01,key=k$)snt01$
if pos(cvs(sn$,2)=snt01.serial_nbr$) <> 1 
:  then goto license_status_end
if len(cvs(snt01.auth_code$,3)) <> 10
:  then goto license_status_snt01

if snt01.action$<>"D" then
:  let license_status=snt01.license_cnt,
:  license_status_channel=snt01,
:  license_status_key$=k$,
:  l_auth$=snt01.auth_code$
goto license_status_snt01
license_status_end:
return

[Function (lookupFullHostid)]
rem ' -----------------------------------------------------------------
rem ' lookupFullHostid
rem ' -----------------------------------------------------------------

lookupFullHostid:

hostIdType! = new HostIdConstants()
Hostid! = new HostId(hostIdType!.TOKEN(), hostToken$)
if Hostid!.exists() then
    hostFull$ = Hostid!.getHostidFull()
    isBLSLicense = Hostid!.isNewHostid(hostFull$)
else
    hostFull$ = hostToken$
    isBLSLicense = 0
fi

return

[Function (maintainAnnualFlag)]
rem ' -----------------------------------------------------------------
rem ' maintainAnnualFlag
rem ' -----------------------------------------------------------------

maintainAnnualFlag:

if setAnnualFlag then
    extract record(snm01,key=snm01.serial_nbr$)snm01$
    snm01.media_type$ = "ANN"
    snm01$ = field(snm01$)
    write record(snm01,key=snm01.serial_nbr$)snm01$
    rem ' write a comment to the snm04 table
    virComment$="set to annuual by " + uid$ + " " + date(0:"%Y%Mz%Dz")
    rem ' the write virtual_comment code is in the maintainVirtualFlag code block
    gosub write_virtual_comment
    resp = msgbox("The user will need to re-register the license to get an annual license file.",0,"Re-Register Required")
else
    if unSetAnnualFlag then
        usvf_msgtxt$ = "The user will need to re-register the license to get a non-annual license file."
        extract record(snm01,key=sn$)snm01$
        snm01.media_type$ = "N/A"
        snm01$ = field(snm01$)
        write record(snm01,key=sn$)snm01$
        rem ' write a comment to the snm04 table
        virComment$="to non-annual by " + uid$ + " " + date(0:"%Y%Mz%Dz")
        rem ' the write virtual_comment code is in the maintainVirtualFlag code block
        gosub write_virtual_comment
        resp = msgbox(usvf_msgtxt$,0,"Re-Register Required")
    fi
fi

gosub show_sn

return

[Function (maintainVirtualFlag)]
rem ' -----------------------------------------------------------------
rem ' maintainVirtualFlag
rem ' -----------------------------------------------------------------

maintainVirtualFlag:

if setVirtualFlag then
    extract record(snm01,key=snm01.serial_nbr$)snm01$
    snm01.media_type$ = "VIR"
    snm01$ = field(snm01$)
    write record(snm01,key=snm01.serial_nbr$)snm01$
    rem ' write a comment to the snm04 table
    virComment$="set to virtual by " + uid$ + " " + date(0:"%Y%Mz%Dz")
    gosub write_virtual_comment
    resp = msgbox("The user will need to re-register the license to get a virtual license file.",0,"Re-Register Required")
else
    if unSetVirtualFlag then
        usvf_msgtxt$ = "The user will need to re-register the license to get a non-virtual license file."
        if !virtualEligible and cvs(snm01.media_type$,3) = "VIR" then
            usvf_msgtxt$ = usvf_msgtxt$ + " If the user would like to return the license to virtual status, SAM will need to be reinstated."
        fi
        extract record(snm01,key=sn$)snm01$
        snm01.media_type$ = "N/A"
        snm01$ = field(snm01$)
        write record(snm01,key=sn$)snm01$
        rem ' write a comment to the snm04 table
        virComment$="to non-virtual by " + uid$ + " " + date(0:"%Y%Mz%Dz")
        gosub write_virtual_comment
        resp = msgbox(usvf_msgtxt$,0,"Re-Register Required")
    fi
fi

gosub show_sn

return

write_virtual_comment: 
    LET seq=1
    READ (snm04,KEY=snm01.serial_nbr$,DOM=*NEXT)
    WHILE seq<100
        READ RECORD (snm04,END=*break)snm04$
        IF snm04.serial_nbr$=snm01.serial_nbr$ THEN 
            LET seq=NUM(snm04.comments_seq$)+1
            CONTINUE
        fi
        LET snm04.serial_nbr$=snm01.serial_nbr$
        LET snm04.comments_seq$=STR(seq:"00"),seq=100
        LET snm04.cmt_line$=virComment$
        LET snm04$=FIELD(snm04$)
        WRITE RECORD (snm04,KEY=snm04$(1,22))snm04$
    WEND
return

[Function (map_dist_code)]
rem ' -----------------------------------------------------------------
rem ' map_dist_code
rem ' -----------------------------------------------------------------

map_dist_code:

rem ' for the I/C invoice map the distribution code
rem ' default distribution code is IC
art13.dist_code$="IC"

if pos("SM"=art73.type_of_sale$) then 
    rem ' all SAM sale are IS
    art13.dist_code$="IS"
else
    rem ' for Barista and Addon sales we need to check IVM02
    rem ' only firm 02 in waarehouse 01
    ivm02found = 0
    read record(ivm02, key = "0201" + art13.item_number$, dom = *next)ivm02$; ivm02found = 1
    if ivm02found then
        if ivm02.dist_code$ = "BU" then 
            art13.dist_code$ = "IU"
        else
            if ivm02.dist_code$ = "BS" then
                art13.dist_code$ = "IU"
            else
                if ivm02.dist_code$ = "BO" then
                    art13.dist_code$ = "IO"
                else
                    if ivm02.dist_code$ = "BC" then
                        art13.dist_code$ = "IO"
                    else
                        if ivm02.dist_code$ = "AB" then
                            art13.dist_code$ = "IB"
                        endif
                    endif
                endif
            endif
        endif
    endif
endif

return

[Function (prep_routine)]
rem ' -----------------------------------------------------------------
rem ' prep_routine
rem ' -----------------------------------------------------------------

prep_routine:


return

[Function (process_login)]
rem ' -----------------------------------------------------------------
rem ' process_login
rem ' -----------------------------------------------------------------

process_login:

rem ' added to handle the integerate BBjAdmin login in process

tmm01key$=""
win_main$=fngb__get_fields$(win_id_main$,win_main$,"user_id,password,firm_list")
win_main.firm_list$=firm_list$

rem ' uid$=cvs(win_main.user_id$,7)+"   ",uid$=uid$(1,3)
uid$ = xUID$

readrecord(sym02,key=uid$)sym02$
firm$=sym02.default_firm$
security_level=fnnum(sym02.security_level$)

rem ' if cvs(win_main.password$,3)<>cvs(sym02.password$,3) then i=msgbox("Password Incorrect",0,""); return

win_main.user_id$=""
win_main.password$=""
win_main$=fngb__put_fields$(win_id_main$,win_main$,"firm_list,user_id,password")

rem ' print (gb__sysgui)'move'(exit_id,customer_x,exit_y),
rem ' exitButton!.setLocation(customer_x, exit_y)
rem ' exitButton!.setSize(120, 25)
exitButton!.setVisible(1)

print (gb__sysgui)'show'(selgrp_id,customer_id,serial_number_id,email_id,perpet_btn_id,backupLicense_id),'flush','focus'(customer_id)
if security_level>7 then print (gb__sysgui)'show'(ic_btn_id)
if security_level>8 then print (gb__sysgui)'show'(firm01_id)

print (gb__sysgui)'hide'(htmlEmailEdit_id)
if xUID$(1,2) = "GP" or xUID$(1,2) = "NS" or xUID$(1,2) = "LC" or xUID$(1,2) = "KW" or xUID$ = "+ON" or xUID$(1,2) = "MS" or xUID$(1,2) = "GR" or xUID$(1,2) = "JD" or xUID$(1,3) = "BS1" or xUID$(1,3) = "LC2" then
    print (gb__sysgui)'show'(htmlEmailEdit_id)
fi

if xUID$(1,2) = "GP" or xUID$(1,2) = "LC" or xUID$(1,2) = "KW" or xUID$ = "+ON" or xUID$(1,2) = "NS" or xUID$(1,2) = "JD" or xUID$(1,3) = "BS1" or xUID$(1,3) = "LC2" then
    print (gb__sysgui)'show'(firm01_id)
fi

if xUID$(1,2) = "GP" or xUID$(1,2) = "LC" or xUID$ = "+ON" then
    repemail$ = "customer-service@basis.cloud"
else
    if xUID$(1,2) = "KW"  then
        repemail$ = "misdev@basis.cloud"
    else
        if xUID$(1,2) = "BG" or xUID$(1,2) = "TD" then
            repemail$ = "support@basis.cloud"
        else
            if xUID$(1,2) = "GR" then
                repemail$ = stbl("+SALES")
            else
                if xUID$(1,2) = "PY" then
                    repemail$ = "pyeomans@basis.cloud"
                else
                    if xUID$(1,2) = "NS" then
                        repemail$ = "nspence@basis.cloud"
                    else
                        if xUID$(1,2) = "KP" then
                            repemail$ = "kpeterl@basis.cloud"
                        else
                            if xUID$(1,2) = "IR" then
                                repemail$ = "eu@basis.cloud"
                            else
                                if xUID$(1,2) = "ST" then
                                    repemail$ = "swald@basis.cloud"
                                else
                                    if xUID$(1,2) = "MS" then
                                        repemail$ = "mscully@basis.cloud"
                                    fi
                                fi
                            fi
                        fi
                    fi
                fi
            fi
        fi
    fi
fi
if repemail$ = "" then repemail$ = "customer-service@basis.cloud"

directCommBtnId = num(fattr(win_main$,"directCommTestBtn","ID"))
pricingObjTestIntBtnId = num(fattr(win_main$,"pricingObjTestIntBtn","ID"))
if xUID$(1,2) = "KW" or xUID$(1,2) = "GP" or xUID$ = "+ON" or xUID$(1,2) = "SH" or xUID$(1,2) = "NS" or xUID$(1,2) = "JD" or xUID$(1,3) = "BS1" or xUID$(1,3) = "LC2" then
    print (gb__sysgui)'show'(directCommBtnId)
fi
if xUID$(1,2) = "KW" or xUID$ = "+ON" then
    print (gb__sysgui)'show'(pricingObjTestIntBtnId)
fi
emailReferenceBtnID = num(fattr(win_main$,"emailReferenceBtn","ID"))
print (gb__sysgui)'show'(emailReferenceBtnID)

SNwithAddonFeaturesBTNID = num(fattr(win_main$,"SNwithAddonFeaturesBTN","ID"))
print (gb__sysgui)'hide'(SNwithAddonFeaturesBTNID)
if xUID$(1,2) = "GP" or xUID$(1,2) = "NS" or xUID$(1,2) = "LC" or xUID$(1,2) = "KW" or xUID$ = "+ON" or xUID$(1,2) = "MS" or xUID$(1,2) = "GR" or xUID$(1,2) = "JD" or xUID$(1,3) = "BS1" or xUID$(1,3) = "LC2" then
    print (gb__sysgui)'show'(SNwithAddonFeaturesBTNID)
fi

REM BWH: Do BBj 5.0 way of loading an image to gain optomization
REM print (gb__sysgui,err=*next)'image'(5,55,250,135,"basislogo.bmp")
imageCtrl! = fnAddImageControl!(5,5,250,135,"basislogo.jpg")

wait 1

return

[Function (reloadDirectcommLog)]
rem ' -----------------------------------------------------------------
rem ' reloadDirectcommLog
rem ' -----------------------------------------------------------------

reloadDirectcommLog:

rem ' get the tail of the 
fuid$ = cvs(uid$,3)
cmd$ = "tail -300 " + directCommLogLocation$ + "directcommserver.log > " + directCommLogLocation$ + "directcommlog." + fuid$
a = scall(cmd$)
dlogfile = unt
open(dlogfile)directCommLogLocation$ + "directcommlog." + fuid$
pfin$ = fin(dlogfile),sz=dec(pfin$(1,4))
readrecord(dlogfile,siz=sz)tailOfLog$
close(dlogfile)
erase directCommLogLocation$ + "directcommlog." + fuid$

return

[Function (remove_art_recs)]
rem ' -----------------------------------------------------------------
rem ' remove_art_recs
rem ' -----------------------------------------------------------------

remove_art_recs:
while len(temp$)>6
k99$=icfirm$+temp$(1,7),temp$=temp$(8)
if pos($0a$=temp$)=1 then temp$=temp$(2)
readrecord(art03,knum=1,key=k99$,dom=remove_art_recs_end)xx$
remove(art03,key=xx$(1,20),dom=*next)
read(art13,key=xx$(1,17),dom=*next)
remove_art13:
xk$=key(art13,end=remove_art_recs_end)
if pos(xx$(1,17)=xk$)<>1 then goto remove_art_recs_end
remove(art13,key=xk$,dom=*next)
remove(art73,key=xk$,dom=*next)
goto remove_art13
remove_art_recs_end:
wend

return

[Function (remove_prod_backup_pair)]
rem ' -----------------------------------------------------------------
rem ' remove_prod_backup_pair
rem ' -----------------------------------------------------------------

remove_prod_backup_pair:

rem ' delete it

rem_prod_backup_pair$ = cvs(sysgui!.getWindow(gb__win.removeBackupLic).getControl("productionLicense").getText(),3)
rem_prod_backup_pair$ = rem_prod_backup_pair$ + fill(20," ")
rem_prod_backup_pair$ = rem_prod_backup_pair$(1,20)

rem_back_prod_pair$ = cvs(sysgui!.getWindow(gb__win.removeBackupLic).getControl("backupLicense").getText(),3)
rem_back_prod_pair$ = rem_back_prod_pair$ + fill(20," ")
rem_back_prod_pair$ = rem_back_prod_pair$(1,20)

read record(sn_prod_backup, knum = 0, key = rem_prod_backup_pair$, dom=*next)sn_prod_backup$

record_deleted = 0

while 1
    read record(sn_prod_backup, end=*break)sn_prod_backup$

    if rem_prod_backup_pair$ <> sn_prod_backup.prod_serial_nbr$ then break
    if rem_back_prod_pair$ <> sn_prod_backup.back_serial_nbr$ then continue
    
    rem ' this is the one
    remove(sn_prod_backup, key = sn_prod_backup.prod_serial_nbr$ + sn_prod_backup.seq_no$)
    
    rem ' remove the certificate.bls files if they exists
    licDir$ = "/u/docfiles/flexlic/bin/bls_generator/bls_lic/"
    
    rem ' production certificate first
    prodCert$ = licDir$ + cvs(rem_prod_backup_pair$,3) + "-certificate.bls"
    prodCert = unt, found = 0
    open(prodCert, err = *next)prodCert$; found = 1
    close(prodCert)
    if found then
        erase prodCert$
    fi
        
    rem ' backup certificate next
    backCert$ = licDir$ + cvs(rem_back_prod_pair$,3) + "-certificate.bls"
    backCert = unt, found = 0
    open(backCert, err = *next)backCert$; found = 1
    close(backCert)
    if found then
        erase backCert$
    fi
    
    if deactivate then
        extract record(snm01, key = sn_prod_backup.back_serial_nbr$)snm01$
        snm01.active_flag$ = "N"
        snm01$ = field(snm01$)
        write record(snm01, key = sn_prod_backup.back_serial_nbr$)snm01$
    fi
    
    from$ = "customer-service@basis.cloud"
    to$ = "customer-service@basis.cloud, sales@basis.cloud"
    cc$ = ""
    bcc$ = ""
    subject$ = "Production/Backup License pair deleted"
    msg$ = "The Production/Backup License pair made up of the prodction license, " + cvs(rem_prod_backup_pair$,3) + " and the "
    msg$ = msg$ + "backup license, " + cvs(rem_back_prod_pair$,3) + " has been dissovled by " + cvs(xUID$,3) + "."
    if deactivate then 
        msg$ = msg$ + " The backup license has been deactivated."
    else
        msg$ = msg$ + $0A$ + "The backup license (" + cvs(rem_back_prod_pair$,3) + ") was converted to a full fledged "
        msg$ = msg$ + "license. Additional charges may be needed to pay the full charges for a conversion from "
        msg$ = msg$ + "half price license to a full price license."
    fi
    call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msg$, ""

    resp = msgbox(msg$, 0, "Prod/Backup License Pair Deleted")
    record_deleted = 1
    
    break
    
wend

if !record_deleted then xresp = msgbox("This pair could not be found. Nothing was deleted.", 0, "No Record Deleted.")

return

[Function (reverse_hostIdLimitBtn)]
rem ' -----------------------------------------------------------------
rem ' reverse_hostIdLimitBtn
rem ' -----------------------------------------------------------------

reverse_hostIdLimitBtn:

if hasHostIdLimit then
    hostIdLimitBtn!.setText("Remove Host Id Limit")
    hostIdLimitBtn!.setShortCue("Click to remove the Host Id limit")
else
    hostIdLimitBtn!.setText("Limit to One Host Id")
    hostIdLimitBtn!.setShortCue("Select Host Id from the Host Id Sequence List")
fi




return

[Function (rewrite_art13)]
rem ' -----------------------------------------------------------------
rem ' rewrite_art13
rem ' -----------------------------------------------------------------

rewrite_art13:

win_ic_invoice$=fngb__get_fields$(win_id_ic_invoice$,win_ic_invoice$,
: "line_no,ic_price,samfactor,dist_code,list_price")
art13k$=art03$(1,17)+cvs(win_ic_invoice.line_no$,3),temp=0
readrecord(art13,key=art13k$,dom=*next)art13$;temp=1
if temp=0 then return

x1=fnnum(win_ic_invoice.ic_price$)
x2=fnnum(win_ic_invoice.samfactor$)
x3=fnnum(win_ic_invoice.list_price$)
if x1=art13.reserved_num_1 and x2=art13.reserved_num_2 and 
: cvs(win_ic_invoice.dist_code$,3)=art13.dist_code$ then return
total_ic_charge=total_ic_charge-art13.reserved_num_1+x1
art03.reserved_num_1=art03.reserved_num_1-art13.reserved_num_1+x1
art13.reserved_num_1=x1,art13.reserved_num_2=x2 
art13.dist_code$=win_ic_invoice.dist_code$
art13.std_list_prc=x3
art13$=field(art13$)
writerecord(art13,key=art13k$)art13$
art03$=field(art03$)
writerecord(art03,key=art03$(1,20))art03$
return

[Function (runDirectCommTest)]
rem ' -----------------------------------------------------------------
rem ' runDirectCommTest
rem ' -----------------------------------------------------------------

runDirectCommTest:

rem ' clear the fields
win_directCommStatus$ = fngb__get_screen$(win_id_directCommStatus$,win_directCommStatus$)
rem ' win_directCommStatus.resultCodeLabel$ = "Result Code from Test:"
rem ' win_directCommStatus.directCommLogLabel$ = "Last 300 lines of the log:"
rem ' win_directCommStatus.lastLineLabel$ = "Log lines to email:"
win_directCommStatus.resultCode$ = ""
win_directCommStatus.tailOfLog$ = ""

win_directCommStatus$ = fngb__put_screen$(win_id_directCommStatus$,win_directCommStatus$)

rem ' command line test of directcomm server

use java.io.File
use java.io.FileInputStream
use java.io.BufferedInputStream
use java.util.Properties

rem ' should be located in the ec-bcomm directory which will be on the prefix
pfile = unt
open(pfile)"directCommTest.properties"
propLoc$ = fid(pfile)
propLoc$= propLoc$(9)
close(pfile)

rem ' load up the properites
file!= new java.io.File(propLoc$)
fis!=new java.io.FileInputStream(file!)
bis!=new java.io.BufferedInputStream(fis!)
props!=new java.util.Properties()
props!.load(bis!)

rem ' get properties
directComLocation$ = props!.getProperty("directCommLoc")
sourceFile$ = props!.getProperty("sourceFile")
directCommLogLocation$ = props!.getProperty("directCommLogLoc")

rem ' copy the test input file
fuid$ = cvs(uid$,3)
a = scall("cp " + sourceFile$ + " " + sourceFile$ + "." + fuid$)
a = scall("chmod a+w " + sourceFile$ + "." + fuid$)

rem ' change to the directcomm directory
curdir$ = dir("")
chdir directComLocation$

a = scall("./directcomm " + sourceFile$ + "." + fuid$)

if a then
	dretCode$ = str(a:"00")
else
	pfile = unt
	open(pfile)sourceFile$ + "." + fuid$
	pfin$ = fin(pfile),sz=dec(pfin$(1,4))
	if sz <> 2 then
		dretCode$ = "98"
	else
		readrecord(pfile,siz=sz)dretCode$
	fi
        close(pfile)
fi
erase sourceFile$ + "." + fuid$

rem ' get the tail of the log
gosub reloadDirectcommLog

rem ' win_directCommStatus.resultCodeLabel$ = "Result Code from Test:"
rem ' win_directCommStatus.directCommLogLabel$ = "Last 300 lines of the log:"
rem ' win_directCommStatus.lastLineLabel$ = "Log lines to email:"
win_directCommStatus.resultCode$ = dretCode$
win_directCommStatus.tailOfLog$ = tailOfLog$

win_directCommStatus$ = fngb__put_screen$(win_id_directCommStatus$,win_directCommStatus$)

return

[Function (setCustomerAging)]
rem ' -----------------------------------------------------------------
rem ' setCustomerAging
rem ' -----------------------------------------------------------------

setCustomerAging:


arm01_alt = unt
open(arm01_alt)"ARM-01"
dim arm01_alt$:fattr(arm01$)
arm02_alt = unt
open(arm02_alt)"ARM-02"
dim arm02_alt$:fattr(arm02$)

rem ' gather the data
read record(arm01_alt, key = firm$ + cust$)arm01_alt$
custName$ = arm01_alt.cust_name$
success = 0
read record(arm02_alt, key = firm$ + cust$ + "  ", err=*next)arm02_alt$; success = 1
if !success then
    future = 0
    current = 0
    over30 = 0
    over60 = 0
    over90 = 0
    over120 = 0
    totalAging = future + current + over30 + over60 + over90 + over120
else
    future = arm02_alt.aging_future
    current = arm02_alt.aging_cur
    over30 = arm02_alt.aging_30
    over60 = arm02_alt.aging_60
    over90 = arm02_alt.aging_90
    over120 = arm02_alt.aging_120
    totalAging = future + current + over30 + over60 + over90 + over120
endif

 
if embeddedAgingWidgetControl! = null() then
  rem Create the dashboard and category
  dashboard! = new Dashboard("CustomerSalesAndAging","Customer Sales and Aging")
  dashboardCategory! = dashboard!.addDashboardCategory("CustomerSalesAndAging","Customer Sales and Aging")
  dashboardCategory!.setWidgetTitlebarNameBackColor(bbjapi().makeColor(215,215,215))
  dashboardCategory!.setWidgetTitlebarDecorationBackColor(bbjapi().makeColor(225,225,225))    

  rem Create the widget
  widgetName$ = "CustomerAging"
  title$ = "Customer AR Aging"
  previewText$ = ""
  previewImage$ = ""
  chartTitle$ = ""
  flat = 1 
  legend = 0
  numSlices = 6
  agingdashboardWidget! = dashboardCategory!.addPieChartDashboardWidget(widgetName$,title$,previewText$,previewImage$,chartTitle$,flat,legend,numSlices)
  agingdashboardWidget!.setCloseEnabled(0,err=*NEXT)
  agingwidget! = agingdashboardWidget!.getWidget()
            
  rem Get the background image for the AR Aging Chart
  declare BBXImage xImage!
  xImage! = BBXImageFactory.createImageFromServerFile(System.getProperty("basis.BBjHome") + "/utils/dashboard/images/chartBG.jpg")
  xImage!.setOpacity(20)
  tr! = new Rectangle2D.Double(0, 0, xImage!.getWidth(), xImage!.getHeight())
  chartTexturePaint! = new TexturePaint(xImage!.getBufferedImage(BufferedImage.TYPE_INT_ARGB), tr!)

  rem Customize the chart
  agingwidget!.setLabelFormat("{0}: {1} ({2})", java.text.NumberFormat.getCurrencyInstance(), java.text.NumberFormat.getPercentInstance())
  agingwidget!.setChartBackground(chartTexturePaint!)
  agingwidget!.setPlotPadding(.06)
  colors! = ChartWidget.getVectorOfJavaColorsFromHexColorStrings(4, "#f5bcbc", "#861313", .65, .65)
  colors!.insertItem(0, ChartWidget.getColorWithAlphaFromHexString("#169c16", 0.65))
  colors!.insertItem(0, ChartWidget.getColorWithAlphaFromHexString("#1d56c9", 0.65))
  agingwidget!.setChartColors(colors!)
  agingwidget!.setLegendPosition(ChartWidget.getSideLeft(), ChartWidget.getHAlignRight(), ChartWidget.getVAlignCenter())

  rem Set the Widget data
  agingwidget!.setDataSetValue("  Future", future)
  agingwidget!.setDataSetValue(" Current", current)
  agingwidget!.setDataSetValue(" 30 Days", over30)
  agingwidget!.setDataSetValue(" 60 Days", over60)
  agingwidget!.setDataSetValue(" 90 Days", over90)
  agingwidget!.setDataSetValue("120 Days", over120)

  embeddedAgingWidgetControl! = new WidgetControl(agingdashboardWidget!,customerAging!,0,0,300,240,$$)

else

  rem Set the Widget data
  agingwidget!.setDataSetValue("  Future", future)
  agingwidget!.setDataSetValue(" Current", current)
  agingwidget!.setDataSetValue(" 30 Days", over30)
  agingwidget!.setDataSetValue(" 60 Days", over60)
  agingwidget!.setDataSetValue(" 90 Days", over90)
  agingwidget!.setDataSetValue("120 Days", over120)
  agingwidget!.refresh()

fi

close(arm01_alt)
close(arm02_alt)

return

[Function (setCustomerSales)]
rem ' -----------------------------------------------------------------
rem ' setCustomerSales
rem ' -----------------------------------------------------------------

setCustomerSales:

arm06_alt = unt
open(arm06_alt)"ARM-06"
dim arm06_alt$:fattr(arm06$)

rem ' gather the data
success = 0
read record(arm06_alt, key = firm$ + cust$, err=*next)arm06_alt$; success = 1
if !success then
    mtd_sales = 0
    ytd_sales = 0
    pyr_sales = 0
    nmtd_sales = 0
else
    mtd_sales = arm06_alt.mtd_sales
    ytd_sales = arm06_alt.ytd_sales
    pyr_sales = arm06_alt.pyr_sales
    nmtd_sales = arm06_alt.nmtd_sales
endif

if embeddedSalesWidgetControl! = null() then
      rem Create the widget
      widgetName$ = "Sales"
      title$ = "Customer Sales"
      previewText$ = ""
      previewImage$ = ""
      chartTitle$ = ""
      flat = 0 
      legend = 0
      rem ' numSlices = 6
      domainTitle$ = ""
      rangeTitle$ = ""
      orientation=BarChartWidget.getORIENTATION_VERTICAL()
      salesdashboardWidget! = dashboardCategory!.addBarChartDashboardWidget(widgetName$,title$,previewText$,previewImage$,chartTitle$,domainTitle$,rangeTitle$,flat,orientation,legend)
      salesdashboardWidget!.setCloseEnabled(0,err=*NEXT)
      saleswidget! = salesdashboardWidget!.getWidget()
        
      rem Customize the chart
      saleswidget!.setChartRangeAxisToCurrency()
      saleswidget!.setChartBackground(chartTexturePaint!)
      rem ' saleswidget!.setPlotPadding(.06)
      saleswidget!.setChartColors(colors!)
      saleswidget!.setLegendPosition(ChartWidget.getSideLeft(), ChartWidget.getHAlignRight(), ChartWidget.getVAlignCenter())
      
      rem Set the Widget data
      saleswidget!.setDataSetValue("Sales", "MTD", mtd_sales)
      saleswidget!.setDataSetValue("Sales", "YTD", ytd_sales)
      saleswidget!.setDataSetValue("Sales", "PYTD", pyr_sales)
      saleswidget!.setDataSetValue("Sales", "NMTD", nmtd_sales)

      embeddedSalesWidgetControl! = new WidgetControl(salesdashboardWidget!,customerSales!,0,0,300,240,$$)

else
      rem Set the Widget data
      saleswidget!.setDataSetValue("Sales", "MTD", mtd_sales)
      saleswidget!.setDataSetValue("Sales", "YTD", ytd_sales)
      saleswidget!.setDataSetValue("Sales", "PYTD", pyr_sales)
      saleswidget!.setDataSetValue("Sales", "NMTD", nmtd_sales)
      saleswidget!.refresh()
fi

close(arm06_alt)

return

[Function (set_control_state)]
rem ' -----------------------------------------------------------------
rem ' set_control_state
rem ' -----------------------------------------------------------------

set_control_state:
while len(temp_list$)
  p=pos("/"=temp_list$)
  ctl$=temp_list$(1,p-1),temp_list$=temp_list$(p+1)
  ctl_id=num(fattr(win_customer$,ctl$,"ID"))
  x$=ctrl(gb__sysgui,ctl_id,8)
  disabled=dec(x$)
  if enable and disabled then print (gb__sysgui)'enable'(ctl_id)
  if enable+disabled=0 then print (gb__sysgui)'disable'(ctl_id)
wend
return

[Function (setup_add_modify)]
rem ' -----------------------------------------------------------------
rem ' setup_add_modify
rem ' -----------------------------------------------------------------

setup_add_modify:
if security_level<4 then action$="";return
ok=0,matches=0

xresp = msgbox("You are placing the customer record in Edit mode. Any changes you make to the data fields will be saved to the databse when you click the 'OK' button. Do you wish to continue?", 257, "Edit Mode?")
if xresp <> 1 then
    action$ = ""
    return
fi

if action$="modify" or tmm01key$<>"" then
  find(tmm01,key=tmm01key$,dom=*next);ok=1
  if !(ok) then 
    win_customer.message$="Select a record to modify"
    win_customer$=fngb__put_fields$(win_id_customer$,win_customer$,"message")
    return  
  fi
fi

gosub show_customer
temp_list$="name/main_contact/phone/fax/email/address1/address2/address3/address4/country/city/state/postal_code/language/ust_id/"
secure_list$="ship_via/invoice_copy/statements/send_notice/"
cust=fnnum(win_customer.customer_nbr$)
if cust=0 then if action$="add" and create_cust then cust=1
if action$="add" and create_cust then temp_list$=temp_list$+"tax_code/" else secure_list$=secure_list$+"tax_code/"
if cust and (action$="add" or security_level>4) then 
    temp_list$=temp_list$+"salesperson/" 
else 
    if !cust and (action$="modify" or security_level>4) then
        temp_list$=temp_list$+"salesperson/"
    else
        secure_list$=secure_list$+"salesperson/"
    fi
fi
if security_level>3 and cust then temp_list$=temp_list$+"discount/" else secure_list$=secure_list$+"discount/"
if security_level>3 and cust then temp_list$=temp_list$+"discount_a/" else secure_list$=secure_list$+"discount_a/"
if security_level>4 then temp_list$=temp_list$+"customer_type/active_renew/" else secure_list$=secure_list$+"customer_type/"
if security_level>4 and cust then temp_list$=temp_list$+"terms/credit_hold_cbox/credit_limit/exclPerpetEmail/active_renew/" else secure_list$=secure_list$+"terms/credit_hold_cbox/credit_limit/exclPerpetEmail/"
if security_level>7 and cust then temp_list$=temp_list$+secure_list$,secure_list$=""
if firm$="02" and security_level>4 and cust then temp_list$=temp_list$+secure_list$,secure_list$=""
enable=1

rem ' default the country and language on add
if action$ = "add" and !convertToCust then
    temp=pos($ff$=country_list$)
    if temp then country_list$=country_list$(1,temp-1)
    if defaultCountryIndex >= 0 then country_list$=country_list$+$ff$+str(defaultCountryIndex)
    win_customer.country$=country_list$
    win_customer$=fngb__put_fields$(win_id_customer$,win_customer$,"country")

    temp=pos($ff$=language_list$)
    if temp then language_list$=language_list$(1,temp-1)
    if defaultLanguageIndex >= 0 then language_list$=language_list$+$ff$+str(defaultLanguageIndex)
    win_customer.language$=language_list$
    win_customer$=fngb__put_fields$(win_id_customer$,win_customer$,"language")
fi

gosub set_control_state
temp_list$=secure_list$+"customer_nbr/"
if action$="modify" then temp_list$=temp_list$+"main_contact/"
enable=0

gosub set_control_state
print(gb__sysgui)'focus'(name_id),'flush'
win_customer.message$=""
win_customer$=fngb__put_fields$(win_id_customer$,win_customer$,"message")
return

[Function (setup_for_search)]
rem ' -----------------------------------------------------------------
rem ' setup_for_search
rem ' -----------------------------------------------------------------

setup_for_search:
action$="search"
rem ' disable controls
sep=pos("/"=control_list$,1,4),temp_list$=control_list$(sep+1),enable=0

gosub set_control_state
rem 'enable search fields
enable=1,temp_list$=control_list$(1,sep)
gosub set_control_state
msg$="",matches=0

gosub show_customer
return

[Function (showLicRegistrations)]
rem ' -----------------------------------------------------------------
rem ' showLicRegistrations
rem ' -----------------------------------------------------------------

showLicRegistrations:

rem ' load the licRegistrations form if needed
if gb__win.licRegistrations=-1 then 
    gb__context = fngb__window("113")
    win_id_licRegistrations$=fngb__win_id$(gb__win.licRegistrations)
    dim win_licRegistrations$:fngb__template$(win_id_licRegistrations$)
fi

serial_number!.setVisible(0)

rem ' lic Failurs
licRegistrations! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow("licRegistrations"))
licRegistrationsGrid! =  cast(BBjStandardGrid, licRegistrations!.getControl("licRegistrationsGrid"))
licRegistrationsGrid!.clearText()
licRegistrationsGrid!.setSelectedCell(0,0)
licRegistrationsGrid!.setColumnAlignment(4, GRID_ALIGN_LEFT)
licRegistrationsGrid!.setColumnAlignment(5, GRID_ALIGN_LEFT)
licRegistrations!.setVisible(1)

licRSN$ = cvs(licRSN$,3)

sql$ = "SELECT * FROM SN_LICENSE "
sql$ = sql$ + "WHERE serial_num = '" + licRSN$ + "' "
sql$ = sql$ + " ORDER BY DATE desc, TIME desc "
  
rem ' xresp = msgbox(sql$,0,"debug")
  
rem ' set wait cursor'
licRegistrations!.setCursor(3)

searchResults! = BBjAPI().createSQLRecordSet(ourDbUrl$,"",sql$)

if searchResults!.isEmpty() then
    resp = msgbox("The search did not find any license registrations for the serial number.", 0, "No Matches")
    searchResults!.close()
    
    rem ' unset wait cursor'
    licRegistrations!.setCursor(0)

else
      
    licRegistrationsGridLoad! = BBjAPI().makeVector()

    rowCount = 0

    searchResults!.first()

    while 1
        searchLine! = searchResults!.getCurrentRecordData()
    
        regDate$ = searchLine!.getFieldValue("DATE")
        regDate$ = date(num(regDate$):"%Y-%Mz-%Dz")
        regTime$ = searchLine!.getFieldValue("TIME")
        if len(regTime$) >= 6 then regTime$ = regTime$(1,2) + ":" + regTime$(3,2) + ":" + regTime$(5,2)
        
        licRegistrationsGridLoad!.addItem(regDate$)
        licRegistrationsGridLoad!.addItem(regTime$)
    
        prodType$ = searchLine!.getFieldValue("PROD_TYPE")
        licRegistrationsGridLoad!.addItem(prodType$)
    
        prodRev$ = searchLine!.getFieldValue("PROD_REV")
        licRegistrationsGridLoad!.addItem(prodRev$)
        
        LR_Hostid$ = searchLine!.getFieldValue("HOSTID")
        licRegistrationsGridLoad!.addItem(LR_Hostid$)
        
        LR_Auth$ = searchLine!.getFieldValue("AUTHNUM")
        licRegistrationsGridLoad!.addItem(LR_Auth$)
        
        LR_EXPIRE$ = searchLine!.getFieldValue("EXPIRE")
        licRegistrationsGridLoad!.addItem(LR_Expire$)

        users1$ = cvs(searchLine!.getFieldValue("USERS"),3)
        users2$ = cvs(searchLine!.getFieldValue("USERS2"),3)
        
        users1 = 0
        users1 = num(users1$,err=*next)
        users2 = 0
        users2 = num(users2$,err=*next)
        users = users1 + users2
        licRegistrationsGridLoad!.addItem(str(users))

        rowCount = rowCount + 1
        searchResults!.next(err=*break)
    wend
    searchResults!.close()

    licRegistrationsGrid!.setNumRows(rowcount)
    licRegistrationsGrid!.setCellText(licRegistrationsGridLoad!)
    
    rem ' unset wait cursor'
    licRegistrations!.setCursor(0)
        
fi

rem ' subject$ = "License Registrations in BUI Addon"
rem ' msgtxt$ = "License Registrations in BUI Addon accessed by " + repemail$ + ", " + uid$ + ", " + licRSN$
rem ' call "sendEmail.src", "customer-service@basis.cloud", "misdev@basis.cloud", "", "", subject$, msgtxt$, ""

return

[Function (showLogFailures)]
rem ' -----------------------------------------------------------------
rem ' showLogFailures
rem ' -----------------------------------------------------------------

showLogFailures:

rem ' load the licFailures form if needed
if gb__win.regFailures=-1 then 
    gb__context = fngb__window("112")
    win_id_regFailures$=fngb__win_id$(gb__win.regFailures)
    dim win_regFailures$:fngb__template$(win_id_regFailures$)
fi

serial_number!.setVisible(0)

rem ' lic Failurs
regFailures! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow("regFailures"))
regFailuresGrid! =  cast(BBjStandardGrid, regFailures!.getControl("regFailuresGrid"))
regFailuresGrid!.clearText()
regFailuresGrid!.setSelectedCell(0,0)
regFailuresGrid!.setColumnAlignment(2, GRID_ALIGN_LEFT)
regFailures!.setVisible(1)

logfSN$ = cvs(logfSN$,3)

sql$ = "SELECT * FROM SN_LIC_REG_ERR "
sql$ = sql$ + "WHERE serial_nbr = '" + logfSN$ + "' "
sql$ = sql$ + " ORDER BY REG_TIME desc "
  
rem ' xresp = msgbox(sql$,0,"debug")
  
rem ' set wait cursor'
regFailures!.setCursor(3)

searchResults! = BBjAPI().createSQLRecordSet(ourDbUrl$,"",sql$)

if searchResults!.isEmpty() then
    resp = msgbox("The search did not find any license failures for the serial number.", 0, "No Matches")
    searchResults!.close()
    
    rem ' unset wait cursor'
    regFailures!.setCursor(0)

else
      
    regFailuresGridLoad! = BBjAPI().makeVector()

    rowCount = 0

    searchResults!.first()

    while 1
        searchLine! = searchResults!.getCurrentRecordData()
    
        reg_time$ = searchLine!.getFieldValue("REG_TIME")
        regDate$ = reg_time$(1,8)
        regDate$ = regDate$(1,4) + "-" + regDate$(5,2) + "-" + regDate$(7,2)
        regTime$ = reg_time$(9,6)
        regTime$ = regTime$(1,2) + ":" + regTime$(3,2) + ":" + regTime$(5,2)
        
        regFailuresGridLoad!.addItem(regDate$)
        regFailuresGridLoad!.addItem(regTime$)
    
        problemDesc$ = searchLine!.getFieldValue("PROB_MSG")
        regFailuresGridLoad!.addItem(cvs(problemDesc$,3))
    
        rowCount = rowCount + 1
        searchResults!.next(err=*break)
    wend
    searchResults!.close()

    regFailuresGrid!.setNumRows(rowcount)
    regFailuresGrid!.setCellText(regFailuresGridLoad!)
    
    rem ' unset wait cursor'
    regFailures!.setCursor(0)
        
fi

rem ' subject$ = "License Failures in BUI Addon"
rem ' msgtxt$ = "License Failures in BUI Addon accessed by " + repemail$ + ", " + uid$ + ", " + logfSN$
rem ' call "sendEmail.src", "customer-service@basis.cloud", "kurt.e.williams@comcast.net", "", "", subject$, msgtxt$, ""

return

[Function (showVendorFeatures)]
rem ' -----------------------------------------------------------------
rem ' showVendorFeatures
rem ' -----------------------------------------------------------------

showVendorFeatures:

rem ' load the vendorFeature form if needed
if gb__win.vendorFeatures=-1 then 
    gb__context = fngb__window("111")
    win_id_vendorFeatures$=fngb__win_id$(gb__win.vendorFeatures)
    dim win_vendorFeatures$:fngb__template$(win_id_vendorFeatures$)
fi

serial_number!.setVisible(0)

vfHasBARISTAfeatureLine = 0

rem ' vendor feature window
vendorFeatures! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow("vendorFeatures"))
vendorFeaturesGrid! =  cast(BBjStandardGrid, vendorFeatures!.getControl("vendorFeaturesGrid"))
vfSerialNbr! =  cast(BBjEditBox, vendorFeatures!.getControl("vfSerialNbr"))
vendorFeatures!.setVisible(1)

vfSerialNbr!.setText(cvs(vfSN$,3))

vendorFeaturesGrid!.clearText()
vendorFeaturesGrid!.setColumnHeaderCellAlignment(0, vendorFeaturesGrid!.GRID_ALIGN_LEFT)
vendorFeaturesGrid!.setColumnAlignment(0,vendorFeaturesGrid!.GRID_ALIGN_LEFT)
vendorFeaturesGrid!.setColumnHeaderCellAlignment(3, vendorFeaturesGrid!.GRID_ALIGN_LEFT)
vendorFeaturesGrid!.setColumnAlignment(3,vendorFeaturesGrid!.GRID_ALIGN_LEFT)
vendorFeaturesGrid!.setSelectedCell(0, 0)

featureGridItems! = BBjAPI().makeVector()

rem ' provide a simulation of the BBj Feature Lines
rem ' build feature column
vfLicense$ = cw_sn_detail.license$
vfRevision$ = cw_sn_detail.revision$

if len(vfRevision$) >= 3 and vfRevision$(3,1) = "X" then vfRevision$ = vfRevision$(1,2) + ".0 " 

vfProduct$ = cw_sn_detail.product$
vfSN_detail_child_window! = cast(BBjChildWindow, BBjAPI().getSysGui().getWindow("serial_number").getControl(126))

dim vfUsers[2]
dim vfUsers_lbl$[2]

vfUsers[1] = num(cw_sn_detail.users$)
if vfSN_detail_child_window!.getControl("users1_lbl").isVisible() then
    vfUsers_lbl$[1] = cvs(vfSN_detail_child_window!.getControl("users1_lbl").getText(),3)
fi

if vfSN_detail_child_window!.getControl("users2_lbl").isVisible() then
    vfUsers[2] = num(cw_sn_detail.users2$)
    vfUsers_lbl$[2] = cvs(vfSN_detail_child_window!.getControl("users2_lbl").getText(),3)
fi

vfInactive = vfSN_detail_child_window!.getControl("inactive").isVisible()
rem ' xresp = msgbox(vfLicense$ + " " + vfRevision$ + " " + vfProduct$ + " " + str(vfUsers[1]) + " " + str(vfUsers[2]) + " " + str(vfInactive) + " " + vfUsers_lbl$[1] + " " + vfUsers_lbl$[2], 0, "debug")

featureCnt = 0
for x = 1 to 2
   if vfUsers[x] <> 0 then
        if vfProduct$ = "BAS" then
            vfFeature$ = "BBj "
        else
            vfFeature$ = vfProduct$ + " "
        fi
        if vfUsers_lbl$[x] = "EF" then
            vfFeature$ = vfFeature$ + "Extended Users "
        else
            if vfUsers_lbl$[x] = "SF" then
                vfFeature$ = vfFeature$ + "Standard Users "
            else
                vfFeature$ = vfFeature$ + "Users"
            fi
        fi
        featureGridItems!.addItem(vfFeature$)
        featureGridItems!.addItem(vfRevision$)
        featureGridItems!.addItem(vfProduct$)
        
        vfExpireDate$ = ""
        if vfInactive then
            vfExpireDate$ = "Deactivated"
        else
            if pos(vfLicense$ = "RN1KITNFREXP") <> 0 then
                if vfLicense$ = "RN1" then
                    rem ' expireDate$ = "Expires with the Rental Contract on " + cw_sn_sam.expiration$
                    vfExpireDate$ = "RNT expires " + cw_sn_sam.expiration$
                else
                    if vfLicense$ = "KIT" or vfLicense$ = "NFR" then
                        rem ' expireDate$ = "Expires with the Developers Kit on " + cw_sn_sam.expiration$
                        vfExpireDate$ = "DVK expires " + cw_sn_sam.expiration$ 
                    else
                        rem ' expireDate$ = "Expires with the SAM Contract on " + cw_sn_sam.expiration$
                        vfExpireDate$ = "EXP expires " + cw_sn_sam.expiration$
                    fi
                fi
            fi
        fi
        featureGridItems!.addItem(vfExpireDate$)
        featureGridItems!.addItem(str(vfUsers[x]))
        featureCnt = featureCnt + 1
   fi
                
next 

looping = 1
read record(snt04, key = cvs(vfSN$,3), dom=*next)snt04$
while looping
    read record(snt04, end=*break)snt04$
    if pos(cvs(vfSN$,3) = snt04$) <> 1 then break
    featureCnt = featureCnt + 1

    featureGridItems!.addItem(cvs(snt04.feature$,3))
    if cvs(snt04.feature$,7) = "BARISTA" then vfHasBARISTAfeatureLine = 1
    
    featureGridItems!.addItem(snt04.feature_rev$)
    featureGridItems!.addItem(snt04.prod_code$)
   
    
    expireDate$ = cvs(snt04.expire_on_dt$,3)
    if len(expireDate$) = 8 then 
        expireDate$ = expireDate$(5,2) + "-" + expireDate$(7,2) + "-" + expireDate$(1,4)
    else
        if pos(cw_sn_detail.license$ = "RN1KITNFREXP") <> 0 then
            if cw_sn_detail.license$ = "RN1" then
                rem ' expireDate$ = "Expires with the Rental Contract on " + cw_sn_sam.expiration$
                expireDate$ = "RNT expires " + cw_sn_sam.expiration$
            else
                if cw_sn_detail.license$ = "KIT" or cw_sn_detail.license$ = "NFR" then
                    rem ' expireDate$ = "Expires with the Developers Kit on " + cw_sn_sam.expiration$
                    expireDate$ = "DVK expires " + cw_sn_sam.expiration$ 
                else
                    rem ' expireDate$ = "Expires with the SAM Contract on " + cw_sn_sam.expiration$
                    expireDate$ = "EXP expires " + cw_sn_sam.expiration$
                fi
            fi
        fi
    fi
    featureGridItems!.addItem(expireDate$)
    featureGridItems!.addItem(snt04.users$)
    
wend

rem ' for developers kits simulate the Barista Feature Line
if (vfLicense$ = "KIT" or vfLicense$ = "NFR") and !vfHasBARISTAfeatureLine then
        featureGridItems!.addItem("Barista")
        featureGridItems!.addItem(vfRevision$)
        featureGridItems!.addItem("BAR")
        featureGridItems!.addItem(vfExpireDate$)
        barUsers = 0
        for u1 = 1 to 2
            barUsers =  barUsers + vfUsers[u1]
        next u1
        featureGridItems!.addItem(str(barUsers))
        featureCnt = featureCnt + 1
fi        



if featureCnt > 0 then
    vendorFeaturesGrid!.setCellText(featureGridItems!)
fi

rem ' subject$ = "Vendor Features in BUI Addon"
rem ' msgtxt$ = "Vendor Features in BUI Addon accessed by " + repemail$ + ", " + uid$ + ", " + cvs(vfSN$,3)
rem ' call "sendEmail.src", "customer-service@basis.cloud", "misdev@basis.cloud", "", "", subject$, msgtxt$, ""

return

[Function (show_customer)]
rem ' -----------------------------------------------------------------
rem ' show_customer
rem ' -----------------------------------------------------------------

show_customer:
dim tmm01$:fattr(tmm01$)
if action$="modify" or (action$="add" and tmm01key$<>"") then
  ok=0
  extractrecord(tmm01,knum=0,key=tmm01key$,err=*next)tmm01$;ok=1
  if !(ok) then 
    if err=0 then temp$="Record in use" else temp$="Error "+str(err)
    i=msgbox("Can't modify Telemaster record.",0,temp$)
    action$="search"
  fi
else
  readrecord(tmm01,knum=0,key=tmm01key$,dom=*NEXT)tmm01$
fi
cust$=tmm01.customer_nbr$;if num(cust$)=0 then cust$=""
dim tmm05$:fattr(tmm05$)
readrecord(tmm05,key=tmm01key$,dom=*NEXT)tmm05$
dim arm01$:fattr(arm01$)
readrecord(arm01,key=firm$+cust$,dom=*NEXT)arm01$
dim arm02$:fattr(arm02$)
readrecord(arm02,key=firm$+cust$+"  ",dom=*NEXT)arm02$
dim arm06$:fattr(arm06$)
readrecord(arm06,key=firm$+cust$,dom=*NEXT)arm06$
dim ecm01$:fattr(ecm01$)
readrecord(ecm01,key=firm$+cust$+"  ",dom=*NEXT)ecm01$
win_customer$=fngb__get_screen$(win_id_customer$,win_customer$)
win_customer.customer_nbr$=cust$
win_customer.Name$=cvs(tmm01.cont_firm$,3)
win_customer.main_contact$=cvs(tmm01.cont_name$,3)
win_customer.Address1$=cvs(tmm01.address_1$,3)
win_customer.Address2$=cvs(tmm01.address_2$,3)
win_customer.Address3$=cvs(tmm01.address_3$,3)
win_customer.Address4$=cvs(tmm01.address_4$,3)
win_customer.City$=cvs(tmm01.city$,3)

gosub state_list
win_customer.State$=state_list$
win_customer.postal_code$=cvs(tmm01.zip_code$,3)
win_customer.ust_id$=tmm01.ust_id$

gosub country_list
win_customer.Country$=country_list$
win_customer.language$=language_list$
win_customer.phone$=cvs(tmm01.phone_number$,3)
win_customer.fax$=cvs(tmm01.fax_num$,3)
record_id$="A"

gosub arm10_list
win_customer.terms$=terms_list$
record_id$="B"

gosub arm10_list
win_customer.tax_code$=tax_list$
record_id$="F"

gosub arm10_list
win_customer.salesperson$=salesperson_list$
record_id$="I"

gosub arm10_list
win_customer.discount$=discount_list$
win_customer.discount_a$=discount_a_list$
record_id$="L"

gosub arm10_list
win_customer.customer_type$=customer_type_list$
win_customer.ship_via$=cvs(arm01.ar_ship_via$,3)
win_customer.email$=cvs(tmm05.email$,3)
win_customer.credit_limit$=str(arm02.credit_limit:mask$)
win_customer.statements$=str(arm02.statements$="Y")
win_customer.invoice_copy=(arm02.invoice_copy$="N")
win_customer.send_notice=(arm02.send_notice$="Y")
win_customer.options$=option_list$
win_customer.message$=msg$
if arm02.cred_hold$="Y" then 
  print (gb__sysgui)'show'(credit_hold_id)
  win_customer.credit_hold_cbox$="1"
else
  print (gb__sysgui)'hide'(credit_hold_id)
  win_customer.credit_hold_cbox$="0"
fi

rem ' are this customers contract active renewed?
if arm02.active_renew$ = "Y" then
    win_customer.active_renew$ = "1"
else
    win_customer.active_renew$ = "0"
fi

rem ' exlcude basis addresses from perpetual license expire emails?
sn_excl_basis$ = "        "
read record(sn_excl_basis, key = firm$ + cust$, dom=*next)sn_excl_basis$
if cvs(sn_excl_basis$,3) = "" then
  win_customer.exclPerpetEmail$="0"
else
  win_customer.exclPerpetEmail$="1"
fi
    
win_customer$=fngb__put_screen$(win_id_customer$,win_customer$)

rem ' add the sales and aging widgets
rem ' customerContext = fngb__window("103"); rem ' Customer
rem ' if customerWindow! = null() then
rem '     customerWindow! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow("Customer"))
rem ' fi
rem ' gosub createTheSalesAndAgingWidgets
gosub createWebBasedDashboard

if firm$<>"02" then
  print(gb__sysgui)'hide'(ust_ctl_id,ust_lbl_id)
else
  print(gb__sysgui)'show'(ust_ctl_id,ust_lbl_id)
fi
return

[Function (show_sam)]
rem ' -----------------------------------------------------------------
rem ' show_sam
rem ' -----------------------------------------------------------------

show_sam:
dim snmc01$:fattr(smc01$)
readrecord(smc01,key=contract$,dom=*next)smc01$
cw_sn_sam$=fngb__get_screen$(cw_id_sn_sam$,cw_sn_sam$)
cw_sn_sam.contract$=contract$
cw_sn_sam.contract_type$=smc01.contr_type$
cw_sn_sam.start_date$=smc01.contr_start$(5,2)+"-"+smc01.contr_start$(7,2)+
:"-"+smc01.contr_start$(1,4)
cw_sn_sam.expiration$=smc01.expire_on_dt$(5,2)+"-"+smc01.expire_on_dt$(7,2)+
:"-"+smc01.expire_on_dt$(1,4)
cw_sn_sam.renewal_date$=smc01.annual_dt$(5,2)+"-"+smc01.annual_dt$(7,2)+
:"-"+smc01.annual_dt$(1,4)
cw_sn_sam.email$=smc01.e_mail$
cw_sn_sam.comment$=smc01.comment$

ctl_id=num(fattr(cw_sn_sam$,"all_sns","ID"))
print (gb__sysgui)'context'(gb__win.sam_child_window)
temp$=sendmsg(gb__sysgui,ctl_id,67,0,$$)
cw_sn_sam$=fngb__put_screen$(cw_id_sn_sam$,cw_sn_sam$)

rem ' set the renew type list button
sn_sam! = cast(BBjChildWindow, serial_number!.getChildWindow(133))
renewTypeListButton! = sn_sam!.getListButton("renewType")
renewTypeListButton!.removeAllItems()
renewTypeListButton!.insertItems(0, "Active" + $0A$ + "Proforma" + $0A$ + "No Renew" + $0A$)

renTypMast$ = "AYN"; renTyp$ = smc01.renew_flag$
rtIndex = pos(renTyp$ = renTypMast$)
if rtIndex = 0 then rtIndex = 2
rtIndex = rtIndex - 1

renewTypeListButton!.selectIndex(rtIndex)
selIndex = renewTypeListButton!.getSelectedIndex()

sam_inactive_id=num(fattr(cw_sn_sam$,"contract_inactive","ID"))
no_renew_id=num(fattr(cw_sn_sam$,"no_renew","ID"))
if smc01.renew_flag$="N" then
    print (gb__sysgui)'show'(no_renew_id)
else 
    print(gb__sysgui)'hide'(no_renew_id)
fi

return

[Function (show_sn)]
rem ' -----------------------------------------------------------------
rem ' show_sn
rem ' -----------------------------------------------------------------

show_sn:

rem ' ensable the virtualFlag checkbox
sysgui!.getWindow(gb__win.detail_child_window).getControl("virtualFlag").setEnabled(1)
rem ' disable the annual flag checkbox
sysgui!.getWindow(gb__win.detail_child_window).getControl("annualFlag").setEnabled(0)

rem ' retrieve and display the MARSHA Code if this is a Marriott Serial Number
if snm01.customer_nbr$ = "002786" or snm01.customer_nbr$ = "008450" then
    gosub getMARSHACODE
else
    BBjAPI().getSysGui().getWindow("serial_number").getControl("marrMarshaCodeLbl").setVisible(0)
    BBjAPI().getSysGui().getWindow("serial_number").getControl("MARSHACode").setVisible(0)
fi


snt04.users=0
snt04.serial_nbr$=snm01.serial_nbr$
snt04.feature$="BARISTA_RUNTIME"
readrecord(snt04,key=snt04$(1,50),dom=*next)snt04$
dim bas_id[3]
cw_sn_detail$=fngb__get_screen$(cw_id_sn_detail$,cw_sn_detail$)
cw_sn_detail.product$=snm01.product$
cw_sn_detail.platform$=snm01.platform$
cw_sn_detail.os_level$=snm01.os_level$
cw_sn_detail.revision$=snm01.product_rev$
cw_sn_detail.license$=snm01.license_type$
cw_sn_detail.users$=str(snm01.users)
cw_sn_detail.barista_users$=str(snt04.users)
bas_id[0]=num(fattr(cw_sn_detail$,"users1_lbl","ID"))
bas_id[1]=num(fattr(cw_sn_detail$,"users2","ID"))
bas_id[2]=num(fattr(cw_sn_detail$,"users2_lbl","ID"))
bas_id[3]=num(fattr(cw_sn_detail$,"odbc_rw","ID"))*-1
if snm02.users1 then
  cw_sn_detail.users$=str(snm02.users1)
  cw_sn_detail.users1_lbl$=snm02.lic_property1$
  bas_id[0]=bas_id[0]*-1
fi  
if snm02.users2 then
  cw_sn_detail.users2$=str(snm02.users2)
  cw_sn_detail.users2_lbl$=snm02.lic_property2$
  bas_id[1]=bas_id[1]*-1
  bas_id[2]=bas_id[2]*-1
fi

odbc_rw=pos(snm02.odbc_rw$="RW"),temp$=""
if odbc_rw=2 then temp$="ODBC Read write"
if odbc_rw=1 then cw_sn_detail.odbc_rw$="ODBC Read only"
cw_sn_detail.odbc_rw$=temp$

cw_sn_detail.port$=snm01.port_id$
cw_sn_detail.available_support$=str(snm01.avail_support)
temp$=snm01.avail_expire$, sam_status$="No SAM"
if snm01.sam_active$<>"N" then
  dim smc01$:fattr(smc01$)
  readrecord(smc01,key=snm01.contract$,dom=*next)smc01$
  if smc01.sam_active$<>"N" and cvs(smc01.annual_dt$,3)<>"" then
        if jul(0,0,0) > jul(num(smc01.annual_dt$(1,4)), num(smc01.annual_dt$(5,2)), num(smc01.annual_dt$(7,2))) then
            samtextinsert$ = " - EXPIRED on "
        else
            samtextinsert$ = " - renewal date "
        fi
        sam_status$=smc01.contr_type$ + samtextinsert$ + smc01.annual_dt$(5,2) + "/" + smc01.annual_dt$(7,2) + "/"+smc01.annual_dt$(1,4)
  fi
fi
if cvs(temp$,3)<>"" and snm01.avail_support>0 then cw_sn_detail.support_expires$="Supt exp "+
:  temp$(5,2)+"/"+temp$(7,2)+"/"+temp$(1,4)
:  else cw_sn_detail.support_expires$=""
cw_sn_detail.sam_status$=sam_status$
fi
rem ' old virtual display
rem ' if snm01.media_type$="VIR" then cw_sn_detail.support_expires$ = "VIR, " + cw_sn_detail.support_expires$
rem ' if cw_sn_detail.support_expires$ = "VIR, " then cw_sn_detail.support_expires$ = "VIR"
rem ' new virtual display
cw_sn_detail.virtualFlag$ = "0"
cw_sn_detail.annualFlag$ = "0"
if snm01.media_type$="VIR" then 
    cw_sn_detail.virtualFlag$ = "1" 
else 
    rem ' annual flag display
    if snm01.media_type$="ANN" then 
        cw_sn_detail.annualFlag$ = "1" 
    fi
fi

arm01.cust_name$="**Not Found**"
readrecord(arm01,key=snm01.firm_id$+snm01.customer_nbr$,dom=*next)arm01$
cw_sn_detail.customer$=arm01.customer_nbr$+" "+cvs(arm01.cust_name$,3)
csm01.description$=""
readrecord(csm01,key=firm$+snm01.product$,dom=*next)csm01$
cw_sn_detail.product_desc$=cvs(csm01.description$,3)
csm02.description$=""
readrecord(csm02,key=firm$+snm01.platform$,dom=*next)csm02$
cw_sn_detail.platform_desc$=cvs(csm02.description$,3)
csm03.description$=""
readrecord(csm03,key=firm$+snm01.os_level$,dom=*next)csm03$
cw_sn_detail.os_level_desc$=cvs(csm03.description$,3)
csm04.description$=""
readrecord(csm04,key=firm$+snm01.product_rev$,dom=*next)csm04$
cw_sn_detail.revision_desc$=cvs(csm04.description$,3)
licensed_product=(csm04.key_or_licen$="L")
csm05.description$=""
readrecord(csm05,key=firm$+snm01.license_type$,dom=*next)csm05$
cw_sn_detail.license_desc$=cvs(csm05.description$,3)

rem ' get the expiration date from sn_license to get the latest expiration date
rem ' for virtual, perpetual, and expiring licenses issued on a license
dim xsn_lic$:fattr(sn_license$), ysn_lic$:fattr(sn_license$)
read record(sn_license, key=cvs(sn$,3),dom=*next)xsn_lic$
while 1
    read record(sn_license,end=*break)ysn_lic$
    if pos(cvs(sn$,3)=ysn_lic$) <> 1 then break
    xsn_lic$ = ysn_lic$
wend
exComment$ = ""
gosub inHostIdGroup
if cvs(xsn_lic.expire$,3) <> "" then
    exComment$ = xsn_lic.expire$
    if snm01.media_type$ = "VIR" then
        exComment$ = "Virtual " + exComment$
    else
        if snm01.media_type$ = "ANN" then
            if xsn_lic.annual$ = "Y" then
                exComment$ = "Annual registered " + exComment$
            else
                exComment$ = "Annual not registered " + exComment$
            fi
        else
            if xsn_lic.perpetual$ = "Y" then exComment$ = "Perpetual " + exComment$
        fi
    fi
    if pos("DEMO7" = xsn_lic.prod_type$) <> 0 then exComment$ = exComment$ + " " + cvs(xsn_lic.prod_type$,3)
    if pos(snm01.license_type$ = "RN1KITNFREXP",3) <> 0 then exComment$ = exComment$ + " Expiring License"

    if inHostIdGroup then 
        if cvs(currentHighSN$,3) = cvs(snm01.serial_nbr$,3) then
            exComment$ = exComment$ + " - In Host Id Group (Primary SN)" + $0A$ + hostid_comment$ + $0A$
        else
            exComment$ = exComment$ + " - In Host Id Group (Secondary SN)" + $0A$ + hostid_comment$ + $0A$
        fi
    else
        exComment$ = exComment$ + $0A$
    fi
else
    if inHostIdGroup then
        if cvs(currentHighSN$,3) = cvs(snm01.serial_nbr$,3) then
            exComment$ = "In Host Id Group (Primary SN)" + $0A$ + hostid_comment$ + $0A$
        else
            exComment$ = "In Host Id Group (Secondary SN)" + $0A$ + hostid_comment$ + $0A$
        fi
    fi
fi

sn_comment$=cvs(snm01.comment$,3)
if sn_comment$<>"" then sn_comment$=sn_comment$+$0a$
if exComment$ <> "" then sn_comment$ = exComment$ + sn_comment$
read(snm04,key=sn$,dom=*next)
read_snm04:
readrecord(snm04,end=end_snm04)snm04$
if snm04.serial_nbr$<>sn$ then goto end_snm04
if cvs(snm04.cmt_line$,3)="" then goto end_snm04
sn_comment$=sn_comment$+cvs(snm04.cmt_line$,3)+$0a$
goto read_snm04
end_snm04:
if sn_comment$<>"" then sn_comment$=sn_comment$+$ff$+str(0)
cw_sn_detail.comments$=sn_comment$

sn_feature$=""
read(snt04,key=sn$,dom=*next)
read_snt04:
readrecord(snt04,end=end_snt04)snt04$
if snt04.serial_nbr$<>sn$ then goto end_snt04
sn_feature$=sn_feature$+cvs(snt04.feature$,3)+" Rev: "+
:cvs(snt04.feature_rev$,3)+" Users: "+str(snt04.users)+$0a$
goto read_snt04
end_snt04:
if sn_feature$<>"" then sn_feature$=sn_feature$+$ff$+str(0)
cw_sn_detail.vendor_features$=sn_feature$

rem ' History grid
history$="",rows=0
read(snt01,key=sn$,dom=read_snt01)
read_snt01:
read record (snt01,end=end_snt01)snt01$
if cvs(snt01.serial_nbr$,3)<>cvs(sn$,3) then goto end_snt01

d$=fnaondate$(snt01.trans_date$)
csm04.description$=snt01.product_rev$
read record (csm04,key=firm$+snt01.product_rev$,err=*next)csm04$

history$=history$+d$+$0a$+cvs(snt01.ar_inv_nbr$,3)+$0a$+
:cvs(snt01.type_of_sale$,3)+$0a$+cvs(csm04.description$,3)+$0a$+
:str(snt01.users)+$0a$+cvs(snt01.auth_code$,3)+$0a$+cvs(snt01.item$,3)+$0a$+
:str(snt01.ext_price:"######.00-")+$0a$
rows=rows+1
goto read_snt01
end_snt01:
while rows<5
  history$=history$+fill(8,$0a$) 
  rows=rows+1
wend
print (gb__sysgui)'context'(gb__win.detail_child_window)
ctl_id=num(fattr(cw_sn_detail$,"transaction_history","ID"))
temp$=sendmsg(gb__sysgui,ctl_id,67,rows,$$)
temp$=sendmsg(gb__sysgui,ctl_id,32,0,$$)
temp$=sendmsg(gb__sysgui,ctl_id,87,0,history$)
temp$=sendmsg(gb__sysgui,ctl_id,32,0,$$)

cw_sn_detail$=fngb__put_screen$(cw_id_sn_detail$,cw_sn_detail$)

lbox$="",l_hostid$="",l_hostname$="",l_auth$=""
if licensed_product then gosub license_history
cw_sn_license$=fngb__get_screen$(cw_id_sn_license$,cw_sn_license$)
cw_sn_license.license_history$=lbox$
rem ' cw_sn_license.host_id$=cvs(l_hostid$,3)+$0a$
cw_sn_license.host_id$=cvs(newest_hostid$,3)+$0a$
cw_sn_license.host_name$=cvs(l_hostname$,3)
cw_sn_license.authorization$=cvs(l_auth$,3)
cw_sn_license.distResets$ = str(snm01.dist_reset)
cw_sn_license.email_fax$=""
cw_sn_license.company_name$=""
cw_sn_license.first_name$=""
cw_sn_license.last_name$=""
cw_sn_license.reset_reason$=reset_reason_list$
cw_sn_license.tamperResistant=0
cw_sn_license$=fngb__put_screen$(cw_id_sn_license$,cw_sn_license$)
reset_code$=reset_code_list$(1,2)
contract$=snm01.contract$
gosub show_sam
gosub eu_info

rem ' set licFailures button text with failure count
gosub countLicenseFailures
temp1! = cast(BBjButton, BBjAPI().getSysGui().getWindow(gb__win.serial_number).getChildWindow(127).getControl("licFailures"))
temp1!.setText(str(failCount) + " License Failures")

rem ' enable or disable the removeBLSBLkBtn
gosub enable_disable_removeBLSBlkBtn

rem ' Client/server grid
cs$="",dssn$="",rows=0,kn=1,k$=sn$
dim tempsn$:fattr(snm01$)
snt02_knum:
read(snt02,knum=kn,key=k$,dom=read_snt02)
read_snt02:
read record (snt02,end=end_snt02)snt02$
s1$=snt02.data_server$,s2$=snt02.serial_nbr$
if kn=1 then s2$=snt02.data_server$,s1$=snt02.serial_nbr$
if cvs(s1$,3)<>cvs(k$,3) then goto end_snt02
readrecord(snm01,knum=0,key=s2$,dom=read_snt02)tempsn$
if kn=1 then dssn$=s2$
cs$=cs$+cvs(s2$,3)+$0a$+tempsn.product$+tempsn.platform$+tempsn.os_level$+
:tempsn.product_rev$+tempsn.license_type$+$0a$+str(tempsn.users)+$0a$+
:tempsn.active_flag$+$0a$
rows=rows+1
goto read_snt02
end_snt02:
if kn then kn=0;goto snt02_knum
if dssn$<>sn$ then k$=dssn$,dssn$=sn$;goto snt02_knum
while rows<5
  cs$=cs$+fill(4,$0a$) 
  rows=rows+1
wend
csrows=rows

rem ' activated/deactivated grid
ad$="",rows=0
read(snt03,key=sn$,dom=read_snt03)
read_snt03:
read record (snt03,end=end_snt03)snt03$
if cvs(snt03.serial_nbr_1$,3)<>cvs(sn$,3) then goto end_snt03

d$=fnaondate$(snt03.action_date$)
action$="Activated"
if snt03.action$="D" then action$="Deactivated"
if snt03.action$="M" then action$="Modified"
dim tempsn$:fattr(snm01$)
readrecord(snm01,key=snt03.serial_nbr_2$,dom=*next)tempsn$
ad$=ad$+cvs(snt03.serial_nbr_2$,3)+$0a$+tempsn.product$+tempsn.platform$+
:tempsn.os_level$+tempsn.product_rev$+tempsn.license_type$+$0a$+
:str(tempsn.users)+$0a$+tempsn.active_flag$+$0a$+d$+$0a$+
:cvs(snt03.ar_inv_nbr$,3)+$0a$+action$+$0a$
rows=rows+1
goto read_snt03
end_snt03:
while rows<5
  ad$=ad$+fill(7,$0a$) 
  rows=rows+1
wend
print (gb__sysgui)'context'(gb__win.links_child_window)
ctl_id=num(fattr(cw_sn_links$,"cs_links","ID"))
temp$=sendmsg(gb__sysgui,ctl_id,67,csrows,$$)
temp$=sendmsg(gb__sysgui,ctl_id,87,0,cs$)
temp$=sendmsg(gb__sysgui,ctl_id,32,0,$$)
ctl_id=num(fattr(cw_sn_links$,"active_inactive","ID"))
temp$=sendmsg(gb__sysgui,ctl_id,67,rows,$$)
temp$=sendmsg(gb__sysgui,ctl_id,87,0,ad$)
temp$=sendmsg(gb__sysgui,ctl_id,32,0,$$)

print (gb__sysgui)'flush','context'(gb__win.detail_child_window)

if snm01.active_flag$="N" then print (gb__sysgui)'show'(inactive_id) else
: print (gb__sysgui)'hide'(inactive_id)
for temp=0 to 3
 if bas_id[temp]<0 then print (gb__sysgui)'show'(bas_id[temp]*-1) else
: print (gb__sysgui)'hide'(bas_id[temp])
next temp

rem ' History grid
rem ' history$="",rows=0
rem ' read(snt01,key=sn$,dom=read_snt01)
rem ' read_snt01:
rem ' read record (snt01,end=end_snt01)snt01$
rem ' if cvs(snt01.serial_nbr$,3)<>cvs(sn$,3) then goto end_snt01

rem ' d$=fnaondate$(snt01.trans_date$)
rem ' csm04.description$=snt01.product_rev$
rem ' read record (csm04,key=firm$+snt01.product_rev$,err=*next)csm04$

rem ' history$=history$+d$+$0a$+cvs(snt01.ar_inv_nbr$,3)+$0a$+
rem ' :cvs(snt01.type_of_sale$,3)+$0a$+cvs(csm04.description$,3)+$0a$+
rem ' :str(snt01.users)+$0a$+cvs(snt01.auth_code$,3)+$0a$+cvs(snt01.item$,3)+$0a$+
rem ' :str(snt01.ext_price:"######.00-")+$0a$
rem ' rows=rows+1
rem ' goto read_snt01
rem ' end_snt01:
rem ' while rows<5
rem '   history$=history$+fill(8,$0a$) 
rem '   rows=rows+1
rem ' wend

print (gb__sysgui)'context'(gb__win.HOST_IDS_CHILD_WINDOW)
ctl_id=num(fattr(cw_host_ids$,"hostids_used","ID"))
while hostidsused<7
  hostidsused$=hostidsused$+fill(2,$0a$) 
  hostidsused =hostidsused + 1
wend
temp$=sendmsg(gb__sysgui,ctl_id,67,hostidsused,$$)
temp$=sendmsg(gb__sysgui,ctl_id,32,0,$$)
if hostidsused > 0 then
    temp$=sendmsg(gb__sysgui,ctl_id,87,0,hostidsused$)
fi
temp$=sendmsg(gb__sysgui,ctl_id,32,0,$$)

ctl_id=num(fattr(cw_host_ids$,"hostids_seq","ID"))
while hostidsseq<7
  hostidsseq$=hostidsseq$+fill(2,$0a$) 
  hostidsseq =hostidsseq + 1
wend
temp$=sendmsg(gb__sysgui,ctl_id,67,hostidsseq,$$)
temp$=sendmsg(gb__sysgui,ctl_id,32,0,$$)
if hostidsseq > 0 then
    temp$=sendmsg(gb__sysgui,ctl_id,87,0,hostidsseq$)
fi
temp$=sendmsg(gb__sysgui,ctl_id,32,0,$$)

rem ' builld the list of the SN LIMIT REJECTS
hostrejects$ = "", hostrejects = 0
read record(sn_limit_rejects, key = snm01.serial_nbr$, dom = *next)sn_limit_rejects$
while 1
    read record(sn_limit_rejects, end = *break)sn_limit_rejects$
    if pos(snm01.serial_nbr$ = sn_limit_rejects$) <> 1 then break
    hostrejects$ = sn_limit_rejects.regdate$ + $0A$ + sn_limit_rejects.regtime$ + $0A$ + cvs(sn_limit_rejects.hostid$,3) + $0A$ + hostrejects$
    hostrejects = hostrejects + 1
wend
ctl_id=num(fattr(cw_host_ids$,"rejectRegistrations","ID"))
while hostrejects < 4
  hostrejects$ = hostrejects$ + fill(3,$0a$) 
  hostrejects = hostrejects + 1
wend
temp$=sendmsg(gb__sysgui,ctl_id,67,hostrejects,$$)
temp$=sendmsg(gb__sysgui,ctl_id,32,0,$$)
if hostrejects > 0 then
    temp$=sendmsg(gb__sysgui,ctl_id,87,0,hostrejects$)
fi
temp$=sendmsg(gb__sysgui,ctl_id,32,0,$$)


rem ' check for a host id limit
found = 0
read record(sn_limit_hostid, key = snm01.serial_nbr$, dom = *next)sn_limit_hostid$; found = 1
if found then
    hostidLimitedTo!.setText(cvs(sn_limit_hostid.hostid$,3))
    hasHostIdLimit = 1
    gosub reverse_hostIdLimitBtn
    print (gb__sysgui)'context'(gb__win.detail_child_window)
    print (gb__sysgui)'show'(hostIdLimitlbl_id)
else
    hostidLimitedTo!.setText("")
    hasHostIdLimit = 0
    gosub reverse_hostIdLimitBtn
    print (gb__sysgui)'context'(gb__win.detail_child_window)
    print (gb__sysgui)'hide'(hostIdLimitlbl_id)
fi


print (gb__sysgui)'context'(gb__win.detail_child_window)
rem ' ctl_id=num(fattr(cw_sn_detail$,"transaction_history","ID"))
rem ' temp$=sendmsg(gb__sysgui,ctl_id,67,rows,$$)
rem ' temp$=sendmsg(gb__sysgui,ctl_id,32,0,$$)
rem ' temp$=sendmsg(gb__sysgui,ctl_id,87,0,history$)
rem ' temp$=sendmsg(gb__sysgui,ctl_id,32,0,$$)

rem ' manage the enable/disable status of the virtual flag check box, and the annualFlag checkbox
rem ' virtual eligible
if date(0:"%Y%Mz%Dz") < smc01.annual_dt$ and smc01.sam_active$ <> "N" then virtualEligible = 1 else virtualEligible = 0
if snm01.product$ <> "BAS" and snm01.product$ <> "PR5" and snm01.product$ <> "VP5" and snm01.product$ <> "DS5" then
    sysgui!.getWindow(gb__win.detail_child_window).getControl("virtualFlag").setEnabled(0)
else 
    if snm01.active_flag$ = "N" then
        sysgui!.getWindow(gb__win.detail_child_window).getControl("virtualFlag").setEnabled(0)
        sysgui!.getWindow(gb__win.detail_child_window).getControl("annualFlag").setEnabled(0)
    else
        sysgui!.getWindow(gb__win.detail_child_window).getControl("annualFlag").setEnabled(1)
        if virtualEligible or cvs(snm01.media_type$,3) = "VIR" then
            sysgui!.getWindow(gb__win.detail_child_window).getControl("virtualFlag").setEnabled(1)
        else
            rem ' sysgui!.getWindow(gb__win.detail_child_window).getControl("virtualFlag").setEnabled(0)
        fi
    fi
fi

rem ' manage the visible/invisible status of the production/backup license controls
foundSN = 0; prodSN$="", backSN$=""
read record(sn_prod_backup, knum=1, key=snm01.serial_nbr$, dom=*next)sn_prod_backup$; foundSN = 1
if foundSN then
    rem ' this sn is a production serial number
    prodSN$ = cvs(snm01.serial_nbr$,3)
    
    sysgui!.getWindow(gb__win.detail_child_window).getControl("addBackupBtn").setVisible(0)
    
    sysgui!.getWindow(gb__win.detail_child_window).getControl("grpBoxProdBack").setVisible(1)
    sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackMessage").setText("This serial number is a Production License.")
    sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackMessage").setVisible(1)    
    sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackMaintBtn").setVisible(1)
    sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackupLbl").setText("Backup License(s):")
    sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackupLbl").setVisible(1)
    sysgui!.getWindow(gb__win.detail_child_window).getControl("loadBtn").setVisible(1)

    backLic$ = cvs(sn_prod_backup.back_serial_nbr$,3)
    backSN$ = cvs(sn_prod_backup.back_serial_nbr$,3) + $0A$
    while 1
        read record(sn_prod_backup, end=*break)sn_prod_backup$
        if pos(snm01.serial_nbr$ = sn_prod_backup$) = 1 then
            backLic$ = backLic$ + ", " + cvs(sn_prod_backup.back_serial_nbr$,3)
            backSN$ = backSN$ + cvs(sn_prod_backup.back_serial_nbr$,3) + $0A$
        else
            break
        fi
     wend
     sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackLic").setText(backLic$)
     sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackLic").setVisible(1)    
else
    foundSN = 0
    read record(sn_prod_backup, knum=2, key=snm01.serial_nbr$, dom=*next)sn_prod_backup$; foundSN = 1
    if foundSN then
        rem ' this is a backup license
        backSN$ = cvs(sn_prod_backup.back_serial_nbr$,3) + $0A$
        prodSN$ = cvs(sn_prod_backup.prod_serial_nbr$,3)
        
        sysgui!.getWindow(gb__win.detail_child_window).getControl("addBackupBtn").setVisible(0)
            
        sysgui!.getWindow(gb__win.detail_child_window).getControl("grpBoxProdBack").setVisible(1)
        sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackMessage").setText("This serial number is a Backup License.")
        sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackMessage").setVisible(1)    
        sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackMaintBtn").setVisible(1)
        sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackupLbl").setText("Production License")
        sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackupLbl").setVisible(1)
        sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackLic").setText(sn_prod_backup.prod_serial_nbr$)
        sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackLic").setVisible(1) 
        sysgui!.getWindow(gb__win.detail_child_window).getControl("loadBtn").setVisible(1)   
    else
        rem ' show the Add Backup Btn'
        
        sysgui!.getWindow(gb__win.detail_child_window).getControl("addBackupBtn").setVisible(1)
            
        rem ' hide the prod/backup controls
        sysgui!.getWindow(gb__win.detail_child_window).getControl("grpBoxProdBack").setVisible(0)
        sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackMessage").setVisible(0)
        sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackMaintBtn").setVisible(0)
        sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackupLbl").setVisible(0)
        sysgui!.getWindow(gb__win.detail_child_window).getControl("prodBackLic").setVisible(0)
        sysgui!.getWindow(gb__win.detail_child_window).getControl("loadBtn").setVisible(0)
    fi
fi

return

[Function (show_window)]
rem ' -----------------------------------------------------------------
rem ' show_window
rem ' -----------------------------------------------------------------

show_window:

dim loc$:"x:i(2),y:i(2),w:u(2),h:u(2)"
loc$=ctrl(gb__sysgui,0,0,old_context)
print(gb__sysgui)'context'(new_context),'move'(0,loc.x,loc.y),
: 'enable'(0),'show'(0),'focus'(0),'raise','context'(old_context),'hide'(0)

return

[Function (state_list)]
rem ' -----------------------------------------------------------------
rem ' state_list
rem ' -----------------------------------------------------------------

state_list:
index=-1
if state_list$<>"" then goto state_loop_end
state_list$="  "+$0a$
read(states,key="",dom=state_loop)
state_loop:
read record (states,end=state_loop_end) states$
state_list$=state_list$+states.state_code$+$0a$
goto state_loop
state_loop_end:
temp=pos(tmm01.state$=state_list$)
if temp then index=pos($0a$=state_list$(1,temp),1,0)
temp=pos($ff$=state_list$)
if temp then state_list$=state_list$(1,temp-1)
if index>=0 then state_list$=state_list$+$ff$+str(index)

return

[Function (update_tmm03)]
rem ' -----------------------------------------------------------------
rem ' update_tmm03
rem ' -----------------------------------------------------------------

update_tmm03:
contact$=cvs(win_customer.main_contact$,3)
found=0  
read(tmm03,key=tmm01key$,dom=*next)
while 1  
  readrecord(tmm03,end=*break)tmm03$
  if pos(tmm01key$=tmm03$)<>1 then break
  if pos(cvs(contact$,4)=cvs(tmm03.contact_name$,4)) then found=1
  if na then
    tempmsg$="Contact: "+cvs(tmm03.contact_name$,3)
    if pos(tmm03.send_lit$="YE") then 
      i=msgbox("Remove from Advantage list?",36,tempmsg$)
      if i=6 then tmm03.send_lit$="N" 
    fi
    if tmm03.announcements$="Y" then 
      i=msgbox("Remove from Announcements list?",36,tempmsg$)
      if i=6 then tmm03.announcements$="N"
    fi
    tmm03$=field(tmm03$)
    writerecord(tmm03,key=tmm03$(1,17))tmm03$
  fi
wend
if found or contact$="" then goto tmm03_update_end
rem i=msgbox(contact$,4+32,"Add contact?");if i<>6 then goto tmm03_update_end 
dim tmm03$:fattr(tmm03$)
tmm03.contact_name$=contact$
tmm03.send_lit$="N"
tmm03.primary_contact$="Y"
tmm03k$=tmm01key$,seq$="010"
read(tmm03,key=tmm03k$,dom=*next)
while 1
  tmm03k$=key(tmm03,end=*break)
  read(tmm03)
  if pos(tmm01key$=tmm03k$)=0 then break
  seq$=str(num(tmm03k$(15,3))+10:"000")
wend
tmm03$(1,17)=tmm01key$+seq$
tmm03$=field(tmm03$)
writerecord(tmm03,key=tmm03$(1,17))tmm03$
tmm03_update_end:
return

[Function (win_customer_exit)]
rem ' -----------------------------------------------------------------
rem ' win_customer_exit
rem ' -----------------------------------------------------------------

win_customer_exit:
read(tmm01,end=*next);rem ' Release a possible extracted record
ctl_id=num(fattr(win_main$,"exit","ID"))
new_context=gb__win.main
old_context=gb__win.customer
gosub show_window
print (gb__sysgui)'context'(gb__win.main),'flush','focus'(ctl_id)
return

