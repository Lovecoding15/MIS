   rem ' Program Name: ec_eu_edit.src
   rem ' Resource File: ec_eu_edit.arc
   rem ' Generated by GUIBuilder 4.0 (June 10, 2020 at 15:34:36)
   rem ' Portions Copyright (C) 1997-2020 BASIS International Ltd.  All rights reserved.

   seterr gb__no_arg
   enter gb__arg$; gb__args=-1,gb__args=pos($0a$=fattr(gb__arg$,$$),1,0)
gb__no_arg:
   seterr 0

   precision 99
   gb__show_forms=2; rem ' Create all forms at the beginning

   rem ' gb_ini.cod - GUIBuilder generated programs: Initialization
   rem ' Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
   rem
   rem ' ***** I N I T I A L I Z A T I O N *****
   rem ' The first part of the initialization section ensures that the
   rem ' environment will support the requirements of the generated 
   rem ' program.  These requirements are:
   rem '     1.  The interpreter supports GUI
   rem '     2.  The interpreter is Visual PRO/5 2.0 or above
   rem '     3.  A SYSGUI device is defined in config.bbx
   rem

   rem ' 1. Make sure the interpreter in use supports GUI
   if info(6,0)="" then
:     print 'cs',;
:     print "This interpreter does not support GUI.";
:     print "Press any key to continue.",;
:     read record(0,siz=1);
:     stop
   rem

   rem ' 2. Make sure the interpreter in use is Visual PRO/5 2.0 or above
   if sys<"LEVEL 5" or (cvs(sys,3)="LEVEL 5" and cvs(rev,3)<"REV 2.0") then
:     input(0,err=gb__eoj)
:      	'ask'("",4,"Requires at least Visual PRO/5 Rev. 2.0.  "+
:      	"This program will now terminate.","&Terminate:Y"+$0a$),
:      	'ee',gb__temp$,'be',;
:     goto gb__eoj
   rem

   seterr gb__err; setesc gb__esc

   rem ' 3. Check config.bbx for SYSGUI and SYSPRINT devices
   gb__alias=0,gb__sysgui$="",gb__sysprint$=""
   dim gb__tsk$:"type:u(1),opens:u(1),name:c(1*=0),dname:c(1*=0),pname:c(1*=0),modes:c(1*=0)"

gb__check_tsk:
   gb__tsk$=tsk(gb__alias,err=gb__done_with_tsk)

   if gb__sysgui$="" and cvs(gb__tsk.pname$,7)="SYSGUI" then
:     gb__sysgui$=gb__tsk.name$

   if gb__sysprint$="" and cvs(gb__tsk.pname$,7)="SYSPRINT" then
:     gb__sysprint$=gb__tsk.name$

   if gb__sysgui$="" or gb__sysprint$="" then
:     gb__alias=gb__alias+1;
:     goto gb__check_tsk

gb__done_with_tsk:
   if gb__sysgui$="" then
:     gb__sysgui$="not defined in config.bbx";
:     goto gb__cannot_open_sysgui

   rem ' Open SYSGUI device
   gb__sysgui=unt; open (gb__sysgui,err=gb__cannot_open_sysgui)gb__sysgui$
   goto gb__opened_sysgui

gb__cannot_open_sysgui:
   gb__err$="Unable to open the SYSGUI device (alias "+gb__sysgui$+
:    ") in program "+pgm(-2)+".  Visual PRO/5 cannot maintain a graphical "+
:    "user interface without this device.  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"SYSGUI error")
   goto gb__eoj

gb__opened_sysgui:
   dim gb__sysgui_fin$:tmpl(gb__sysgui,ind=0)
   gb__sysgui_fin$=fin(gb__sysgui)

   rem ' splash screen, if any, can go here
   rem ' splash=gb__sysgui_fin.available_context
   rem ' print (gb__sysgui)'context'(splash),'window'(0,0,500,400,$$,$01000000$),'image'(0,0,500,400,"mysplash.gif")

   dim gb__event$:tmpl(gb__sysgui)
   gb__event=len(gb__event$)

   rem ' Open the resource file (try both .arc and .brc if necessary)
   gb__resource$="ec_eu_edit.arc"
   if pos("ec.bbj"= pgm(-2)) then gosub prep_routine
   gb__handle=resopen(gb__resource$,err=gb__resource_fallback);
:  goto gb__opened_resource

gb__resource_fallback:
   gb__temp=pos(".brc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"arc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

   gb__temp=pos(".arc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"brc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

gb__cannot_open_resource:
   gb__err$="Unable to open resource file ec_eu_edit.arc"+
:    " in program "+pgm(-2)+".  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"Resource file error")
   goto gb__eoj

   rem ' ------------------------------------------------------------------------
   rem ' Functions to manipulate screens and data
   rem ' ------------------------------------------------------------------------

   rem ' Get data from screen into template record
   def fngb__get_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put data from template record to screen
   def fngb__put_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Get fields from screen into template record
   def fngb__get_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put fields from template record to screen
   def fngb__put_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Set focus to specified Window ID
   def fngb__focus_win_id(xx__win_id$)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui,err=gb__focus_win_id)'context'(xx__context),'focus'(0),'raise',
      return xx__context
   gb__focus_win_id:
      xx__form=fngb__form(xx__win_id$)
      print (gb__sysgui)'context'(xx__context),
:                       'resource'(len(gb__resource$[xx__form])),gb__resource$[xx__form],
      return xx__context
   fnend


   rem ' Get form number given Window ID
   def fngb__form(xx__win_id$)
       gb__form=-1,xx__form_id$=xx__win_id$
       xx__form=pos("."=xx__form_id$)
       if xx__form then
:         xx__form_id$=xx__form_id$(1,xx__form-1)
       for xx__form=1 to gb__forms
           if gb__form.id$[xx__form]=xx__form_id$ then
:             gb__form=xx__form;
:             break
       next xx__form
       return gb__form
   fnend


   rem ' Set focus to specified Window ID + Control ID
   def fngb__focus_ctl_id(xx__win_id$,xx__ctl_id)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Set focus to specified Window ID + Control Name
   def fngb__focus_ctl_name(xx__win_id$,xx__ctl_name$)
      dim xx__rec$:fngb__template$(xx__win_id$)
      xx__ctl_id=num(fattr(xx__rec$,xx__ctl_name$,"ID"))
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Get Window ID given Context
   def fngb__win_id$(xx__context)
       xx__win_id$=""
       for xx__window=1 to gb__windows
           if gb__window.context[xx__window]=xx__context then
:             xx__win_id$=gb__window.win_id$[xx__window];
:             break
       next xx__window
       return xx__win_id$
   fnend


   rem ' Get Context given Window ID
   def fngb__context(xx__win_id$)
      gb__window=-1,gb__context=-1
      for xx__window=1 to gb__windows
          if gb__window.win_id$[xx__window]=xx__win_id$ then
:            gb__window=xx__window,gb__context=gb__window.context[gb__window];
:            break
      next xx__window
      if gb__context>=0 or gb__window<0 then
:        return gb__context
      return fngb__window(xx__win_id$)
   fnend


   rem ' Get Window Information given Window ID
   def fngb__win_info$(xx__win_id$)
      dim gb__win_info$(0)
      xx__context=fngb__context(xx__win_id$)
      if xx__context<0 then
:        return gb__win_info$
      dim gb__win_info$:"class:u(1),type:u(1),hidden:u(1),disabled:u(1),"
:                      +"context:u(2),eventmask:u(4),flags:u(4),focus:u(2),"
:                      +"x:i(2),y:i(2),w:u(2),h:u(2),title:c(16*=)"
      gb__win_info$=ctrl(gb__sysgui,0,4,xx__context)
:                  +ctrl(gb__sysgui,0,8,xx__context)
:                  +bin(xx__context,2)
:                  +sendmsg(gb__sysgui,0,21,0,"",xx__context)
:                  +sendmsg(gb__sysgui,0,22,0,"",xx__context)
:                  +ctrl(gb__sysgui,0,2,xx__context)
:                  +ctrl(gb__sysgui,0,0,xx__context)
:                  +ctrl(gb__sysgui,0,1,xx__context)
      return gb__win_info$
   fnend

gb__opened_resource:

   rem ==================== End of gb_ini.cod ====================

rem ' Instantiate form(s)

gb__forms = 2
dim gb__form_context[gb__forms],gb__resource$[gb__forms],gb__form$:"id[2]:c(4*=10)"

gb__windows=2; rem ' includes child windows, if any
gb__win_id$ = "101"

dim gb__win$:"END_USER_EDIT:I(2),BLANKWINDOW:I(2)"

gb__win.END_USER_EDIT=-1
gb__win.BLANKWINDOW=-1

dim gb__window$:"win_id[2]:c(8*=10),win_name[2]:c(16*=10),context[2]:n(4*=10)"
gb__window.win_id$[1]="101",gb__window.win_name$[1]="END_USER_EDIT",gb__window.context[1]=-1,gb__form.id$[1]="101"
gb__window.win_id$[2]="121",gb__window.win_name$[2]="BLANKWINDOW",gb__window.context[2]=-1,gb__form.id$[2]="121"

gb__context = fngb__window("101"); rem ' end_user_edit
gb__context = fngb__window("121"); rem ' blankWindow

rem ' Instantiate the form corresponding to a given window

   def fngb__window(xx__win_id$)
      gb__window = 0
      for xx__window=1 to gb__windows
         if gb__window.win_id$[xx__window]=xx__win_id$ then
:           gb__window = xx__window;
:           break
      next xx__window
      if gb__window = 0 then 
:        return -1
      if gb__window.context[gb__window] >= 0 then
:        return gb__window.context[gb__window]

      switch fngb__form(xx__win_id$)

         case 1; rem ' Load Form ID 101 (END_USER_EDIT)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[1]=gb__sysgui_fin.available_context
         gb__resource$[1]=resget(gb__handle,1,101)
         print (gb__sysgui)'context'(gb__form_context[1]),'resource'(len(gb__resource$[1])),gb__resource$[1]
         gb__win.END_USER_EDIT=gb__form_context[1]
         gb__window.context[1]=gb__win.END_USER_EDIT
         break

         case 2; rem ' Load Form ID 121 (BLANKWINDOW)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[2]=gb__sysgui_fin.available_context
         gb__resource$[2]=resget(gb__handle,1,121)
         print (gb__sysgui)'context'(gb__form_context[2]),'resource'(len(gb__resource$[2])),gb__resource$[2]
         gb__win.BLANKWINDOW=gb__form_context[2]
         gb__window.context[2]=gb__win.BLANKWINDOW
         break
      swend

      return gb__window.context[gb__window]
   fnend

rem ' Get template for controls on a given window

   def fngb__template$(xx__win_id$)
      if xx__win_id$="101" then return "REFERENCENBR:C(64*=0):ID=103 TYPE=16 X=160 Y=94 W=295 H=25:,COMPNAME:C(64*=0):ID=104 TYPE=16 X=160 Y=126 W=295 H=25:,CONTACTNAME:C(64*=0):ID=105 TYPE=16 X=160 Y=158 W=250 H=25:,ADDRLNONE:C(64*=0):ID=107 TYPE=16 X=160 Y=222 W=295 H=25:,ADDRLNTWO:C(64*=0):ID=108 TYPE=16 X=160 Y=254 W=295 H=25:,ADDRLNTHREE:C(64*=0):ID=109 TYPE=16 X=160 Y=286 W=295 H=25:,CITY:C(64*=0):ID=110 TYPE=16 X=160 Y=318 W=250 H=25:,STATE:C(255*=0):ID=111 TYPE=19 X=160 Y=350 W=70 H=130:,POSTALCODE:C(64*=0):ID=112 TYPE=16 X=330 Y=350 W=120 H=25:,COUNTRY:C(255*=0):ID=113 TYPE=19 X=160 Y=382 W=150 H=130:,EMAILADDRESS:C(64*=0):ID=114 TYPE=16 X=160 Y=414 W=295 H=25:,PHONENUMBER:C(64*=0):ID=115 TYPE=16 X=160 Y=446 W=170 H=25:,INDUSTRY:C(255*=0):ID=116 TYPE=19 X=610 Y=150 W=160 H=130:,OTHERDESC:C(64*=0):ID=117 TYPE=16 X=610 Y=182 W=160 H=25:,BASISPRODUCT:C(255*=0):ID=118 TYPE=19 X=610 Y=214 W=160 H=130:,APPMODULESUSED:C(64*=0):ID=119 TYPE=22 X=610 Y=246 W=160 H=97:,ADVANTAGE:N(1*=0):ID=120 TYPE=13 X=460 Y=350 W=310 H=25:,ANNOUNCEMENTS:N(1*=0):ID=121 TYPE=13 X=460 Y=382 W=310 H=25:,SAVE:C(1*=0):ID=128 TYPE=11 X=370 Y=560 W=120 H=25:,COMPANYNAMEFLAG:C(64*=0):ID=153 TYPE=17 X=140 Y=126 W=20 H=10:,LABEL1:C(64*=0):ID=129 TYPE=17 X=10 Y=131 W=140 H=25:,LABEL2:C(64*=0):ID=130 TYPE=17 X=10 Y=163 W=140 H=25:,LABEL3:C(64*=0):ID=131 TYPE=17 X=10 Y=227 W=140 H=25:,LABEL4:C(64*=0):ID=132 TYPE=17 X=10 Y=259 W=140 H=25:,LABEL5:C(64*=0):ID=133 TYPE=17 X=10 Y=291 W=140 H=25:,LABEL6:C(64*=0):ID=134 TYPE=17 X=10 Y=323 W=140 H=25:,LABEL7:C(64*=0):ID=135 TYPE=17 X=10 Y=355 W=140 H=25:,LABEL8:C(64*=0):ID=136 TYPE=17 X=235 Y=355 W=90 H=25:,COUNTRYFLAG:C(64*=0):ID=149 TYPE=17 X=140 Y=382 W=20 H=20:,LABEL9:C(64*=0):ID=137 TYPE=17 X=10 Y=387 W=140 H=25:,EMAILFLAG:C(64*=0):ID=160 TYPE=17 X=140 Y=414 W=20 H=20:,LABEL10:C(64*=0):ID=138 TYPE=17 X=10 Y=419 W=140 H=25:,LABEL11:C(64*=0):ID=139 TYPE=17 X=10 Y=451 W=140 H=25:,LABEL12:C(64*=0):ID=140 TYPE=17 X=460 Y=155 W=140 H=25:,LABEL13:C(64*=0):ID=141 TYPE=17 X=460 Y=187 W=140 H=25:,LABEL14:C(64*=0):ID=142 TYPE=17 X=460 Y=213 W=140 H=31:,LABEL15:C(64*=0):ID=143 TYPE=17 X=460 Y=251 W=140 H=60:,EXISTINGLIST:C(255*=0):ID=102 TYPE=19 X=160 Y=62 W=295 H=110:,LABEL_16:C(64*=0):ID=144 TYPE=17 X=10 Y=62 W=140 H=30:,ENDUSERNBR:C(64*=0):ID=126 TYPE=16 X=160 Y=478 W=150 H=25:,LABEL17:C(64*=0):ID=145 TYPE=17 X=10 Y=483 W=140 H=25:,LABEL18:C(64*=0):ID=146 TYPE=17 X=10 Y=99 W=140 H=20:,LINKEDSERIALNBRS:C(255*=0):ID=122 TYPE=18 X=390 Y=471 W=150 H=80:,ADDSERIALNBR:C(1*=0):ID=123 TYPE=11 X=550 Y=471 W=40 H=25:,REMOVESERIALNBR:C(1*=0):ID=124 TYPE=11 X=550 Y=505 W=40 H=25:,UNLINKEDSERIALNBRS:C(255*=0):ID=125 TYPE=18 X=600 Y=471 W=150 H=80:,LABEL20:C(64*=0):ID=148 TYPE=17 X=390 Y=441 W=170 H=30:,LABEL19:C(64*=0):ID=147 TYPE=17 X=600 Y=441 W=170 H=30:,CLEAR:C(1*=0):ID=127 TYPE=11 X=230 Y=560 W=120 H=25:,COMPNAMEREQ:C(64*=0):ID=150 TYPE=17 X=460 Y=126 W=60 H=25:,COUNTRYREQ:C(64*=0):ID=151 TYPE=17 X=315 Y=382 W=70 H=25:,TOGGLELISTORDER:C(1*=0):ID=152 TYPE=11 X=465 Y=62 W=200 H=25:,SERIALNUMBER:C(64*=0):ID=100 TYPE=16 X=160 Y=30 W=120 H=25:,LABEL21:C(64*=0):ID=154 TYPE=17 X=10 Y=35 W=140 H=25:,GETBUTTON:C(1*=0):ID=101 TYPE=11 X=300 Y=30 W=70 H=25:,DOWNLOAD:C(1*=0):ID=155 TYPE=11 X=510 Y=560 W=120 H=25:,BACK:C(1*=0):ID=156 TYPE=11 X=650 Y=560 W=120 H=25:,STATIC_TEXT:C(64*=0):ID=157 TYPE=17 X=10 Y=195 W=140 H=25:,CONTACTPHONE:C(64*=0):ID=106 TYPE=16 X=160 Y=190 W=170 H=25:,EMAILREQ:C(64*=0):ID=158 TYPE=17 X=460 Y=414 W=50 H=25:,HEADERTEXT:C(64*=0):ID=159 TYPE=17 X=0 Y=0 W=790 H=25:,SPECIFICSERIALNBR:C(64*=0):ID=161 TYPE=16 X=210 Y=526 W=120 H=25:,SPECIFICSERIALNBRBTN:C(1*=0):ID=162 TYPE=11 X=340 Y=526 W=40 H=25:,SPECIFICSERIALNBRLBL:C(64*=0):ID=163 TYPE=17 X=10 Y=531 W=190 H=25:"
      if xx__win_id$="121" then return "HEADERTEXT:C(64*=0):ID=100 TYPE=17 X=0 Y=0 W=790 H=24:"
      return ""
   fnend

rem ' get our inteface objects
ourAPI!=BBjAPI()
ourSysGui!=ourAPI!.getSysGui()
ourSystemMetrics!=ourSysGui!.getSystemMetrics()
scrDimension!=ourSystemMetrics!.getScreenSize()
ourContext=gb__win.end_user_edit
ourWindow!=ourSysGui!.getWindow(ourContext)
topLevelWindow!=cast(BBjTopLevelWindow, ourSysGui!.getWindow(ourContext))
blankWindow! = ourSysGui!.getWindow(gb__win.blankWindow)
rem ' callersWindow!=ourSysGui!.getWindow(gb__arg.callersContext)

firmId!=gb__arg.firm_id$
customerNbr!=gb__arg.customer_nbr$
lang!=gb__arg.lang$
endUserSerialNbrs!=ourAPI!.makeVector()

rem ' if running in BUI disable the download button
rem ' added back 4/21/2011
rem ' if info(3,6) = "5" then
rem '    ourWindow!.getControl("download").setEnabled(0)
rem ' fi

gosub prep_files

ourDbUrl! = FNgetDbUrl!(props!)
logger! = new EndUserLogger(ourDbUrl!)
marCommUpdater! = new EuMarCommUpdater(ourDBUrl!)

translator!.translateWindow(ourWindow!)

ourWindow!.setText(ourWindow!.getText() + " - " + gb__arg.customer_nbr$)
gosub center_window
ourWindow!.setVisible(1)
ourWindow!.focus()

rem ' hide the caller's Window
rem ' the caller handles itself now 
rem ' callersWindow!.setVisible(0)

rem ' set cursor to hour glass
ourWindow!.setCursor(3)

gosub get_objects

rem ' controls the order of the end user select list
usingCompanyOrder=1

rem ' load the lists for the selection boxes
gosub get_country_list
gosub get_industry_list
gosub get_end_user_list
gosub get_product_list
gosub get_state_list
gosub load_unlinked_serial_nbrs

rem ' set cursor to pointer
ourWindow!.setCursor(0)
cast(BBjEditBox, controls!.get("referenceNbr")).focus()
rem ' ---------------------------------------------------------------
rem ' Event Loop
rem ' ---------------------------------------------------------------

dim gb__closed[gb__windows]; rem ' track window status
dim gb__generic$:noticetpl(0,0); rem ' generic notice template
gb__eoj=0
goto gb__event

rem ' Load gb__notice$ string only if we're handling the event

gb__notice:
   gb__generic$=notice(gb__sysgui,gb__event.x%)
   dim gb__notice$:noticetpl(gb__generic.objtype%,gb__event.flags%)
   gb__notice$=gb__generic$
return

gb__event: repeat
   read record (gb__sysgui,siz=gb__event,err=gb__event_loop_end)gb__event$

   rem ' Get Window ID or Popup ID
   gb__win_id$=$$,gb__popup_id=gb__event.x*(gb__event.code$="P")
   if gb__popup_id=0 then gb__win_id$=fngb__win_id$(gb__event.context)

   rem ' Track whether event was handled
   gb__event_handled=0

   rem ' Handle events for Window ID 101 (end_user_edit)
   while gb__win_id$="101"
      if gb__event.code$="X" then
:        gosub W101_C0_WIN_CLOSE;
:        gb__closed[1]=1;
:        gb__event_handled=1;
:        break
      if gb__event.id=100 and gb__event.code$="e" then
:        gosub W101_C100_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=101 and gb__event.code$="B" then
:        gosub W101_C101_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=102 and gb__event.code$="N" and gb__event.flags=2 then
:        gosub gb__notice;
:        gosub W101_C102_LIST_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=103 and gb__event.code$="e" then
:        gosub W101_C103_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=104 and gb__event.code$="e" then
:        gosub W101_C104_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=105 and gb__event.code$="e" then
:        gosub W101_C105_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=106 and gb__event.code$="e" then
:        gosub W101_C106_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=107 and gb__event.code$="e" then
:        gosub W101_C107_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=108 and gb__event.code$="e" then
:        gosub W101_C108_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=109 and gb__event.code$="e" then
:        gosub W101_C109_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=110 and gb__event.code$="e" then
:        gosub W101_C110_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=111 and gb__event.code$="N" and gb__event.flags=2 then
:        gosub gb__notice;
:        gosub W101_C111_LIST_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=112 and gb__event.code$="e" then
:        gosub W101_C112_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=113 and gb__event.code$="N" and gb__event.flags=2 then
:        gosub gb__notice;
:        gosub W101_C113_LIST_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=114 and gb__event.code$="e" then
:        gosub W101_C114_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=115 and gb__event.code$="e" then
:        gosub W101_C115_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=116 and gb__event.code$="N" and gb__event.flags=2 then
:        gosub gb__notice;
:        gosub W101_C116_LIST_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=117 and gb__event.code$="e" then
:        gosub W101_C117_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=118 and gb__event.code$="N" and gb__event.flags=2 then
:        gosub gb__notice;
:        gosub W101_C118_LIST_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=119 and gb__event.code$="e" then
:        gosub W101_C119_EDIT_CHANGE;
:        gb__event_handled=1;
:        break
      if gb__event.id=120 and gb__event.code$="c" and gb__event.flags=0 then
:        gosub W101_C120_CHECK_OFF;
:        gb__event_handled=1;
:        break
      if gb__event.id=120 and gb__event.code$="c" and gb__event.flags=1 then
:        gosub W101_C120_CHECK_ON;
:        gb__event_handled=1;
:        break
      if gb__event.id=121 and gb__event.code$="c" and gb__event.flags=0 then
:        gosub W101_C121_CHECK_OFF;
:        gb__event_handled=1;
:        break
      if gb__event.id=121 and gb__event.code$="c" and gb__event.flags=1 then
:        gosub W101_C121_CHECK_ON;
:        gb__event_handled=1;
:        break
      if gb__event.id=123 and gb__event.code$="B" then
:        gosub W101_C123_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=124 and gb__event.code$="B" then
:        gosub W101_C124_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=127 and gb__event.code$="B" then
:        gosub W101_C127_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=128 and gb__event.code$="B" then
:        gosub W101_C128_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=152 and gb__event.code$="B" then
:        gosub W101_C152_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=155 and gb__event.code$="B" then
:        gosub W101_C155_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=156 and gb__event.code$="B" then
:        gosub W101_C156_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=162 and gb__event.code$="B" then
:        gosub W101_C162_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      break; rem ' Catch unhandled events
   wend; rem ' End of Window ID 101


   rem ' No events for Window ID 121 (blankWindow)
   rem ' We're done when all windows have been closed.
   rem ' Developer can terminate event loop by setting
   rem ' gb__eoj=1 in any event handler.

   if !(gb__eoj) then
:     gb__eoj=1;
:     for gb__window=1 to gb__windows;
:        gb__eoj=(gb__eoj and gb__closed[gb__window]);
:     next gb__window

until gb__eoj

gb__event_loop_end: rem ' -------------------------------------

gosub show_callersWindow

ourWindow!.destory()
rem gb_eoj.cod - GUIBuilder generated programs: End of Job
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** P R O G R A M   E X I T **************************************
rem
gb__eoj:
   if gb__forms and gb__sysgui then
:     for gb__temp=1 to gb__forms;
:        print (gb__sysgui)'context'(gb__form_context[gb__temp]),'destroy'(0);
:     next gb__temp

   if gb__sysgui then
:     close (gb__sysgui)

   resclose (gb__handle,err=gb__eoj_final)

gb__eoj_final:

   if tcb(13) then
:     exit
:  else
:     release

rem gb_err.cod - GUIBuilder generated programs: Error handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E R R O R   H A N D L E R ************************************
rem
gb__err:
   
   rem ' terminate on Network Lost Errors
   if err = 71 or err = 72 then goto gb__eoj

   gb__temp=msgbox(errmes(-1)+" ("+str(err)+")"+
:      " occurred at line "+str(tcb(5))+
:      " in program "+pgm(-2),5+48,"Error handler")

   if gb__temp=4 then
:     retry
:  else
:     goto gb__eoj

rem gb_esc.cod - GUIBuilder generated programs: Escape handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E S C A P E   H A N D L E R ***********************************
rem
gb__esc:
   
   rem ' terminate program when ESCAPE detected.
   goto gb__eoj
   
   gb__temp=msgbox("An ESCAPE has been detected.  Do you want to end this "+
:     "program?",4+32+256,"ESCAPE handler")
   if gb__temp=7 then
:     return
:  else
:     goto gb__eoj

rem ' -----------------------------------------------------------------rem ' Declarationsrem ' -----------------------------------------------------------------

Declarations:

USE java.io.File
USE java.io.FileInputStream
USE java.io.BufferedInputStream
USE java.util.Properties
USE java.lang.StringBuffer
USE java.util.HashMap
USE java.awt.Dimension
USE ::LanguageTranslator.src::LanguageTranslator
USE ::EndUserLogger.src::EndUserLogger
USE ::EuMarCommUpdater.src::EuMarCommUpdater

rem ' general objects
DECLARE BBjAPI ourAPI!
DECLARE BBjSysGui ourSysGui!
DECLARE BBjWindow ourWindow!
DECLARE BBjTopLevelWindow topLevelWindow!
rem ' DECLARE BBjWindow callersWindow!
DECLARE BBjWindow blankWindow!
DECLARE BBjAppletProxy applet!
DECLARE BBjSystemMetrics ourSystemMetrics!
DECLARE BBjFileInfo snmeuFileInfo!
DECLARE BBjVector wrkVector1!
DECLARE BBjVector wrkVector2!
DECLARE BBjVector endUserSerialNbrs!
DECLARE BBjInt index!
DECLARE BBjString lang!

rem ' control objects
DECLARE BBjVector ourControlVector!
DECLARE BBjControl control!

rem ' SQL objects
DECLARE BBjRecordSet ourRecordSet!
DECLARE BBjRecordData ourRecordData!
DECLARE BBjVector currentListBoxItems!
DECLARE BBjListBox unlinkedSerialNbrs!
DECLARE BBjString ourDbUrl!
DECLARE BBjString udfSql!
DECLARE BBjString sql!
DECLARE BBjString firmId!
DECLARE BBjString customerNbr!
DECLARE BBjString serialNbr!
DECLARE BBjString firmIdTarget!
DECLARE BBjString customerNbrTarget!
DECLARE BBjString serialNbrTarget!
DECLARE BBjTemplatedString snmeu!

DECLARE File file!
DECLARE FileInputStream fis!
DECLARE BufferedInputStream bis!
DECLARE Properties props!
DECLARE StringBuffer sqlBuilder!
DECLARE StringBuffer wrkBuilder!
DECLARE StringBuffer wrkBuilder2!
DECLARE HashMap Controls!
DECLARE LanguageTranslator translator!
DECLARE Dimension scrDimension!
DECLARE EndUserLogger logger!
DECLARE EuMarCommUpdater marCommUpdater!

return
rem ' -----------------------------------------------------------------rem ' add_serial_numbersrem ' -----------------------------------------------------------------

add_serial_numbers:

wrkVector1!=cast(BBjListBox, controls!.get("UnlinkedSerialNbrs")).getSelectedIndices()
wrkVector2!=cast(BBjListBox, controls!.get("UnlinkedSerialNbrs")).getAllItems()

if wrkVector1!.size() then
    for x = 0 to wrkVector1!.size()-1
        index!=cast(BBjInt, wrkVector1!.getItem(x))
        wrkString$=cast(BBjString, wrkVector2!.getItem(index!))
        if endUserSerialNbrs!.size() > 0 then
            rem ' put it in the right order
            inserted=0
            for y = 0 to endUserSerialNbrs!.size()-1
                targetStr$=cast(BBjString, endUserSerialNbrs!.getItem(y))
                if wrkString$ <= targetStr$ then
                    endUserSerialNbrs!.insertItem(y, wrkString$)
                    inserted=1
                    break
                fi
            next y
            if !inserted then
                endUserSerialNbrs!.insertItem(endUserSerialNbrs!.size(), wrkString$)
            fi
        else
            endUserSerialNbrs!.addItem(wrkString$)
        fi
    next x

    rem ' remove the serial numbers
    for x = wrkVector1!.size()-1 to 0 step -1
        index!=cast(BBjInt, wrkVector1!.getItem(x))
        wrkVector2!.removeItem(index!)
    next x
    cast(BBjListBox, controls!.get("LinkedSerialNbrs")).removeAllItems()
    cast(BBjListBox, controls!.get("LinkedSerialNbrs")).insertItems(0, endUserSerialNbrs!)
    cast(BBjListBox, controls!.get("UnlinkedSerialNbrs")).removeAllItems()
    cast(BBjListBox, controls!.get("UnlinkedSerialNbrs")).insertItems(0, wrkVector2!)
    formDirty=1
fi

return
rem ' -----------------------------------------------------------------rem ' center_windowrem ' -----------------------------------------------------------------

center_window:

rem ' this app is strictly BUI now
return

rem are we running as an applet
if info(3,6)="2" then
    topLevelWindow!.setTitleBarVisible(0)
    applet!=ourAPI!.getAppletProxy()
    applet!.setBounds(0,0,525,600)
else
    width = scrDimension!.width
    height = scrDimension!.height
    winWidth = ourWindow!.getWidth()
    winHeight = ourWindow!.getHeight()

    x = int((width-winWidth)/2)
    y = int((height-winHeight)/2)

    ourWindow!.setLocation(x,y)
fi

return
rem ' -----------------------------------------------------------------
rem ' check_form
rem ' -----------------------------------------------------------------

check_form:

rem the purpose of this routine is to decide if the form is dirty, but only
rem dirty because the user has added a serial number to the linked serial 
rem number listbox

preserveSerialNbr=0

rem if the form is not dirty return
if !formDirty then return

rem if no serial numbers linked return
let gotSerialNbrs = cast(BBjListBox, controls!.get("LinkedSerialNbrs")).getItemCount()
if gotSerialNbrs = 0 then return

rem ok the form is dirty and we have serial numbers
rem everything else must be empty

if cvs(cast(BBjEditBox, controls!.get("endUserNbr")).getText(),3)<>"" then return

if cvs(cast(BBjEditBox, controls!.get("referenceNbr")).getText(),3)<>"" then return
if cvs(cast(BBjEditBox, controls!.get("CompName")).getText(),3)<>"" then return
if cvs(cast(BBjEditBox, controls!.get("ContactName")).getText(),3)<>"" then return
if cvs(cast(BBjEditBox, controls!.get("ContactPhone")).getText(),3)<>"" then return
if cvs(cast(BBjEditBox, controls!.get("AddrLnOne")).getText(),3)<>"" then return
if cvs(cast(BBjEditBox, controls!.get("AddrLnTwo")).getText(),3)<>"" then return
if cvs(cast(BBjEditBox, controls!.get("AddrLnThree")).getText(),3)<>"" then return
if cvs(cast(BBjEditBox, controls!.get("City")).getText(),3)<>"" then return

if cast(BBjListButton, controls!.get("State")).getSelectedIndex() > -1 then return

if cvs(cast(BBjEditBox, controls!.get("PostalCode")).getText(),3)<>"" then return

if cast(BBjListButton, controls!.get("Country")).getSelectedIndex() > -1 then return

if cvs(cast(BBjEditBox, controls!.get("EmailAddress")).getText(),3)<>"" then return
if cvs(cast(BBjEditBox, controls!.get("PhoneNumber")).getText(),3)<>"" then return

if cast(BBjListButton, controls!.get("Industry")).getSelectedIndex() > -1 then return

if cvs(cast(BBjEditBox, controls!.get("OtherDesc")).getText(),3)<>"" then return

if cast(BBjListButton, controls!.get("BasisProduct")).getSelectedIndex() > -1 then return

if cvs(cast(BBjCEdit, controls!.get("AppModulesUsed")).getText(),3)<>"" then return


if cast(BBjCheckBox, controls!.get("Advantage")).isSelected() then return
if cast(BBjCheckBox, controls!.get("Announcements")).isSelected() then return

rem the form is dirty only because we started with an empty form and
rem added a serialNbr
msg$=translator!.getMessage("merge.serialNbrs.question")
title$=translator!.getMessage("merge.serialNbrs.quesiton.title")
response=msgbox(msg$, 4+32, title$)
if response=6 then preserveSerialNbr=1

return
rem ' -----------------------------------------------------------------rem ' clear_formrem ' -----------------------------------------------------------------

clear_form:

formCleared=1

rem ' need to ask if save needed when dirty flag set
if formDirty then
    msg$=translator!.getMessage("save.question")
    title$=translator!.getMessage("save.quesiton.title")
    response=msgbox(msg$, 4+32, title$)
    if response=6 then
        gosub save_form
        if !isValid then
            formCleared=0
            return
        fi
    fi
fi

formDirty=0

ourWindow!.setCursor(3)

cast(BBjListButton, controls!.get("existingList")).deselect()
cast(BBjEditBox, controls!.get("serialNumber")).setText("")
cast(BBjEditBox, controls!.get("endUserNbr")).setText("")
cast(BBjEditBox, controls!.get("referenceNbr")).setText("")
cast(BBjEditBox, controls!.get("CompName")).setText("")
cast(BBjEditBox, controls!.get("ContactName")).setText("")
cast(BBjEditBox, controls!.get("ContactPhone")).setText("")
cast(BBjEditBox, controls!.get("AddrLnOne")).setText("")
cast(BBjEditBox, controls!.get("AddrLnTwo")).setText("")
cast(BBjEditBox, controls!.get("AddrLnThree")).setText("")
cast(BBjEditBox, controls!.get("City")).setText("")
cast(BBjListButton, controls!.get("State")).deselect()
cast(BBjEditBox, controls!.get("PostalCode")).setText("")
cast(BBjListButton, controls!.get("Country")).deselect()
cast(BBjEditBox, controls!.get("EmailAddress")).setText("")
cast(BBjEditBox, controls!.get("PhoneNumber")).setText("")
cast(BBjListButton, controls!.get("Industry")).deselect()
cast(BBjEditBox, controls!.get("OtherDesc")).setText("")
cast(BBjEditBox, controls!.get("OtherDesc")).setEnabled(0)
cast(BBjListButton, controls!.get("BasisProduct")).deselect()
cast(BBjCEdit, controls!.get("AppModulesUsed")).setText("")
cast(BBjCheckBox, controls!.get("Advantage")).setSelected(0)
cast(BBjCheckBox, controls!.get("Announcements")).setSelected(0)
cast(BBjListBox, controls!.get("LinkedSerialNbrs")).removeAllItems()
cast(BBjEditBox, controls!.get("specificSerialNbr")).setText("")
endUserSerialNbrs!.clear()
gosub load_unlinked_serial_nbrs
cast(BBjListBox, controls!.get("UnlinkedSerialNbrs")).deselectAll()

cast(BBjStaticText, controls!.get("compNameReq")).setVisible(0)
cast(BBjStaticText, controls!.get("countryReq")).setVisible(0)
cast(BBjStaticText, controls!.get("emailReq")).setVisible(0)
cast(BBjStaticText, controls!.get("emailFlag")).setVisible(0)

ourWindow!.setCursor(0)
cast(BBjEditBox, controls!.get("referenceNbr")).focus()

return
rem ' -----------------------------------------------------------------
rem ' find_serial_number
rem ' -----------------------------------------------------------------

find_serial_number:

rem ' serial number in enteredSerialNumber$

ourDbUrl! = FNgetDbUrl!(props!)
sql!=FNgetFindSerialNumberQuery!(props!)
sql!=FNinsertSerialNumber!(sql!, enteredSerialNumber$)
ourRecordSet!=ourAPI!.createSQLRecordSet(ourDbUrl!,"",sql!)

if ourRecordSet!.isEmpty() then
    msg$=translator!.getMessage("nonexistant.serialNbr")
    title$=translator!.getMessage("nonexistant.serialNbr.title")
    response=msgbox(msg$, 64, title$)
    cast(BBjEditBox, controls!.get("serialNumber")).setText("")
else
    rem ' if it is not empty then the serial number is there, is it linked
    tempSerNbr$=enteredSerialNumber$+FILL(20," "), tempSerNbr$=tempSerNbr$(1,20)
    dim snmel$:fattr(snmel$)
    read record(snmel,key=tempSerNbr$,knum=0,dom=*next)snmel$
    if cvs(snmel.end_user_nbr$,3) <> "" then
        rem ' we got an end user
        gosub clear_form
        if formCleared then
            endUserNbr$=snmel.end_user_nbr$
            gosub retrieve_and_load_enduser
            cast(BBjEditBox, controls!.get("serialNumber")).setText("")
        fi
    else
        rem ' have an unlinked serial number
        msg$=translator!.getMessage("unlinked.serialNbr")
        title$=translator!.getMessage("unlinked.serialNbr.title")
        response=msgbox(msg$, 4+32, title$)
        if response=6 then
            gosub clear_form
            if formCleared then
                cast(BBjListBox, controls!.get("UnlinkedSerialNbrs")).deselectAll()
                wrkVector2!=cast(BBjListBox, controls!.get("UnlinkedSerialNbrs")).getAllItems()
                if wrkVector2!.size() then
                    for x = 0 to wrkVector2!.size()-1
                        wrkString$=cast(BBjString, wrkVector2!.getItem(x))
                        if wrkString$=cvs(tempSerNbr$,3) then
                            cast(BBjListBox, controls!.get("UnlinkedSerialNbrs")).selectIndex(x)
                            gosub add_serial_numbers
                            cast(BBjEditBox, controls!.get("referenceNbr")).focus()
                            break
                        fi
                    next x
                fi
                cast(BBjEditBox, controls!.get("serialNumber")).setText("")
            fi
        else
            cast(BBjEditBox, controls!.get("serialNumber")).setText("")
        fi
    fi
fi

return
rem ' -----------------------------------------------------------------rem ' get_country_listrem ' -----------------------------------------------------------------

get_country_list:

ourDbUrl! = FNgetDbUrl!(props!)

sql!=FNgetCountriesQuery!(props!)

ourRecordSet!=ourAPI!.createSQLRecordSet(ourDbUrl!,"",sql!)

countrylist$=""

if !(ourRecordSet!.isEmpty()) then

    ourRecordSet!.first()
    
    wrkBuilder! = new StringBuffer()

    while 1
        thisRecord!=ourRecordSet!.getCurrentRecordData()

        wrkBuilder!.append(cvs(thisRecord!.getFieldValue("COUNTRY_NAME"),3)+$0a$)

        ourRecordSet!.next(err=*break)

    wend
    countryList$=wrkBuilder!.toString()
fi
ourRecordSet!.close()

cast(BBjListButton, controls!.get("Country")).insertItems(0, countryList$)
cast(BBjListButton, controls!.get("Country")).deselect()

return
rem ' -----------------------------------------------------------------rem ' get_end_user_listrem ' -----------------------------------------------------------------

get_end_user_list:

cast(BBjListButton, controls!.get("existingList")).removeAllItems()

ourDbUrl! = FNgetDbUrl!(props!)
sql!=FNgetEndUserLstQuery!(props!)

byCompanyNameSQL$=sql!+props!.getProperty("endUserList.orderByCompany")
byReferenceNbrSQL$=sql!+props!.getProperty("endUserList.orderByReferenceNbr")

ourRecordSet!=ourAPI!.createSQLRecordSet(ourDbUrl!,"",byCompanyNameSQL$)
endUserListCount=0
endUserDisplayListComp$="", endUserValueListComp$=""
endUserDisplayListRef$="", endUserValueListRef$=""

if !(ourRecordSet!.isEmpty()) then
    
    ourRecordSet!.first()
    wrkBuilder! = new StringBuffer()

    while 1
        thisRecord!=ourRecordSet!.getCurrentRecordData()

        wrkBuilder!.append(cvs(thisRecord!.getFieldValue("COMPANY_NAME"),3))
        
        if cvs(thisRecord!.getFieldValue("CONTACT"),3)<>"" then
            wrkBuilder!.append(", "+cvs(thisRecord!.getFieldValue("CONTACT"),3))
        fi
        
        if cvs(thisRecord!.getFieldValue("REFERENCE_NBR"),3)<>"" then
            wrkBuilder!.append(", "+cvs(thisRecord!.getFieldValue("REFERENCE_NBR"),3))
        fi

        wrkBuilder!.append(" ("+str(num(cvs(thisRecord!.getFieldValue("END_USER_NBR"),3)))+")" + $0A$)

        endUserValueListComp$=endUserValueListComp$+cvs(thisRecord!.getFieldValue("END_USER_NBR"),3)+$0A$
        endUserListCount=endUserListCount+1
        ourRecordSet!.next(err=*break)

    wend
    endUserDisplayListComp$=wrkBuilder!.toString()
fi
ourRecordSet!.close()

ourRecordSet!=ourAPI!.createSQLRecordSet(ourDbUrl!,"",byReferenceNbrSQL$)

if !(ourRecordSet!.isEmpty()) then
    
    ourRecordSet!.first()
    wrkBuilder! = new StringBuffer()

    while 1
        thisRecord!=ourRecordSet!.getCurrentRecordData()
        
        wrk$=cvs(thisRecord!.getFieldValue("REFERENCE_NBR"),3)
        if wrk$="" then wrk$="No Number"
        wrkBuilder!.append(wrk$)
        
        if cvs(thisRecord!.getFieldValue("COMPANY_NAME"),3)<>"" then
            wrkBuilder!.append(", "+cvs(thisRecord!.getFieldValue("COMPANY_NAME"),3))
        fi
        
        if cvs(thisRecord!.getFieldValue("CONTACT"),3)<>"" then
            wrkBuilder!.append(", "+cvs(thisRecord!.getFieldValue("CONTACT"),3))
        fi

        wrkBuilder!.append(" ("+str(num(cvs(thisRecord!.getFieldValue("END_USER_NBR"),3)))+")" + $0A$)

        endUserValueListRef$=endUserValueListRef$+cvs(thisRecord!.getFieldValue("END_USER_NBR"),3)+$0A$
        ourRecordSet!.next(err=*break)

    wend
    endUserDisplayListRef$=wrkBuilder!.toString()
fi
ourRecordSet!.close()

if usingCompanyOrder then
    cast(BBjListButton, controls!.get("existingList")).insertItems(0, endUserDisplayListComp$)
else
    cast(BBjListButton, controls!.get("existingList")).insertItems(0, endUserDisplayListRef$)
fi

cast(BBjListButton, controls!.get("existingList")).deselect()

return
rem ' -----------------------------------------------------------------rem ' get_industry_listrem ' -----------------------------------------------------------------

get_industry_list:

ourDbUrl! = FNgetDbUrl!(props!)

sql!=FNgetIndustriesQuery!(props!)

ourRecordSet!=ourAPI!.createSQLRecordSet(ourDbUrl!,"",sql!)

industrylist$=""
industryIdList$=""
otherIndustryID$=""

if !(ourRecordSet!.isEmpty()) then

    ourRecordSet!.first()
    
    wrkBuilder! = new StringBuffer()
    wrkBuilder2! = new StringBuffer()

    while 1
        thisRecord!=ourRecordSet!.getCurrentRecordData()
        wrkStr$=cvs(thisRecord!.getFieldValue("INDUSTRY_NAME"),3)
        wrkStr2$=cvs(thisRecord!.getFieldValue("INDUSTRY_ID"),3)
        if wrkStr$="Other" then
            otherIndustryID$=wrkStr2$
        fi
        wrkBuilder!.append(wrkStr$+$0a$)
        wrkBuilder2!.append(wrkStr2$+$0a$)
        ourRecordSet!.next(err=*break)

    wend
    industryList$=wrkBuilder!.toString()
    industryIdList$=wrkBuilder2!.toString()
fi
ourRecordSet!.close()

cast(BBjListButton, controls!.get("Industry")).insertItems(0, industryList$)
cast(BBjListButton, controls!.get("Industry")).deselect()

return
rem ' -----------------------------------------------------------------rem ' get_objectsrem ' -----------------------------------------------------------------

get_objects:

ourControlVector! = ourWindow!.getAllControls()
controls! = new HashMap()

for i=0 to ourControlVector!.size() - 1
    control!= cast(BBjControl, ourControlVector!.getItem(i))
    controls!.put(control!.getName(), control!)
next i

return
rem ' -----------------------------------------------------------------rem ' get_product_listrem ' -----------------------------------------------------------------

get_product_list:

ourDbUrl! = FNgetDbUrl!(props!)

sql!=FNgetBasisProdListQuery!(props!)

ourRecordSet!=ourAPI!.createSQLRecordSet(ourDbUrl!,"",sql!)

basisProdList$=""

if !(ourRecordSet!.isEmpty()) then

    ourRecordSet!.first()
    
    wrkBuilder! = new StringBuffer()

    while 1
        thisRecord!=ourRecordSet!.getCurrentRecordData()

        wrkBuilder!.append(cvs(thisRecord!.getFieldValue("DESCRIPTION"),3)+$0a$)

        ourRecordSet!.next(err=*break)

    wend
    basisProdList$=wrkBuilder!.toString()
fi
ourRecordSet!.close()

basisProdList$=basisProdList$+"Uses several products"+$0a$

cast(BBjListButton, controls!.get("BasisProduct")).insertItems(0, basisProdList$)
cast(BBjListButton, controls!.get("BasisProduct")).deselect()

return
rem ' -----------------------------------------------------------------rem ' get_state_listrem ' -----------------------------------------------------------------

get_state_list:

ourDbUrl! = FNgetDbUrl!(props!)

sql!=FNgetStatesQuery!(props!)

ourRecordSet!=ourAPI!.createSQLRecordSet(ourDbUrl!,"",sql!)

stateList$=""

if !(ourRecordSet!.isEmpty()) then

    ourRecordSet!.first()
    
    wrkBuilder! = new StringBuffer()

    while 1
        thisRecord!=ourRecordSet!.getCurrentRecordData()

        wrkBuilder!.append(cvs(thisRecord!.getFieldValue("STATE_CODE"),3)+$0a$)

        ourRecordSet!.next(err=*break)

    wend
    stateList$=wrkBuilder!.toString()
fi
ourRecordSet!.close()

cast(BBjListButton, controls!.get("State")).insertItems(0, stateList$)
cast(BBjListButton, controls!.get("State")).deselect()

return
rem ' -----------------------------------------------------------------rem ' load_unlinked_serial_nbrsrem ' -----------------------------------------------------------------

load_unlinked_serial_nbrs:

ourWindow!.setCursor(3)

cast(BBjListBox, controls!.get("UnlinkedSerialNbrs")).removeAllItems()
ourDbUrl! = FNgetDbUrl!(props!)
sql!=FNgetUnlinkedSerialNbrsQuery!(props!)
ourRecordSet!=ourAPI!.createSQLRecordSet(ourDbUrl!,"",sql!)

recordSetCount = ourRecordSet!.getRecordCount()

currentListBoxItems! = ourAPI!.makeVector()

ourRecordSet!.first(err=*next)
if recordSetCount = 0 then
    return
else
    while 1
        ourRecordData! = ourRecordSet!.getCurrentRecordData()
        currentListBoxItems!.addItem(cvs(ourRecordData!.getFieldValue("SERIAL_NBR"),3))
        ourRecordSet!.next(err = *break)
    wend
    cast(BBjListBox, controls!.get("UnlinkedSerialNbrs")).insertItems(0, currentListBoxItems!)
fi

ourWindow!.setCursor(0)


return
rem ' -----------------------------------------------------------------rem ' prep_filesrem ' -----------------------------------------------------------------

prep_files:

csm01=gb__arg.csm01
CALL "templates.pgm::CSM01"

states=gb__arg.states
CALL "templates.pgm::STATES"

country=gb__arg.country
CALL "templates.pgm::COUNTRY"

snmeu=gb__arg.snmeu
CALL "templates.pgm::SNMEU"
snmeuFileInfo!=ourAPI!.getFileSystem().getFileInfo(snmeu)

snmel=gb__arg.snmel
CALL "templates.pgm::SNMEL"

translator! = new LanguageTranslator("ec_eu_edit."+lang!+".properties")

props=unt
open(props)"ec_sql.properties"
props$=fid(props), props$=props$(9)
close(props)
file!= new java.io.File(props$)
fis!=new java.io.FileInputStream(file!)
bis!=new java.io.BufferedInputStream(fis!)
props!=new java.util.Properties()
props!.load(bis!)

return
rem ' -----------------------------------------------------------------rem ' remove_serial_numbersrem ' -----------------------------------------------------------------

remove_serial_numbers:

wrkVector1!=cast(BBjListBox, controls!.get("LinkedSerialNbrs")).getSelectedIndices()
wrkVector2!=cast(BBjListBox, controls!.get("UnlinkedSerialNbrs")).getAllItems()

if wrkVector1!.size() then
    for x = 0 to wrkVector1!.size()-1
        index!=cast(BBjInt, wrkVector1!.getItem(x))
        wrkString$=cast(BBjString, endUserSerialNbrs!.getItem(index!))
        if wrkVector2!.size() > 0 then
            rem ' put it in the right order
            inserted=0
            for y = 0 to wrkVector2!.size()-1
                targetStr$=cast(BBjString, wrkVector2!.getItem(y))
                if wrkString$ <= targetStr$ then
                    wrkVector2!.insertItem(y, wrkString$)
                    inserted=1
                    break
                fi
            next y
            if !inserted then
                wrkVector2!.insertItem(wrkVector2!.size(), wrkString$)
            fi
        else
            wrkVector2!.addItem(wrkString$)
        fi
    next x

    rem ' remove the serial numbers
    for x = wrkVector1!.size()-1 to 0 step -1
        index!=cast(BBjInt, wrkVector1!.getItem(x))
        endUserSerialNbrs!.removeItem(index!)
    next x
    cast(BBjListBox, controls!.get("LinkedSerialNbrs")).removeAllItems()
    cast(BBjListBox, controls!.get("LinkedSerialNbrs")).insertItems(0, endUserSerialNbrs!)
    cast(BBjListBox, controls!.get("UnlinkedSerialNbrs")).removeAllItems()
    cast(BBjListBox, controls!.get("UnlinkedSerialNbrs")).insertItems(0, wrkVector2!)
    formDirty=1
fi


return
rem ' -----------------------------------------------------------------rem ' retrieve_and_load_enduserrem ' -----------------------------------------------------------------

retrieve_and_load_enduser:

ourWindow!.setCursor(3)

rem check to see if the user added a serial number
rem to a blank record
gosub check_form
if !preserveSerialNbr then
    gosub clear_form
    if !formCleared then
        ourWindow!.setCursor(0)
        return  
    fi
fi

cast(BBjEditBox, controls!.get("endUserNbr")).setText(endUserNbr$)


read record(snmeu,key=endUserNbr$)snmeu$

rem ' get list of serial numbers linked to this end user
if preserveSerialNbr then 
    cast(BBjListBox, controls!.get("LinkedSerialNbrs")).removeAllItems()
else
    endUserSerialNbrs!.clear()
fi
read (snmel,key=snmeu.end_user_nbr$,knum=1,err=*next)
while 1
    read record(snmel,end=*break)snmel$
    if snmel.end_user_nbr$<>snmeu.end_user_nbr$ then break
    endUserSerialNbrs!.addItem(snmel.serial_nbr$)
wend


cast(BBjEditBox, controls!.get("referenceNbr")).setText(snmeu.reference_nbr$)
cast(BBjEditBox, controls!.get("CompName")).setText(snmeu.company_name$)
cast(BBjEditBox, controls!.get("ContactName")).setText(snmeu.contact$)
cast(BBjEditBox, controls!.get("ContactPhone")).setText(snmeu.contact_phone$)
cast(BBjEditBox, controls!.get("AddrLnOne")).setText(snmeu.addr_1$)
cast(BBjEditBox, controls!.get("AddrLnTwo")).setText(snmeu.addr_2$)
cast(BBjEditBox, controls!.get("AddrLnThree")).setText(snmeu.addr_3$)
cast(BBjEditBox, controls!.get("City")).setText(snmeu.city$)

stateIndex=FNgetIndex(snmeu.state$, statelist$)
if stateIndex > -1 then
    cast(BBjListButton, controls!.get("State")).selectIndex(stateIndex)
else
    cast(BBjListButton, controls!.get("State")).deselect()
fi

cast(BBjEditBox, controls!.get("PostalCode")).setText(snmeu.postal_code$)

countryIndex=FNgetIndex(snmeu.country$, countryList$)
if countryIndex > -1 then
    cast(BBjListButton, controls!.get("Country")).selectIndex(countryIndex)
else
    cast(BBjListButton, controls!.get("Country")).deselect()
fi

cast(BBjEditBox, controls!.get("EmailAddress")).setText(snmeu.email_address$)
cast(BBjEditBox, controls!.get("PhoneNumber")).setText(snmeu.phone_number$)

theIndustry$=FNgetMathcingItem$(industryIdList$, industryList$, snmeu.industry$)
industryIndex=FNgetIndex(theIndustry$, industryList$)
if industryIndex > -1 then
    cast(BBjListButton, controls!.get("Industry")).selectIndex(industryIndex)
else
    cast(BBjListButton, controls!.get("Industry")).deselect()
fi

cast(BBjEditBox, controls!.get("OtherDesc")).setText(snmeu.other_industry$)
if theIndustry$="Other" then
    cast(BBjEditBox, controls!.get("OtherDesc")).setEnabled(1)
else
    cast(BBjEditBox, controls!.get("OtherDesc")).setEnabled(0)
    cast(BBjEditBox, controls!.get("OtherDesc")).setText("")
fi

basisProdIndex=FNgetIndex(snmeu.basis_prod$, basisProdList$)
if basisProdIndex > -1 then
    cast(BBjListButton, controls!.get("BasisProduct")).selectIndex(basisProdIndex)
else
    cast(BBjListButton, controls!.get("BasisProduct")).deselect()
fi

cast(BBjCEdit, controls!.get("AppModulesUsed")).setText(FNunescLf$(snmeu.app_modules_used$))

if snmeu.advantage$="Y" then
    cast(BBjCheckBox, controls!.get("Advantage")).setSelected(1)
else
    cast(BBjCheckBox, controls!.get("Advantage")).setSelected(0)
fi

if snmeu.announcements$="Y" then
    cast(BBjCheckBox, controls!.get("Announcements")).setSelected(1)
else
    cast(BBjCheckBox, controls!.get("Announcements")).setSelected(0)
fi

cast(BBjListBox, controls!.get("LinkedSerialNbrs")).insertItems(0, endUserSerialNbrs!)

cast(BBjListButton, controls!.get("existingList")).deselect()
ourWindow!.setCursor(0)
cast(BBjEditBox, controls!.get("referenceNbr")).focus()

ourWindow!.setCursor(0)

return
rem ' -----------------------------------------------------------------rem ' save_formrem ' -----------------------------------------------------------------

save_form:

rem ' validate the data we are saving
gosub validate_form

if isValid then
    
    dim snmeu$:fattr(snmeu$)

    snmeu.end_user_nbr$=cvs(cast(BBjEditBox, controls!.get("endUserNbr")).getText(),3)
    snmeu.reference_nbr$=cvs(cast(BBjEditBox, controls!.get("referenceNbr")).getText(),3)
    snmeu.company_name$=cvs(cast(BBjEditBox, controls!.get("CompName")).getText(),3)
    snmeu.contact$=cvs(cast(BBjEditBox, controls!.get("ContactName")).getText(),3)
    snmeu.contact_phone$=cvs(cast(BBjEditBox, controls!.get("ContactPhone")).getText(),3)
    snmeu.addr_1$=cvs(cast(BBjEditBox, controls!.get("AddrLnOne")).getText(),3)
    snmeu.addr_2$=cvs(cast(BBjEditBox, controls!.get("AddrLnTwo")).getText(),3)
    snmeu.addr_3$=cvs(cast(BBjEditBox, controls!.get("AddrLnThree")).getText(),3)
    snmeu.city$=cvs(cast(BBjEditBox, controls!.get("City")).getText(),3)
    
    idx=cast(BBjListButton, controls!.get("State")).getSelectedIndex()
    if idx > -1 then snmeu.state$=cast(BBjListButton, controls!.get("State")).getItemAt(idx)

    snmeu.postal_code$=cvs(cast(BBjEditBox, controls!.get("PostalCode")).getText(),3)

    idx=cast(BBjListButton, controls!.get("Country")).getSelectedIndex()
    if idx > -1 snmeu.country$=cast(BBjListButton, controls!.get("Country")).getItemAt(idx)

    snmeu.email_address$=cvs(cast(BBjEditBox, controls!.get("EmailAddress")).getText(),3)
    snmeu.phone_number$=cvs(cast(BBjEditBox, controls!.get("PhoneNumber")).getText(),3)

    idx=cast(BBjListButton, controls!.get("Industry")).getSelectedIndex()
    if idx > -1 then
        theIndustry$=cvs(cast(BBjListButton, controls!.get("Industry")).getItemAt(idx),3)
        snmeu.industry$=FNgetMathcingItem$(industryList$, industryIDList$, theIndustry$)
    fi

    snmeu.other_industry$=cvs(cast(BBjEditBox, controls!.get("OtherDesc")).getText(),3)
    
    idx=cast(BBjListButton, controls!.get("BasisProduct")).getSelectedIndex()
    if idx > -1 snmeu.basis_prod$=cast(BBjListButton, controls!.get("BasisProduct")).getItemAt(idx)

    snmeu.app_modules_used$=FNescLf$(cvs(cast(BBjCEdit, controls!.get("AppModulesUsed")).getText(),3))

    if cast(BBjCheckBox, controls!.get("Advantage")).isSelected() then
        snmeu.advantage$="Y"
    else
        snmeu.advantage$="N"
    fi

    if cast(BBjCheckBox, controls!.get("Announcements")).isSelected() then
        snmeu.announcements$="Y"
    else
        snmeu.announcements$="N"
    fi

    snmeu.firm_id$=firmId!
    snmeu.customer_nbr$=customerNbr!

    rem ' write the record getting a new end user number for new records by using the sequence
    if cvs(snmeu.end_user_nbr$,3)<>"" then
        rem ' we are writing an existing user
        write record(snmeu)snmeu$
        reloadEndUserList=0
    else
        ourDbUrl! = FNgetDbUrl!(props!)
        thisdbUrl$=ourDbUrl!
        hkey$=FNgetNextSequence$(props!,thisdburl$)
        snmeu.end_user_nbr$=hkey$
        write record(snmeu)snmeu$
        reloadEndUserList=1
    fi
    rem update TMM03
    snmeu! = ourAPI!.makeTemplatedString(fattr(snmeu$))
    snmeu!.setString(snmeu$)
    marCommUpdater!.updateMarComm(snmeu!)

    rem ' update the current links
    read (snmel,key=snmeu.end_user_nbr$,knum=1,dom=*next)
    while 1
        thiskey$=key(snmel,end=*break,knum=1)
        read record(snmel,key=thiskey$,knum=1)snmel$
        if snmel.end_user_nbr$<>snmeu.end_user_nbr$ then break
        remove(snmel,key=snmel.serial_nbr$)
        logger!.makeUnlinkEntry(snmel.serial_nbr$, snmel.end_user_nbr$, firmId!, customerNbr!)
    wend

    rem ' write the link file
    wrkVector1!=cast(BBjListBox, controls!.get("LinkedSerialNbrs")).getAllItems()
    if wrkVector1!.size() > 0 then
        for x = 0 to wrkVector1!.size() - 1
            sfSerialNbr$=cast(BBjString, wrkVector1!.get(x))
            dim snmel$:fattr(snmel$)
            snmel.serial_nbr$=sfSerialNbr$
            snmel.end_user_nbr$=snmeu.end_user_nbr$
            write record(snmel)snmel$
            logger!.makeLinkEntry(snmel.serial_nbr$, snmel.end_user_nbr$, firmId!, customerNbr!)
        next x
    fi

    formDirty=0
    gosub clear_form
    if reloadEndUserList then
        gosub get_end_user_list
    fi
fi

return
rem ' -----------------------------------------------------------------rem ' set_form_dirtyrem ' -----------------------------------------------------------------

set_form_dirty:

formDirty=1

return
rem ' -----------------------------------------------------------------
rem ' show_callersWindow
rem ' -----------------------------------------------------------------

show_callersWindow:

rem ' the caller handles itself now
return

if callersWindow! <> NULL() then
    if info(3,6)="2" then
        applet!=ourAPI!.getAppletProxy()
        rem returning to ec_man_eu
        applet!.setBounds(0,0,500,400)
    fi
   callersWindow!.setVisible(1)
fi

return
rem ' -----------------------------------------------------------------rem ' toggle_select_list_orderrem ' -----------------------------------------------------------------

toggle_select_list_order:

if usingCompanyOrder then
    usingCompanyOrder=0
    cast(BBjListButton, controls!.get("existingList")).removeAllItems()
    cast(BBjListButton, controls!.get("existingList")).insertItems(0, endUserDisplayListRef$)

else
    usingCompanyOrder=1
    cast(BBjListButton, controls!.get("existingList")).removeAllItems()
    cast(BBjListButton, controls!.get("existingList")).insertItems(0, endUserDisplayListComp$)
fi

cast(BBjListButton, controls!.get("existingList")).deselect()

return
rem ' -----------------------------------------------------------------
rem ' user_defined_functions
rem ' -----------------------------------------------------------------

user_defined_functions:

rem -------------------user defined functions---------------------

def FNgetDbUrl!(props!)
    sqlBuilder!= new StringBuffer(props!.getProperty("sqlURL.urlprefix") + props!.getProperty("sqlURL.server")+":")
    sqlBuilder!.append(props!.getProperty("sqlURL.port")+"?database=")
    sqlBuilder!.append(props!.getProperty("sqlURL.database")+"&user="+props!.getProperty("sqlURL.user")+"&password=")
    sqlBuilder!.append(props!.getProperty("sqlURL.password"))
    ourDbUrl! = sqlBuilder!.toString()
    return ourDbUrl!
fnend

def FNinsertSQLParameters!(udfSql!, firmId!, customerNbr!)
    firmIdTarget!="\|FIRMID\|"
    customerNbrTarget!="\|CUSTOMERNBR\|"
    udfSql!=udfSql!.replaceAll(firmIdTarget!,firmId!)
    udfSql!=udfSql!.replaceAll(customerNbrTarget!,customerNbr!)
    return udfSql!
fnend

def FNgetUnlinkedSerialNbrsQuery!(props!)
    sqlBuilder! = new StringBuffer(props!.getProperty("unlinkedSerialNbrs.select")+" ")
    sqlBuilder!.append(props!.getProperty("unlinkedSerialNbrs.from")+" ")
    sqlBuilder!.append(props!.getProperty("unlinkedSerialNbrs.leftOuterJoin")+" ")
    sqlBuilder!.append(props!.getProperty("unlinkedSerialNbrs.where")+" ")
    sqlBuilder!.append(props!.getProperty("unlinkedSerialNbrs.orderby"))
    sql!=sqlBuilder!.toString()
    sql!=FNinsertSQLParameters!(sql!, firmId!, customerNbr!)
    return sql!
fnend

def FNgetEndUserLstQuery!(props!)
    sqlBuilder! = new StringBuffer(props!.getProperty("endUserList.select")+" ")
    sqlBuilder!.append(props!.getProperty("endUserList.from")+" ")
    sqlBuilder!.append(props!.getProperty("endUserList.where"))
    sql!=sqlBuilder!.toString()
    sql!=FNinsertSQLParameters!(sql!, firmId!, customerNbr!)
    return sql!
fnend

def FNgetStatesQuery!(props!)
    sqlBuilder! = new StringBuffer(props!.getProperty("statesList.select")+" ")
    sqlBuilder!.append(props!.getProperty("statesList.from")+" ")
    sqlBuilder!.append(props!.getProperty("statesList.orderby"))
    sql!=sqlBuilder!.toString()
    return sql!
fnend

def FNgetIndustriesQuery!(props!)
    sqlBuilder! = new StringBuffer(props!.getProperty("industryList.select")+" ")
    sqlBuilder!.append(props!.getProperty("industryList.from")+" ")
    sqlBuilder!.append(props!.getProperty("industryList.orderby"))
    sql!=sqlBuilder!.toString()
    return sql!
fnend

def FNgetCountriesQuery!(props!)
    sqlBuilder! = new StringBuffer(props!.getProperty("countryList.select")+" ")
    sqlBuilder!.append(props!.getProperty("countryList.from")+" ")
    sqlBuilder!.append(props!.getProperty("countryList.orderby"))
    sql!=sqlBuilder!.toString()
    return sql!
fnend

def FNgetBasisProdListQuery!(props!)
    sqlBuilder! = new StringBuffer(props!.getProperty("basisProdList.select")+" ")
    sqlBuilder!.append(props!.getProperty("basisProdList.from")+" ")
    sqlBuilder!.append(props!.getProperty("basisProdList.where"))
    sql!=sqlBuilder!.toString()    
    sql!=FNinsertSQLParameters!(sql!, firmId!, customerNbr!)
    return sql!
fnend

def FNgetFindSerialNumberQuery!(props!)
    sqlBuilder! = new StringBuffer(props!.getProperty("findSerialNumber.select")+" ")
    sqlBuilder!.append(props!.getProperty("findSerialNumber.from")+" ")
    sqlBuilder!.append(props!.getProperty("findSerialNumber.where")+" ")
    sql!=sqlBuilder!.toString()
    sql!=FNinsertSQLParameters!(sql!, firmId!, customerNbr!)
    return sql!
fnend

def FNinsertSerialNumber!(udfSql!, serialNbr!)
    serialNbrTarget!="\|SERIALNBR\|"
    udfSql!=udfSql!.replaceAll(serialNbrTarget!, serialNbr!)
    return udfSql!
fnend

def FNgetSelectedEndUserNbr$(endUserValueList$,selected)
    wrkList$=endUserValueList$
    for x = 0 to selected
        rpos=pos($0A$=wrkList$)
        selected$=wrkList$(1,rpos-1)
        wrkList$=wrkList$(rpos+1)
    next x
    endUserNbr$=selected$
    return endUserNbr$
fnend

def FNgetMathcingItem$(List1$, List2$, xMatch$)
    wrkList1$=List1$, wrkList2$=List2$
    xresult$=""
    xOffset=0
    while len(wrkList1$)
        xOffset=xOffset+1
        rpos=pos($0a$=wrkList1$)
        xtarget$=wrkList1$(1,rpos-1)
        wrkList1$=wrkList1$(rpos+1)
        if xtarget$=xMatch$ then
            for x = 1 to xOffset
                dpos=pos($0a$=wrkList2$)
                xresult$=wrkList2$(1,dpos-1)
                wrkList2$=wrkList2$(dpos+1)
            next x
            break
        fi
    wend
    return xresult$
fnend

rem ' get index of an item from $0A$ delimited list 
def FNgetIndex(target$, in_list$)
    wrkList$=in_list$
    out_index=-1
    while 1
        rpos=pos($0A$=wrklist$)
        if rpos then
            out_index=out_index+1
            this_target$=wrkList$(1,rpos-1)
            wrkList$=wrkList$(rpos+1)
            if target$=this_target$ then 
                break
            fi
        else
            out_index=-1
            break
        fi
    wend
    return out_index
fnend

rem ' replace $0A$ with \n
def FNescLf$(xx_inStr$)
    sgb_temp$=xx_inStr$,xx_outStr$=""
    while len(sgb_temp$)
        sgb_pos=pos($0A$=sgb_temp$)
        if sgb_pos=0 Then
            xx_outStr$=xx_outStr$+sgb_temp$+"\n",sgb_temp$=""
        else
            xx_outStr$=xx_outStr$+sgb_temp$(1,sgb_pos-1)+"\n",sgb_temp$=sgb_temp$(sgb_pos+1)
        fi
    wend
    return xx_outStr$
fnend

rem ' replace \n with $0A$
def FNunescLf$(xx_inStr$)
    sgb_temp$=xx_inStr$,xx_outStr$=""
    while len(sgb_temp$)
        sgb_pos=pos("\n"=sgb_temp$)
        if sgb_pos=0 then
            xx_outStr$=xx_outStr$+sgb_temp$+$0A$,sgb_temp$=""
        else
            xx_outStr$=xx_outStr$+sgb_temp$(1,sgb_pos-1)+$0A$,sgb_temp$=sgb_temp$(sgb_pos+2)
        fi
    wend
    return xx_outStr$
fnend

def FNgetNextSequence$(xProps!,xOur_dburl$)
    udfChan=sqlunt
    sqlopen(udfChan)XOur_dburl$
    thisSQL$=props!.getProperty("snmeu.get.next.sequence")
    sqlprep(udfChan)thisSQL$
    nextKey$=sqlfetch(udfChan)
    sqlclose(udfChan, err=*next)
    retKey$=str(num(cvs(nextKey$,3)):"0000000000")
    return retKey$
fnend

return
rem ' -----------------------------------------------------------------rem ' validate_formrem ' -----------------------------------------------------------------

validate_form:

isValid=1

rem ' must at least enter a company name
vCompName$=cvs(cast(BBjEditBox, controls!.get("CompName")).getText(),3)
if len(vCompName$)=0 then
    isValid=0
    cast(BBjStaticText, controls!.get("compNameReq")).setVisible(1)
else
    cast(BBjStaticText, controls!.get("compNameReq")).setVisible(0)
fi

rem ' there must be a country selection
index=cast(BBjListButton, controls!.get("Country")).getSelectedIndex()
if index < 0 then 
    isValid=0
    cast(BBjStaticText, controls!.get("countryReq")).setVisible(1)
else
    cast(BBjStaticText, controls!.get("countryReq")).setVisible(0)
fi

rem ' if advantage or announcements are selected there must be an email address
if (cast(BBjCheckBox, controls!.get("Advantage")).isSelected() or cast(BBjCheckBox, controls!.get("Announcements")).isSelected()) and cvs(cast(BBjEditBox, controls!.get("EmailAddress")).getText(),3) = "" Then
    isValid=0
    cast(BBjStaticText, controls!.get("emailReq")).setVisible(1)
    cast(BBjStaticText, controls!.get("emailFlag")).setVisible(1)
else
    cast(BBjStaticText, controls!.get("emailReq")).setVisible(0)
fi

if !isValid then
    msg$=translator!.getMessage("required.fields")
    title$=translator!.getMessage("required.fields.title")
    response=msgbox(msg$, 0+64, title$)
fi

return

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit (Window) WIN_CLOSE (X)
rem ' ---------------------------------------------------------------

W101_C0_WIN_CLOSE:
rem ' Window Closed
rem ' gb__event! = cast(BBjCloseEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__window! = gb__event!.getControl()

gosub clear_form
if formCleared then
    gosub show_callersWindow
    goto gb__eoj
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=100 serialNumber (Edit) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C100_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=101 getButton (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C101_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

enteredSerialNumber$=""
enteredSerialNumber$=cvs(cast(BBjEditBox, controls!.get("serialNumber")).getText(),4)

if enteredSerialNumber$<>"" then
    gosub find_serial_number
fi
enteredSerialNumber$=""
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=102 existingList (List Button) LIST_SELECT (N2:19)
rem ' ---------------------------------------------------------------

W101_C102_LIST_SELECT:
rem ' Notify Event - List Control - List Selection (2)
rem ' gb__event! = cast(BBjListSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

selected = cast(BBjListButton, controls!.get("existingList")).getSelectedIndex()

if usingCompanyOrder then
    endUserNbr$=FNgetSelectedEndUserNbr$(endUserValueListComp$,selected)
else
    endUserNbr$=FNgetSelectedEndUserNbr$(endUserValueListRef$,selected)
fi

gosub retrieve_and_load_enduser
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=103 referenceNbr (Edit) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C103_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=104 CompName (Edit) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C104_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=105 ContactName (Edit) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C105_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=106 ContactPhone (Edit) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C106_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=107 AddrLnOne (Edit) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C107_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=108 AddrLnTwo (Edit) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C108_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=109 AddrLnThree (Edit) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C109_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=110 City (Edit) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C110_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=111 State (List Button) LIST_SELECT (N2:19)
rem ' ---------------------------------------------------------------

W101_C111_LIST_SELECT:
rem ' Notify Event - List Control - List Selection (2)
rem ' gb__event! = cast(BBjListSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=112 PostalCode (Edit) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C112_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=113 Country (List Button) LIST_SELECT (N2:19)
rem ' ---------------------------------------------------------------

W101_C113_LIST_SELECT:
rem ' Notify Event - List Control - List Selection (2)
rem ' gb__event! = cast(BBjListSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=114 EmailAddress (Edit) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C114_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=115 PhoneNumber (Edit) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C115_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=116 Industry (List Button) LIST_SELECT (N2:19)
rem ' ---------------------------------------------------------------

W101_C116_LIST_SELECT:
rem ' Notify Event - List Control - List Selection (2)
rem ' gb__event! = cast(BBjListSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty

idx=cast(BBjListButton, controls!.get("Industry")).getSelectedIndex()
selIndustry$=cast(BBjListButton, controls!.get("Industry")).getItemAt(idx)

if selIndustry$="Other" then
    cast(BBjEditBox, controls!.get("OtherDesc")).setEnabled(1)
else
    cast(BBjEditBox, controls!.get("OtherDesc")).setEnabled(0)
    cast(BBjEditBox, controls!.get("OtherDesc")).setText("")
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=117 OtherDesc (Edit) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C117_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=118 BasisProduct (List Button) LIST_SELECT (N2:19)
rem ' ---------------------------------------------------------------

W101_C118_LIST_SELECT:
rem ' Notify Event - List Control - List Selection (2)
rem ' gb__event! = cast(BBjListSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=119 AppModulesUsed (Custom Edit) EDIT_CHANGE (e)
rem ' ---------------------------------------------------------------

W101_C119_EDIT_CHANGE:
rem ' Text control was modified
rem ' gb__event! = cast(BBjEditModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=120 Advantage (Check Box) CHECK_OFF (c0)
rem ' ---------------------------------------------------------------

W101_C120_CHECK_OFF:
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=120 Advantage (Check Box) CHECK_ON (c1)
rem ' ---------------------------------------------------------------

W101_C120_CHECK_ON:
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=121 Announcements (Check Box) CHECK_OFF (c0)
rem ' ---------------------------------------------------------------

W101_C121_CHECK_OFF:
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=121 Announcements (Check Box) CHECK_ON (c1)
rem ' ---------------------------------------------------------------

W101_C121_CHECK_ON:
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=123 AddSerialNbr (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C123_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub add_serial_numbers

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=124 RemoveSerialNbr (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C124_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub remove_serial_numbers

rem ' set the form dirty
gosub set_form_dirty
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=127 Clear (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C127_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub clear_form
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=128 Save (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C128_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub save_form
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=152 toggleListOrder (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C152_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub toggle_select_list_order
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=155 download (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C155_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gb__arg.callersContext=ourWindow!.getContextID()
callingWindow! = BBjAPI().getSysGui().getWindow(gb__arg.callersContext)
callingWindow!.setVisible(0)

call "ec_man_eu.bbj",gb__arg$

rem ' show this calling window again, forcing a repaint
blankcontext = gb__win.blankWindow
tempWindow! = BBjAPI().getSysGui().getWindow(blankcontext)
tempWindow!.setVisible(1)
tempWindow!.setVisible(0)
callingWindow!.setVisible(1)
callingWindow!.focus()

gosub get_end_user_list
gosub load_unlinked_serial_nbrs
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=156 back (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C156_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub clear_form
if formCleared then
    gosub show_callersWindow
    goto gb__eoj
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 end_user_edit Ctl=162 specificSerialNbrBtn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C162_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' adding a specific serial number

addSN$ = cvs(cast(BBjEditBox, controls!.get("specificSerialNbr")).getText(),3)
rem ' serial numbers are 9 bytes
if len(addSN$) <> 9 then return

wrkVector2!=cast(BBjListBox, controls!.get("UnlinkedSerialNbrs")).getAllItems()

added = 0
if wrkVector2!.size() then
    for x = 0 to wrkVector2!.size()-1
        wrkString$=cast(BBjString, wrkVector2!.getItem(x))
        if wrkString$ = addSN$ then
            cast(BBjListBox, controls!.get("UnlinkedSerialNbrs")).selectIndex(x)
            gosub add_serial_numbers
            cast(BBjEditBox, controls!.get("specificSerialNbr")).setText("")
            added = 1
            break
        fi
    next x
fi
if !added then
    xresp = msgbox(addSN$ + " not found.",0,"Not Found")
fi
RETURN


rem gb_std.cod - Put your standard subroutines/functions/etc. here.

END
