[Program]
Creation Date=2006-12-15
Creation Time=16:10:25
Event Set=LEGACY
Generator Program=gb_func
Last Build Date=2023-11-28
Last Build Time=16:35:47
Precision=2
Program Name=ec
Remarks=Yes
Resource File=ec.arc
Show Forms=First

[Init]
rem ' -----------------------------------------------------------------
rem ' Init
rem ' -----------------------------------------------------------------

rem **********************************************************************
rem * Always add the following line to the .src file in the guibuilder   *
rem * generated code after the label 'gb__opened_sysgui:' and down a few *
rem * lines, just below the line 'gb__resource$="ec.arc"', and recompile.*
rem *              gosub prep_routine                                    *
rem **********************************************************************

use ::SQLProperties.bbj::SQLProperties
use ::bbjasper.bbj::BBJasperReport
use ::BBUtils.bbj::BBUtils

use java.io.File

declare BBjTopLevelWindow thisWindow!
declare BBjString testPassword!
declare SQLProperties sqlProps!
declare BBJasperReport report!
declare File tempServerFile!

declare BBjTopLevelWindow serialNbrFeatures!
declare BBjStandardGrid featuresGrid!
declare BBjEditBox vfSerialNbr!

declare BBjString currency!

rem ' add to the prefix to find the support custom objects needed
oldPrefix$=pfx
bbjhome$ = System.getProperty("basis.BBjHome") + "/"
addPrefix$ = bbjhome$ + "utils/"
if pos(" " = addPrefix$) <> 0 then addPrefix$ = chr(34) + addPrefix$ + chr(34)
newPrefix$=oldPrefix$+" "+addPrefix$

addPrefix$=bbjhome$ + "utils/reporting/bbjasper/"
if pos(" " = addPrefix$) <> 0 then addPrefix$ = chr(34) + addPrefix$ + chr(34)
newPrefix$=newPrefix$+" "+addPrefix$
prefix newPrefix$

rem ' get a SQLProperties object to get the DB connect string
sqlProps! = new SQLProperties()
dbConnect$ = sqlProps!.getDBConnect()

rem ' if we are debugging the pricing process set we_are_debuggin = 1
we_are_debuggin = 0
 
rem ' user code ** is the in house login
inhouse = 0
rem ' inhouse = 1
rem 'userLogin$ = cvs(info(3,2),3)
rem 'if userLogin$ = "nobody" then inhouse = 0
rem ' check for bui users
rem ' bui logins are user tc####
rem 'if len(userLogin$) > 2 and pos("tc"=userLogin$) = 1 then
rem '    checkNum = num(userLogin$(3),err=*endif)
rem '    inhouse = 0
rem 'fi

server_name$=""
if inhouse then 
 server_name$=info(3,4),p=pos("."=server_name$)
 if p then server_name$=server_name$(1,p-1)
 server_name$="["+cvs(server_name$,3)+"]"
fi

REM ' Temporary files go here
LET temp_dir$=STBL("TEMP",ERR=*NEXT)

LET cc_cmd$=STBL("CC_CMD",ERR=*NEXT)
LET cc_dir$=STBL("CC_DIR",ERR=*NEXT)

rem ' build a list of the form ids used
ecWindowList$ = "100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|"

rem ' message to present to BAS users when the increase the SF user count
sf_inc_message$ = "Extended Users have more functionality then Standard Users and " + $0A$ 
sf_inc_message$ = sf_inc_message$ + "the price per user is the same. Are you sure you want to continue " + $0A$ 
sf_inc_message$ = sf_inc_message$ + "with this Standard Users increase?"

gosub initialize_structure
rem ' rem out when we went to only loading one form at start up
rem ' gosub get_cart_grid

LET edit_sn_color$="BLACK"
LET item_color$="BLACK"

REM ' Hide the Exit button in a browser
IF !(POS(" 5 "=SYS)) AND INFO(3,6)="2" THEN LET ctl_id=NUM(FATTR(win_login$,"Exit","ID")); PRINT (gb__sysgui)'CONTEXT'(gb__win.login),'HIDE'(ctl_id)

rem ' Add images to forms
rem ' rem out when we went to only loading one form at start up
rem ' xx_form=0
rem ' while xx_form<gb__forms
rem '   xx_form=xx_form+1
rem '   print(gb__sysgui,err=*continue)'context'(gb__form_context[xx_form])
rem '   rc = fnAddImagesSetBorder(gb__form_context[xx_form])
rem ' wend

rc = fnAddImagesSetBorder(gb__form_context[1])

REM ' Set Window Focus
LET focus_id=NUM(FATTR(win_login$,"User_ID","ID"))
new_context=gb__win.login

rem ' use this if splash is omitted
rem ' center=FNCENTER(new_context)
rem ' gosub win_title
rem ' print(gb__sysgui)'context'(new_context),'enable'(0),'show'(0),'focus'(0),'raise','setcursor'(0),'flush'
rem ' print(gb__sysgui)'context'(new_context),'focus'(focus_id)

old_context=splash

gosub show_window

if pos("172-30-0-15" = info(3,4)) <> 0 then
    resp = msgbox("This instance of B-Comm is running on upgrade.basis.cloud. It is the Training/Testing plaform for BASIS International.", 0, "upgrade.basis.cloud")
fi

rem ' invoked from Barista?
fromBarista = 0
baristaID$ = stbl("+USER_ID",err=*next), fromBarista=1

rem ' auto login
LET logged_in=0
if !fromBarista then
    found = 0
    passparam$ = clientenv("param",err=*next); found = 1
    if found then
        passparam = unt
        open(passparam)stbl("TEMP")+passparam$
        read(passparam)passdata$
        pass_firm$ = passdata$(1,2)
        cust_num$ = passdata$(3,6)
        user_code$ = "**"
        passedpassword$ = passdata$(9)
        win_login.user_id$=cust_num$+user_code$
        win_login.password$=passedpassword$
        win_login$=fngb__put_fields$(win_id_login$,win_login$,"user_id,password")
        close(passparam)
        erase stbl("TEMP")+passparam$
        gosub W100_C1_PUSH_BUTTON
    else
        if argc>3 then
            argv$=argv(1)
            if argv$ = "inhouse" then
                argv$ = argv(2)
                if len(argv$)=8 then
                    pass_firm$=argv$(1,2)
                    cust_num$=argv$(3,6)
                    user_code$="**"
                 fi
                 win_login.user_id$=cust_num$+user_code$
                 win_login.password$=argv(3)
                 win_login$=fngb__put_fields$(win_id_login$,win_login$,"user_id,password")
                 gosub W100_C1_PUSH_BUTTON
            fi
        fi
    fi
fi

rem 'ee_users_lbl for translations of Extended users
ee_users_lbl$=""

REM ' defined functions
DEF fndate$(julian)=CHR(ASC(DATE(julian:"%Yp"))+32)+CHR(ASC(DATE(julian:"%Mp"))+32)+CHR(ASC(DATE(julian:"%Dp"))+32)
def fnconvertDate$(Q$,Q2$)=STR(MOD((ASC(Q$)-32)*POS(" "<>Q2$(2,1)),100):"00")
def fnexpandDate$(Q1$)="20" + fnconvertDate$(Q1$(1),Q1$) + fnconvertDate$(Q1$(2),Q1$)+fnconvertDate$(Q1$(3),Q1$)

DEF fnnum(tempnum$)
  RETURN NUM(tempnum$,ERR=*next)
  RETURN 0
FNEND

DEF fnosdesc$(x$)=CVS(csm03.description$,3)+" [Port "+csm03.port_id$(1,4)+"]"

def fnjul(yyyymmdd$)
  xjul=0,xy=0,xm=0,xd=0
  xy=NUM(yyyymmdd$(1,4),ERR=*next)
  xm=NUM(yyyymmdd$(5,2),ERR=*next)
  xd=NUM(yyyymmdd$(7,2),ERR=*next)
  if xy*xm*xd then xjul=jul(xy,xm,xd)
  return xjul
fnend

def fnaonjul(ymd$)
  y=1900+asc(ymd$(1))-32,m=asc(ymd$(2))-32,d=asc(ymd$(3))-32
  IF m<1 OR d<1 THEN LET jd=0 ELSE LET jd=JUL(y,m,d)
  return jd
fnend

def fnaondate$(ymd$)
  jd=fnaonjul(ymd$)
  IF jd=0 THEN LET d$="Unknown" ELSE LET d$=DATE(Jd:"%D %Ms %Yl")
  return d$
fnend

def fnStripNumFormat$(currency$)
    if firm_id$ = "02" then 
        xdecSeparator$ = "'"
    else
        xdecSeparator$ = "."
    fi
    xdecSeparatorFound = 0
    rawMoney$ = ""
    for x = 1 to len(currency$)
        if currency$(x,1) = xdecSeparator$ and !xdecSeparatorFound then
            rawMoney$ = rawMoney$ + "."
        else
            isNumeric = 0
            xTmp = num(currency$(x,1),err = * next); isNumeric = 1
            if isNumeric then
                rawMoney$ = rawMoney$ + currency$(x,1)
            fi
        fi
   next x
   return rawMoney$
fnend


[Event Win=100 ID=0 Code=X <WIN_CLOSE> (W100_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=100 ID=1 Code=B <PUSH_BUTTON> (W100_C1_PUSH_BUTTON)]
REM ' Login

IF logged_in THEN RETURN

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_login$=fngb__get_fields$(win_id_login$,win_login$,"user_id,password")

LET firm_id$=pass_firm$
LET cust_num$=""
LET user_code$=""

REM ' Format is FFCCCCCCUU
REM ' FF is a 2-digit Firm ID (usually 01 or 02)
REM ' CCCCCC is a 1-6 digit customer number, typically 4 digits
REM ' UU is an optional 1- or 2-letter user code

LET temp$=CVS(win_login.user_id$,3)
x=LEN(temp$)
IF x<3 OR x>10 THEN GOTO login_error

x$=temp$(1,2)
if pos(x$="0102",2) and x>5 then temp$=temp$(3),firm_id$=x$,x=x-2 else x$=""
for n=x-1 to x
if pos(temp$(n,1)="0123456789")=0 then 
  user_code$=user_code$+temp$(n,1)
  temp$(n,1)=" "
fi
next n
user_code$=PAD(user_code$,2)
temp$=cvs(temp$,3)
cust_num$=STR(NUM(temp$):"000000",err=*next)

rem ' block Marriott 002786 and Tanager 008450
rem ' if cust_num$ = "002786" or cust_num$ = "008450" then 
rem '     cust_num$ = ""
rem '     goto login_error
rem ' fi

GOSUB open_files

REM ' get customer EC record
tries=0
get_ecm01:
EXTRACT RECORD (ecm01,KEY=firm_id$+cust_num$+user_code$,TIM=3,DOM=ecm01_not_found,ERR=login_error)ecm01$

rem ' is the user account locked out
if ecm01.available$(1,1) = "Y" then 
    cust_num$ = ""
    goto login_error
fi
GOTO check_password

ecm01_not_found: 
if x$<>"" and pos("00"=cust_num$)=1 then
  firm_id$=pass_firm$
  cust_num$(1,2)=x$
  x$=""
  goto get_ecm01
fi
tries=tries+1
if tries<3 then 
  firm_id$=str(tries:"00")
  goto get_ecm01
fi

LET firm_id$="",cust_num$="",user_code$=""
GOTO login_error

check_password: 
IF CVS(ecm01.password$,3)<>CVS(win_login.password$,3) THEN LET firm_id$="",cust_num$="",user_code$=""; GOTO login_error
IF len(CVS(ecm01.password$,3))<4 THEN LET firm_id$="",cust_num$="",user_code$=""; GOTO login_error

rem ' check password against the rules to see if we need to force a password change
testPassword! = win_login.password$
force_password_change = 0
if !testPassword!.matches("^.*(?=.{10,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&*()+=]).*$") then
    force_password_change = 1
fi

rem ' set inhouse
if user_code$ = "**" then inhouse = 1 else inhouse = 0

REM ' Attempt to create work files
LET cc_file$=temp_dir$+"EC"+firm_id$+cust_num$+"ACCOUNT"+cvs(user_code$,3)
ERASE cc_file$,ERR=setup_cc_workfile
setup_cc_workfile: 
LET message$="Couldn't initialize ACCOUNT work file"
MKEYED cc_file$,20,0,128,ERR=config_error
LET cc_file=0

LET clients_file$=temp_dir$+"EC"+firm_id$+cust_num$+"CLIENTS"+cvs(user_code$,3)
ERASE clients_file$,ERR=setup_clients_workfile
setup_clients_workfile: 
LET message$="Couldn't initialize CLIENTS work file"
MKEYED clients_file$,20,0,128,ERR=config_error
LET clients_file=0

LET history_file$=temp_dir$+"EC"+firm_id$+cust_num$+"HISTORY"+cvs(user_code$,3)
ERASE history_file$,ERR=setup_history_workfile
setup_history_workfile: 
LET message$="Couldn't initialize HISTORY work file"
MKEYED history_file$,20,0,128,ERR=config_error
LET history_file=0

LET cart_file$=temp_dir$+"EC"+firm_id$+cust_num$+"CART"+cvs(user_code$,3)
ERASE cart_file$,ERR=setup_cart_workfile
setup_cart_workfile: 
LET message$="Couldn't initialize CART work file"
MKEYED cart_file$,20,0,256,ERR=config_error
LET cart_file=0

LET find_sn_file$=temp_dir$+"EC"+firm_id$+cust_num$+"FIND_SN"+cvs(user_code$,3)
ERASE find_sn_file$,ERR=setup_find_sn_workfile
setup_find_sn_workfile: 
LET message$="Couldn't initialize FIND_SN work file"
MKEYED find_sn_file$,20,0,128,ERR=config_error
LET find_sn_file=0

REM ' get inventory parameters (Warehouse ID)
LET message$="Couldn't retrieve inventory parameters record"
READ RECORD (ivs01,KEY=firm_id$+"IV00",ERR=config_error)ivs01$

REM ' Get A/R codes
LET message$="Couldn't retrieve A/R parameters record"
READ RECORD (arm10e,KEY=firm_id$+"E"+"S",ERR=config_error)arm10e$

REM ' get customer master info
LET message$="Couldn't retrieve customer info (ARM01)"
READ RECORD (arm01,KEY=firm_id$+cust_num$,ERR=config_error)arm01$
bsgCanadian = 0, basCanadian = 0
if cvs(arm01.country$,7) = "CANADA" then bsgCanadian = 1, basCanadian = 1

LET message$="Couldn't retrieve customer info (ARM02)"
READ RECORD (arm02,KEY=firm_id$+cust_num$+"  ",ERR=config_error)arm02$

LET message$="Couldn't retrieve tax parameters (ARM10B)"
READ RECORD (ARM10B,KEY=firm_id$+"B"+arm02.tax_code$,ERR=config_error)arm10b$

LET message$="Customer not configured in TeleMaster"
READ record(tmm01,KNUM=0,KEY=firm_id$+cust_num$+"000000",DOM=config_error)tmm01$
REM ' get salesperson contact info
LET message$="Couldn't retrieve salesperson contact info (ARM10F)"
READ RECORD (arm10f,KEY=firm_id$+"F"+arm02.slspsn_code$,ERR=config_error)arm10f$
IF POS("@"=arm10f.e_mail$)=0 THEN LET arm10f.e_mail$="sales@basis.cloud"
IF CVS(arm10f.phone_1$,3)="" THEN LET arm10f.phone_1$="+1 505.345.5232"
IF CVS(arm10f.phone_2$,3)="" THEN LET arm10f.phone_2$="+1 505.938.6120"

REM ' Set freight parameters
READ RECORD (country,KEY=tmm01.country_code$,DOM=*next)country$
LET freight_zone$=country.zone$
IF firm_id$="02" THEN LET freight_zone$=country.zone2$
LET freight_type$=" " 
if tmm01.country_code$="US" then LET freight_zone$="001",freight_type$="3"
LET standard_freight_type$=freight_type$

usrlang$=lang$
oklang$="DE,FR,EN,NL,ES,IT"
if pos(country.lang_code$=oklang$) then usrlang$=country.lang_code$
if pos(tmm01.lang_code$=oklang$) then usrlang$=tmm01.lang_code$

REM ' Set numeric display to US standard
LET amount_mask$="$#,###,##0.00-"
LET opt$=OPTS,opt$(5,1)=$00$,opt$(6,1)=$00$
REM ' if BSG set numerics to Europe standard: . for , and vice-versa
IF firm_id$="02" THEN LET amount_mask$=" #,###,##0.00-",opt$(3,1)=IOR(opt$(3,1),$02$),opt$(5,1)=$2E$,opt$(6,1)=$2C$
SETOPTS opt$

REM ' Initialize list of products available for sale online

LET item_product_list$=""
READ (csm01,KEY=firm_id$,DOM=read_csm01)
read_csm01: 
READ RECORD (csm01,END=end_csm01)csm01$
IF csm01.firm_id$<>firm_id$ THEN GOTO end_csm01
IF csm01.online_flag$="Y" THEN LET item_product_list$=item_product_list$+csm01.product$
GOTO read_csm01
end_csm01: 
runtime_products$="VP5,PR5,BAS"
virtual_products$="VP5,PR5,BAS"

rem 'check for special SAM expiration date
CALL "ec_open::SPEC_DATE"
readrecord(spec_date,key=firm_id$+cust_num$,dom=*next)spec_date$
close(spec_date)
special_date$=""
jul_spec_date=0
p1=pos(spec_date.mmdd$(1,2)="010305070810120406091102",2)
p2=fnnum(spec_date.mmdd$(3,2))
while p1
  if spec_date.date_active$<>"Y" then break
  if p2<1 or p2>31 then break
  if p1>14 and p2>30 then break
  if p1>22 and p2>28 then break
  temp$=DATE(0:"%Y%Mz%Dz")
  tmp=fnjul(temp$)
  special_date$=temp$(1,4)+spec_date.mmdd$
  jul_spec_date=fnjul(special_date$)
  if jul_spec_date<=tmp then 
    special_date$(1,4)=str(num(temp$(1,4))+1:"0000")
    jul_spec_date=fnjul(special_date$)
  fi
  if jul_spec_date-tmp<32 then
    special_date$(1,4)=str(num(special_date$(1,4))+1:"0000")
    jul_spec_date=fnjul(special_date$)
  fi
  break
wend

REM ' Switch from Login to Main
if force_password_change then
    junk$="M56"+$0a$
    mb_mode=0
    gosub translate_mbox    
    rem ' instantiate the Account window
    new_context = fnCreateWindowIfNeeded("110")
    dump_context = new_context = fnCreateWindowIfNeeded("101")
    rem ' load the account window
    IF !(init_account) THEN GOSUB init_account
    LET focus_id=NUM(FATTR(win_account$,"Password","ID"))
    accountWindow! = sysgui!.getWindow(gb__win.ACCOUNT)
    old_context=gb__win.login
    gosub show_window
    accountWindow!.getControl("EditCC").setEnabled(0)
    accountWindow!.getControl("New CC").setEnabled(0)
    accountWindow!.getControl("Email_rpt").setEnabled(0)
    accountWindow!.getControl("invoice").setEnabled(0)
    accountWindow!.getControl("EndUserData").setEnabled(0)
    accountWindow!.getControl("Cancel").setEnabled(0)
else
    LET focus_id=NUM(FATTR(win_main$,"Logout","ID"))
    rem ' new_context=fngb__context("101")
    new_context = fnCreateWindowIfNeeded("101")
    old_context=gb__win.login
    print(gb__sysgui)'context'(old_context)
    gosub show_window
fi

REM BWH
mainWindow! = sysgui!.getWindow(gb__win.MAIN)
mainWindow!.getControl(1009).setOpaque(sysgui!.FALSE)
mainWindow!.getControl(1000).setOpaque(sysgui!.FALSE)
mainWindow!.getControl(1001).setOpaque(sysgui!.FALSE)
mainWindow!.getControl(1002).setOpaque(sysgui!.FALSE)
LET logged_in=1

rem ' added to allow HeimBAS to manage serial numbers through b-comm
rem ' HeimBAS mod
if firm_id$="02" and cust_num$="020005" then
    mainWindow!.getControl(116).setEnabled(0)
fi

rem ' added to allow descore and basis users to lauch the support interface from b-comm
rem ' this was disabled 09/17/2020 by kew
mainWindow!.getControl(121).setVisible(0)
rem ' if firm_id$ = "01" and cust_num$ = "001022" and user_code$ = "JC" then
rem '     mainWindow!.getControl(121).setVisible(1)
rem ' else
rem '     if (firm_id$ = "01" and cust_num$ = "007514") then
rem '         if user_code$ = "BG" or user_code$ = "TD" or user_code$ = "KW" then
rem '             mainWindow!.getControl(121).setVisible(1)
rem '         fi
rem '     fi
rem ' fi

rem ' manage the download BBj functionality - only basis for now
if info(3,6) = "5" then
    rem --- hide the Download BBj button
    mainWindow!.getControl(122).setVisible(0)
    rem --- show the download BBj HtmlView
    mainWindow!.getControl(123).setTabTraversable(0)
    gosub createAndSetDownloadBBjURL
    mainWindow!.getControl(123).setText(dlbbj_html$)
    mainWindow!.getControl(123).setVisible(1)
else
    rem --- show the Download BBj button
    mainWindow!.getControl(122).setVisible(1)
    rem --- hide the download BBj HtmlView
    mainWindow!.getControl(123).setVisible(0)
fi

RETURN

Login_Error: 
GOSUB close_files
PRINT (gb__sysgui)'SETCURSOR'(0)
dim param$:"mbid:c(4),lang:c(2*),text1:c(1*),text2:c(1*)"
param.lang$=lang$
IF cust_num$="" THEN 
  junk$="M1"+$0a$
ELSE 
  junk$="M44"+$0a$
fi
mb_mode=0
gosub translate_mbox
LET firm_id$="",cust_num$="",user_code$=""
LET ctl_id=NUM(FATTR(win_login$,"User_ID","ID"))
PRINT (gb__sysgui)'FOCUS'(ctl_id)
RETURN

Config_Error: 
GOSUB close_files
PRINT (gb__sysgui)'SETCURSOR'(0)
LET i=MSGBOX(message$,0,"Configuration Error")
LET firm_id$="",cust_num$="",user_code$=""
LET ctl_id=NUM(FATTR(win_login$,"User_ID","ID"))
PRINT (gb__sysgui)'FOCUS'(ctl_id)

[Event Win=100 ID=2 Code=B <PUSH_BUTTON> (W100_C2_PUSH_BUTTON)]
rem ' Push button operated

LET gb__eoj=1

[Event Win=100 ID=99 Code=B <PUSH_BUTTON> (W100_C99_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()


win_login$ = fngb__get_fields$(win_id_login$,win_login$,"user_id")
passdata$ = lang$ + CVS(win_login.user_id$, 3)

rem ' loginContext = gb__win.login
rem ' print(gb__sysgui)'context'(loginContext),'hide'(0),
callingWindow! = BBjAPI().getSysGui().getWindow(gb__win.login)
callingWindow!.setVisible(0)

call "forgotCreds.bbj", passdata$
passdata$ = ""

rem ' show this calling window again, forcing a repaint
blankcontext = fnCreateWindowIfNeeded("121")
tempWindow! = BBjAPI().getSysGui().getWindow(blankcontext)
tempWindow!.setVisible(1)
tempWindow!.setVisible(0)
callingWindow!.setVisible(1)
BBjAPI().getSysGui().setContext(gb__win.login)
callingWindow!.focus()

[Event Win=101 ID=0 Code=X <WIN_CLOSE> (W101_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=101 ID=1018 Code=B <PUSH_BUTTON> (W101_C1018_PUSH_BUTTON)]
REM ' Go from Main to Item Window for Rental

rem ' use the item window but set the rent mode
rent_item=1
old_context=gb__win.main
gosub change_to_item

[Event Win=101 ID=112 Code=B <PUSH_BUTTON> (W101_C112_PUSH_BUTTON)]
rem ' Go from Main Window to View_SN Window
old_context=gb__win.main


change_to_view_sn:

rem ' create the item window if needed
new_context=fnCreateWindowIfNeeded("102")

LET edit_action$="new"
DIM sn$(0)
GOSUB show_sn
LET focus_id=NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
gosub show_window

[Event Win=101 ID=116 Code=B <PUSH_BUTTON> (W101_C116_PUSH_BUTTON)]
REM ' Go from Main Window to Item Window
rent_item=0
old_context=gb__win.main
gosub change_to_item

[Event Win=101 ID=117 Code=B <PUSH_BUTTON> (W101_C117_PUSH_BUTTON)]
REM ' Go from Main Window to Account Window

rem ' account uses the credit card template
dump_context=fnCreateWindowIfNeeded("114")

new_context=fnCreateWindowIfNeeded("110")

IF !(init_account) THEN GOSUB init_account

rem ' if the customer using the system in HeimBAS 02-020005 then enable the roll contracts functionality
thisWindow! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow(gb__win.account))
if firm_id$ = "02" and cust_num$ = "020005" then
    thisWindow!.getControl("btnLicenseUpdate").setVisible(1)
else
    thisWindow!.getControl("btnLicenseUpdate").setVisible(0)
endif

rem ' if the user code is ** disable updating account data
if user_code$ = "**" then
    thisWindow!.getControl("firstName").setEnabled(0)
    thisWindow!.getControl("lastName").setEnabled(0)
    thisWindow!.getControl("Email").setEnabled(0)
    thisWindow!.getControl("Email2").setEnabled(0)
    thisWindow!.getControl("Password").setEnabled(0)
    thisWindow!.getControl("Confirm Password").setEnabled(0)
    thisWindow!.getControl("Accept").setEnabled(0)
else
    thisWindow!.getControl("firstName").setEnabled(1)
    thisWindow!.getControl("lastName").setEnabled(1)
    thisWindow!.getControl("Email").setEnabled(1)
    thisWindow!.getControl("Email2").setEnabled(1)
    thisWindow!.getControl("Password").setEnabled(1)
    thisWindow!.getControl("Confirm Password").setEnabled(1)
    thisWindow!.getControl("Accept").setEnabled(1)
endif

LET focus_id=NUM(FATTR(win_account$,"Accept","ID"))

old_context=gb__win.main
gosub show_window

[Event Win=101 ID=118 Code=B <PUSH_BUTTON> (W101_C118_PUSH_BUTTON)]
REM ' Logout

rem ' PRINT (gb__sysgui)'SETCURSOR'(3)

FIND (ecm01,KEY=firm_id$+cust_num$+user_code$,ERR=unlock_ecm01)
unlock_ecm01: 

IF find_sn_file THEN CLOSE (find_sn_file); LET find_sn_file=0
IF LEN(find_sn_file$) THEN ERASE find_sn_file$,ERR=erase_find_sn_file
erase_find_sn_file: 

IF cc_file THEN CLOSE (cc_file); LET cc_file=0
IF LEN(cc_file$) THEN ERASE cc_file$,ERR=erase_cc_file
erase_cc_file: 

IF clients_file THEN CLOSE (clients_file); LET clients_file=0
IF LEN(clients_file$) THEN ERASE clients_file$,ERR=erase_clients_file
erase_clients_file: 

IF history_file THEN CLOSE (history_file); LET history_file=0
IF LEN(history_file$) THEN ERASE history_file$,ERR=erase_history_file
erase_history_file: 

IF cart_file THEN CLOSE (cart_file); LET cart_file=0
IF LEN(cart_file$) THEN ERASE cart_file$,ERR=erase_cart_file
erase_cart_file: 

REM ' win_login$ = fngb__get_screen$(win_id_login$,win_login$)
LET win_login.user_id$=""
LET win_login.password$=""
LET win_login$=fngb__put_fields$(win_id_login$,win_login$,"user_id,password")

GOSUB initialize_structure

GOSUB close_files

rem ' reset canadian_table
canadian_table = 0

REM ' Switch from Main to Login
LET focus_id=NUM(FATTR(win_login$,"User_ID","ID"))
new_context=gb__win.login
old_context=gb__win.main
gosub show_window

LET logged_in=0

[Event Win=101 ID=119 Code=B <PUSH_BUTTON> (W101_C119_PUSH_BUTTON)]
REM ' Go from Main Window to Cart Window

rem ' need the Trade window template
dump_context=fnCreateWindowIfNeeded("118")

new_context=fnCreateWindowIfNeeded("105")

GOSUB init_cart

LET focus_id=NUM(FATTR(win_cart$,"Close","ID"))
old_context=gb__win.main
gosub show_window

REM BWH
cartWindow! = sysgui!.getWindow(gb__win.cart)
cartWindow!.getControl(150).setOpaque(sysgui!.FALSE)
cartWindow!.getControl(160).setOpaque(sysgui!.FALSE)

[Event Win=101 ID=120 Code=B <PUSH_BUTTON> (W101_C120_PUSH_BUTTON)]
REM ' Go from Main Window to trade_select Window
old_context=gb__win.main
gosub change_to_trade_select

[Event Win=101 ID=121 Code=B <PUSH_BUTTON> (W101_C121_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' kick off the support interface
extUserID$ = firm_id$ + cust_num$ + user_code$
extPword$ = testPassword!

if info(3,6) <> "5" then
    rem ' not BUI
    cmd$ = System.getProperty("basis.BBjHome") + "/bin/bbj -c/mnt/data/basisaon/config.web extSpptInterface.bbj - " + extUserID$ + " " + extPword$ + " &"
    a = scall(cmd$)
else
    rem ' BUI
    namespace! = BBjAPI().getGlobalNamespace()
    extPword! = extPword$
    namespace!.setValue("SupportInterface" + extUserID$, extPword!)
    rem ' use for production
    url$ = "https://www.poweredbybbj.com:8443/apps/extSpptInterface" + "?packet=" + extUserID$
    rem ' use when testing on upgrade
    rem ' url$ = "https://upgrade.basis.cloud:8443/apps/extSpptInterface" + "?packet=" + extUserID$
    BBjAPI().getThinClient().browse(url$)
fi

[Event Win=101 ID=122 Code=B <PUSH_BUTTON> (W101_C122_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' open the BBj download page in the user's browser
url$ = "http://www.basis.cloud/bbj-download"
BBjAPI().getThinClient().browse(url$)

[Event Win=101 ID=124 Code=B <PUSH_BUTTON> (W101_C124_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

dim profServArg$:"FIRM_ID:C(2),CUSTOMER_NBR:C(6),USER_CODE:C(2),EMAIL:C(80)"

profServArg.firm_id$=firm_id$, profServArg.customer_nbr$=cust_num$, profServArg.user_code$ = user_code$, profServArg.email$=ecm01.e_mail$

callingWindow! = BBjAPI().getSysGui().getWindow(gb__win.main)
callingWindow!.setVisible(0)

call "buyServices.bbj", profServArg$
profServArg$ = ""

rem ' show this calling window again, forcing a repaint
blankcontext = fnCreateWindowIfNeeded("121")
tempWindow! = BBjAPI().getSysGui().getWindow(blankcontext)
tempWindow!.setVisible(1)
tempWindow!.setVisible(0)
callingWindow!.setVisible(1)
callingWindow!.focus()

[Event Win=102 ID=0 Code=X <WIN_CLOSE> (W102_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=102 ID=100 Code=N1:104 <INPUTE_KEY> (W102_C100_INPUT_KEYPRESS)]
REM ' Notify Event - INPUTE - Keypress (gb__notice.key$)

IF gb__notice.key<>13 THEN RETURN; REM ' ignore all except CR

LET ctl_id=NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
DIM sn$(20)
LET sn$(1)=CVS(CTRL(gb__sysgui,ctl_id,1,gb__win.view_sn),4)

GOSUB show_sn

[Event Win=102 ID=101 Code=B <PUSH_BUTTON> (W102_C101_PUSH_BUTTON)]
REM ' Push button operated

LET ctl_id=NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
DIM sn$(20)
LET sn$(1)=CVS(CTRL(gb__sysgui,ctl_id,1,gb__win.view_sn),4)

GOSUB show_sn

[Event Win=102 ID=102 Code=B <PUSH_BUTTON> (W102_C102_PUSH_BUTTON)]
REM ' Go from View_SN Window to Find_SN Window

rem ' create the find sn window if needed
new_context=fnCreateWindowIfNeeded("113")

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_view_sn$=fngb__get_screen$(win_id_view_sn$,win_view_sn$)

LET win_find_sn_grid_id=NUM(FATTR(win_find_sn$,"Grid","ID"))
DIM find_sn_rec$:"Serial_Number:c(16*):ALIGN=0 SHOW=1 LABEL=Serial_Number LENGTH=16:,"+"Sold:c(16*):ALIGN=0 SHOW=1 LABEL=Sold LENGTH=16:,"+"Users:c(8*):ALIGN=1 SHOW=1 LABEL=Users LENGTH=8:,"+"Description:c(60*):ALIGN=0 SHOW=1 LABEL=Description LENGTH=60:"

IF find_sn_file THEN CLOSE (find_sn_file)
LET find_sn_file=UNT
INITFILE find_sn_file$
OPEN (find_sn_file)find_sn_file$

REM ' populate the grid

LET win_find_sn$=fngb__get_screen$(win_id_find_sn$,win_find_sn$)

LET count=MAX(1,fnnum(win_find_sn.limit$))
LET prev_sn$=""
READ (snm01,KNUM=1,KEY=firm_id$+cust_num$+CVS(win_view_sn.serial_number$,6),DOM=find_next_sn)

find_next_sn: 
READ RECORD (snm01,END=find_last_sn)snm01$
IF snm01.firm_id$<>firm_id$ OR snm01.customer_nbr$<>cust_num$ THEN GOTO find_last_sn
IF win_find_sn.active_only AND snm01.active_flag$="N" THEN GOTO find_next_sn

LET grid_sn$=snm01.serial_nbr$
IF prev_sn$="" THEN LET prev_sn$=CVS(grid_sn$,2)

LET grid_date$=fnaondate$(snm01.orig_sale_date$)
IF snm01.users THEN LET grid_users$=STR(snm01.users) ELSE LET grid_users$="N/A"

DIM grid_item$(20)
LET grid_item$(1)=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$
ivm_item$=grid_item$
gosub ivm_item
LET grid_desc$=ivm01.item_desc$
LET grid_desc$=CVS(grid_desc$,3)+" ("+CVS(grid_item$,3)+")"

WRITE (find_sn_file,KEY=grid_sn$)CVS(grid_sn$,3),CVS(grid_date$,3),CVS(grid_users$,3),CVS(grid_desc$,3)

LET win_find_sn.serial_number$=CVS(snm01.serial_nbr$,7)
LET count=count-1
IF count THEN GOTO find_next_sn

find_last_sn: 
CLOSE (find_sn_file)
OPEN (find_sn_file)find_sn_file$

LET win_find_sn$=fngb__put_fields$(win_id_find_sn$,win_find_sn$,"serial_number")

LET batch!=sysgui!.get_message_batch()
batch!.addSendMsg(win_find_sn_grid_id,80,find_sn_file,FATTR(find_sn_rec$),gb__win.find_sn)
batch!.addSendMsg(win_find_sn_grid_id,81,0,$01$,gb__win.find_sn); REM ' read-only grid
batch!.addSendMsg(win_find_sn_grid_id,49,1,$$,gb__win.find_sn); REM ' highlight row
batch!.addSendMsg(win_find_sn_grid_id,57,1,$$,gb__win.find_sn); REM ' highlight colour
batch!.addSendMsg(win_find_sn_grid_hdr,84,0,$$,gb__win.find_sn); REM ' alignment
REM # batch!.addSendMsg(win_find_sn_grid_hdr,20,0,$$,gb__win.find_sn); rem ' info block
batch!.processAll()

LET focus_id=NUM(FATTR(win_find_sn$,"Close","ID"))

old_context=gb__win.view_sn
gosub show_window

[Event Win=102 ID=106 Code=B <PUSH_BUTTON> (W102_C106_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' can not send a license to an inactive serial number
if snm01.active_flag$ <> "Y" then return

dim args$:"FIRM_ID:C(2),CUSTOMER_NBR:C(6),USER_CODE:C(2),SERIAL_NBR:C(20),SCREENX:C(4),SCREENY:C(4),LANG:C(2)"
args.firm_id$ = firm_id$
args.customer_nbr$ = cust_num$
args.user_code$ = user_code$
args.serial_nbr$ = snm01.serial_nbr$

thisWindow! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow(gb__win.view_sn))
x = thisWindow!.getX()
y = thisWindow!.getY()
args.screenx$ = str(x:"0000")
args.screeny$ = str(y:"0000")
args.lang$=lang$

rem ' hide the current window
rem ' print(gb__sysgui)'context'(gb__win.view_sn),'hide'(0),
rem ' hide this calling window
callingWindow! = BBjAPI().getSysGui().getWindow(gb__win.view_sn)
callingWindow!.setVisible(0)

call "ec_sendLicense.bbj", args$

rem ' bring the window back
rem ' print(gb__sysgui)'context'(gb__win.view_sn),'show'(0),
rem ' show this calling window again, forcing a repaint
blankcontext = fnCreateWindowIfNeeded("121")
tempWindow! = BBjAPI().getSysGui().getWindow(blankcontext)
tempWindow!.setVisible(1)
tempWindow!.setVisible(0)
callingWindow!.setVisible(1)
callingWindow!.focus()

[Event Win=102 ID=108 Code=c0 <CHECK_OFF> (W102_C108_CHECK_OFF)]
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' msg$ = "Please confirm you are removing the license virtual flag."
msg$ = "Please contact BASIS Sales to remove this serial number from virtual status."

rem ' resp = msgbox(msg$,4+32+256,"Setting Virtual License Flag")
resp = msgbox(msg$,0,"Unsetting Virtual License Flag")
sysgui!.getWindow(gb__win.view_sn).getControl("virtualFlag").setSelected(1)

rem ' if resp = 6 then
rem '     setVirtualFlag = 0, unSetVirtualFlag=1
rem '     gosub maintainVirtualFlag
rem ' else
rem '     sysgui!.getWindow(gb__win.view_sn).getControl("virtualFlag").setSelected(1)
rem ' fi

[Event Win=102 ID=108 Code=c1 <CHECK_ON> (W102_C108_CHECK_ON)]
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

if snm01.product$ = "PR5" or snm01.product$ = "VP5" then
    msg$ = "PR5 and VP5 virtual licenses must use BLM 10.0 or greater. "
else
    msg$ = ""
fi
msg$ = msg$ + "Please confirm you are setting this license to virtual."
resp = msgbox(msg$,4+32+256,"Setting Virtual License Flag")
if resp = 6 then
    setVirtualFlag = 1, unSetVirtualFlag=0
    gosub maintainVirtualFlag
else
    sysgui!.getWindow(gb__win.view_sn).getControl("virtualFlag").setSelected(0)
fi

[Event Win=102 ID=109 Code=c0 <CHECK_OFF> (W102_C109_CHECK_OFF)]
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

msg$ = "Please confirm you would like to receive email notices when the perpetual license is nearing expiration."
resp = msgbox(msg$,4+32+256,"Re-enable Perpetual License Notifications")
if resp = 6 then
    setPerpetualFlag = 0, unSetPerpetualFlag=1
    gosub maintainPerpetualFlag
else
    sysgui!.getWindow(gb__win.view_sn).getControl("stopPerPetNote").setSelected(1)
fi

[Event Win=102 ID=109 Code=c1 <CHECK_ON> (W102_C109_CHECK_ON)]
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

msg$ = "Please confirm that you do not want to receive email notices when the perpetual license is expired and has not automatically re-registered."
resp = msgbox(msg$,4+32+256,"Pause Perpetual Notices For Dormant License")
if resp = 6 then
    setPerpetualFlag = 1, unSetPerputalFlag=0
    gosub maintainPerpetualFlag
else
    sysgui!.getWindow(gb__win.view_sn).getControl("stopPerPetNote").setSelected(0)
fi

[Event Win=102 ID=110 Code=B <PUSH_BUTTON> (W102_C110_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

ctl_id = NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
drsn$ = CVS(CTRL(gb__sysgui,ctl_id,1,gb__win.view_sn),4)

if cvs(drsn$,3) <> "" then

        drfirm$ = firm_id$
        drcust$ = cust_num$ + user_code$
        drpass$ = ecm01.password$

        rem ' xresp = msgbox(drsn$ + " " + drfirm$ + " " + drcust$ + " " + drpass$, 0 , debug$)

        if info(3,6) = "5" then
            rem ' running BUI - launch in a new brower tab
            rem ' write temp file with need information
            drfilename$ = date(0:"%Hz%mz%sz")+hta(drcust$)
            string stbl("TEMP") + drfilename$
            dr = unt
            open(dr)stbl("TEMP") + drfilename$
            write(dr)drfirm$ + "," + drcust$ + "," + drpass$
            close(dr)
            rem ' launch the URL in a new browseer tab
            rem ' ourURL$ = "https://upgrade.basis.cloud:8443/apps/DIRECT-RENEW?sn=" + drsn$  + "&more=" + drfilename$
            ourURL$ = "https://bbjserver.basis.cloud:8443/apps/DIRECT-RENEW?sn=" + drsn$  + "&more=" + drfilename$
            BBjAPI().getThinClient().browse(ourURL$)

            rem ' Command$="/usr/local/bbj/bin/bbj -tNIO -c/basisaon/config.web -q directRenew.bbj - " + drsn$ + " " + drfirm$ + " " + drcust$ + " " + drpass$ + " &"
            rem ' a=scall(command$)
        else
            Command$="/usr/local/bbj/bin/bbj -tT2 -c/basisaon/config.web -q directRenew.bbj - " + drsn$ + " " + drfirm$ + " " + drcust$ + " " + drpass$ + " &"
            a=scall(command$)
        fi
fi

[Event Win=102 ID=116 Code=N5:19 <LIST_CHANGE> (W102_C116_LIST_CHANGE)]
rem ' Notify Event - List Control - List Changed (5)
rem ' gb__event! = cast(BBjListChangeEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

if len(cvs(snm01.contract$,3))<>6 then 
    rem ' no contract
    renewTypeListButton!.selectIndex(rtIndex)
    return
fi 

rtChgIndex = renewTypeListButton!.getSelectedIndex()
rtChgIndex = rtChgIndex + 1
renChgTyp$ = renTypMast$(rtChgIndex,1)

if renChgTyp$ = "A" then
    msg$ = "The Active renew type means that when an auto-generated renewal order is created for this contract with the PO Number of SAM Roll, RNT Roll or DVK Roll the expiration date "
    msg$ = msg$ + "will roll for the renewal when the invoice is delivered." 
else
    if renChgTyp$ = "Y" then
        msg$ = "The Proforma renew type means that when an auto-generated renewal order is created for this contract with the PO Number of SAM Renew, RNT Renew or DVK Renew, "
        msg$ = msg$ + "the expiration date will not roll for the renewal until the invoice is paid or a PO Number is added to the invoice via DIRECT-RENEW."
    else
        msg$ = "Selecting No Renew means that this contract will not auto renew either via a Proforma invoice or an Active Renew invoice."
    fi
fi
resp = msgbox(msg$, 1 + 32,"Renew Type Selected")

if resp = 2 then
    renewTypeListButton!.selectIndex(rtIndex)
else
    extract record(smc01,key=snm01.contract$)smc01$
    smc01.renew_flag$ = renChgTyp$
    smc01$ = field(smc01$)
    write record(smc01,key=snm01.contract$)smc01$
    rtIndex = rtChgIndex - 1 
    renTyp$ = smc01.renew_flag$
    
    rem ' record the event in the serial number comments 
    seq = 1
    READ (snm04, KEY=snm01.serial_nbr$, DOM=*NEXT)
    WHILE seq<100
        READ RECORD (snm04,END=*break)snm04$
        IF snm04.serial_nbr$=snm01.serial_nbr$ THEN 
            seq = NUM(snm04.comments_seq$) + 1
            CONTINUE
        fi
        snm04.serial_nbr$ = snm01.serial_nbr$
        snm04.comments_seq$ = STR(seq:"00"), seq = 100
        if smc01.renew_flag$ = "A" then
            dis_renewFlag$ = "Active"
        else
            if smc01.renew_flag$ = "N" then 
                dis_renewFlag$ = "No Ren"
            else
                dis_renewFlag$ = "Profor"
            fi
        fi
        snm04.cmt_line$ = "Renew Type chng to " + dis_renewFlag$ + " by " + firm_id$ + cust_num$ + user_code$ + " " + date(0:"%Y/%Mz/%Dz")
        snm04$=FIELD(snm04$)
        WRITE RECORD (snm04,KEY=snm04$(1,22))snm04$
    WEND

fi

[Event Win=102 ID=118 Code=B <PUSH_BUTTON> (W102_C118_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' do we have a serial number
chkSN$ = BBjAPI().getSysGui().getWindow(gb__win.view_sn).getControl("Serial Number").getText()

if len(chkSN$) = 9 then

    rem ' create the features window if needed
    if gb__win.serialNbrFeatures <= 0 then
      new_context=fnCreateWindowIfNeeded("115")
    else
        new_context = gb__win.serialNbrFeatures
    fi
    
    focus_id=NUM(FATTR(win_serialNbrFeatures$,"Close","ID"))
    
    old_context=gb__win.view_sn
    gosub show_window
    
    gridType$ = "ReadOnly"
    return_context = old_context
        
    gosub loadVendorFeaturesGrid
    
    subject$ = "Vendor Features in B-Commerce"
    msgtxt$ = "Vendor Features in B-Commerce accessed by " +  firm_id$ + cust_num$ + user_code$ + " fron the View SN Panel."
    call "sendEmail.src", "customer-service@basis.cloud", "kurt.e.williams@comcast.net", "", "", subject$, msgtxt$, ""
    
fi

[Event Win=102 ID=165 Code=B <PUSH_BUTTON> (W102_C165_PUSH_BUTTON)]
REM ' Go from View_SN Window to History Window

rem create the history window if needed
new_context=fnCreateWindowIfNeeded("111")

LET temp$=sn$
LET ctl_id=NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
DIM sn$(20)
LET sn$(1)=CVS(CTRL(gb__sysgui,ctl_id,1,gb__win.view_sn),4)
IF temp$<>sn$ THEN GOSUB show_sn
IF sn$="" THEN RETURN

LET snm01.serial_nbr$=sn$
READ RECORD (snm01,KNUM=0,KEY=snm01.serial_nbr$,ERR=*next)snm01$;GOTO got_history_snm01
sn$=""
IF CVS(sn$,3)="" THEN 
  PRINT (gb__sysgui)'SETCURSOR'(0)
  junk$="M4"+$0a$
  mb_mode=0
  gosub translate_mbox
  RETURN
fi

got_history_snm01: 
PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_history_grid_id=NUM(FATTR(win_history$,"Grid","ID"))
DIM history_rec$:"Date:c(16*):ALIGN=0 SHOW=1 LABEL=Date LENGTH=16:,"+"Invoice:c(16*):ALIGN=0 SHOW=1 LABEL=Invoice LENGTH=16:,"+"Activity:c(8*):ALIGN=0 SHOW=1 LABEL=Activity LENGTH=8:,"+"Revision:c(16*):ALIGN=0 SHOW=1 LABEL=Revision LENGTH=16:,"+"Users:c(8*):ALIGN=1 SHOW=1 LABEL=Users LENGTH=8:,"+"Authorization:c(32*):ALIGN=0 SHOW=1 LABEL=Key/Authorization LENGTH=32:"

IF history_file THEN CLOSE (history_file)
LET history_file=UNT
INITFILE history_file$
OPEN (history_file)history_file$

LET win_history$=fngb__get_screen$(win_id_history$,win_history$)

ivm_item$=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$+FILL(5)
gosub ivm_item

LET win_history.serial_number$=CVS(sn$,3)
LET win_history.item_number$=CVS(ivm01.item_number$,3)
LET win_history.description$=CVS(ivm01.item_desc$,3)
LET win_history.reset_reason$=reset_reason_list$

LET win_history_list_box_id=NUM(FATTR(win_history$,"List_Box","ID"))
LET win_history_tab_id=NUM(FATTR(win_history$,"Tab","ID"))
reset_id=NUM(FATTR(win_history$,"Reset","ID"))
reset_reason_id=NUM(FATTR(win_history$,"reset_reason","ID"))
reset_code$=reset_code_list$(1,2)
GOSUB license_history
LET win_history.list_box$=lbox$

get_history: 
READ (snt01,KNUM=0,KEY=sn$,DOM=history_loop)

history_loop: 
READ RECORD (snt01,END=history_endloop)snt01$
IF CVS(snt01.serial_nbr$,3)<>CVS(sn$,3) THEN GOTO history_endloop

LET d$=fnaondate$(snt01.trans_date$)
LET csm04.firm_id$=firm_id$
LET csm04.product_rev$=snt01.product_rev$
LET csm04.description$=snt01.product_rev$
READ RECORD (csm04,KEY=csm04.firm_id$+csm04.product_rev$,ERR=history_no_rev)csm04$
history_no_rev: 

WRITE (history_file,KEY=snt01.trans_date$+snt01.sn_det_seq$)d$,CVS(snt01.ar_inv_nbr$,3),CVS(snt01.type_of_sale$,3),CVS(csm04.description$,3),STR(snt01.users),CVS(snt01.auth_code$,3),CVS(ivm01.item_desc$,3)

GOTO history_loop

history_endloop: 
CLOSE (history_file)
OPEN (history_file)history_file$

LET win_history$=fngb__put_screen$(win_id_history$,win_history$)

LET focus_id=NUM(FATTR(win_history$,"Close","ID"))
LET clients_id=NUM(FATTR(win_history$,"Clients","ID"))

old_context=gb__win.view_sn
gosub show_window
BBjAPI().getSysGui().setContext(gb__win.history)

REM 'Select tab 0
LET idx$=SENDMSG(gb__sysgui,win_history_tab_id,34,0,$$)

LET batch!=sysgui!.get_message_batch()
batch!.addSendMsg(win_history_grid_id,80,history_file,FATTR(history_rec$),gb__win.history)
batch!.addSendMsg(win_history_grid_id,81,0,$01$,gb__win.history); REM ' read-only grid
batch!.addSendMsg(win_history_grid_id,49,1,$$,gb__win.history); REM ' highlight row
batch!.addSendMsg(win_history_grid_id,57,1,$$,gb__win.history); REM ' highlight colour
batch!.addSendMsg(win_history_grid_hdr,84,0,$$,gb__win.history); REM ' alignment
REM # batch!.addSendMsg(win_history_grid_hdr,20,0,$$,gb__win.history); rem ' info block
batch!.processAll()

IF CVS(server_sn$,3)="" THEN PRINT (gb__sysgui)'DISABLE'(clients_id), ELSE PRINT (gb__sysgui)'ENABLE'(clients_id)
PRINT (gb__sysgui)'HIDE'(reset_id,reset_reason_id)
IF arm02.allowed_resets>0 THEN PRINT (gb__sysgui)'SHOW'(reset_id,reset_reason_id),'DISABLE'(reset_id,reset_reason_id)

[Event Win=102 ID=166 Code=B <PUSH_BUTTON> (W102_C166_PUSH_BUTTON)]
REM ' Go from View_SN Window to Edit_SN Window

rem ' create the edit serial number window if needed
new_context=fnCreateWindowIfNeeded("103")

LET edit_action$="new"
LET ctl_id=NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
DIM sn$(20)
LET sn$(1)=CVS(CTRL(gb__sysgui,ctl_id,1,gb__win.view_sn),4)
xref=0;readrecord(sam2_ds_xref,key=sn$,knum=1,dom=*next)sam2_ds_xref$;xref=1
if xref then 
  i=msgbox("Data server is linked to "+cvs(sam2_ds_xref.client_serial_nbr$,2)+" - can only be used for upgrade.",0,"Unavailable")
  return
fi
GOSUB show_sn
IF !(sn_editable) THEN RETURN
GOSUB init_cart_record
IF LEN(status$) THEN RETURN

new_product_code$=product_code$
new_platform_code$=platform_code$
new_os_level_code$=os_level_code$
new_product_rev_code$=product_rev_code$
new_license_code$=license_type_code$
user1=snm01.users,user2=0
u1_prop$=snm02.lic_property1$
u2_prop$=snm02.lic_property2$
if snm02.users1+snm02.users2 then user1=snm02.users1,user2=snm02.users2
old_context=gb__win.view_sn

gosub show_edit_sn_window

[Event Win=102 ID=181 Code=B <PUSH_BUTTON> (W102_C181_PUSH_BUTTON)]
REM ' Renew button

rem ' used to special VAT rate during the pandemic, removed 01/14/2021
rem ' if firm_id$ = "02" and pos(cust_num$="020004|020334|020490|020341") <> 0 then
rem '         xresp = msgbox("Diese Bestellung muss aufgrund der aktuellen Mehrwertsteuer-Regelung manuell bearbeitet werden. Bitte wenden Sie sich an Ihren Innendienst", 0, "Process Manually")
rem '         return
rem ' fi

rem ' create the renewal window if needed
new_context=fnCreateWindowIfNeeded("120")


ctl_id=NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
DIM sn$(20)
LET sn$(1)=CVS(CTRL(gb__sysgui,ctl_id,1,gb__win.view_sn),4)
GOSUB show_sn
new_product_code$=snm01.product$
new_platform_code$=snm01.platform$
new_os_level_code$=snm01.os_level$
new_product_rev_code$=snm01.product_rev$
new_license_code$=snm01.license_type$
user1=snm01.users,user2=0
u1_prop$=snm02.lic_property1$
u2_prop$=snm02.lic_property2$
if snm02.users1+snm02.users2 then user1=snm02.users1,user2=snm02.users2
IF !(sn_editable) THEN RETURN
temp_os_level_code$=snm01.os_level$
hold_days=days_expired
days_expired=days_expired+365
gosub revision_list
days_expired=hold_days
temp$=revision_desc_list$
temp=pos("NEXT"=cvs(temp$,7))
if temp=0 then temp=pos("CUR"=cvs(temp$,7))
IF temp THEN 
  p1=0
  while 1
  p=pos($0a$=temp$,1,p1+1)
  if p=0 then break
  p1=p1+1
  if p>temp then break
  wend
  IF p1>0 AND p1*3<=LEN(revision_list$) THEN new_product_rev_code$=revision_list$((p1-1)*3+1,3)
fi
new_item$=snm01.product$+snm01.platform$+snm01.os_level$+new_product_rev_code$+snm01.license_type$
cur_item$=new_item$(1,9)+snm01.product_rev$+new_item$(13,3)

sam_flag=1
rent_item=0
no_rif=0
add_tsi=0
if contract_type$="RN1" then rent_item=1
qty=1
DIM type$[0:1],price[0:1],cur_users[2],new_users[2],cur_lprop$[2],new_lprop$[2]
cur_lprop$[0]=snm02.lic_property1$
cur_lprop$[1]=snm02.lic_property2$
cur_users[0]=snm02.users1
cur_users[1]=snm02.users2
if cur_users[0]+cur_users[1]=0 then cur_users[0]=snm01.users
new_lprop$[0]=cur_lprop$[0]
new_lprop$[1]=cur_lprop$[1]
new_users[0]=cur_users[0]
new_users[1]=cur_users[1]
jul_base=fnjul(smc01.annual_dt$)
jul_default=jul_base+365
jul_renew=jul_default
if rent_item=0 then 
  jul_default=jul_today+365
  if jul_renew<jul_default then jul_renew=jul_default
fi
gosub renew_dt_info
new_context=gb__win.renewal
old_context=gb__win.view_sn
if smc01.contr_type$ = "RN1" then sam_disc=0 else sam_disc=1
gosub ec_price
if ok=0 then return
gosub delete_non_renews
gosub total_price
win_renewal$=fngb__get_screen$(win_id_renewal$,win_renewal$)
renew_dt_id=num(fattr(win_renewal$,"renew_dt","ID"))
renew_dt_btn_id=num(fattr(win_renewal$,"renew_dt_btn","ID"))
if contract_type$="SM1" then comments$=comments$+renew_dt_info$
win_renewal.sn$=cvs(sn$,3)
win_renewal.rev$=new_product_rev_code$
win_renewal.comments$=comments$
win_renewal.price$=CVS(STR(price:amount_mask$),3+64) 
win_renewal.listprice$=CVS(STR(listprice:amount_mask$),3+64) 
win_renewal.reference$=""
win_renewal$=fngb__put_screen$(win_id_renewal$,win_renewal$)

focus_id=NUM(FATTR(win_renewal$,"reference","ID"))
rem ' dim loc$:"x:i(2),y:i(2),w:u(2),h:u(2)"
rem ' loc$=ctrl(gb__sysgui,0,0,old_context)
rem ' print(gb__sysgui)'context'(new_context),'move'(0,loc.x+50,loc.y+50)
rem ' print(gb__sysgui)'context'(new_context),'move'(0,loc.x,loc.y)
rem ' print(gb__sysgui)'context'(new_context),'enable'(0),'show'(0),'focus'(0),'raise','setcursor'(0),'flush'
gosub show_window

jul_today=jul(0,0,0)
currentWindow! = sysgui!.getWindow(new_context)

renew_dt!=currentWindow!.getControl(renew_dt_id)
renew_dt!.setValue(jul_renew)

if smc01.contr_type$="SM1" and jul_spec_date=0 then
  print(gb__sysgui)'context'(new_context),'show'(renew_dt_btn_id),'enable'(renew_dt_id)
else
  print(gb__sysgui)'context'(new_context),'hide'(renew_dt_btn_id),'disable'(renew_dt_id)
fi
rem ' if focus_id then print(gb__sysgui)'context'(new_context),'focus'(focus_id)

[Event Win=102 ID=2 Code=B <PUSH_BUTTON> (W102_C2_PUSH_BUTTON)]
rem ' Go from View_SN Window to Main Window

LET focus_id=NUM(FATTR(win_main$,"View_SN","ID"))
new_context=gb__win.main
old_context=gb__win.view_sn
gosub show_window

[Event Win=103 ID=0 Code=X <WIN_CLOSE> (W103_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=103 ID=1 Code=B <PUSH_BUTTON> (W103_C1_PUSH_BUTTON)]
REM ' Go from Edit_SN Window to Cart Window

rem ' used to special VAT rate during the pandemic, removed 01/14/2021
rem ' gosub blockGermanCustomers
rem ' if germanCustomer then return

rem ' create windows if needed
dump_context=fnCreateWindowIfNeeded("105"); rem cart
dump_context=fnCreateWindowIfNeeded("118"); rem trade
dump_context=fnCreateWindowIfNeeded("116"); rem reset license
rem ' set context back to the edit sn context
print(gb__sysgui,err=*next)'context'(gb__win.edit_sn)

gosub new_dt_check
if !(ok_dt) then return
PRINT (gb__sysgui)'SETCURSOR'(3)

GOSUB update_edit_sn_price
IF !(ok) THEN 
  PRINT (gb__sysgui)'SETCURSOR'(0)
  junk$="M20"+$0a$+cvs(comments$,3)+$0a$
  mb_mode=0
  gosub translate_mbox
  RETURN
fi

IF edit_action$="new" THEN 
  GOSUB init_cart_record
  IF LEN(status$) THEN 
    PRINT (gb__sysgui)'SETCURSOR'(0)
    RETURN
  fi
fi
LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"reference,additional_support,no_rif")
LET old_item_number$=old_product_code$+old_platform_code$+old_os_level_code$+old_product_rev_code$+old_license_code$
LET new_item_number$=new_product_code$+new_platform_code$+new_os_level_code$+new_product_rev_code$+new_license_code$

DIM item$(20)
LET item$(1)=new_item_number$
READ RECORD (csm01,KEY=firm_id$+item$(1,3))csm01$
LET sam_required$=csm01.ctr_required$
rem 'new_users[all],new_lprop$[all] were set in update_edit_sn_price
LET ece11.po_ref_number$=win_edit_sn.reference$
gosub po_number_check
if p0 then return
LET ece11.serial_nbr$=win_edit_sn.serial_number$
LET ece11.item_number$=new_item_number$
LET ece11.qty=1
LET ece11.users=new_users[0],ece11.lic_property1$=new_lprop$[0]
LET ece11.users2=new_users[1],ece11.lic_property2$=new_lprop$[1]
if ece11.users=0 then
 LET ece11.users=ece11.users2,ece11.users2=0
 LET ece11.lic_property1$=ece11.lic_property2$,ece11.lic_property2$="  "
fi
LET temp$="NS",ece11.sam_coverage$=temp$(sam_flag+1,1)
LET temp$="NY",ece11.support_only$=temp$(support_only+1,1)
LET ece11.add_support=fnnum(win_edit_sn.additional_support$)
ece11.uncounted_flag$="N"
LET ece11.annual_dt$=fill(8)
if sam_active$="Y" or pos("RN1"=new_item_number$)=13 then ece11.annual_dt$=smc01.annual_dt$
ece11.no_rif_flag$=" "
ece11.modify_flag$=" ";if sam_disc then ece11.modify_flag$="S"
if no_rif then ece11.no_rif_flag$="Y" 
if sam_flag and sam_active$<>"Y" then
  gosub renew_range
  if jul_renew>=jul_begin then ece11.annual_dt$=date(jul_renew:"%Yl%Mz%Dz")
fi
LET ffl$=FATTR(ece11$,"available"),ffl=DEC(ffl$(10,2))
LET ece11.available$=FILL(ffl)
gosub upg_to
ece11.reset_code$="  "
if ece11.add_support=0 or firm_id$="02" then 
  ec_hide_context=gb__win.edit_sn
  gosub get_end_user_data
  print(gb__sysgui)'context'(gb__win.edit_sn),'show'(0),
  gosub edit_to_cart  
  return
fi

LET win_reset_license$=fngb__get_screen$(win_id_reset_license$,win_reset_license$)
focus_id=NUM(FATTR(win_reset_license$,"reset_reason","ID"))
LET win_reset_license.reset_reason$=reset_reason_list$
reset_code$=reset_code_list$(1,2)
LET win_reset_license$=fngb__put_screen$(win_id_reset_license$,win_reset_license$)
new_context=gb__win.reset_license
old_context=gb__win.edit_sn
print(gb__sysgui)'context'(new_context),'enable'(0),'show'(0),'focus'(0),'raise','setcursor'(0),'flush'
jul_today=jul(0,0,0)
print(gb__sysgui)'context'(new_context),'focus'(focus_id)
currentWindow! = sysgui!.getWindow(new_context)

[Event Win=103 ID=1002 Code=B <PUSH_BUTTON> (W103_C1002_PUSH_BUTTON)]
LET win_edit_sn$=fngb__get_screen$(win_id_edit_sn$,win_edit_sn$)
GOSUB update_edit_sn_price
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"comments,price,listprice")

[Event Win=103 ID=1008 Code=c0 <CHECK_OFF> (W103_C1008_CHECK_OFF)]
REM ' SAM unchecked
LET sam_flag=0
gosub unset_rif
GOSUB edit_sn_sam_checkbox
jul_renew=0
if fnnum(temp_renew$) then jul_renew=fnjul(temp_renew$)
if jul_renew then renew_dt!.setValue(jul_renew) else renew_dt!.setText(" ")

[Event Win=103 ID=1008 Code=c1 <CHECK_ON> (W103_C1008_CHECK_ON)]
REM ' SAM checked
LET sam_flag=1
if jul_default then renew_dt!.setValue(jul_default)

GOSUB edit_sn_sam_checkbox

[Event Win=103 ID=1009 Code=f0 <LOST_FOCUS> (W103_C1009_LOST_FOCUS)]
rem ' Control lost focus
jul_renew=renew_dt!.getValue()
jb=0
if renewable_sam then jb=fnjul(smc01.annual_dt$)
temp$=DATE(jul_renew:"%Mz%Dz")
if pos("0229"=temp$) then jul_renew=jul_renew+1
gosub renew_range

if sam_flag and jul_renew<jul_begin and (jul_renew<>jb and jb) then
  gosub invalid_date
  jul_renew=jul_default
  PRINT (gb__sysgui)'flush'
  renew_dt!.focus()
fi

renew_dt!.setValue(jul_renew)
gosub update_edit_sn_price
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"comments,price,listprice")

[Event Win=103 ID=1009 Code=f1 <GOT_FOCUS> (W103_C1009_GOT_FOCUS)]
rem ' Control got focus
jul_renew=renew_dt!.getValue()

[Event Win=103 ID=1012 Code=f0 <LOST_FOCUS> (W103_C1012_LOST_FOCUS)]
LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"additional_support")
if fnnum(win_edit_sn.additional_support$)>2 then let win_edit_sn.additional_support$="2"
GOSUB update_edit_sn_price
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"additional_support,comments,price,listprice")

[Event Win=103 ID=1017 Code=c0 <CHECK_OFF> (W103_C1017_CHECK_OFF)]
rem ' Runtime checked off
ltcode$=""
rtm_edit_sn_display:
if pos("BAS"=new_product_code$)=0 then
  lb_id=num(fattr(win_edit_sn$,"license","ID"))
  GOSUB license_list
  dim ivm_item$(20)
  ivm_item$(1)=new_product_code$+new_platform_code$+new_os_level_code$+new_product_rev_code$+new_license_code$
  if pos(ltcode$=license_list$) then ivm_item$(13,3)=ltcode$
  gosub ivm_item
  if ivmok then 
    win_edit_sn.license$=license_desc_list$
    win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"license")
  else
    win_edit_sn.runtime$="0"
    win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"runtime")
  fi
fi
GOSUB update_edit_sn_price
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"comments,price,listprice")

[Event Win=103 ID=1017 Code=c1 <CHECK_ON> (W103_C1017_CHECK_ON)]
rem ' Runtime checked
ltcode$="RTM"
goto rtm_edit_sn_display

[Event Win=103 ID=1020 Code=b <TOOL_BUTTON> (W103_C1020_PUSH_TOOL_BUTTON)]
rem ' Tool button operated

renew_dt!.focus()
renew_dt!.calendar()
print (gb__sysgui)'flush'

[Event Win=103 ID=1022 Code=B <PUSH_BUTTON> (W103_C1022_PUSH_BUTTON)]
rem ' Go from Edit Sn Window to Main Window

LET focus_id=NUM(FATTR(win_main$,"View_SN","ID"))
new_context=gb__win.main
old_context=gb__win.edit_sn
gosub show_window

[Event Win=103 ID=1029 Code=c0 <CHECK_OFF> (W103_C1029_CHECK_OFF)]
no_rif=0
GOSUB edit_sn_sam_checkbox

[Event Win=103 ID=1029 Code=c1 <CHECK_ON> (W103_C1029_CHECK_ON)]
rem ' SAM RIF cancel

if sam_flag=0 then goto unset_rif 
junk$="M47"+$0a$
mb_mode=4+32
gosub translate_mbox
IF i<>6 THEN goto unset_rif
no_rif=1
GOSUB edit_sn_sam_checkbox

[Event Win=103 ID=104 Code=B <PUSH_BUTTON> (W103_C104_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' do we have a serial number
chkSN$ = BBjAPI().getSysGui().getWindow(gb__win.view_sn).getControl("Serial Number").getText()

if len(chkSN$) = 9 then

      rem ' create the features window if needed
      if gb__win.serialNbrFeatures <= 0 then
          new_context=fnCreateWindowIfNeeded("115")
      else
        new_context = gb__win.serialNbrFeatures
      fi
      
      focus_id=NUM(FATTR(win_serialNbrFeatures$,"Close","ID"))

      old_context=gb__win.edit_sn
      gosub show_window

      return_context = old_context
      gridType$ = "Editable"

      gosub loadVendorFeaturesGrid
      
      subject$ = "Vendor Features in B-Commerce"
      msgtxt$ = "Vendor Features in B-Commerce accessed by " +  firm_id$ + cust_num$ + user_code$ + " fron the Edit SN Panel."
      call "sendEmail.src", "customer-service@basis.cloud", "kurt.e.williams@comcast.net", "", "", subject$, msgtxt$, ""

fi

[Event Win=103 ID=118 Code=N2:19 <LIST_SELECT> (W103_C118_LIST_SELECT)]
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"product")
LET temp$=win_edit_sn.product$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(product_list$) THEN LET new_product_code$=product_list$(temp*3+1,3)

READ RECORD (csm01,KEY=firm_id$+snm01.product$)csm01$
LET cur_lic_props=csm01.lic_property1$<>"  "
LET cur_sam_required$=csm01.ctr_required$
READ RECORD (csm01,KEY=firm_id$+new_product_code$)csm01$
LET sam_required$=csm01.ctr_required$
LET new_lic_props=csm01.lic_property1$<>"  "

rem "** switch to trade_select **
if cur_lic_props=0 and new_lic_props then
  print(gb__sysgui)'SETCURSOR'(0)
  junk$="M13"+$0a$
  mb_mode=4+64
  gosub translate_mbox
  IF i<>6 THEN 
    new_product_code$=product_code$
    temp=pos($FF$=temp$)
    if temp then win_edit_sn.product$=temp$(1,temp)+str(0)
    LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"product")
    RETURN
  fi
  old_context=new_context
  gosub change_to_trade_select
  hold_sn$=snm01.serial_nbr$
  LET win_trade_select.starting_sn$=hold_sn$
  LET win_trade_select$=fngb__put_fields$(win_id_trade_select$,win_trade_select$,"starting_sn")
  gosub w117_c1_push_button
  gosub w117_c104_push_button
  dim start_sn$(20)  
  LET start_sn$(1)=hold_sn$
  gosub set_starting_sn 
  ctl_id=num(fattr(win_trade_select$,"exchange_btn","ID"))
  Print (gb__sysgui)'focus'(ctl_id) 
  return
fi

REM ' *** prepare platform list ***
LET temp_product_code$=new_product_code$,temp_platform_code$=""
lb_id=num(fattr(win_edit_sn$,"platform","ID"))
GOSUB platform_list
LET new_platform_code$=temp_platform_code$
LET win_edit_sn.platform$=platform_desc_list$
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"platform")

REM ' *** prepare license list ***
lb_id=num(fattr(win_edit_sn$,"license","ID"))
LET ltcode$=license_type_code$,prdcode$=product_code$
GOSUB license_list
LET new_license_code$=license_type_code$
LET win_edit_sn.license$=license_desc_list$
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"license")

REM ' *** prepare os_level list ***
gosub W103_C127_LIST_SELECT 

IF CVS(contract$,3)="" AND sam_required$="R" and cur_sam_required$<>"R" THEN LET win_edit_sn.sam_standard$="1" 
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"sam_standard")
if new_lic_props and cur_lic_props=0 then
 hide_props=0
 win_edit_sn.users2$=win_edit_sn.users$
 win_edit_sn.users$="0"
fi
if new_lic_props=0 then 
  hide_props=1
  win_edit_sn.users$=str(snm01.users)
  win_edit_sn.users2$="0"
fi
gosub edit_sn_show_props
if cur_lic_props+hide_props=0 then PRINT (gb__sysgui)'CONTEXT'(gb__win.edit_sn),'disable'(users_id) else PRINT (gb__sysgui)'CONTEXT'(gb__win.edit_sn),'enable'(users_id) 
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"users_label,users,users2")

GOSUB update_edit_sn_price

LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"comments,price,listprice")

LET sam_std_id=NUM(FATTR(win_edit_sn$,"Sam_standard","ID"))
PRINT (gb__sysgui)'CONTEXT'(gb__win.edit_sn),

IF pos(sam_required$="RN") THEN PRINT (gb__sysgui)'DISABLE'(sam_std_id) ELSE PRINT (gb__sysgui)'ENABLE'(sam_std_id)
IF sam_required$="R" and cur_sam_required$="R" and cvs(contract$,3)="" THEN PRINT (gb__sysgui)'ENABLE'(sam_std_id)

PRINT (gb__sysgui)'SETCURSOR'(0)

[Event Win=103 ID=127 Code=N2:19 <LIST_SELECT> (W103_C127_LIST_SELECT)]
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"platform")
LET temp$=win_edit_sn.platform$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(platform_list$) THEN LET new_platform_code$=platform_list$(temp*3+1,3)

REM ' *** prepare os level list ***
LET temp_platform_code$=new_platform_code$,temp_os_level_code$="",temp_product_code$=new_product_code$
lb_id=num(fattr(win_edit_sn$,"oslevel","ID"))
GOSUB os_level_list
LET new_os_level_code$=temp_os_level_code$
LET win_edit_sn.oslevel$=os_level_desc_list$
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"oslevel")

REM ' *** prepare revision list ***
gosub W103_C135_LIST_SELECT
GOSUB update_edit_sn_price
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"oslevel,revision,comments,price,listprice")

PRINT (gb__sysgui)'SETCURSOR'(0),'flush'

[Event Win=103 ID=135 Code=N2:19 <LIST_SELECT> (W103_C135_LIST_SELECT)]
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"oslevel")
LET temp$=win_edit_sn.oslevel$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(os_level_list$) THEN LET new_os_level_code$=os_level_list$(temp*3+1,3)

REM ' *** update revision list ***
LET temp_os_level_code$=new_os_level_code$,temp_product_rev_code$=new_product_rev_code$
GOSUB revision_list
LET win_edit_sn.revision$=revision_desc_list$
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"revision")

GOSUB update_edit_sn_price

LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"revision,comments,price,listprice")

PRINT (gb__sysgui)'SETCURSOR'(0),'flush'

[Event Win=103 ID=138 Code=N2:19 <LIST_SELECT> (W103_C138_LIST_SELECT)]
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"revision")
LET temp$=win_edit_sn.revision$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(revision_list$) THEN LET new_product_rev_code$=revision_list$(temp*3+1,3)

LET temp1=1,temp2=0,revision$=""
IF temp THEN LET temp1=POS($0A$=temp$,1,temp)+1
IF temp1 THEN LET temp2=POS($0A$=temp$(1))
IF temp2 THEN LET revision$=temp$(temp1,temp2-1)

GOSUB update_edit_sn_price

LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"comments,price,listprice")

PRINT (gb__sysgui)'SETCURSOR'(0),'flush'

[Event Win=103 ID=141 Code=N2:19 <LIST_SELECT> (W103_C141_LIST_SELECT)]
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"license")
LET temp$=win_edit_sn.license$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(license_list$) THEN LET new_license_code$=license_list$(temp*3+1,3)
GOSUB update_edit_sn_price

LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"comments,price,listprice")
PRINT (gb__sysgui)'SETCURSOR'(0),'flush'

[Event Win=103 ID=147 Code=f0 <LOST_FOCUS> (W103_C147_LOST_FOCUS)]
REM ' Control lost focus
gb__event! = cast(BBjLostFocusEvent,bbjapi().getSysGui().getLastEvent())
gb__control! = gb__event!.getControl()

LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"users,users2")

rem ' for BSG allow increases in the EF user count only when on SAM

newBsgEFUsers = num(win_edit_sn.users$)

if firm_id$ = "02" and !bsgCanadian then
    if !bsgOnSAM then
        rem ' not on SAM users can not be increased (with the exception of BSG Canadian Customers)
        if newBsgEFUsers > bsgEFUsers then
            rem ' increasing the EF Users
            win_edit_sn.users$ = str(bsgEFUsers)
            LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"users")
            junk$="M66"+$0a$
            mb_mode=0
            gosub translate_mbox
            gb__control!.focus()
            rem ' bsgResponse = msgbox("Standard Users can not be exchanged for Extended Users until this serial number is on a current Software Asset Management (SAM) contract.",0,"SAM Contract")
        endif
    endif
endif

LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"users,users2")
GOSUB update_edit_sn_price
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"comments,price,listprice")

[Event Win=103 ID=160 Code=f0 <LOST_FOCUS> (W103_C160_LOST_FOCUS)]
REM ' Control lost focus
gb__event! = cast(BBjLostFocusEvent,bbjapi().getSysGui().getLastEvent())
gb__control! = gb__event!.getControl()

LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"users,users2")

rem ' for BSG allow increases in the SF user count only when on SAM
rem ' or reductions if on SAM 
rem ' for BAS allow increases in the SF user count but warn
rem ' or reductions if the serial number is on SAM

newBsgSFUsers = num(win_edit_sn.users2$)
newBasSFUsers = num(win_edit_sn.users2$)
if firm_id$ = "02" then
    if !bsgOnSAM then
        rem ' not on SAM users can not be increased (with the exception of BSE Canadian Customers)
        if newBsgSFUsers > bsgSFUsers and !bsgCanadian then
            rem ' increasing the SF Users
            win_edit_sn.users2$ = str(bsgSFUsers)
            LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"users2")
            junk$="M66"+$0a$
            mb_mode=0
            gosub translate_mbox
            gb__control!.focus()
            rem ' bsgResponse = msgbox("Standard Users can not be exchanged for Extended Users until this serial number is on a current Software Asset Management (SAM) contract.",0,"SAM Contract")
        else
            rem ' not on sam do not allow the reduction of SF users
            if newBsgSFUsers < bsgSFUsers then
                rem ' decreasing the SF Users
                win_edit_sn.users2$ = str(bsgSFUsers)
                LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"users2")
                junk$="M59"+$0a$
                mb_mode=0
                gosub translate_mbox
                gb__control!.focus()
                rem ' bsgResponse = msgbox("Standard Users can not be exchanged for Extended Users until this serial number is on a current Software Asset Management (SAM) contract.",0,"SAM Contract")
            endif
        endif
    else
        rem ' on sam 
        if !bsgAllowExchange then
            rem ' not on sam do not allow the reduction of SF users
            if newBsgSFUsers < bsgSFUsers then
                rem ' decreasing the SF Users
                win_edit_sn.users2$ = str(bsgSFUsers)
                LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"users2")
                junk$="M60"+$0a$
                mb_mode=0
                gosub translate_mbox
                rem ' bsgResponse = msgbox("To exchange Standard Users for Extended Users please contact your sales representative.",0,"SF to EF Exchange")
            endif
        endif
    endif
else
    if firm_id$ = "01" and newBasSFUsers > basSFUsers then
        rem ' warn on increase in SF users
        sfUsersResponse = msgbox(sf_inc_message$,4 + 32,"Standard User Increase")
        if sfUsersResponse = 7 then
            win_edit_sn.users2$ = str(basSFUsers)
            LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"users2")
            gb__control!.focus()
            return
        fi
    else
        if !basOnSAM then
            rem ' allow the reduction of SF users
            rem ' 
            rem ' not on sam do not allow the reduction of SF users
            rem ' if newBasSFUsers < basSFUsers then
                rem ' decreasing the SF Users
                rem ' win_edit_sn.users2$ = str(basSFUsers)
                rem ' LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"users2")
                rem ' junk$="M59"+$0a$
                rem ' mb_mode=0
                rem ' gosub translate_mbox
                rem ' bsgResponse = msgbox("Standard Users can not be exchanged for Extended Users until this serial number is on a current Software Asset Management (SAM) contract.",0,"SAM Contract")
            rem ' endif
        fi
    endif
endif

LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"users,users2")
GOSUB update_edit_sn_price
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"comments,price,listprice")

[Event Win=103 ID=2 Code=B <PUSH_BUTTON> (W103_C2_PUSH_BUTTON)]
REM ' Go from Edit_SN Window to View_SN Window
LET focus_id=NUM(FATTR(win_view_sn$,"Change","ID"))
new_context=gb__win.view_sn
old_context=gb__win.edit_sn
gosub show_window

[Event Win=104 ID=0 Code=X <WIN_CLOSE> (W104_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=104 ID=1 Code=B <PUSH_BUTTON> (W104_C1_PUSH_BUTTON)]
REM ' Update Item change and return to Cart Window

rem ' used to special VAT rate during the pandemic, removed 01/14/2021
rem ' gosub blockGermanCustomers
rem ' if germanCustomer then return

gosub new_dt_check
if !(ok_dt) then return
PRINT (gb__sysgui)'SETCURSOR'(3)

GOSUB update_item_price
IF !(ok) THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M5"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

rem ' create the cart window and others if needed
new_context=fnCreateWindowIfNeeded("105")
dump_context=fnCreateWindowIfNeeded("118")

IF edit_action$="new" THEN 
  LET sn$=""
  GOSUB init_cart_record
  IF LEN(status$) THEN 
    PRINT (gb__sysgui)'SETCURSOR'(0)
    return  
  fi
fi
LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"item_number,quantity,reference,sam_standard,virtualFlag")
rem 'user & prop arrays dimmed & set in update_item_price
LET users=new_users[0]
LET users2=new_users[1]
LET qty=fnnum(win_item.quantity$)
LET ece11.po_ref_number$=win_item.reference$
gosub po_number_check
if p0 then return
LET ece11.item_number$=win_item.item_number$
LET ece11.qty=qty
LET ece11.users=users
LET ece11.users2=users2
LET ece11.lic_property1$=new_lprop$[0]
LET ece11.lic_property2$=new_lprop$[1]
if users=0 and users2 then
 LET ece11.users=users2
 LET ece11.users2=users
 LET ece11.lic_property1$=new_lprop$[1]
 LET ece11.lic_property2$=new_lprop$[0]
fi
LET ece11.sam_coverage$="N"
IF win_item.sam_standard$="1" THEN LET ece11.sam_coverage$="S"
LET ece11.uncounted_flag$="N"
LET ece11.modify_flag$=" "
LET ffl$=FATTR(ece11$,"available"),ffl=DEC(ffl$(10,2))
LET ece11.available$=FILL(ffl)
if win_item.virtualFlag = 1 then ece11.available$(1) = "VIR"
LET ece11.annual_dt$=fill(8)
if sam_flag or rent_item then
  gosub renew_range
  if jul_renew>=jul_begin then ece11.annual_dt$=date(jul_renew:"%Yl%Mz%Dz")
fi
gosub upg_to
LET ece11$=FIELD(ece11$)
WRITE RECORD (ece11)ece11$

rem get end user data
ec_hide_context=gb__win.item
gosub get_end_user_data
print(gb__sysgui)'context'(gb__win.item),'show'(0),
GOSUB init_cart

LET focus_id=NUM(FATTR(win_cart$,"View_Item","ID"))
old_context=gb__win.item
gosub show_window
rent_item=0

[Event Win=104 ID=101 Code=N2:19 <LIST_SELECT> (W104_C101_LIST_SELECT)]
REM ' Notify Event - List Button Control - List Selection
REM ' Item screen -- platform list changed -- update subsequent lists

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"platform")

LET temp$=win_item.platform$,temp=POS($FF$=temp$)
IF temp=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET temp=NUM(temp$(temp+1))
LET temp$=item_platform_list$(temp*3+1,3)
IF temp$=item_platform_code$ THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET item_platform_code$=temp$

REM ' *** prepare os level list ***
LET temp_platform_code$=item_platform_code$,temp_os_level_code$="",temp_product_code$=item_product_code$
lb_id=num(fattr(win_item$,"oslevel","ID"))
GOSUB os_level_list
LET item_os_level_list$=os_level_list$
LET win_item.oslevel$=os_level_desc_list$
LET win_item.revision$="",item_revision_list$="",item_revision_code$=""

GOSUB update_item_price

LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"oslevel,revision,item_number,description,comments,price,listprice")
PRINT (gb__sysgui)'SETCURSOR'(0)
if temp_os_level_code$<>"" then gosub W104_C103_LIST_SELECT 
LET item_os_level_code$=temp_os_level_code$

[Event Win=104 ID=103 Code=N2:19 <LIST_SELECT> (W104_C103_LIST_SELECT)]
REM ' Notify Event - List Button Control - List Selection
REM ' Item screen -- os level list changed -- update subsequent lists

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"oslevel")
LET temp$=win_item.oslevel$,temp=POS($FF$=temp$)
IF temp=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET temp=NUM(temp$(temp+1))
LET temp$=item_os_level_list$(temp*3+1,3)
IF temp$=item_os_level_code$ THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET item_os_level_code$=temp$

REM ' *** prepare revision list ***
LET temp_os_level_code$=item_os_level_code$,temp_product_rev_code$=""
lb_id=num(fattr(win_item$,"revision","ID"))
GOSUB revision_list
LET item_revision_list$=revision_list$
LET win_item.revision$=revision_desc_list$

GOSUB update_item_price

LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"revision,item_number,description,comments,price,listprice")
PRINT (gb__sysgui)'SETCURSOR'(0)
if temp_product_rev_code$<>"" then gosub W104_C105_LIST_SELECT
LET item_revision_code$=temp_product_rev_code$

[Event Win=104 ID=105 Code=N2:19 <LIST_SELECT> (W104_C105_LIST_SELECT)]
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"revision")
LET temp$=win_item.revision$,temp=POS($FF$=temp$)
IF temp=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET temp=NUM(temp$(temp+1))
LET temp1=1,temp2=0,revision$=""
IF temp THEN LET temp1=POS($0A$=temp$,1,temp)+1
IF temp1 THEN LET temp2=POS($0A$=temp$(1))
IF temp2 THEN LET revision$=temp$(temp1,temp2-1)
LET temp$=item_revision_list$(temp*3+1,3)
IF temp$=item_revision_code$ THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET item_revision_code$=temp$

GOSUB update_item_price

LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"item_number,description,comments,price,listprice")

PRINT (gb__sysgui)'SETCURSOR'(0)

[Event Win=104 ID=112 Code=N2:19 <LIST_SELECT> (W104_C112_LIST_SELECT)]
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"license")

LET temp$=win_item.license$,temp=POS($FF$=temp$)
IF temp=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET temp=NUM(temp$(temp+1))
LET temp$=item_license_list$(temp*3+1,3)
IF temp$=item_license_code$ THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET item_license_code$=temp$

GOSUB update_item_price

LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"item_number,description,comments,price,listprice")

PRINT (gb__sysgui)'SETCURSOR'(0)

[Event Win=104 ID=121 Code=f0 <LOST_FOCUS> (W104_C121_LOST_FOCUS)]
REM ' Control lost focus

LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"quantity")

GOSUB update_item_price

LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"item_number,description,comments,price,listprice")

[Event Win=104 ID=124 Code=f0 <LOST_FOCUS> (W104_C124_LOST_FOCUS)]
REM ' Control lost focus
LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"users,users2")
GOSUB update_item_price
LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"comments,price,listprice")

[Event Win=104 ID=126 Code=f0 <LOST_FOCUS> (W104_C126_LOST_FOCUS)]
REM ' Control lost focus
gb__event! = cast(BBjLostFocusEvent,bbjapi().getSysGui().getLastEvent())
gb__control! = gb__event!.getControl()

LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"users,users2")
change_SF_users = num(win_item.users2$)

if firm_id$ = "01" and change_SF_users > start_SF_users then
    sfUsersResponse = msgbox(sf_inc_message$,4 + 32,"Standard User Increase")
    if sfUsersResponse = 7 then
        win_item.users2$ = str(start_SF_users)
        win_item$=fngb__put_fields$(win_id_item$,win_item$,"users2")  
        gb__control!.focus()
        return
    fi
fi

rem ' here   item_ctx = fngb__focus_ctl_id(xx__win_id$,xx__ctl_id)

GOSUB update_item_price
LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"comments,price,listprice")

[Event Win=104 ID=126 Code=f1 <GOT_FOCUS> (W104_C126_GOT_FOCUS)]
rem ' Control got focus
LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"users2")
start_SF_users = num(win_item.users2$)

[Event Win=104 ID=2 Code=B <PUSH_BUTTON> (W104_C2_PUSH_BUTTON)]
rem ' Go from Item Window to Main Window

LET focus_id=NUM(FATTR(win_main$,"View_Item","ID"))
new_context=gb__win.main
old_context=gb__win.item
gosub show_window
rent_item=0

[Event Win=104 ID=200 Code=B <PUSH_BUTTON> (W104_C200_PUSH_BUTTON)]
LET win_item$=fngb__get_screen$(win_id_item$,win_item$)
gosub update_item_price
LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"comments,price,listprice")

[Event Win=104 ID=202 Code=c0 <CHECK_OFF> (W104_C202_CHECK_OFF)]
LET sam_flag=0
GOSUB item_sam_checkbox

[Event Win=104 ID=202 Code=c1 <CHECK_ON> (W104_C202_CHECK_ON)]
LET sam_flag=1
GOSUB item_sam_checkbox

[Event Win=104 ID=204 Code=f0 <LOST_FOCUS> (W104_C204_LOST_FOCUS)]
rem ' Control lost focus

rem ' need to ensure that we have minimum length SAM or rental period

jul_renew=renew_dt!.getValue()
temp$=DATE(jul_renew:"%Mz%Dz")
if pos("0229"=temp$) then jul_renew=jul_renew+1
gosub renew_range

rem ' there is no rental maximum length only a minimum
rem ' the rental minimum can mirror the SAM minium
rem ' if jul_renew<jul_begin or (rent_item and jul_renew>jul_end) then

if jul_renew<jul_begin then
  gosub invalid_date
  jul_renew=jul_default
  PRINT (gb__sysgui)'flush'
  renew_dt!.focus()
fi

renew_dt!.setValue(jul_renew)
gosub update_item_price
LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"comments,price,listprice")

[Event Win=104 ID=204 Code=f1 <GOT_FOCUS> (W104_C204_GOT_FOCUS)]
rem ' Control got focus

jul_renew=renew_dt!.getValue()

[Event Win=104 ID=232 Code=b <TOOL_BUTTON> (W104_C232_PUSH_TOOL_BUTTON)]
rem ' Tool button operated

print(gb__sysgui)'flush'
renew_dt!.focus()
renew_dt!.calendar()

[Event Win=104 ID=233 Code=c0 <CHECK_OFF> (W104_C233_CHECK_OFF)]
REM ' Runtime checked off
ltcode$=""
rtm_item_display:
if pos("BAS"=win_item.item_number$)=1 then return
lb_id=num(fattr(win_item$,"license","ID"))
GOSUB license_list
ivm_item$=pad(win_item.item_number$,20)
if pos(ltcode$=license_list$) then ivm_item$(13,3)=ltcode$
gosub ivm_item
if ivmok then 
  win_item.item_number$=ivm_item$
  win_item.description$=CVS(ivm01.item_desc$,3)
  win_item.license$=license_desc_list$
  win_item$=fngb__put_fields$(win_id_item$,win_item$,"item_number,license,description")
else 
  win_item.runtime$="0"
  win_item$=fngb__put_fields$(win_id_item$,win_item$,"runtime")
fi

[Event Win=104 ID=233 Code=c1 <CHECK_ON> (W104_C233_CHECK_ON)]
REM ' Runtime checked
ltcode$="RTM"
goto rtm_item_display

[Event Win=104 ID=234 Code=c1 <CHECK_ON> (W104_C234_CHECK_ON)]
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"product")
LET temp$=win_item.product$,temp=POS($FF$=temp$)
if temp=0 THEN RETURN
LET temp=NUM(temp$(temp+1))
LET item_product_code$=item_product_list$(temp*3+1,3)

if item_product_code$ = "VP5" or item_product_code$ = "PR5" then
    msg$ = "Please Note: Use of BLM 10.0 or greater is required for virutal licenses."
    resp = msgbox(msg$,0,"BLM 10.0 Warning")
fi

[Event Win=104 ID=99 Code=N2:19 <LIST_SELECT> (W104_C99_LIST_SELECT)]
REM ' Notify Event - List Button Control - List Selection
REM ' Item screen -- product list changed -- update subsequent lists

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"product")

LET temp$=win_item.product$,temp=POS($FF$=temp$)
if temp=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET temp=NUM(temp$(temp+1))
LET temp$=item_product_list$(temp*3+1,3)
IF temp$=item_product_code$ THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
LET item_product_code$=temp$
READ RECORD (csm01,KEY=firm_id$+item_product_code$)csm01$
LET sam_required$=csm01.ctr_required$

gosub new_item_props

REM ' *** update platform list ***
LET temp_product_code$=item_product_code$,temp_platform_code$=""
lb_id=num(fattr(win_item$,"platform","ID"))
GOSUB platform_list
LET item_platform_list$=platform_list$,win_item.platform$=platform_desc_list$
LET win_item.oslevel$="",item_os_level_list$="",item_os_level_code$=""
LET win_item.revision$="",item_revision_list$="",item_revision_code$=""

REM ' *** update license list ***
LET ltcode$="",prdcode$=item_product_code$
lb_id=num(fattr(win_item$,"license","ID"))
GOSUB license_list
LET item_license_list$=license_list$
LET item_license_code$=item_license_list$(1,3)
LET win_item.license$=license_desc_list$
LET win_item.sam_standard$=STR(sam_required$="R")

GOSUB update_item_price

LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"platform,oslevel,revision,license,item_number,description,comments,price,listprice,sam_standard")
PRINT (gb__sysgui)'context'(new_context),
if pos(item_product_code$=runtime_products$) then 
  PRINT(gb__sysgui)'enable'(runtime_id)
ELSE 
  PRINT (gb__sysgui)'disable'(runtime_id)
  win_item.runtime$="0"
  LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"runtime")
fi
rem ' manage the virtualFlag check box
if pos(item_product_code$=virtual_products$) then 
  PRINT(gb__sysgui)'enable'(virtualFlag_id)
ELSE 
  PRINT (gb__sysgui)'disable'(virtualFlag_id)
  win_item.virtualFlag$="0"
  LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"virtualFlag")
fi
IF sam_required$<>"A" THEN PRINT (gb__sysgui)'DISABLE'(sam_std_id) ELSE PRINT (gb__sysgui)'ENABLE'(sam_std_id)
IF sam_required$="R" THEN PRINT (gb__sysgui)'enable'(renew_dt_id,renew_dt_btn_id) ELSE PRINT (gb__sysgui)'disable'(renew_dt_id,renew_dt_btn_id)
PRINT (gb__sysgui)'SETCURSOR'(0)
if temp_platform_code$<>"" then gosub W104_C101_LIST_SELECT
LET item_platform_code$=temp_platform_code$

[Event Win=105 ID=0 Code=X <WIN_CLOSE> (W105_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=105 ID=100 Code=B <PUSH_BUTTON> (W105_C100_PUSH_BUTTON)]
REM ' Print/Email Pro-forma Order

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_cart$=fngb__get_screen$(win_id_cart$,win_cart$)

LET ctl_id=NUM(FATTR(win_cart$,"Reference","ID"))
IF DEC(CTRL(gb__sysgui,ctl_id,2,gb__win.cart))=0 THEN LET reference$="" ELSE LET reference$=CVS(CTRL(gb__sysgui,ctl_id,1,gb__win.cart),3)

LET mailtext$="Current contents of your shopping cart:"+$0A0A$

IF LEN(reference$) THEN LET mailtext$=mailtext$+"Purchase Order: "+reference$+$0A0A$

DIM detail$:"Line:c(4),Item:c(31),Users:c(5),Price:c(11),Qty:c(4),Ext:c(11)"
LET detail.Item$="Description"
LET detail.Users$="Users"
LET detail.Price$="     Price"
LET detail.Qty$=" Qty"
LET detail.Ext$=" Extension"
LET mailtext$=mailtext$+CVS(detail$,2)+$0A$

LET total=0

REM ' Now loop through the detail lines from the shopping cart
READ (ece11,KEY=firm_id$+cust_num$+user_code$,DOM=print_ece11_loop)

print_ece11_loop: 
LET ece11_key$=KEY(ece11,END=print_ece11_endloop)
READ RECORD (ece11,KEY=ece11_key$)ece11$
gosub adjust_ece11_annual_dt
IF ece11.firm_id$<>firm_id$ OR ece11.customer_nbr$<>cust_num$ or ece11.user_code$<>user_code$ THEN GOTO print_ece11_endloop
rem 'reference can be 10 spaces
IF reference$<>"" AND cvs(reference$,3)<>CVS(ece11.po_ref_number$,3) THEN GOTO print_ece11_loop

LET contract$=""
DIM sn$(20)
IF LEN(CVS(ece11.serial_nbr$,3)) THEN LET sn$(1)=ece11.serial_nbr$
GOSUB sn_ec_price_setup

LET sam_flag=POS(ece11.sam_coverage$="S")

GOSUB check_for_trade
IF trade_tran THEN GOTO done_price

GOSUB ece11_ec_price

done_price: 
REM ' Skip this shopping cart line if we can't calculate a price
IF POS("**"=comments$)=1 OR type$[0]="" THEN GOTO print_ece11_loop

REM ' can be many detail lines for each ECE11 record
LET total=total+price
LET last_line=nbr_trans

FOR line=0 TO last_line
  REM ' CSM07 - Retrieve Type Of Sale record
  LET csm07.description$=type$[line](1,3)
  READ RECORD (csm07,KEY=firm_id$+type$[line](1,3),ERR=proforma_csm07)csm07$
proforma_csm07: 
  REM ' IVM01 - Retrieve Inventory Master record
  ivm_item$=type$[line](5)
  gosub ivm_item

  IF type$[line](1,3)="ADD" THEN LET users=ece11.users-original_users ELSE LET users=ece11.users
  IF line<last_line THEN IF type$[line+1](1,3)="ADD" THEN LET users=original_users

LET detail$=line_number$+" "+csm07.description$+" "
IF line THEN LET detail$=detail$+sn$ ELSE LET detail$=detail$+ece11.serial_nbr$
LET mailtext$=mailtext$+CVS(detail$,2)+$0A$

LET detail$=line_number$+" "+ivm01.item_desc$
LET mailtext$=mailtext$+CVS(detail$,2)+$0A$

DIM detail$:FATTR(detail$)
LET detail.Item$=type$[line](5)
LET detail.Users$=STR(users:"###0-")
LET detail.Price$=CVS(STR(price[line]/ece11.qty:"#######.00-"),64)
LET detail.Qty$=STR(ece11.qty:"###0")
LET detail.Ext$=CVS(STR(price[line]:"#######.00-"),64)
LET mailtext$=mailtext$+CVS(detail$,2)+$0A0A$

NEXT line

GOTO print_ece11_loop

print_ece11_endloop: 

DIM detail$:FATTR(detail$)
LET detail.Item$="Subtotal"
LET detail.Ext$=CVS(STR(total:"#######.00-"),64)
LET mailtext$=mailtext$+CVS(detail$,2)+$0A$

semFrom$=CVS(arm10f.e_mail$,3)
cPos = pos(","=semFrom$)
if cPos then semFrom$ = semFrom$(1,cPos-1)
if len(semFrom$)=0 then semFrom$="customer-service@basis.cloud"
rem ' semFrom$=CVS(arm10f.slspsn_name$,3)+" <"+semFrom$+">"
semSubject$="Your BASIS Shopping Cart"
semAttach$=""
semTo$=CVS(ecm01.e_mail$,3)
rem ' debug
rem ' semFrom$ = "customer-service@basis.cloud"
rem ' semTo$ = "kurt.e.williams@comcast.net"
rem ' xresp = msgbox(semFrom$ + " " + semTo$,0,"debug")
call "sendEmail.src",semFrom$,semTo$,"","",semSubject$,mailtext$,semAttach$

print_order_done: 
PRINT (gb__sysgui)'SETCURSOR'(0)
IF LEN(errmsg$) THEN LET i=MSGBOX(errmsg$,0,"Couldn't Send Mail") ELSE LET i=MSGBOX("Sent to "+CVS(ecm01.e_mail$,3),0,"Shopping Cart Sent")

[Event Win=105 ID=113 Code=B <PUSH_BUTTON> (W105_C113_PUSH_BUTTON)]
REM ' Go from Cart Window to View_SN Window

old_context=gb__win.cart
gosub change_to_view_sn

[Event Win=105 ID=114 Code=B <PUSH_BUTTON> (W105_C114_PUSH_BUTTON)]
REM ' Go from Cart Window to Item Window

old_context=gb__win.cart

gosub change_to_item

[Event Win=105 ID=118 Code=B <PUSH_BUTTON> (W105_C118_PUSH_BUTTON)]
REM ' Go from Cart Window to Checkout_1 Window

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_cart$=fngb__get_screen$(win_id_cart$,win_cart$)
LET ctl_id=NUM(FATTR(win_cart$,"Reference","ID"))
LET reference$=CTRL(gb__sysgui,ctl_id,1,gb__win.cart)
entire_cart=pos("*** Entire Cart ***"=reference$) 
if entire_cart then reference$="" else GOTO chkout_continue

PRINT (gb__sysgui)'SETCURSOR'(0)
junk$="M9"+$0a$
mb_mode=1
gosub translate_mbox
IF i=2 THEN RETURN
PRINT (gb__sysgui)'SETCURSOR'(3)

chkout_continue: 
LET subtotal=0
LET listtotal=0
LET taxable=0
LET tax=0
LET freight=0
LET total=0
LET lines=0
nc_trans$=""
READ (ece11,KEY=firm_id$+cust_num$+user_code$,DOM=subtotal_loop)

subtotal_loop: 
READ RECORD (ece11,END=subtotal_endloop)ece11$
gosub adjust_ece11_annual_dt
IF CVS(ece11.firm_id$,3)<>CVS(firm_id$,3) OR CVS(ece11.customer_nbr$,3)<>CVS(cust_num$,3) or cvs(ece11.user_code$,3)<>cvs(user_code$,3) THEN GOTO subtotal_endloop
IF reference$<>"" AND cvs(reference$,3)<>CVS(ece11.po_ref_number$,3) THEN GOTO subtotal_loop

LET contract$=""
LET pricecheck=1
GOSUB check_for_trade
IF trade_tran THEN GOTO price_done

DIM sn$(20)
IF LEN(CVS(ece11.serial_nbr$,3)) THEN LET sn$(1)=ece11.serial_nbr$
GOSUB sn_ec_price_setup
LET sam_flag=POS(ece11.sam_coverage$="S")
GOSUB ece11_ec_price

price_done: 
LET subtotal=subtotal+price
LET listtotal=listtotal+listprice
LET lines=lines+1
for n=0 to nbr_trans
nc_trans$=nc_trans$+ece11.line_number$+type$[n](1,3)+$0a$
next n
GOTO subtotal_loop

subtotal_endloop: 

REM ' don't generate an empty order (subtotal=0 is ok if lines>0)
IF lines=0 THEN 
  PRINT (gb__sysgui)'SETCURSOR'(0)
  junk$="M8"+$0a$
  mb_mode=0
  gosub translate_mbox
  RETURN
fi

REM ' can't purchase anything if customer is on credit hold
IF arm02.cred_hold$="Y" THEN 
  PRINT (gb__sysgui)'SETCURSOR'(0)
  junk$="M16"+$0a$,mb_mode=0
  gosub translate_mbox
  RETURN
fi
rem 'Check if this is nothing but n/c updates/platform exchanges
rem 'don't create order/invoice in that's all it is
nc_up=(subtotal=0),temptype$=nc_trans$
while pos($0a$=temptype$)=8 and nc_up
 if pos(temptype$(5,3)="UNC,UPD,PLX")=0 then nc_up=0
 temptype$=temptype$(9)
wend

rem ' create the checkout windows if needed
new_context=fnCreateWindowIfNeeded("106")

IF !(init_checkout_1) THEN GOSUB init_checkout_1

LET focus_id=NUM(FATTR(win_checkout_1$,"Previous","ID"))
new_context=gb__win.checkout_1
old_context=gb__win.cart
gosub show_window

[Event Win=105 ID=119 Code=B <PUSH_BUTTON> (W105_C119_PUSH_BUTTON)]
rem ' Delete selected item from the shopping cart

LET row=DEC(SENDMSG(gb__sysgui,win_cart_grid_id,45,0,$$,gb__win.cart))
IF row<0 THEN RETURN
LET cart_rec$=SENDMSG(gb__sysgui,win_cart_grid_id,81,row,$04$,gb__win.cart)
gosub delete_cart_record

[Event Win=105 ID=120 Code=B <PUSH_BUTTON> (W105_C120_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' check to see if grid row selected
LET row=DEC(SENDMSG(gb__sysgui,win_cart_grid_id,45,0,$$,gb__win.cart))
IF row<0 THEN RETURN

rem ' get the grid row as cart_rec$
LET cart_rec$=SENDMSG(gb__sysgui,win_cart_grid_id,81,row,$04$,gb__win.cart)

gosub edit_cart_item_prep

[Event Win=105 ID=165 Code=B <PUSH_BUTTON> (W105_C165_PUSH_BUTTON)]
REM ' Go from Cart Window to trade_select Window

old_context=gb__win.cart
GOSUB change_to_trade_select

[Event Win=105 ID=2 Code=B <PUSH_BUTTON> (W105_C2_PUSH_BUTTON)]
REM ' Go from Cart Window to Main Window

LET focus_id=NUM(FATTR(win_main$,"Cart","ID"))
new_context=gb__win.main
old_context=gb__win.cart
gosub show_window

[Event Win=105 ID=99 Code=N12:107 <GRID_KEYPRESS> (W105_C99_GRID_KEYPRESS)]
rem ' Notify Event - Grid - Grid Key Pressed (TBLINF)
rem ' .wparam$ = key pressed (event 't' encoding)

IF gb__notice.row>=0 THEN
:  LET cart_rec$=SENDMSG(gb__sysgui,win_cart_grid_id,81,gb__notice.row,$04$,gb__win.cart)

IF gb__notice.row>=0 AND DEC(gb__notice.wparam$)=DEC($007F$) THEN
:  GOTO delete_cart_record; REM ' Delete key was pressed

IF DEC(gb__notice.wparam$)=DEC($0138$) THEN
:  GOTO insert_cart_record; REM ' Insert key was pressed

RETURN

insert_cart_record: 
   rem - ignore
RETURN

delete_cart_record: 
PRINT (gb__sysgui)'context'(gb__win.cart),'SETCURSOR'(0)
junk$="M7"+$0a$+cvs(cart_rec.serial_number$,3)+$0a$+cvs(cart_rec.item_number$,3)+$0a$
mb_mode=1
gosub translate_mbox
IF i<>1 THEN RETURN

ece11.line_number$=cart_rec.line$
GOSUB clear_ece83
REMOVE (ece11,KEY=firm_id$+cust_num$+user_code$+cart_rec.line$,ERR=delete_ece11_keypress)
delete_ece11_keypress: 
REMOVE (eceeu,key=firm_id$+cust_num$+user_code$+cart_rec.line$,ERR=*next)
GOSUB init_cart
RETURN

[Event Win=105 ID=99 Code=N3:107 <GRID_DCLICK> (W105_C99_GRID_MOUSE_DOUBLE_CLICK)]
rem ' Notify Event - Grid - Grid Double Clicked (TBLINF)
rem ' .col,.row = cell clicked
rem ' .ptx,.pty = point clicked
rem ' .x,.y,.w,.h = cell boundaries
rem ' .wparam$ = $01$(Ctrl)/$02$(Shift)

IF gb__notice.row<0 THEN RETURN; REM ' no row where the user double-clicked

PRINT (gb__sysgui)'SETCURSOR'(3)

rem ' get the grid row as cart_rec$
LET cart_rec$=SENDMSG(gb__sysgui,win_cart_grid_id,81,row,$04$,gb__win.cart)

gosub edit_cart_item_prep

PRINT (gb__sysgui)'SETCURSOR'(0)

RETURN

[Event Win=106 ID=0 Code=X <WIN_CLOSE> (W106_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=106 ID=1 Code=B <PUSH_BUTTON> (W106_C1_PUSH_BUTTON)]
REM ' Go from Checkout_1 Window to Checkout_2 Window

PRINT (gb__sysgui)'SETCURSOR'(3)

rem ' create the checkout 2 window if needed
new_context=fnCreateWindowIfNeeded("109")

LET win_checkout_1$=fngb__get_screen$(win_id_checkout_1$,win_checkout_1$)

LET media=fnnum(win_checkout_1.media$)

REM ' if no license delivery, we must ship media
IF CVS(win_checkout_1.license_1$,3)=$$ AND CVS(win_checkout_1.license_2$,3)=$$ AND media=0 THEN 
  PRINT (gb__sysgui)'SETCURSOR'(0)
  junk$="M17"+$0a$,mb_mode=0
  gosub translate_mbox
  RETURN
fi

REM ' do some shipping address valididation
IF media THEN 
    LET bad_addr=0,temp$=CVS(win_checkout_1.ship_to_addr1$,3)+CVS(win_checkout_1.ship_to_addr2$,3)
    IF temp$=$$ OR POS("PO "=temp$)=1 OR POS("P.O."=temp$)=1 THEN LET bad_addr=1
    IF CVS(win_checkout_1.ship_to_city$,3)=$$ THEN LET bad_addr=1
    IF CVS(win_checkout_1.ship_to_country$,3)=$$ AND (CVS(win_checkout_1.ship_to_state$,3)=$$ OR CVS(win_checkout_1.ship_to_zip$,3)=$$) THEN LET bad_addr=1
    IF bad_addr THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M18"+$0a$,mb_mode=0;gosub translate_mbox; RETURN
 FI 

REM ' Allow maximum of 10 CDROMs
IF media>10 THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M19"+$0a$,mb_mode=0;gosub translate_mbox ; RETURN

REM ' Calculate freight cost assuming 1/2 pound per CD-ROM

LET freight=0
IF media=0 THEN GOTO taxable
rem IF subtotal=0 AND freight_type$="3" THEN GOTO taxable
LET weight$=STR(ROUND(media*0.5,0):"000")
READ RECORD (SHIPPING,KEY=freight_zone$+freight_type$+weight$,DOM=taxable)shipping$
LET freight=shipping.shipping_charge

taxable: 
LET taxable=subtotal
IF arm10b.tax_frt_flag$="Y" THEN LET taxable=taxable+freight
precision 6;LET tax=taxable*arm10b.tax_rate/100;precision 2

LET total=subtotal+freight+tax

IF !(init_checkout_2) THEN GOSUB init_checkout_2 ELSE LET win_checkout_2$=fngb__get_screen$(win_id_checkout_2$,win_checkout_2$)

LET win_checkout_2.reference$=cvs(reference$,3)
if cvs(win_checkout_2.contact$,3)="" then win_checkout_2.contact$=firm_id$+cust_num$+user_code$

LET win_checkout_2.subtotal$=CVS(STR(subtotal:amount_mask$),3+64)
LET win_checkout_2.tax$=CVS(STR(tax:amount_mask$),3+64)
LET win_checkout_2.freight$=CVS(STR(freight:amount_mask$),3+64)
LET win_checkout_2.total$=CVS(STR(total:amount_mask$),3+64)
LET win_checkout_2.list$=CVS(STR(listtotal:amount_mask$),3+64)

REM ' If insufficient credit or terms, disable the "On Account" button
win_checkout_2.credit_card=1
win_checkout_2.on_account=0
trm$="0305";if firm_id$="01" then trm$=trm$+"0620"

if firm_id$="02" then win_checkout_2.credit_card=0

on_terms=POS(arm02.terms_code$=trm$,2)
ctl_id=NUM(FATTR(win_checkout_2$,"On_Account","ID"))
PRINT (gb__sysgui)'CONTEXT'(gb__win.checkout_2),'DISABLE'(ctl_id)
available_credit=0
IF on_terms THEN CALL "ec_credit",firm_id$,cust_num$,available_credit
IF total=0 OR available_credit>=total THEN
  win_checkout_2.on_account=1 
  win_checkout_2.credit_card=0
  GOSUB disable_checkout_2_cc_info 
  PRINT (gb__sysgui)'CONTEXT'(gb__win.checkout_2),'ENABLE'(ctl_id)
fi
win_checkout_2.message$=""
if win_checkout_2.credit_card then 
  GOSUB enable_checkout_2_cc_info
  let win_checkout_2.ccAmount1$=CVS(STR(total:amount_mask$),3+64)
  IF on_terms then win_checkout_2.message$="Over Credit Limit"
fi

LET win_checkout_2$=fngb__put_screen$(win_id_checkout_2$,win_checkout_2$)

LET focus_id=NUM(FATTR(win_checkout_2$,"Previous","ID"))
new_context=gb__win.checkout_2
old_context=gb__win.checkout_1
gosub show_window

REM BWH
checkout2Window! = sysgui!.getWindow(gb__win.checkout_2)
checkout2Window!.getControl(170).setOpaque(sysgui!.FALSE)
checkout2Window!.getControl(135).setOpaque(sysgui!.FALSE)
RETURN

[Event Win=106 ID=2 Code=B <PUSH_BUTTON> (W106_C2_PUSH_BUTTON)]
REM ' Go from Checkout_1 Window to Cart Window

LET focus_id=NUM(FATTR(win_cart$,"Checkout","ID"))
new_context=gb__win.cart
old_context=gb__win.checkout_1
gosub show_window

[Event Win=106 ID=904 Code=B <PUSH_BUTTON> (W106_C904_PUSH_BUTTON)]
REM ' Push button operated

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_checkout_1$=fngb__get_screen$(win_id_checkout_1$,win_checkout_1$)

LET win_checkout_1.Ship_To_Name$=CVS(tmm01.cont_firm$,3)
LET win_checkout_1.Ship_To_Addr1$=CVS(tmm01.address_1$,3)
LET win_checkout_1.Ship_To_Addr2$=CVS(tmm01.address_2$,3)
LET win_checkout_1.Ship_To_City$=CVS(tmm01.city$,3)
LET win_checkout_1.Ship_To_State$=CVS(tmm01.state$,3)
LET win_checkout_1.Ship_To_Zip$=CVS(tmm01.zip_code$,3)
LET win_checkout_1.Ship_To_Country$=CVS(country.country_name$,3)
LET init_ship_usa=0
LET init_ship_intl=0
LET freight_zone$=country.zone$
IF firm_id$="02" THEN LET freight_zone$=country.zone2$
if tmm01.country_code$="US" then LET freight_zone$="001"
LET freight_type$=standard_freight_type$

LET win_checkout_1$=fngb__put_screen$(win_id_checkout_1$,win_checkout_1$)

LET ship_to=0; REM ' don't write ARE33 ship-to record

PRINT (gb__sysgui)'SETCURSOR'(0)

[Event Win=106 ID=905 Code=B <PUSH_BUTTON> (W106_C905_PUSH_BUTTON)]
REM ' Go from Checkout_1 Window to Ship_USA Window

PRINT (gb__sysgui)'SETCURSOR'(3)

rem ' create the ship to window if needed
new_context=fnCreateWindowIfNeeded("107")

IF !(init_ship_usa) THEN GOSUB init_ship_usa

LET focus_id=NUM(FATTR(win_ship_usa$,"Accept","ID"))

old_context=gb__win.checkout_1
gosub show_window

[Event Win=106 ID=906 Code=B <PUSH_BUTTON> (W106_C906_PUSH_BUTTON)]
REM ' Go from Checkout_1 Window to Ship_Intl Window

PRINT (gb__sysgui)'SETCURSOR'(3)

rem ' create the intl ship to window if needed
new_context=fnCreateWindowIfNeeded("108")

IF !(init_ship_intl) THEN GOSUB init_ship_intl

LET focus_id=NUM(FATTR(win_ship_intl$,"Accept","ID"))
new_context=gb__win.ship_intl
old_context=gb__win.checkout_1
gosub show_window

[Event Win=107 ID=0 Code=X <WIN_CLOSE> (W107_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=107 ID=1 Code=B <PUSH_BUTTON> (W107_C1_PUSH_BUTTON)]
REM ' Go from Ship_USA Window to Checkout_1 Window

PRINT (gb__sysgui)'SETCURSOR'(3)

REM ' state must be selected
LET ctl_id=NUM(FATTR(win_ship_usa$,"Ship_To_State","ID"))
LET state$=CTRL(gb__sysgui,ctl_id,1,gb__win.ship_usa)
IF state$="" THEN PRINT (gb__sysgui)'SETCURSOR'(0); LET i=MSGBOX("Please select a state.",0,"State Is Required"); RETURN

LET temp_ship_usa$=win_ship_usa$; REM ' see if it changed

LET win_ship_usa$=fngb__get_screen$(win_id_ship_usa$,win_ship_usa$)

LET freight_zone$="001"
LET freight_type$="3"

IF win_ship_usa.one_day THEN LET freight_type$="1"
IF win_ship_usa.two_day THEN LET freight_type$="2"
IF win_ship_usa.three_day THEN LET freight_type$="3"

IF win_ship_usa.ship_to_name$=temp_ship_usa.ship_to_name$ AND win_ship_usa.ship_to_addr1$=temp_ship_usa.ship_to_addr1$ AND win_ship_usa.ship_to_addr2$=temp_ship_usa.ship_to_addr2$ AND win_ship_usa.ship_to_city$=temp_ship_usa.ship_to_city$ AND win_ship_usa.ship_to_state$=temp_ship_usa.ship_to_state$ AND win_ship_usa.ship_to_zip$=temp_ship_usa.ship_to_zip$ THEN GOTO ship_usa_to_checkout_1

LET win_checkout_1$=fngb__get_screen$(win_id_checkout_1$,win_checkout_1$)
LET win_checkout_1.Ship_To_Name$=win_ship_usa.Ship_To_Name$
LET win_checkout_1.Ship_To_Addr1$=win_ship_usa.Ship_To_Addr1$
LET win_checkout_1.Ship_To_Addr2$=win_ship_usa.Ship_To_Addr2$
LET win_checkout_1.Ship_To_City$=win_ship_usa.Ship_To_City$

IF CVS(win_checkout_1.Ship_To_City$,3)="" THEN LET win_checkout_1.Ship_To_City$=win_ship_usa.Ship_To_Addr2$,win_checkout_1.Ship_To_Addr2$=""; REM ' since inputs aren't labeled, city may be in addr2

LET win_checkout_1.Ship_To_State$=state$
LET win_checkout_1.Ship_To_Zip$=win_ship_usa.Ship_To_Zip$
LET win_checkout_1.Ship_To_Country$=""; REM ' leave country blank for USA
LET win_checkout_1$=fngb__put_screen$(win_id_checkout_1$,win_checkout_1$)

LET ship_to=1; REM ' write ARE33 ship-to record

ship_usa_to_checkout_1: 

LET focus_id=NUM(FATTR(win_checkout_1$,"Ship_USA","ID"))
new_context=gb__win.checkout_1
old_context=gb__win.ship_usa
gosub show_window

[Event Win=107 ID=2 Code=B <PUSH_BUTTON> (W107_C2_PUSH_BUTTON)]
rem ' Go from Ship_USA Window to Checkout_1 Window

LET focus_id=NUM(FATTR(win_checkout_1$,"Ship_USA","ID"))
new_context=gb__win.checkout_1
old_context=gb__win.ship_usa
gosub show_window

[Event Win=108 ID=0 Code=X <WIN_CLOSE> (W108_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=108 ID=1 Code=B <PUSH_BUTTON> (W108_C1_PUSH_BUTTON)]
REM ' Go from Ship_Intl Window to Checkout_1 Window

PRINT (gb__sysgui)'SETCURSOR'(3)

REM ' country must be selected
LET ctl_id=NUM(FATTR(win_ship_intl$,"Ship_To_Country","ID"))
LET cntry$=CTRL(gb__sysgui,ctl_id,1,gb__win.ship_intl)
IF cntry$="" THEN 
  PRINT (gb__sysgui)'SETCURSOR'(0)
  junk$="M21"+$0a$,mb_mode=0
  gosub translate_mbox
  RETURN
fi

LET temp_ship_intl$=win_ship_intl$

LET win_ship_intl$=fngb__get_screen$(win_id_ship_intl$,win_ship_intl$)

LET cntry$=PAD(cntry$,30)
dim tmp_country$:fattr(country$)
READ RECORD (country,KEY=cntry$,knum=1,DOM=ship_intl_freight_type)tmp_country$
LET freight_zone$=tmp_country.zone$
IF firm_id$="02" THEN LET freight_zone$=tmp_country.zone2$
ship_intl_freight_type: 
LET freight_type$=" "

IF win_ship_intl.ship_to_name$=temp_ship_intl.ship_to_name$ AND win_ship_intl.ship_to_addr1$=temp_ship_intl.ship_to_addr1$ AND win_ship_intl.ship_to_addr2$=temp_ship_intl.ship_to_addr2$ AND win_ship_intl.ship_to_city$=temp_ship_intl.ship_to_city$ AND win_ship_intl.ship_to_state$=temp_ship_intl.ship_to_state$ AND win_ship_intl.ship_to_zip$=temp_ship_intl.ship_to_zip$ AND win_ship_intl.ship_to_country$=temp_ship_intl.ship_to_country$ THEN GOTO ship_intl_to_checkout_1

LET win_checkout_1$=fngb__get_screen$(win_id_checkout_1$,win_checkout_1$)
LET win_checkout_1.Ship_To_Name$=win_ship_intl.Ship_To_Name$
LET win_checkout_1.Ship_To_Addr1$=win_ship_intl.Ship_To_Addr1$
LET win_checkout_1.Ship_To_Addr2$=win_ship_intl.Ship_To_Addr2$
LET win_checkout_1.Ship_To_City$=win_ship_intl.Ship_To_City$
LET win_checkout_1.Ship_To_State$=win_ship_intl.Ship_To_State$
LET win_checkout_1.Ship_To_Zip$=win_ship_intl.Ship_To_Zip$
LET win_checkout_1.Ship_To_Country$=cntry$
LET win_checkout_1$=fngb__put_screen$(win_id_checkout_1$,win_checkout_1$)

LET ship_to=1; REM ' write ARE33 ship-to record

ship_intl_to_checkout_1: 

LET focus_id=NUM(FATTR(win_checkout_1$,"Ship_Intl","ID"))
new_context=gb__win.checkout_1
old_context=gb__win.ship_intl
gosub show_window

[Event Win=108 ID=2 Code=B <PUSH_BUTTON> (W108_C2_PUSH_BUTTON)]
REM ' Go from Ship_Intl Window to Checkout_1 Window

LET focus_id=NUM(FATTR(win_checkout_1$,"Ship_Intl","ID"))
new_context=gb__win.checkout_1
old_context=gb__win.ship_intl
gosub show_window

[Event Win=109 ID=0 Code=X <WIN_CLOSE> (W109_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=109 ID=1 Code=B <PUSH_BUTTON> (W109_C1_PUSH_BUTTON)]
REM ' Checkout - Buy Now

PRINT (gb__sysgui)'SETCURSOR'(3),'DISABLE'(1)

LET win_checkout_2$=fngb__get_screen$(win_id_checkout_2$,win_checkout_2$)
rem 'check total incl. freight & tax before a possible n/c update
if total then nc_up=0

if nc_up=0 and win_checkout_2.on_account=0 AND win_checkout_2.credit_card=0 THEN  PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1); junk$="M29"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

if nc_up=0 and win_checkout_2.on_account=0 AND firm_id$="02" THEN  PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1); junk$="T1"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

IF win_checkout_2.contact$="" THEN  
  PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1)
  junk$="M10"+$0a$
  mb_mode=0
  gosub translate_mbox
  LET ctl_id=NUM(FATTR(win_checkout_2$,"Contact","ID"))
  PRINT (gb__sysgui)'FOCUS'(ctl_id)
  RETURN
fi

LET contact$=win_checkout_2.contact$
if nc_up then gosub nc_up_routine; GOSUB send_mail; GOTO order_complete

rem ' note: for now the Canadian exchange only works with on account sales
IF win_checkout_2.on_account THEN GOTO finish_checkout

REM ' credit card
checkout_credit_card: 
IF (win_checkout_2.visa=0) AND (win_checkout_2.mastercard=0) AND (win_checkout_2.american_express=0) THEN PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1); junk$="M23"+$0a$,mb_mode=0;gosub translate_mbox; RETURN
if win_checkout_2.SplitPaymentBtn=1 then
    if (win_checkout_2.visa_2=0) AND (win_checkout_2.mastercard_2=0) AND (win_checkout_2.american_express_2=0) THEN PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1); junk$="M61"+$0a$,mb_mode=0;gosub translate_mbox; RETURN
fi

LET cc$="",temp$=CVS(win_checkout_2.number$,3)
let cc_2$="", temp_2$=""; if win_checkout_2.SplitPaymentBtn=1 then temp_2$=CVS(win_checkout_2.number2$,3)

IF LEN(temp$) THEN FOR temp=1 TO LEN(temp$); IF temp$(temp,1)>="0" AND temp$(temp,1)<="9" THEN LET cc$=cc$+temp$(temp,1) FI ; NEXT temp
if win_checkout_2.SplitPaymentBtn=1 and LEN(temp_2$) THEN FOR temp_2=1 TO LEN(temp_2$); IF temp_2$(temp_2,1)>="0" AND temp_2$(temp_2,1)<="9" THEN LET cc_2$=cc_2$+temp_2$(temp_2,1) FI ; NEXT temp_2

IF cc$="" THEN PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1); junk$="M30"+$0a$,mb_mode=0;gosub translate_mbox; RETURN
if win_checkout_2.SplitPaymentBtn=1 and cc_2$="" THEN PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1); junk$="M62"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

IF (win_checkout_2.american_express AND cc$(1,1)<>"3") OR (win_checkout_2.visa AND cc$(1,1)<>"4") OR (win_checkout_2.mastercard AND cc$(1,1)<>"2" and cc$(1,1)<>"5") THEN PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1); junk$="M31"+$0a$,mb_mode=0;gosub translate_mbox; RETURN
if win_checkout_2.SplitPaymentBtn=1 then
    if (win_checkout_2.american_express_2 AND cc_2$(1,1)<>"3") OR (win_checkout_2.visa_2 AND cc_2$(1,1)<>"4") OR (win_checkout_2.mastercard_2 AND cc_2$(1,1)<>"2" and cc_2$(1,1)<>"5") THEN 
        PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1)
        junk$="M63"+$0a$,mb_mode=0
        gosub translate_mbox
        RETURN
    fi
fi

rem ' final validation of the credit card numbers
cc_hold$ = cc$
GOSUB Verify_Credit_Card
IF valid=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1);junk$="M31"+$0a$,mb_mode=0;gosub translate_mbox; RETURN
if win_checkout_2.SplitPaymentBtn=1 then
    cc$ = cc_2$
    GOSUB Verify_Credit_Card
    IF valid=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1);junk$="M63"+$0a$,mb_mode=0;gosub translate_mbox; RETURN
fi
cc$ = cc_hold$

LET temp$=win_checkout_2.expiry_month$,temp=POS($FF$=temp$)
IF temp=0 THEN LET ctl_id=NUM(FATTR(win_checkout_2$,"Expiry_Month","ID")); PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1),'FOCUS'(ctl_id); junk$="M27"+$0a$,mb_mode=0;gosub translate_mbox; RETURN
LET expiry_month=fnnum(win_checkout_2.expiry_month$(temp+1))+1
if win_checkout_2.SplitPaymentBtn=1 then
    LET temp$=win_checkout_2.expiry_month_2$,temp=POS($FF$=temp$)
    IF temp=0 THEN LET ctl_id=NUM(FATTR(win_checkout_2$,"Expiry_Month_2","ID")); PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1),'FOCUS'(ctl_id); junk$="M64"+$0a$,mb_mode=0;gosub translate_mbox; RETURN
    LET expiry_month_2=fnnum(win_checkout_2.expiry_month_2$(temp+1))+1
fi

LET temp$=win_checkout_2.expiry_year$,temp=POS($FF$=temp$)
IF temp=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1); junk$="M28"+$0a$,mb_mode=0;gosub translate_mbox; LET ctl_id=NUM(FATTR(win_checkout_2$,"Expiry_Year","ID")); PRINT (gb__sysgui)'FOCUS'(ctl_id); RETURN
LET expiry_year=fnnum(win_checkout_2.expiry_year$(temp+1))+NUM(DATE(0:"%Yl"))
if win_checkout_2.SplitPaymentBtn=1 then
    LET temp$=win_checkout_2.expiry_year_2$,temp=POS($FF$=temp$)
    IF temp=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1); junk$="M65"+$0a$,mb_mode=0;gosub translate_mbox; LET ctl_id=NUM(FATTR(win_checkout_2$,"Expiry_Year_2","ID")); PRINT (gb__sysgui)'FOCUS'(ctl_id); RETURN
    LET expiry_year_2=fnnum(win_checkout_2.expiry_year_2$(temp+1))+NUM(DATE(0:"%Yl"))
fi

rem ' get the verification data

rem ' hide the current window
callingWindow! = BBjAPI().getSysGui().getWindow(gb__win.checkout_2)
callingWindow!.setVisible(0)

dim verification_args$:"LANG:C(2*=10),ADDRESS:C(30*=10),ZIP:C(5*=10),CVV2:C(4*=10),STATUS:N(1*=10),CARD2:N(1*=10),ADDRESS_2:C(30*=10),ZIP_2:C(5*=10),CVV2_2:C(4*=10),CALLERSCONTEXT:N(5*=10)"
verification_args.lang$=lang$
verification_args.address$=arm01.addr_line_1$
verification_args.zip$=arm01.zip_code$
if win_checkout_2.SplitPaymentBtn=1 then
    verification_args.card2 = 1
    verification_args.address_2$=arm01.addr_line_1$
    verification_args.zip_2$=arm01.zip_code$
fi
verification_args.callersContext=gb__win.checkout_2
call "ec_CreditCardVer.bbj",verification_args$

rem ' bring the window back
rem ' show this calling window again, forcing a repaint
blankcontext = fnCreateWindowIfNeeded("121")
tempWindow! = BBjAPI().getSysGui().getWindow(blankcontext)
tempWindow!.setVisible(1)
tempWindow!.setVisible(0)
callingWindow!.setVisible(1)
BBjAPI().getSysGui().setContext(gb__win.checkout_2)
callingWindow!.focus()

rem ' did the user cancel the verification entry?
if verification_args.status=0 then 
    PRINT (gb__sysgui)'SETCURSOR'(0),'ENABLE'(1)
    RETURN
fi

REM ' Finish Checkout
finish_checkout: 

GOSUB get_order_number

LET win_checkout_2.message$="Order #"+order_number$
LET win_checkout_2$=fngb__put_fields$(win_id_checkout_2$,win_checkout_2$,"message")

IF win_checkout_2.on_account THEN GOSUB create_order; GOSUB send_mail; GOTO checkout_complete

gosub process_credit_cards

rem ' debug
rem ' xresp = msgbox("got passed the process credit cards, failed = " + str(failed) + ", card1Succeeded = " + str(card1Succeeded) + ", card2Succeeded = " + str(card2Succeeded), 0, "debug")
rem ' xresp = msgbox("oneCard = " + str(oneCard) + ", twoCards = " + str(twoCards), 0, "debug")
rem ' if !failed then
rem '     if oneCard then 
rem '         xresp = msgbox("card 1: " + str(card1Succeeded) + " " + partialFaiureMessage$, 0, "debug")
rem '     fi
rem '     if twoCards then
rem '         xresp = msgbox("card 1: " + str(card1Succeeded) + " card 2: " + str(card2Succeeded) + " " + partialFaiureMessage$, 0, "debug")
rem '     fi
rem ' else
rem '     rem ' declined
rem '     if oneCard then 
rem '         xresp = msgbox("card 1: " + str(card1Succeeded) + " " + faiureMessage$, 0, "debug")
rem '    fi
rem '     if twoCards then 
rem '         xresp = msgbox("card 1: " + str(card1Succeeded) + " card 2: " + str(card2Succeeded) + " " + faiureMessage$, 0, "debug")
rem '     fi
rem ' fi

IF failed THEN 
  GOSUB put_order_number
  GOSUB send_mail_failure
  PRINT (gb__sysgui)'SETCURSOR'(0)
  junk$="M32"+$0a$,mb_mode=48
  gosub translate_mbox
  GOTO order_complete 
ELSE
  rem ' If successful, release the order & send acknowledgement email
  GOSUB create_order
  EXTRACT RECORD (are03,TIM=10,KEY=are03_key$)are03$
  are03.rel_to_ship$="Y", are03$=FIELD(are03$)
  WRITE RECORD (are03,KEY=are03_key$)are03$
  GOSUB send_mail
fi

checkout_complete:

LET win_checkout_2.message$="Generating Licenses..."
LET win_checkout_2$=fngb__put_fields$(win_id_checkout_2$,win_checkout_2$,"message")

LET license1$=win_checkout_1.license_1$
LET license2$=win_checkout_1.license_2$
CALL "ec_license",ERR=license_error,firm_id$,cust_num$,order_number$,license1$,license2$
GOTO order_complete

license_error: 
PRINT (gb__sysgui)'SETCURSOR'(0)
LET i=MSGBOX("License process did not complete",0,"Couldn't License Product: "+ERRMES(-1))

order_complete: 
LET win_checkout_1.License_1$=cvs(ecm01.e_mail$,3)
LET win_checkout_1.License_2$=cvs(ecm01.e_mail2$,3)
LET win_checkout_1$=fngb__put_fields$(win_id_checkout_1$,win_checkout_1$,"license_1,license_2")

LET win_checkout_2.splitPaymentBtn=0
LET win_checkout_2.visa=0
LET win_checkout_2.mastercard=0
LET win_checkout_2.american_express=0
LET win_checkout_2.visa_2=0
LET win_checkout_2.mastercard_2=0
LET win_checkout_2.american_express_2=0

LET win_checkout_2.save_credit_card=0

LET win_checkout_2.number$=""
LET win_checkout_2.name$=""
LET win_checkout_2.number2$=""
LET win_checkout_2.name2$=""

LET win_checkout_2.ccAmount1$=""
LET win_checkout_2.ccAmount2$=""

LET win_checkout_2.contact$=""
LET win_checkout_2.message$="Order is Complete"
LET win_checkout_2$=fngb__put_fields$(win_id_checkout_2$,win_checkout_2$,"message,visa,mastercard,american_express,visa_2,mastercard_2,american_express_2,number,name,number2,name2, ccAmount1, ccAmount2, contact, splitPaymentBtn")
REM " Reset shipto address to default after checkout
LET init_ship_usa=0
LET init_ship_intl=0

GOSUB init_cart

LET focus_id=NUM(FATTR(win_cart$,"Checkout","ID"))
new_context=gb__win.cart
old_context=gb__win.checkout_2
print(gb__sysgui)'context'(old_context),'enable'(1)
gosub show_window

[Event Win=109 ID=101 Code=c1 <CHECK_ON> (W109_C101_CHECK_ON)]
rem ' Control checked (ON)

gosub take_down_split_payment
gosub disable_checkout_2_cc_info

[Event Win=109 ID=102 Code=c0 <CHECK_OFF> (W109_C102_CHECK_OFF)]
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

take_down_split_payment:

chkout2Message! = Cast(BBjStaticText, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Message"))
chkout2Message!.setText("")

ccAmount1! = Cast(BBjInputE, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("ccAmount1"))
ccAmount1!.setText(CVS(STR(total:amount_mask$),3+64))
ccAmount1!.setEditable(0)

ccFrame1! = Cast(BBjGroupBox, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Credit Card Frame"))
ccFrame1!.setText("Credit Card")

BBjAPI().getSysGui().getWindow("Checkout 2").getControl("ccAmount2").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("ccAmount2Label").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Number2").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Name2").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Number Label 2").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Name Label 2").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Expiry Label 2").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Expiry Month 2").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Expiry Year 2").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Visa 2").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("MasterCard 2").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("American Express 2").setVisible(0)

BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Number2").setText("")
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Name2").setText("")
cast(BBjListButton, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Expiry Month 2")).deselect()
cast(BBjListButton, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Expiry Year 2")).deselect()
cast(BBjRadioButton, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Visa 2")).setSelected(0)
cast(BBjRadioButton, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("MasterCard 2")).setSelected(0)
cast(BBjRadioButton, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("American Express 2")).setSelected(0)

if imageControlVisa! <> null() then 
    imageControlVisa!.destroy()
    imageControlVisa! = null()
fi
if imageControlMasterCard! <> null() then 
    imageControlMasterCard!.destroy()
    imageControlMasterCard! = null()
fi
if imageControlAmex! <> null() then 
    imageControlAmex!.destroy()
    imageControlAmex! = null()
fi

ccAmount2! = Cast(BBjInputE, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("ccAmount2"))
ccAmount2!.setText("")

ccFrame2! = Cast(BBjGroupBox, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Credit Card 2 Group"))
ccFrame2!.setOpaque(1)
ccFrame2!.setVisible(0)
ccFrame2!.setEnabled(0)

BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Order Amount Frame").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Subtotal").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Subtotal Label").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Tax").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Tax Label").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Freight").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Freight Label").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Total").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Total Label").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("List").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("List Label").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Reference Title").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Reference").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Contact Title").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Contact").setVisible(1)

[Event Win=109 ID=102 Code=c1 <CHECK_ON> (W109_C102_CHECK_ON)]
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

chkout2Message! = Cast(BBjStaticText, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Message"))
chkout2Message!.setText("Order Total: " + CVS(STR(total:amount_mask$),3+64))

ccAmount1! = Cast(BBjInputE, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("ccAmount1"))
ccAmount1 = round(total/2,2)
ccAmount1!.setText(CVS(STR(ccAmount1:amount_mask$),3+64))
ccAmount1!.setEditable(1)

BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Order Amount Frame").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Subtotal").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Subtotal Label").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Tax").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Tax Label").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Freight").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Freight Label").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Total").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Total Label").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("List").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("List Label").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Reference Title").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Reference").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Contact Title").setVisible(0)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Contact").setVisible(0)


ccFrame1! = Cast(BBjGroupBox, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Credit Card Frame"))
ccFrame1!.setText("Credit Card 1")

ccFrame2! = Cast(BBjGroupBox, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Credit Card 2 Group"))
rem ' ccFrame2!.setOpaque(1)
ccFrame2!.setVisible(1)
ccFrame2!.setEnabled(1)

BBjAPI().getSysGui().getWindow("Checkout 2").getControl("ccAmount2").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("ccAmount2Label").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Number2").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Name2").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Number Label 2").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Name Label 2").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Expiry Label 2").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Expiry Month 2").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Expiry Year 2").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Visa 2").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("MasterCard 2").setVisible(1)
BBjAPI().getSysGui().getWindow("Checkout 2").getControl("American Express 2").setVisible(1)

tempCntx = BBjAPI().getSysGui().getContext()
imageControlVisa! = fnAddImageControl!(tempCntx,100,115,50,31,"visa.png")
imageControlMasterCard! = fnAddImageControl!(tempCntx,100,175,50,31,"mastercard.png")
imageControlAmex! = fnAddImageControl!(tempCntx,100,235,50,31,"amex.png")

ccAmount2! = Cast(BBjInputE, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("ccAmount2"))
ccAmount2 = total - ccAmount1
ccAmount2!.setText(CVS(STR(ccAmount2:amount_mask$),3+64))

[Event Win=109 ID=103 Code=f0 <LOST_FOCUS> (W109_C103_LOST_FOCUS)]
rem ' Control lost focus
rem ' gb__event! = cast(BBjLostFocusEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub calcPaymentSplit

[Event Win=109 ID=136 Code=c1 <CHECK_ON> (W109_C136_CHECK_ON)]
rem ' Control checked (ON)

GOSUB enable_checkout_2_cc_info

[Event Win=109 ID=141 Code=N2:19 <LIST_SELECT> (W109_C141_LIST_SELECT)]
REM ' Notify Event - List Button Control - List Selection

LET win_checkout_2$=fngb__get_screen$(win_id_checkout_2$,win_checkout_2$)
LET temp$=win_checkout_2.credit_card_list$,temp=POS($FF$=temp$)
IF temp=0 THEN RETURN; REM ' no selection
LET cc_count=NUM(temp$(temp+1))

LET win_checkout_2.visa=0
LET win_checkout_2.mastercard=0
LET win_checkout_2.american_express=0

IF cc_type$[cc_count]="V" THEN LET win_checkout_2.visa=1
IF cc_type$[cc_count]="M" THEN LET win_checkout_2.mastercard=1
IF cc_type$[cc_count]="A" THEN LET win_checkout_2.american_express=1

LET win_checkout_2.number$=fnformat_cc$(cc_num$[cc_count])

LET win_checkout_2.name$=cc_name$[cc_count]

LET temp$=win_checkout_2.expiry_month$+$FF$,temp=POS($FF$=temp$)
LET index=cc_month[cc_count]-1
LET temp$=temp$(1,temp)+STR(index)
LET win_checkout_2.expiry_month$=temp$

LET temp$=win_checkout_2.expiry_year$+$FF$,temp=POS($FF$=temp$)
LET index=cc_year[cc_count]-NUM(DATE(0:"%Yl"))
LET temp$=temp$(1,temp)+STR(index)
LET win_checkout_2.expiry_year$=temp$

LET win_checkout_2$=fngb__put_screen$(win_id_checkout_2$,win_checkout_2$)
print(gb__sysgui)'flush';wait 1

[Event Win=109 ID=165 Code=B <PUSH_BUTTON> (W109_C165_PUSH_BUTTON)]
REM ' Go from Checkout_2 Window to Checkout_1 Window

LET focus_id=NUM(FATTR(win_checkout_1$,"Previous","ID"))
new_context=gb__win.checkout_1
old_context=gb__win.checkout_2
gosub show_window

[Event Win=109 ID=2 Code=B <PUSH_BUTTON> (W109_C2_PUSH_BUTTON)]
REM ' Go from Checkout_2 Window to Cart Window

LET focus_id=NUM(FATTR(win_cart$,"Checkout","ID"))
new_context=gb__win.cart
old_context=gb__win.checkout_2
gosub show_window

[Event Win=110 ID=0 Code=X <WIN_CLOSE> (W110_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=110 ID=101 Code=B <PUSH_BUTTON> (W110_C101_PUSH_BUTTON)]
REM ' Go from Account Window to Main Window

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_account$=fngb__get_screen$(win_id_account$,win_account$)

rem ' do we have a valid password
testPassword! = win_account.password$
if !testPassword!.matches("^.*(?=.{10,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[~!@#$%^&*()+=]).*$") then
    PRINT (gb__sysgui)'SETCURSOR'(0)
    junk$="M57"+$0a$
    mb_mode=0
    gosub translate_mbox
    RETURN
fi

rem ' do the passwords match
IF win_account.password$<>win_account.confirm_password$ THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M40"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

rem ' no longer needed - the regex above guarantees a minimum length of 10
rem ' IF LEN(win_account.password$)=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M39"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

rem ' enforece a maximum length
IF LEN(win_account.password$)>20 THEN PRINT (gb__sysgui)'SETCURSOR'(0);junk$="M41"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

IF CVS(ecm01.e_mail$,3)=CVS(win_account.email$,3) AND 
:   CVS(ecm01.e_mail2$,3)=CVS(win_account.email2$,3) AND 
:       CVS(ecm01.password$,3)=CVS(win_account.password$,3) AND 
:           CVS(ecm01.first_name$,3)=CVS(win_account.firstName$,3) AND 
:               CVS(ecm01.last_name$,3)=CVS(win_account.lastName$,3) THEN 
                    GOTO account_no_change
fi

LET init_account=0; REM ' ensure that the screen is redrawn next time

PRINT (gb__sysgui)'SETCURSOR'(0)
if !force_password_change then
    junk$="M43"+$0a$,mb_mode=1;gosub translate_mbox
    IF i=2 THEN GOTO account_no_change
fi

rem ' send email when password changes
if CVS(ecm01.password$, 3) <> CVS(win_account.password$, 3) then
    rem ' password is changing
    pwdfrom$ = "customer-service@basis.cloud"

    pwdto$ = ""
    if cvs(win_account.email$, 3) <> "" then
        pwdto$ = cvs(win_account.email$, 3)
    fi
    
    rem ' if cvs(win_account.email2$, 3) <> "" then
    rem '     if cvs(pwdto$, 3) <> "" then
    rem '         pwdto$ = pwdto$ + "," + cvs(win_account.email2$, 3)
    rem '     else
    rem '         pwdto$ = cvs(win_account.email2$, 3)
    rem '     fi
    rem ' fi

    if pwdto$ = "" then
        pwdto$ = "customer-service@basis.cloud"
    fi

    pwdcc$ = ""
    if cvs(arm10f.e_mail$, 3) <> "" then
        pwdcc$ = cvs(arm10f.e_mail$, 3) + ",customer-service@basis.cloud"
    fi
    if cvs(pwdcc$, 3) = "" then
        pwdcc$ = "customer-service@basis.cloud"
    fi

    pwdbcc$ = "kw5121151@gmail.com"

    pwdsubject$ = "BASIS B-comm password changed for " + firm_id$ + cust_num$ + user_code$

    nametext$ = ""
    if cvs(win_account.firstName$,3) <> "" then nametext$ = cvs(win_account.firstName$,3)
    if cvs(win_account.lastName$,3) <> "" then
        if nametext$ <> "" then
            nametext$ = nametext$ + " " + cvs(win_account.lastName$,3)
        else
            nametext$ = cvs(win_account.lastName$,3)
        fi
    fi

    pwdmsgtxt$ = "Someone changed the password for the BASIS B-comm account " + firm_id$ + cust_num$ + user_code$
    if nametext$ <> "" then 
        pwdmsgtxt$ = pwdmsgtxt$ + ", " + nametext$ + ". "
    else
        pwdmsgtxt$ = pwdmsgtxt$ + ". "
    fi

    pwdmsgtxt$ = pwdmsgtxt$ + "If this was an unauthorized change please contact a BASIS representative at 1.505.938.6120 in the U.S. or +49 681 968 14 0 in Europe." + $0A$ + $0A$ + $0A$
    pwdmsgtxt$ = pwdmsgtxt$ + "BASIS Customer Service Department" + $0A$ + "customer-service@basis.cloud" 

    pwdfile$ = ""

    call "sendEmail.src", pwdfrom$, pwdto$, pwdcc$, pwdbcc$, pwdsubject$, pwdmsgtxt$, pwdfile$
fi

LET ecm01.first_name$=win_account.firstName$
LET ecm01.last_name$=win_account.lastName$
LET ecm01.e_mail$=win_account.email$
LET ecm01.e_mail2$=win_account.email2$
LET ecm01.password$=win_account.password$; REM ' TODO - encrypt password?

LET ecm01$=FIELD(ecm01$)

REM ' ========== TODO: this should be a TRANSACTION ==========
WRITE RECORD (ecm01)ecm01$

rem ' sync changes to email fields in the blank user code to the "**" user
if cvs(user_code$,3) = "" then
    dim ecm01alt$:fattr(ecm01$)
    gotit = 0
    extract record (ecm01, tim = 10, key = firm_id$ + cust_num$ + "**", err=*next)ecm01alt$; gotit = 1
    if gotit then
        ecm01alt.e_mail$ = ecm01.e_mail$
        ecm01alt.e_mail2$ = ecm01.e_mail2$
        write record(ecm01)ecm01alt$
    fi
fi

rem ' extract the current users ecm01 record
EXTRACT RECORD (ecm01,TIM=10,KEY=firm_id$+cust_num$+user_code$)ecm01$
REM ' ========== TODO: this should be a TRANSACTION ==========

account_no_change: 

if force_password_change then
    rem ' enable the other buttons
    accountWindow!.getControl("EditCC").setEnabled(1)
    accountWindow!.getControl("New CC").setEnabled(1)
    accountWindow!.getControl("Email_rpt").setEnabled(1)
    accountWindow!.getControl("invoice").setEnabled(1)
    accountWindow!.getControl("EndUserData").setEnabled(1)
    accountWindow!.getControl("Cancel").setEnabled(1)
    force_password_change = 0
fi

LET focus_id=NUM(FATTR(win_main$,"Account","ID"))
new_context=gb__win.main
old_context=gb__win.account
gosub show_window

[Event Win=110 ID=102 Code=B <PUSH_BUTTON> (W110_C102_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' check to see if grid row selected
LET theGridRow=DEC(SENDMSG(gb__sysgui,win_account_grid_id,45,0,$$,gb__win.account))
IF theGridRow<0 THEN RETURN

gosub Edit_Credit_Card

[Event Win=110 ID=103 Code=B <PUSH_BUTTON> (W110_C103_PUSH_BUTTON)]
rem ' Push button operated

GOSUB insert_cc

[Event Win=110 ID=104 Code=B <PUSH_BUTTON> (W110_C104_PUSH_BUTTON)]
rem ' Go from Account window to Send_Rpt

rem ' create the send rpts window if needed.
new_context=fnCreateWindowIfNeeded("119")

win_send_rpt.email$=cvs(ecm01.e_mail$,3)
LET win_send_rpt$=fngb__put_fields$(win_id_send_rpt$,win_send_rpt$,"email")
LET focus_id=NUM(FATTR(win_send_rpt$,"email","ID"))
new_context=gb__win.send_rpt
old_context=gb__win.account
dim loc$:"x:i(2),y:i(2),w:u(2),h:u(2)"
loc$=ctrl(gb__sysgui,0,0,old_context)
print(gb__sysgui)'context'(new_context),'move'(0,loc.x,loc.y)
print(gb__sysgui)'context'(new_context),'enable'(0),'show'(0),'focus'(0),'raise','setcursor'(0),'flush'
if focus_id then print(gb__sysgui)'context'(new_context),'focus'(focus_id)
currentWindow! = sysgui!.getWindow(new_context)

asofDate = 0
if cust_num$ = "001022" or cust_num$ = "002157" then
    asofDate = currentWindow!.getAvailableControlID()
    asofDate! = currentWindow!.addEditBox(asofDate, 415, 235, 100, 25,"")
    asofDate!.setText(date(0:"%Y-%Mz-%Dz"))
    asofDateLbl = currentWindow!.getAvailableControlID()
    asofDateLbl! = currentWindow!.addStaticText(asofDateLbl, 340, 242, 70, 20, "As of Date:")
fi

jul_today=jul(0,0,0)

[Event Win=110 ID=105 Code=B <PUSH_BUTTON> (W110_C105_PUSH_BUTTON)]
REM ' Go from Account Window to Invoice Window


ctx=dec(ctrl(gb__sysgui))

dim loc$:"x:i(2),y:i(2),w:u(2),h:u(2)"
loc$=ctrl(gb__sysgui,0,0,ctx, err=*next)

c$=c$+str(ctx:"000)")+$0a$+str(loc.x:"0000")+$0a$+str(loc.y:"0000")+$0a$
c$=c$+firm_id$+$0a$+cust_num$+$0a$+user_code$+$0a$+lang$+$0a$

rem ' hide this calling window
callingWindow! = BBjAPI().getSysGui().getWindow(gb__win.account)
callingWindow!.setVisible(0)

call "invoice.bbj",err=*next,c$

rem ' show this calling window again, forcing a repaint
blankcontext = fnCreateWindowIfNeeded("121")
tempWindow! = BBjAPI().getSysGui().getWindow(blankcontext)
tempWindow!.setVisible(1)
tempWindow!.setVisible(0)
callingWindow!.setVisible(1)
sysgui!.setContext(gb__win.account)
callingWindow!.focus()

[Event Win=110 ID=106 Code=B <PUSH_BUTTON> (W110_C106_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem manage end user data
gosub init_eu_man_args
eu_args.firm_id$=firm_id$, eu_args.customer_nbr$=cust_num$,eu_args.lang$=lang$
eu_args.snmel=snmel, eu_args.snmeu=snmeu, eu_args.snm01=snm01
eu_args.states=states, eu_args.country=country, eu_args.csm01=csm01
eu_args.callersContext=gb__win.account

callingWindow! = BBjAPI().getSysGui().getWindow(gb__win.account)
callingWindow!.setVisible(0)

call "ec_eu_edit.bbj", eu_args$
eu_args$=""

rem ' show this calling window again, forcing a repaint
blankcontext = fnCreateWindowIfNeeded("121")
tempWindow! = BBjAPI().getSysGui().getWindow(blankcontext)
tempWindow!.setVisible(1)
tempWindow!.setVisible(0)
callingWindow!.setVisible(1)
sysgui!.setContext(gb__win.account)
callingWindow!.focus()

[Event Win=110 ID=108 Code=B <PUSH_BUTTON> (W110_C108_PUSH_BUTTON)]
REM ' Go from Account Window to Main Window

LET init_account=0; REM ' refresh the screen next time the user goes back

LET focus_id=NUM(FATTR(win_main$,"Account","ID"))
new_context=gb__win.main
old_context=gb__win.account
gosub show_window

[Event Win=110 ID=109 Code=N3:107 <GRID_DCLICK> (W110_C109_GRID_MOUSE_DOUBLE_CLICK)]
REM ' Notify Event - Grid - Grid Double Clicked (TBLINF)
REM ' .col,.row = cell clicked
REM ' .ptx,.pty = point clicked
REM ' .x,.y,.w,.h = cell boundaries
REM ' .wparam$ = $01$(Ctrl)/$02$(Shift)

LET theGridRow=DEC(SENDMSG(gb__sysgui,win_account_grid_id,45,0,$$,gb__win.account))
IF theGridRow<0 THEN RETURN

gosub Edit_Credit_Card

[Event Win=110 ID=114 Code=B <PUSH_BUTTON> (W110_C114_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

dim args$:"FIRM_ID:C(2),CUSTOMER_NBR:C(6),USER_CODE:C(2),SCREENX:C(4),SCREENY:C(4),LANG:C(2),CRED_HOLD:C(1)"
args.firm_id$ = firm_id$
args.customer_nbr$ = cust_num$
args.user_code$ = user_code$

thisWindow! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow(gb__win.account))
x = thisWindow!.getX()
y = thisWindow!.getY()
args.screenx$ = str(x:"0000")
args.screeny$ = str(y:"0000")
args.lang$=lang$
args.cred_hold$ = arm02.cred_hold$

rem ' hide the current window
rem ' print(gb__sysgui)'context'(gb__win.account),'hide'(0),
callingWindow! = BBjAPI().getSysGui().getWindow(gb__win.account)
callingWindow!.setVisible(0)

call "ec_rollHeimBASContracts.bbj", args$

rem ' bring the window back
rem ' print(gb__sysgui)'context'(gb__win.account),'show'(0),
rem ' show this calling window again, forcing a repaint
blankcontext = fnCreateWindowIfNeeded("121")
tempWindow! = BBjAPI().getSysGui().getWindow(blankcontext)
tempWindow!.setVisible(1)
tempWindow!.setVisible(0)
callingWindow!.setVisible(1)
callingWindow!.focus()

[Event Win=111 ID=0 Code=X <WIN_CLOSE> (W111_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=111 ID=113 Code=B <PUSH_BUTTON> (W111_C113_PUSH_BUTTON)]
REM ' Go from History Window to Clients Window

rem ' create the clients window if needed
new_context=fnCreateWindowIfNeeded("112")

IF CVS(server_sn$,3)="" THEN RETURN

LET snm01.serial_nbr$=server_sn$
READ RECORD (snm01,KNUM=0,KEY=snm01.serial_nbr$,ERR=no_clients)snm01$
GOTO got_clients_snm01

no_clients: 
RETURN

got_clients_snm01: 
PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_clients_grid_id=NUM(FATTR(win_clients$,"Grid","ID"))
DIM clients_rec$:"Serial_Number:c(16*):ALIGN=0 SHOW=1 LABEL=Client_S/N LENGTH=16:,"+"Item_Number:c(16*):ALIGN=0 SHOW=1 LABEL=Item_Number LENGTH=16:,"+"Users:c(8*):ALIGN=1 SHOW=1 LABEL=Users LENGTH=8:,"+"Description:c(60*):ALIGN=0 SHOW=1 LABEL=Description LENGTH=60:"

IF clients_file THEN CLOSE (clients_file)
LET clients_file=UNT
INITFILE clients_file$
OPEN (clients_file)clients_file$

LET win_clients$=fngb__get_screen$(win_id_clients$,win_clients$)

ivm_item$=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$+FILL(5)
gosub ivm_item

LET win_clients.serial_number$=CVS(server_sn$,3)
LET win_clients.item_number$=CVS(ivm01.item_number$,3)
LET win_clients.description$=CVS(ivm01.item_desc$,3)

get_cs_info: 
LET client_count=0,user_count=0
READ (snt02,KNUM=0,KEY=server_sn$,DOM=client_loop)

client_loop: 
READ RECORD (snt02,END=client_endloop)snt02$
IF CVS(snt02.data_server$,3)<>CVS(server_sn$,3) THEN GOTO client_endloop
READ RECORD (snm01,KNUM=0,KEY=snt02.serial_nbr$,ERR=client_loop)snm01$
ivm_item$=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$+FILL(5)
gosub ivm_item

WRITE (clients_file,KEY=snm01.serial_nbr$)CVS(snm01.serial_nbr$,3),CVS(ivm01.item_number$,3),STR(snm01.users),CVS(ivm01.item_desc$,3)

LET client_count=client_count+1
LET user_count=user_count+snm01.users

GOTO client_loop

client_endloop: 
CLOSE (clients_file)
OPEN (clients_file)clients_file$

IF client_count=1 THEN LET win_clients.message$="There is "+STR(client_count)+" client with a total of "+STR(user_count)+" users."+"  Double-click in the grid to see details for this client license." ELSE LET win_clients.message$="There are "+STR(client_count)+" clients with a total of "+STR(user_count)+" users."+"  Double-click in the grid to see details for a specific client license."

LET win_clients$=fngb__put_screen$(win_id_clients$,win_clients$)

LET batch!=sysgui!.get_message_batch()
batch!.addSendMsg(win_clients_grid_id,80,clients_file,FATTR(clients_rec$),gb__win.clients)
batch!.addSendMsg(win_clients_grid_id,81,0,$01$,gb__win.clients); REM ' read-only grid
batch!.addSendMsg(win_clients_grid_id,49,1,$$,gb__win.clients); REM ' highlight row
batch!.addSendMsg(win_clients_grid_id,57,1,$$,gb__win.clients); REM ' highlight colour
batch!.addSendMsg(win_clients_grid_hdr,84,0,$$,gb__win.clients); REM ' alignment
REM # batch!.addSendMsg(win_clients_grid_hdr,20,0,$$,gb__win.clients); rem ' info block
batch!.processAll()

LET focus_id=NUM(FATTR(win_clients$,"Close","ID"))

old_context=gb__win.history
gosub show_window

[Event Win=111 ID=114 Code=N2:106 <TAB_SELECT> (W111_C114_TAB_SELECT)]
REM ' Notify Event - Tab - Tab gb__notice.tabidx Selected

if gb__notice.tabidx=0 then print (gb__sysgui)'CONTEXT'(gb__notice.context),'DISABLE'(reset_id,reset_reason_id)

while gb__notice.tabidx=1 
  print (gb__sysgui)'CONTEXT'(gb__notice.context),'DISABLE'(reset_id,reset_reason_id)
  IF license_status<>1 or snm01.dist_reset>=arm02.allowed_resets or snm01.active_flag$<>"Y" then break
  enable=0
  if cvs(snm01.contract$,3)<>"" and snm01.sam_active$<>"N" then enable=1
  if snm01.avail_support>0 or snm01.product$="DS5" THEN enable=1
  if enable THEN print (gb__sysgui)'CONTEXT'(gb__notice.context),'ENABLE'(reset_id,reset_reason_id)
  break
wend

[Event Win=111 ID=116 Code=B <PUSH_BUTTON> (W111_C116_PUSH_BUTTON)]
IF snm01.dist_reset>=arm02.allowed_resets THEN RETURN

GOSUB license_status
IF license_status<1 THEN GOTO reset_button_end

LET win_history$=fngb__get_fields$(win_id_history$,win_history$,"reset_reason")
LET temp$=win_history.reset_reason$
temp=pos($ff$=temp$)
if temp then temp=num(temp$(temp+1))
reset_code$=reset_code_list$(temp*2+1,2)
if reset_code$="??" then
  junk$="M34"+$0a$+cvs(snm01.serial_nbr$,2)+$0a$
  gosub translate_mbox
  goto reset_button_end
fi
reduce_support=0
if (cvs(snm01.contract$,2)="" or snm01.sam_active$="N") and snm01.product$<>"DS5" then reduce_support=1
junk$="M45"+$0a$+str(snm01.avail_support-reduce_support)+$0a$
mb_mode=4+32+256
gosub translate_mbox

IF gb__temp=7 then GOTO reset_button_end

IF license_status_channel=are83 THEN 
  EXTRACT RECORD (license_status_channel,TIM=5,KEY=license_status_key$,ERR=reset_button_end)are83$
  LET are83.license_cnt=0,are83$=FIELD(are83$)
  WRITE RECORD (license_status_channel,KEY=license_status_key$)are83$
ELSE 
  EXTRACT RECORD (license_status_channel,TIM=5,KEY=license_status_key$,ERR=reset_button_end)snt01$
  LET snt01.license_cnt=0,snt01$=FIELD(snt01$)
  WRITE RECORD (license_status_channel,KEY=license_status_key$)snt01$
fi
PRINT (gb__sysgui)'DISABLE'(reset_id,reset_reason_id)
EXTRACT RECORD (snm01,TIM=5,KEY=snm01.serial_nbr$,ERR=reset_button_end)snm01$
LET snm01.dist_reset=snm01.dist_reset+1
snm01.avail_support=snm01.avail_support-reduce_support
LET snm01$=FIELD(snm01$)
WRITE RECORD (snm01,KEY=snm01.serial_nbr$)snm01$
READ RECORD (snm01,KEY=snm01.serial_nbr$)snm01$

LET license_reset.serial_nbr$=snm01.serial_nbr$
LET license_reset.reset_date$=DATE(0:"%Y%Mz%Dz")
LET license_reset.reset_time$=DATE(0:"%Hz%mz%sz")
LET license_reset.reset_by$=firm_id$+cust_num$
LET license_reset.reset_to$="0"
LET license_reset.reset_code$=reset_code$
LET ffl$=FATTR(license_reset$,"available"),ffl=DEC(ffl$(10,2))
LET license_reset.available$=FILL(ffl)
LET license_reset$=FIELD(license_reset$)
WRITE RECORD (LICENSE_RESET,KEY=license_reset.serial_nbr$+license_reset.reset_date$+license_reset.reset_time$)license_reset$

rreason$=""
GOSUB license_history

LET win_history.list_box$=lbox$
LET win_history$=fngb__put_fields$(win_id_history$,win_history$,"list_box")

REM " send email to sales rep
sendfrom$ = "customer-service@basis.cloud"
sendto$ = CVS(arm10f.e_mail$,3)
sendcc$ = "customer-service@basis.cloud"
rem ' sendbcc$ = ""
sendbcc$ = "kurt.e.williams@comcast.net"
if cvs(sendto$,3) = "" then sendto$ = "sales@basis.cloud"

sendsubject$ = cust_num$ + ", " + CVS(snm01.serial_nbr$,2) + " license reset"
sendattach$=""
if rreason$ <> "" then rreason$ = cvs(rreason$,3) + $0A$
sendmsgtxt$ = license_reset.reset_date$(5,2)+"/"+license_reset.reset_date$(7,2)+"/"+license_reset.reset_date$(1,4) + "  " + license_reset.reset_time$(1,2) + ":" + license_reset.reset_time$(3,2) + $0A$ + CVS(snm01.serial_nbr$,3) + " license status was reset by " + CVS(arm01.cust_name$,3) + "." + $0A$ + rreason$ + "This is reset #" + STR(resets) + " for this serial number."

call "sendEmail.src", sendfrom$, sendto$, sendcc$, sendbcc$, sendsubject$, sendmsgtxt$, sendattach$

reset_button_end: 
win_history.reset_reason$=reset_reason_list$
win_history$=fngb__put_fields$(win_id_history$,win_history$,"reset_reason")

[Event Win=111 ID=2 Code=B <PUSH_BUTTON> (W111_C2_PUSH_BUTTON)]
REM ' Go from History Window to View_SN Window

LET focus_id=NUM(FATTR(win_view_sn$,"History","ID"))
new_context=gb__win.view_sn
old_context=gb__win.history
gosub show_window

[Event Win=112 ID=0 Code=X <WIN_CLOSE> (W112_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=112 ID=100 Code=N3:107 <GRID_DCLICK> (W112_C100_GRID_MOUSE_DOUBLE_CLICK)]
REM ' Go from Clients Window to View_SN Window
REM ' Notify Event - Grid - Grid Double Clicked (TBLINF)
REM ' .col,.row = cell clicked
REM ' .ptx,.pty = point clicked
REM ' .x,.y,.w,.h = cell boundaries
REM ' .wparam$ = $01$(Ctrl)/$02$(Shift)

IF gb__notice.row<0 THEN RETURN; REM ' no row where the user double-clicked

LET clients_rec$=SENDMSG(gb__sysgui,win_clients_grid_id,81,gb__notice.row,$04$,gb__win.clients)
DIM sn$(20)
LET sn$(1)=clients_rec.serial_number$
GOSUB show_sn

LET focus_id=NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
new_context=gb__win.view_sn
old_context=gb__win.clients
gosub show_window

[Event Win=112 ID=2 Code=B <PUSH_BUTTON> (W112_C2_PUSH_BUTTON)]
REM ' Go from Clients Window to History Window

LET focus_id=NUM(FATTR(win_history$,"Clients","ID"))
new_context=gb__win.history
old_context=gb__win.clients
gosub show_window

[Event Win=113 ID=0 Code=X <WIN_CLOSE> (W113_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=113 ID=1 Code=B <PUSH_BUTTON> (W113_C1_PUSH_BUTTON)]
REM ' Find_SN: Scan Next

PRINT (gb__sysgui)'SETCURSOR'(3)

CLOSE (find_sn_file)
INITFILE find_sn_file$
OPEN (find_sn_file)find_sn_file$

LET win_find_sn$=fngb__get_screen$(win_id_find_sn$,win_find_sn$)

LET count=MAX(1,fnnum(win_find_sn.limit$))
LET prev_sn$=CVS(win_find_sn.serial_number$,7)
READ (snm01,KNUM=1,KEY=firm_id$+cust_num$+prev_sn$,DOM=next_sn)

next_sn: 
READ RECORD (snm01,END=last_sn)snm01$
IF snm01.firm_id$<>firm_id$ OR snm01.customer_nbr$<>cust_num$ THEN GOTO last_sn
IF win_find_sn.active_only AND snm01.active_flag$="N" THEN GOTO next_sn

LET grid_sn$=snm01.serial_nbr$

LET grid_date$=fnaondate$(snm01.orig_sale_date$)
IF snm01.users THEN LET grid_users$=STR(snm01.users) ELSE LET grid_users$="N/A"

DIM grid_item$(20)
LET grid_item$(1)=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$
ivm_item$=grid_item$
gosub ivm_item
LET grid_desc$=ivm01.item_desc$
LET grid_desc$=CVS(grid_desc$,3)+" ("+CVS(grid_item$,3)+")"

WRITE (find_sn_file,KEY=grid_sn$)CVS(grid_sn$,3),CVS(grid_date$,3),CVS(grid_users$,3),CVS(grid_desc$,3)

LET win_find_sn.serial_number$=CVS(snm01.serial_nbr$,7)
LET count=count-1
IF count THEN GOTO next_sn

last_sn: 
LET win_find_sn$=fngb__put_fields$(win_id_find_sn$,win_find_sn$,"serial_number")

CLOSE (find_sn_file)
OPEN (find_sn_file)find_sn_file$

LET batch!=sysgui!.get_message_batch()
batch!.addSendMsg(win_find_sn_grid_id,80,find_sn_file,FATTR(find_sn_rec$),gb__win.find_sn)
batch!.addSendMsg(win_find_sn_grid_id,81,0,$01$,gb__win.find_sn); REM ' read-only grid
batch!.addSendMsg(win_find_sn_grid_id,49,1,$$,gb__win.find_sn); REM ' highlight row
batch!.addSendMsg(win_find_sn_grid_id,57,1,$$,gb__win.find_sn); REM ' highlight colour
batch!.addSendMsg(win_find_sn_grid_hdr,84,0,$$,gb__win.find_sn); REM ' alignment
REM # batch!.addSendMsg(win_find_sn_grid_hdr,20,0,$$,gb__win.find_sn); rem ' info block
batch!.processAll()

PRINT (gb__sysgui)'SETCURSOR'(0)

[Event Win=113 ID=102 Code=B <PUSH_BUTTON> (W113_C102_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' check to see if grid row selected

rem ' check for any rows at all
checkGridRows = dec($00$ + SENDMSG(gb__sysgui,win_find_sn_grid_id,41,0,$$))
if checkGridRows = 0 then return

LET theGridRow=DEC(SENDMSG(gb__sysgui,win_find_sn_grid_id,45,0,$$,gb__win.find_sn))
IF theGridRow<0 THEN RETURN

gosub Scan_SN_Show_SN

[Event Win=113 ID=110 Code=B <PUSH_BUTTON> (W113_C110_PUSH_BUTTON)]
REM ' Find_SN: Scan Back

PRINT (gb__sysgui)'SETCURSOR'(3)

CLOSE (find_sn_file)
INITFILE find_sn_file$
OPEN (find_sn_file)find_sn_file$

LET win_find_sn$=fngb__get_screen$(win_id_find_sn$,win_find_sn$)

LET count=MAX(1,fnnum(win_find_sn.limit$))
READ (snm01,KNUM=1,DIR=-1,KEY=firm_id$+cust_num$+prev_sn$,DOM=prev_sn)

prev_sn: 
READ RECORD (snm01,DIR=-1,END=first_sn)snm01$
IF snm01.firm_id$<>firm_id$ OR snm01.customer_nbr$<>cust_num$ THEN GOTO first_sn
IF win_find_sn.active_only AND snm01.active_flag$="N" THEN GOTO prev_sn

LET grid_sn$=snm01.serial_nbr$

LET grid_date$=fnaondate$(snm01.orig_sale_date$)
IF snm01.users THEN LET grid_users$=STR(snm01.users) ELSE LET grid_users$="N/A"

DIM grid_item$(20)
LET grid_item$(1)=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$
ivm_item$=grid_item$
gosub ivm_item
LET grid_desc$=ivm01.item_desc$
LET grid_desc$=CVS(grid_desc$,3)+" ("+CVS(grid_item$,3)+")"

WRITE (find_sn_file,KEY=grid_sn$)CVS(grid_sn$,3),CVS(grid_date$,3),CVS(grid_users$,3),CVS(grid_desc$,3)
LET prev_sn$=CVS(grid_sn$,7)
LET count=count-1
IF count THEN GOTO prev_sn

first_sn: 
LET win_find_sn.serial_number$=prev_sn$
LET win_find_sn$=fngb__put_fields$(win_id_find_sn$,win_find_sn$,"serial_number")

CLOSE (find_sn_file)
OPEN (find_sn_file)find_sn_file$

LET batch!=sysgui!.get_message_batch()
batch!.addSendMsg(win_find_sn_grid_id,80,find_sn_file,FATTR(find_sn_rec$),gb__win.find_sn)
batch!.addSendMsg(win_find_sn_grid_id,81,0,$01$,gb__win.find_sn); REM ' read-only grid
batch!.addSendMsg(win_find_sn_grid_id,49,1,$$,gb__win.find_sn); REM ' highlight row
batch!.addSendMsg(win_find_sn_grid_id,57,1,$$,gb__win.find_sn); REM ' highlight colour
batch!.addSendMsg(win_find_sn_grid_hdr,84,0,$$,gb__win.find_sn); REM ' alignment
REM # batch!.addSendMsg(win_find_sn_grid_hdr,20,0,$$,gb__win.find_sn); rem ' info block
batch!.processAll()

PRINT (gb__sysgui)'SETCURSOR'(0)

[Event Win=113 ID=111 Code=N3:107 <GRID_DCLICK> (W113_C111_GRID_MOUSE_DOUBLE_CLICK)]
REM ' Notify Event - Grid - Grid Double Clicked (TBLINF)
REM ' .col,.row = cell clicked
REM ' .ptx,.pty = point clicked
REM ' .x,.y,.w,.h = cell boundaries
REM ' .wparam$ = $01$(Ctrl)/$02$(Shift)

IF gb__notice.row<0 THEN RETURN; REM ' no row where the user double-clicked

theGridRow = gb__notice.row

gosub Scan_SN_Show_SN

[Event Win=113 ID=2 Code=B <PUSH_BUTTON> (W113_C2_PUSH_BUTTON)]
REM ' Go from Find_SN Window to View_SN Window

LET focus_id=NUM(FATTR(win_view_sn$,"Find_SN","ID"))
new_context=gb__win.view_sn
old_context=gb__win.find_sn
gosub show_window

[Event Win=114 ID=0 Code=X <WIN_CLOSE> (W114_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=114 ID=2 Code=B <PUSH_BUTTON> (W114_C2_PUSH_BUTTON)]
REM ' Switch from Credit_Card window to Account window

LET focus_id=NUM(FATTR(win_account$,"Grid","ID"))
new_context=gb__win.account
old_context=gb__win.credit_card
gosub show_window

[Event Win=114 ID=200 Code=B <PUSH_BUTTON> (W114_C200_PUSH_BUTTON)]
REM ' Switch from Credit_Card window to Account window

PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_credit_card$=fngb__get_screen$(win_id_credit_card$,win_credit_card$)

IF win_credit_card.visa=0 AND win_credit_card.mastercard=0 AND win_credit_card.american_express=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M23"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

LET cc$="",temp$=CVS(win_credit_card.number$,3)
LET cckey$="",cckey$=FIELD(cc_rec$,"cc_key",ERR=continue_cc_check)
continue_cc_check: 
IF POS("*"=temp$) THEN LET temp$=cckey$

IF LEN(temp$) THEN FOR temp=1 TO LEN(temp$); IF temp$(temp,1)>="0" AND temp$(temp,1)<="9" THEN LET cc$=cc$+temp$(temp,1) FI ; NEXT temp

GOSUB verify_credit_card
IF !(valid) THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M24"+$0a$,mb_mode=0;gosub translate_mbox; LET ctl_id=NUM(FATTR(win_credit_card$,"Number","ID")); PRINT (gb__sysgui)'FOCUS'(ctl_id); RETURN

IF win_credit_card.american_express AND POS("3"=cc$)<>1 then junk$="American Express";goto wrong_cc_type

IF win_credit_card.visa AND POS("4"=cc$)<>1 THEN junk$="Visa";goto wrong_cc_type

IF win_credit_card.mastercard AND POS("5"=cc$)<>1 THEN junk$="MasterCard";goto wrong_cc_type

LET name$=CVS(win_credit_card.name$,3)
IF name$="" THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M26"+$0a$,mb_mode=0;gosub translate_mbox; LET ctl_id=NUM(FATTR(win_credit_card$,"Name","ID")); PRINT (gb__sysgui)'FOCUS'(ctl_id); RETURN

LET temp$=win_credit_card.expiry_month$,temp=POS($FF$=temp$)
IF temp=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M27"+$0a$,mb_mode=0;gosub translate_mbox; LET ctl_id=NUM(FATTR(win_credit_card$,"Expiry_Month","ID")); PRINT (gb__sysgui)'FOCUS'(ctl_id); RETURN
LET expiry_month=fnnum(win_credit_card.expiry_month$(temp+1))+1

LET temp$=win_credit_card.expiry_year$,temp=POS($FF$=temp$)
IF temp=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); junk$="M28"+$0a$,mb_mode=0;gosub translate_mbox;LET ctl_id=NUM(FATTR(win_credit_card$,"Expiry_Year","ID")); PRINT (gb__sysgui)'FOCUS'(ctl_id); RETURN
LET expiry_year=fnnum(win_credit_card.expiry_year$(temp+1))+NUM(DATE(0:"%Yl"))

REM ' Now write the credit card record

LET ecm02.firm_id$=firm_id$
LET ecm02.customer_nbr$=cust_num$
LET ecm02.user_code$=user_code$
LET cce$=""
CALL "BCC.11",cc$,cce$
LET ecm02.credit_card_num$=cce$
IF win_credit_card.visa THEN LET ecm02.cc_type$="V"
IF win_credit_card.mastercard THEN LET ecm02.cc_type$="M"
IF win_credit_card.american_express THEN LET ecm02.cc_type$="A"
LET ecm02.cc_name$=CVS(win_credit_card.name$,3)
LET ecm02.cc_expires_mo$=STR(expiry_month:"00")
LET ecm02.cc_expires_yr$=STR(expiry_year:"0000")

LET ecm02$=FIELD(ecm02$)

rem 'No update by salesperson
if user_code$<>"**" then 
  WRITE RECORD (ecm02)ecm02$
  rem 'Update salesperson's credit card data
  LET ecm02.user_code$="**"
  WRITE RECORD (ecm02)ecm02$
  LET ecm02.user_code$=user_code$
fi

GOSUB init_account
IF init_checkout_2 THEN GOSUB init_checkout_2

LET focus_id=NUM(FATTR(win_account$,"Grid","ID"))
old_context=gb__win.credit_card
new_context=gb__win.account
gosub show_window

RETURN

wrong_cc_type:

PRINT (gb__sysgui)'SETCURSOR'(0)
junk$="M25"+$0a$+junk$+$0a$,mb_mode=0
gosub translate_mbox
ctl_id=NUM(FATTR(win_credit_card$,"Number","ID"))
PRINT (gb__sysgui)'FOCUS'(ctl_id); RETURN

return

[Event Win=114 ID=201 Code=B <PUSH_BUTTON> (W114_C201_PUSH_BUTTON)]
REM ' Switch from Credit_Card window to Account window

LET win_credit_card$=fngb__get_screen$(win_id_credit_card$,win_credit_card$)

LET cc$="",temp$=CVS(win_credit_card.number$,3)
LET cckey$="",cckey$=FIELD(cc_rec$,"cc_key",ERR=continue_cc_delete)
continue_cc_delete: 
IF POS("*"=temp$) THEN LET temp$=cckey$

IF LEN(temp$) THEN FOR temp=1 TO LEN(temp$); IF temp$(temp,1)>="0" AND temp$(temp,1)<="9" THEN LET cc$=cc$+temp$(temp,1) FI ; NEXT temp

LET ecm02.firm_id$=firm_id$
LET ecm02.customer_nbr$=cust_num$
LET ecm02.user_code$=user_code$
LET cce$=""
CALL "BCC.11",cc$,cce$
LET ecm02.credit_card_num$=cce$

FIND (ecm02,KEY=ecm02.firm_id$+ecm02.customer_nbr$+ecm02.user_code$+ecm02.credit_card_num$,ERR=no_cc)

rem 'No update by salesperson
if user_code$<>"**" then
  junk$="M38"+$0a$+fnobscure_cc$(cc$)+$0a$,mb_mode=4+256
  gosub translate_mbox
  IF i=7 THEN GOTO no_cc
  REMOVE (ecm02,KEY=ecm02.firm_id$+ecm02.customer_nbr$+ecm02.user_code$+ecm02.credit_card_num$,ERR=*next)
  rem 'Update salesperson's credit card data
  LET ecm02.user_code$="**"
  REMOVE (ecm02,KEY=ecm02.firm_id$+ecm02.customer_nbr$+ecm02.user_code$+ecm02.credit_card_num$,ERR=*next)
  LET ecm02.user_code$=user_code$
fi

no_cc: 
GOSUB init_account
IF init_checkout_2 THEN GOSUB init_checkout_2

LET focus_id=NUM(FATTR(win_account$,"Grid","ID"))
old_context=gb__win.credit_card
new_context=gb__win.account
gosub show_window

[Event Win=115 ID=101 Code=B <PUSH_BUTTON> (W115_C101_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

new_context=return_context
old_context=gb__win.serialNbrFeatures
focus_id = 0
gosub show_window

[Event Win=115 ID=102 Code=N5:107 <GRID_EDIT_CHG> (W115_C102_GRID_EDIT_CHG)]
rem ' Notify Event - Grid - Grid Edit Control Changed (5)
rem ' gb__event! = cast(BBjGridCellModifyEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()
rem ' Edited column is: gb__event!.getColumn()
rem ' Edited row is: gb__event!.getRow()
rem ' New text is: gb__control!.getEditText()

rem ' Add user cell has been modified

cellDataChanged! = cast(BBjGridCellModifyEvent, BBjAPI().getSysGui().getLastEvent())
 
origText$ = cellDataChanged!.getOriginalText()
addUser$ = cellDataChanged!.getEditText()

cRow = cellDataChanged!.getRow()
cColumn = cellDataChanged!.getColumn()

isANbr = 0
addUser = num(addUser$, err=*next); isANbr = 1
if !isANbr then
    featuresGrid!.setCellText(cRow, cColumn, origText$)
else
    addUser = abs(addUser)
    oldusers$ = featuresGrid!.getCellText(cRow, cColumn - 1)
    oldusers = num(oldUsers$)
    newUsers = addUser + oldusers
    newUsers$ = str(newUsers)
    featuresGrid!.setCellText(cRow, cColumn + 1, newUsers$)
    
    rem ' prodCode$ = featuresGrid!.getCellText(cRow, cColumn - 3)
    rem ' lRow = 0
    rem ' while 1
    rem '     thisProdCode$ = featuresGrid!.getCellText(lRow, cColumn - 3)
        rem ' xresp = msgbox(thisProdCode$,0,"debug")
    rem '     if thisProdCode$ = prodCode$ then
    rem '         featuresGrid!.setCellText(lRow, cColumn, str(addUser))
    rem '         featuresGrid!.setCellText(lRow, cColumn + 1, newUsers$)
    rem '     fi
    rem '     if (lRow + 1) >= featureCnt then break
    rem '     lRow = lRow + 1
    rem ' wend
fi

[Event Win=116 ID=0 Code=X <WIN_CLOSE> (W116_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=116 ID=1 Code=B <PUSH_BUTTON> (W116_C1_PUSH_BUTTON)]
REM ' Push button operated

LET win_reset_license$=fngb__get_fields$(win_id_reset_license$,win_reset_license$,"reset_reason")
LET temp$=win_reset_license.reset_reason$
temp=pos($ff$=temp$)
if temp then temp=num(temp$(temp+1))
reset_code$=reset_code_list$(temp*2+1,2)
if reset_code$="??" then
  junk$="M34"+$0a$+cvs(snm01.serial_nbr$,2)+$0a$
  gosub translate_mbox
  return
fi
ece11.reset_code$=reset_code$

PRINT (gb__sysgui)'CONTEXT'(new_context),'HIDE'(0),'CONTEXT'(old_context),'ENABLE'(0)
gosub edit_to_cart

[Event Win=116 ID=2 Code=B <PUSH_BUTTON> (W116_C2_PUSH_BUTTON)]
rem ' Push button operated

PRINT (gb__sysgui)'CONTEXT'(new_context),'HIDE'(0),'CONTEXT'(old_context),'ENABLE'(0)
gosub edit_to_cart

[Event Win=117 ID=0 Code=X <WIN_CLOSE> (W117_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=117 ID=1 Code=B <PUSH_BUTTON> (W117_C1_PUSH_BUTTON)]
REM ' Scan forward 

LET scan_dir=1
gosub available_sn_list_box

[Event Win=117 ID=100 Code=l0 <LIST_CLICK> (W117_C100_LIST_CLICK)]
LET ctl_id=NUM(FATTR(win_trade_select$,"available_sn_lbox","ID"))
LET x$="selected_sn_lbox"

process_list_click: 
LET x_id=NUM(FATTR(win_trade_select$,x$,"ID"))
LET tmplist$=CTRL(gb__sysgui,x_id,7,gb__win.trade_select)
IF POS("selected"=x$) THEN LET win_trade_select.selected_sn_lbox$=tmplist$ ELSE LET win_trade_select.available_sn_lbox$=tmplist$
LET win_trade_select$=fngb__put_fields$(win_id_trade_select$,win_trade_select$,x$)

LET addlist$=CTRL(gb__sysgui,ctl_id,1,gb__win.trade_select)

DIM start_sn$(20)
IF LEN(addlist$) THEN LET addlist$=addlist$+$0A$
LET selected=POS($0A$=addlist$,1,0)
IF selected=0 THEN RETURN

LET start_sn$(1)=addlist$(1,POS($0A$=addlist$)-1)

set_starting_sn: 
READ RECORD (snm01,KEY=start_sn$,KNUM=0)snm01$
LET item$=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$,start_users=snm01.users
GOSUB start_sn_description
LET win_trade_select.selected_desc$=tmpdesc$

LET win_trade_select$=fngb__put_fields$(win_id_trade_select$,win_trade_select$,"selected_desc")

[Event Win=117 ID=101 Code=l0 <LIST_CLICK> (W117_C101_LIST_CLICK)]
LET ctl_id=NUM(FATTR(win_trade_select$,"selected_sn_lbox","ID"))
LET x$="available_sn_lbox"
GOSUB process_list_click

[Event Win=117 ID=104 Code=B <PUSH_BUTTON> (W117_C104_PUSH_BUTTON)]
REM ' Add button 

ctl_function=1
LET lbox1$="available_sn_lbox",lbox2$="selected_sn_lbox"
GOSUB listbox_changes

LET selected=POS($0A$=list2$,1,0)
IF selected=0 THEN RETURN

IF selected>99 THEN RETURN

LET win_trade_select.selected_sn_lbox$=list2$
LET win_trade_select.available_sn_lbox$=list1$
LET win_trade_select$=fngb__put_fields$(win_id_trade_select$,win_trade_select$,"available_sn_lbox,selected_sn_lbox")

[Event Win=117 ID=105 Code=B <PUSH_BUTTON> (W117_C105_PUSH_BUTTON)]
REM ' Remove button

ctl_function=1
remove_btn_routine: 
LET lbox1$="selected_sn_lbox",lbox2$="available_sn_lbox"
GOSUB listbox_changes
IF changecount=0 THEN RETURN

LET win_trade_select.selected_sn_lbox$=list1$
LET win_trade_select.available_sn_lbox$=list2$
LET win_trade_select$=fngb__put_fields$(win_id_trade_select$,win_trade_select$,"available_sn_lbox,selected_sn_lbox")

[Event Win=117 ID=106 Code=B <PUSH_BUTTON> (W117_C106_PUSH_BUTTON)]
REM ' Remove all button

LET ctl_function=7
GOSUB remove_btn_routine

[Event Win=117 ID=107 Code=B <PUSH_BUTTON> (W117_C107_PUSH_BUTTON)]
REM ' Exchange button - go from trade_select to trade page

LET ctl_id=NUM(FATTR(win_trade_select$,"selected_sn_lbox","ID"))
LET selected_sn_list$=CTRL(gb__sysgui,ctl_id,7,gb__win.trade_select)
GOSUB trade_page

[Event Win=117 ID=109 Code=B <PUSH_BUTTON> (W117_C109_PUSH_BUTTON)]
REM ' Go from trade_select Window to Main Window

LET focus_id=NUM(FATTR(win_main$,"trade_btn","ID"))
new_context=gb__win.main
old_context=gb__win.trade_select
gosub show_window

[Event Win=117 ID=119 Code=B <PUSH_BUTTON> (W117_C119_PUSH_BUTTON)]
REM ' Scan back button

LET scan_dir=-1
gosub available_sn_list_box

[Event Win=118 ID=0 Code=X <WIN_CLOSE> (W118_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=118 ID=1 Code=B <PUSH_BUTTON> (W118_C1_PUSH_BUTTON)]
REM ' Go from Trade window to cart window

rem ' used to special VAT rate during the pandemic, removed 01/14/2021
rem ' gosub blockGermanCustomers
rem ' if germanCustomer then return

rem ' create the cart window if needed
new_context=fnCreateWindowIfNeeded("105")

gosub new_dt_check
if !(ok_dt) then return
LET ctl_id=NUM(FATTR(win_trade$,"selected_sn_lbox","ID"))
LET templist$=CTRL(gb__sysgui,ctl_id,7,gb__win.trade)
LET selected_sn_list$=""
templist_sn_loop: 
LET p=POS($0A$=templist$,1,2)
IF p>20 THEN 
  IF templist$(1,1)<>"(" THEN LET selected_sn_list$=selected_sn_list$+templist$(1,20)+$0A$
  LET templist$=templist$(p+1)
  GOTO templist_sn_loop
FI 

GOSUB get_itemlist
IF items=0 THEN RETURN
GOSUB trade_newitem
LET trade_window=0
GOSUB trade_price
IF !(ok) THEN 
  PRINT (gb__sysgui)'SETCURSOR'(0)
  junk$="M5"+$0a$+begin_dt$+$0a$+end_dt$+$0a$
  mb_mode=0
  gosub translate_mbox
  RETURN
fi

REM 'Build list of sn's that didn't change, remove from selected_sn_list$ so they don't get processed
LET nclist$=""
FOR n=0 TO nbr_trans
 IF POS("*NC"=type$[n]) THEN LET nclist$=nclist$+are83_snlist$[n]
NEXT n
IF nclist$<>"" THEN 
  LET templist$=""
  WHILE selected_sn_list$<>""
   LET p=POS($0A$=selected_sn_list$); IF p=0 THEN BREAK
   IF POS(selected_sn_list$(1,p-1)=nclist$)=0 THEN LET templist$=templist$+selected_sn_list$(1,p)
   LET selected_sn_list$=selected_sn_list$(p+1)
  WEND
  LET selected_sn_list$=templist$
FI 

LET selected=POS($0A$=selected_sn_list$,1,0)
IF selected=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN

LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"reference")
IF edit_action$="new" THEN 
  LET sn$=selected_sn_list$
  GOSUB init_cart_record
  LET sn$=""
  IF LEN(status$) THEN 
    PRINT (gb__sysgui)'SETCURSOR'(0)
    RETURN
  fi
FI 
LET ece11.serial_nbr$=FILL(20)
LET ece11.po_ref_number$=win_trade.reference$
gosub po_number_check
if p0 then return
LET ece11.item_number$=m_item$
LET ece11.qty=1
LET temp$="NS",ece11.sam_coverage$=temp$(sam_flag+1,1)
LET ece11.users=new_users[0],ece11.lic_property1$=new_lprop$[0]
LET ece11.users2=new_users[1],ece11.lic_property2$=new_lprop$[1]
if ece11.users=0 then
 LET ece11.users=ece11.users2,ece11.users2=0
 LET ece11.lic_property1$=ece11.lic_property2$,ece11.lic_property2$="  "
fi
LET ffl$=FATTR(ece11$,"available"),ffl=DEC(ffl$(10,2))
LET ece11.available$=FILL(ffl)
ece11.uncounted_flag$="N"
gosub upg_to

LET ece11.annual_dt$=fill(8)
if sam_flag then
  gosub renew_range
  if jul_renew=0 then jul_renew=jul_default
  if jul_renew>=jul_begin then ece11.annual_dt$=date(jul_renew:"%Yl%Mz%Dz") else ece11.annual_dt$=date(jul_begin:"%Yl%Mz%Dz")
fi
LET ece11$=FIELD(ece11$)
WRITE RECORD (ece11)ece11$

LET sncount=1
GOSUB clear_ece83
LET ffl$=FATTR(ece83$,"available"),ffl=DEC(ffl$(10,2))
LET ece83.available$=FILL(ffl)

write_ece83: 
LET p=POS($0A$=selected_sn_list$,1,sncount)
IF p>20 THEN 
  LET ece83.serial_nbr$=selected_sn_list$(p-20,20)
  LET ece83$=FIELD(ece83$)
  WRITE RECORD (ece83)ece83$
  LET sncount=sncount+1
  GOTO write_ece83
FI 
rem ' link in the end user data gathering panel
ec_hide_context=gb__win.trade
gosub get_end_user_data
print(gb__sysgui)'context'(gb__win.trade),'show'(0),

GOSUB init_cart
LET focus_id=NUM(FATTR(win_cart$,"Close","ID"))

old_context=gb__win.trade
gosub show_window

[Event Win=118 ID=1015 Code=B <PUSH_BUTTON> (W118_C1015_PUSH_BUTTON)]
REM ' Go from trade Window to Main Window
LET focus_id=NUM(FATTR(win_main$,"trade_btn","ID"))
new_context=gb__win.main
old_context=gb__win.trade
gosub show_window

[Event Win=118 ID=118 Code=N2:19 <LIST_SELECT> (W118_C118_LIST_SELECT)]
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"product")
LET temp$=win_trade.product$,temp=POS($FF$=temp$)
IF temp=0 THEN GOTO trade_product_end

LET temp=NUM(temp$(temp+1)),temp$=product_code_list$(temp*3+1,3)
IF temp$=product_code$ THEN GOTO trade_product_end

LET ilen=POS($0A$=itemlist$),items=POS($0A$=itemlist$,1,0)
FOR i=0 TO items-1
  LET product_code$=itemlist$(ilen*i+1,3)
  LET msg$="",lb_id=num(fattr(win_trade$,"product","ID"))
  GOSUB product_list
  IF POS(temp$=product_list$,3)=0 THEN LET i=items,msg$="**Can't change product "+product_code$+" to "+temp$
NEXT i

LET product_code$=temp$
IF msg$<>"" THEN 
  LET ok=0,win_trade.comments$=msg$+$0A$,win_trade.price$="",win_trade.listprice$=""
  LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"price,listprice,comments")
  GOTO trade_product_end
FI 

REM ' *** update platform list ***
LET temp_product_code$=product_code$,temp_platform_code$=platform_code$
lb_id=num(fattr(win_trade$,"platform","ID"))
GOSUB platform_list
LET win_trade.platform$=platform_desc_list$
LET ltcode$=license_code$,prdcode$=product_code$
lb_id=num(fattr(win_trade$,"license","ID"))
GOSUB license_list
LET license_code$=ltcode$
LET win_trade.license$=license_desc_list$
LET win_trade.oslevel$=""
LET win_trade.revision$=""
LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"platform,oslevel,revision,license")

LET std_cbox_id=NUM(FATTR(win_trade$,"sam_standard","ID"))

READ RECORD (csm01,KEY=firm_id$+product_code$,DOM=trade_product_end)csm01$
LET sam_required$=csm01.ctr_required$
IF sam_required$="R" THEN PRINT (gb__sysgui)'CHECK'(std_cbox_id)
PRINT (gb__sysgui)'DISABLE'(std_cbox_id)
IF sam_required$="A" THEN PRINT (gb__sysgui)'ENABLE'(std_cbox_id)
GOSUB trade_recalc

trade_product_end: 
PRINT (gb__sysgui)'SETCURSOR'(0)
if temp_platform_code$<>"" then gosub w118_c127_list_select
platform_code$=temp_platform_code$

[Event Win=118 ID=127 Code=N2:19 <LIST_SELECT> (W118_C127_LIST_SELECT)]
REM ' Notify Event - List Button Control - List Selection
PRINT (gb__sysgui)'SETCURSOR'(3)

LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"platform")
LET temp$=win_trade.platform$,temp=POS($FF$=temp$)
IF temp=0 THEN GOTO trade_platform_end

LET temp=NUM(temp$(temp+1)),temp$=platform_list$(temp*3+1,3)
IF temp$=platform_code$ THEN GOTO trade_platform_end

REM ' *** prepare os level list ***
LET platform_code$=temp$
LET temp_platform_code$=platform_code$,temp_os_level_code$=os_level_code$
lb_id=num(fattr(win_trade$,"oslevel","ID"))
GOSUB os_level_list
LET win_trade.oslevel$=os_level_desc_list$
LET win_trade.revision$=""
LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"oslevel,revision")
GOSUB trade_recalc

trade_platform_end: 
PRINT (gb__sysgui)'SETCURSOR'(0)
if temp_os_level_code$<>"" then gosub w118_c135_list_select
os_level_code$=temp_os_level_code$

[Event Win=118 ID=135 Code=N2:19 <LIST_SELECT> (W118_C135_LIST_SELECT)]
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"oslevel")
LET temp$=win_trade.oslevel$,temp=POS($FF$=temp$)
IF temp=0 THEN GOTO trade_os_level_end

LET temp=NUM(temp$(temp+1)),temp$=os_level_list$(temp*3+1,3)
IF temp$=os_level_code$ THEN GOTO trade_os_level_end
LET os_level_code$=temp$

REM ' *** prepare revision list ***
LET temp_os_level_code$=os_level_code$,temp_product_rev_code$=revision_code$
lb_id=num(fattr(win_trade$,"revision","ID"))
GOSUB revision_list
LET win_trade.revision$=revision_desc_list$
LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"revision")
GOSUB trade_recalc

trade_os_level_end: 
PRINT (gb__sysgui)'SETCURSOR'(0)
if temp_product_rev_code$<>"" then gosub w118_c138_list_select
LET revision_code$=temp_product_rev_code$

[Event Win=118 ID=138 Code=N2:19 <LIST_SELECT> (W118_C138_LIST_SELECT)]
REM ' Notify Event - List Button Control - List Select

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"revision")
LET temp$=win_trade.revision$,temp=POS($FF$=temp$)
IF temp=0 THEN GOTO trade_revision_end

LET temp=NUM(temp$(temp+1)),temp$=revision_list$(temp*3+1,3)
IF temp$=revision_code$ THEN GOTO trade_revision_end
LET revision_code$=temp$
GOSUB trade_recalc
gosub W118_C141_LIST_SELECT 

trade_revision_end: 
PRINT (gb__sysgui)'SETCURSOR'(0)

[Event Win=118 ID=141 Code=N2:19 <LIST_SELECT> (W118_C141_LIST_SELECT)]
REM ' Notify Event - List Button Control - List Selection

PRINT (gb__sysgui)'SETCURSOR'(3)
LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"license")
LET temp$=win_trade.license$,temp=POS($FF$=temp$)
IF temp=0 THEN GOTO trade_license_end

LET temp=NUM(temp$(temp+1)),temp$=license_list$(temp*3+1,3)
IF temp$=license_code$ THEN GOTO trade_license_end
LET license_code$=temp$
GOSUB trade_recalc

trade_license_end: 
PRINT (gb__sysgui)'SETCURSOR'(0)

[Event Win=118 ID=142 Code=f0 <LOST_FOCUS> (W118_C142_LOST_FOCUS)]
LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"ent_users,std_users")

ent_add=fnnum(win_trade.ent_users$)-default_ent_users
std_add=fnnum(win_trade.std_users$)-default_std_users
gosub trade_recalc
LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"comments,price,listprice")

[Event Win=118 ID=143 Code=f0 <LOST_FOCUS> (W118_C143_LOST_FOCUS)]
gb__event! = cast(BBjLostFocusEvent,bbjapi().getSysGui().getLastEvent())
gb__control! = gb__event!.getControl()

LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"ent_users,std_users")

change_SF_users = num(win_trade.std_users$)

if firm_id$ = "01" and change_SF_users > start_SF_users then
    sfUsersResponse = msgbox(sf_inc_message$,4 + 32,"Standard User Increase")
    if sfUsersResponse = 7 then
        win_trade.std_users$ = str(start_SF_users)
        win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"std_users")  
        gb__control!.focus()
        return
    fi
fi

ent_add=fnnum(win_trade.ent_users$)-default_ent_users
std_add=fnnum(win_trade.std_users$)-default_std_users
gosub trade_recalc
LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"comments,price,listprice")

[Event Win=118 ID=143 Code=f1 <GOT_FOCUS> (W118_C143_GOT_FOCUS)]
rem ' Control got focus
rem ' gb__event! = cast(BBjGainedFocusEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"std_users")
start_SF_users = num(win_trade.std_users$)

[Event Win=118 ID=145 Code=f0 <LOST_FOCUS> (W118_C145_LOST_FOCUS)]
rem ' Control lost focus
jul_renew=renew_dt!.getValue()
temp$=DATE(jul_renew:"%Mz%Dz")
if pos("0229"=temp$) then jul_renew=jul_renew+1
gosub renew_range
jul_sam_dt=fnjul(sam_dt$)
if jul_renew<jul_begin and jul_renew<>jul_sam_dt then
  gosub invalid_date
  jul_renew=jul_sam_dt
  PRINT (gb__sysgui)'flush'
  renew_dt!.focus()
fi

renew_dt!.setValue(jul_renew)
gosub trade_recalc
LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"comments,price,listprice")
RETURN

invalid_date:
  junk$="M6"+$0a$+begin_dt$+$0a$+end_dt$+$0a$
  mb_mode=64
  gosub translate_mbox
return

[Event Win=118 ID=145 Code=f1 <GOT_FOCUS> (W118_C145_GOT_FOCUS)]
rem ' Control got focus
jul_renew=renew_dt!.getValue()

[Event Win=118 ID=146 Code=b <TOOL_BUTTON> (W118_C146_PUSH_TOOL_BUTTON)]
rem ' Tool button operated

print(gb__sysgui)'flush'
renew_dt!.focus()
renew_dt!.calendar()

[Event Win=118 ID=2 Code=B <PUSH_BUTTON> (W118_C2_PUSH_BUTTON)]
REM ' Go from Trade window to trade_select
ctl_id=NUM(FATTR(win_trade$,"selected_sn_lbox","ID"))
templist$=CTRL(gb__sysgui,ctl_id,7,gb__win.trade)
selected_sn_list$=""
p=POS($0A$=templist$,1,2)
while p>20
  IF templist$(1,1)<>"(" THEN LET selected_sn_list$=selected_sn_list$+templist$(1,20)+$0A$
  templist$=templist$(p+1)
  p=POS($0A$=templist$,1,2)
wend

old_context=gb__win.trade
gosub change_to_trade_select
LET win_trade_select.selected_sn_lbox$=selected_sn_list$
LET win_trade_select$=fngb__put_fields$(win_id_trade_select$,win_trade_select$,"selected_sn_lbox")

[Event Win=118 ID=200 Code=B <PUSH_BUTTON> (W118_C200_PUSH_BUTTON)]
rem ' Push button operated

gosub trade_recalc

[Event Win=119 ID=0 Code=X <WIN_CLOSE> (W119_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=119 ID=1 Code=B <PUSH_BUTTON> (W119_C1_PUSH_BUTTON)]
LET win_send_rpt$=fngb__get_screen$(win_id_send_rpt$,win_send_rpt$)
IF win_send_rpt$.sn_rpt=0 and win_send_rpt$.ar_rpt=0 and win_send_rpt.ep_rpt=0 then
  junk$="M35"+$0a$,mb_mode=0;gosub translate_mbox
  RETURN
fi

if win_send_rpt$.ar_rpt then
    rem ' do that JasperReport in the browser
    
    asofDate$ = ""
    if cust_num$ = "001022" or cust_num$ = "002157" then
        asofDate$ = asofDate!.getText()
        if len(asofDate$) <> 10 then
            return
        else
            gooddate = 0
            x = jul(num(asofDate$(1,4),err=*next),num(asofDate$(6,2),err=*next),num(asofDate$(9,2),err=*next),err=*next); gooddate = 1
            if gooddate = 0 then
                return
            else
                asofDate$ = asofDate$(1,4) + asofDate$(6,2) + asofDate$(9,2)
            fi
        fi
    fi
    print (gb__sysgui)'SETCURSOR'(3)    
    gosub agedARReportJasper
    print (gb__sysgui)'SETCURSOR'(0)
else
        rem ' either the active serial number report or the expired perpeutal serial number report
        e_mail$=win_send_rpt.email$

        rem ' change any semi colons ; to commas in the email address (mulitple addresses)
        while pos(";"=e_mail$)
            p = pos(";"=e_mail$)
            e_mail$ = e_mail$(1, p - 1) + "," + e_mail$(p + 1)
        wend

        if cvs(e_mail$,3)="" or pos("@"=e_mail$)=0 then
          junk$="M36"+$0a$,mb_mode=0;gosub translate_mbox
          RETURN
        fi

        if win_send_rpt$.sn_rpt then
            PRINT (gb__sysgui)'SETCURSOR'(3)
            ok_id=num(fattr(win_send_rpt$,"ok","ID"))
            cancel_id=num(fattr(win_send_rpt$,"cancel","ID"))
            PRINT (gb__sysgui)'context'(gb__win.send_rpt),'disable'(ok_id,cancel_id)
            call "ec_open::job_queue"
            job_queue.firm_id$=firm_id$
            job_queue.customer_nbr$=cust_num$
            job_queue.e_mail$=e_mail$
            IF win_send_rpt$.sn_rpt then
              job_queue.job$="ACTIVE_SN"
            else
              job_queue.job$="AR_AGING"
            fi
            writerecord(job_queue)job_queue$
            close(job_queue)

            PRINT (gb__sysgui)'SETCURSOR'(0)
            PRINT (gb__sysgui)'context'(gb__win.send_rpt),'enable'(ok_id,cancel_id)
            junk$="M37"+$0a$,mb_mode=0;gosub translate_mbox
        else
            rem ' expired perpetual license report
            PRINT (gb__sysgui)'SETCURSOR'(3)
            ok_id=num(fattr(win_send_rpt$,"ok","ID"))
            cancel_id=num(fattr(win_send_rpt$,"cancel","ID"))
            PRINT (gb__sysgui)'context'(gb__win.send_rpt),'disable'(ok_id,cancel_id)
            call "perpetualLicExpireReport.src",e_mail$,firm_id$,cust_num$
            PRINT (gb__sysgui)'SETCURSOR'(0)
            PRINT (gb__sysgui)'context'(gb__win.send_rpt),'enable'(ok_id,cancel_id)  
        fi
fi

if asofDate > 0 then
    asofDate!.destroy()
    asofDate = 0
    asofDateLbl!.destroy()
    asofDateLbl = 0
fi

LET focus_id=NUM(FATTR(win_account$,"email","ID"))
old_context=gb__win.send_rpt
new_context=gb__win.account
print(gb__sysgui,err=*next)'context'(old_context),'move'(0,loc.x,loc.y)
gosub show_window

return

nolock:
if err=12 then 
  string outfile$,err=*next
  wait 1
  a=scall("chmod 666 "+outfile$+" 2>/dev/null")
fi
if err=0 then
  wait 1
  waited=waited+1
  if waited>10 then return
fi
retry

[Event Win=119 ID=2 Code=B <PUSH_BUTTON> (W119_C2_PUSH_BUTTON)]
rem ' Go from send_rpt to View_SN window 

LET focus_id=NUM(FATTR(win_account$,"email","ID"))
old_context=gb__win.send_rpt
new_context=gb__win.account
print(gb__sysgui,err=*next)'context'(old_context),'move'(0,loc.x,loc.y)
gosub show_window

[Event Win=120 ID=0 Code=X <WIN_CLOSE> (W120_C0_WIN_CLOSE)]
print (gb__sysgui)'context'(gb__event.context),'destroy'(0)

[Event Win=120 ID=1 Code=B <PUSH_BUTTON> (W120_C1_PUSH_BUTTON)]
rem ' create the cart window if needed
new_context=fnCreateWindowIfNeeded("105")
dump_context=fnCreateWindowIfNeeded("118")

gosub init_cart_record
IF LEN(status$) THEN return
win_renewal$=fngb__get_screen$(win_id_renewal$,win_renewal$)
gosub new_dt_check
if !(ok_dt) then return
ece11.po_ref_number$=win_renewal.reference$
gosub po_number_check
if p0 then return
ece11.serial_nbr$=win_renewal.sn$
ece11.item_number$=new_item$
ece11.qty=1
ece11.users=new_users[0],ece11.lic_property1$=new_lprop$[0]
ece11.users2=new_users[1],ece11.lic_property2$=new_lprop$[1]
if ece11.users=0 then
  ece11.users=ece11.users2,ece11.users2=0
  ece11.lic_property1$=ece11.lic_property2$,ece11.lic_property2$="  "
fi
ece11.sam_coverage$="N"
if pos(contract_type$="SM1") then ece11.sam_coverage$="S"
ece11.support_only$="N"
ece11.add_support=0
ece11.uncounted_flag$="N"
ece11.annual_dt$=date(jul_renew:"%Yl%Mz%Dz")
ffl$=FATTR(ece11$,"available"),ffl=DEC(ffl$(10,2))
ece11.available$=FILL(ffl)
ece11.modify_flag$="R"
gosub w120_c2_push_button
gosub edit_to_cart

[Event Win=120 ID=134 Code=f0 <LOST_FOCUS> (W120_C134_LOST_FOCUS)]
rem ' Control lost focus
jul_renew=renew_dt!.getValue()
if jul_renew<jul_begin then renew_dt!.setValue(jul_begin);jul_renew=jul_begin
temp$=DATE(jul_renew:"%Mz%Dz")
if pos("0229"=temp$) then jul_renew=jul_renew+1
sam_disc=1
gosub ec_price
if ok=0 then renew_dt!.setValue(jul_renew);return
gosub delete_non_renews
gosub total_price
if contract_type$="SM1" then comments$=comments$+renew_dt_info$
win_renewal.comments$=comments$
win_renewal.price$=CVS(STR(price:amount_mask$),3+64) 
win_renewal.listprice$=CVS(STR(listprice:amount_mask$),3+64) 
win_renewal$=fngb__put_fields$(win_id_renewal$,win_renewal$,"comments,price,listprice")
focus_id=NUM(FATTR(win_renewal$,"reference","ID"))
print(gb__sysgui)'focus'(focus_id)

[Event Win=120 ID=137 Code=b <TOOL_BUTTON> (W120_C137_PUSH_TOOL_BUTTON)]
rem ' Tool button operated

renew_dt!.focus()
renew_dt!.calendar()
print (gb__sysgui)'flush'

[Event Win=120 ID=2 Code=B <PUSH_BUTTON> (W120_C2_PUSH_BUTTON)]
rem - ???

old_context=gb__win.renewal
new_context=gb__win.view_sn
focus_id=0
rem ' print(gb__sysgui,err=*next)'context'(old_context),'move'(0,loc.x,loc.y)
gosub show_window


[Function (Available SN List Box)]
rem ' -----------------------------------------------------------------
rem ' Available SN List Box
rem ' -----------------------------------------------------------------

Available_SN_List_Box:

PRINT (gb__sysgui)'SETCURSOR'(3)
xreflist$=""
LET ctl_id=NUM(FATTR(win_trade_select$,"starting_sn","ID"))
LET sn_count=0,availablelist$=""
DIM start_sn$(20)
LET start_sn$(1)=CVS(CTRL(gb__sysgui,ctl_id,1,gb__win.trade_select),7)
LET last_sn$=start_sn$
LET ctl_id=NUM(FATTR(win_trade_select$,"selected_sn_lbox","ID"))
LET templist$=CTRL(gb__sysgui,ctl_id,7,gb__win.trade_select)

LET k$=firm_id$+cust_num$+start_sn$
READ RECORD (snm01,KNUM=1,DIR=scan_dir,KEY=k$,DOM=available_sn_read)snm01$
GOTO check_available_sn
available_sn_read: 
READ RECORD (snm01,DIR=scan_dir,END=available_sn_read_end)snm01$
check_available_sn: 
IF snm01.firm_id$<>firm_id$ OR snm01.customer_nbr$<>cust_num$ then goto available_sn_read_end
if snm01.active_flag$="N" OR POS(snm01.serial_nbr$=templist$) or POS(snm01.serial_nbr$(1,1)="19CT") THEN GOTO available_sn_read
rem 'check ds xref - don't list any special dataservers
read(sam2_ds_xref,key=snm01.serial_nbr$,knum=1,dom=*next);goto available_sn_read

READ RECORD (csm05,KEY=firm_id$+snm01.license_type$,DOM=available_sn_read)csm05$
IF csm05.online_flag$="N" THEN GOTO available_sn_read
IF csm05.expires$="Y" THEN GOTO available_sn_read
trd=0
READ(csm13,KEY=firm_id$+"D"+snm01.product$,DOM=*next)
while 1
  READ RECORD (csm13,END=*break)csm13d$
  IF pos(firm_id$+"D"+snm01.product$=csm13d$)<>1 THEN break
  IF pos(csm13d.type_of_sale$="TRD,EXC") THEN trd=1;break
wend
if trd=0 then goto available_sn_read
IF scan_dir=1 THEN LET availablelist$=availablelist$+snm01.serial_nbr$+$0A$ ELSE LET availablelist$=snm01.serial_nbr$+$0A$+availablelist$
xref=0
readrecord(sam2_ds_xref,key=snm01.serial_nbr$,knum=0,dom=*next)sam2_ds_xref$;xref=1
if xref then xreflist$=xreflist$+sam2_ds_xref$(1,40)+$0a$
LET sn_count=sn_count+1,last_sn$=snm01.serial_nbr$
IF sn_count>14 THEN GOTO available_sn_read_end
IF sn_count=1 THEN LET item$=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$,start_sn$=snm01.serial_nbr$,start_users=snm01.users
GOTO available_sn_read
available_sn_read_end: 
IF sn_count=0 THEN GOTO available_sn_list_box_end
LET index=0
LET availablelist$=availablelist$+$FF$+STR(index)
READ RECORD (snm01,KNUM=0,KEY=start_sn$,DOM=available_sn_list_box_end)snm01$
GOSUB start_sn_description

LET win_trade_select.selected_desc$=tmpdesc$
LET win_trade_select.available_sn_lbox$=availablelist$
LET win_trade_select.starting_sn$=last_sn$
LET win_trade_select$=fngb__put_fields$(win_id_trade_select$,win_trade_select$,"selected_desc,available_sn_lbox,starting_sn")

available_sn_list_box_end: 
PRINT (gb__sysgui)'SETCURSOR'(0)

return

[Function (Change to Item)]
rem ' -----------------------------------------------------------------
rem ' Change to Item
rem ' -----------------------------------------------------------------

Change_to_Item:

rem ' create the item window if needed
new_context=fnCreateWindowIfNeeded("104")

jul_base=jul_today
jul_default=jul_today+365
edit_action$="new"
win_item$=fngb__get_screen$(win_id_item$,win_item$),init_item=1
item_product_code$="",product_code$=""
item_platform_list$="",item_platform_code$="",platform_code$=""
item_os_level_list$="",item_os_level_code$="",os_level_code$=""
item_revision_list$="",item_revision_code$="",revision_code$=""
item_license_list$="",item_license_code$="",license_code$=""
LET temp$=""
if rent_item then item_product_code$="BAS",item_license_code$="RN1"
FOR temp=1 TO LEN(item_product_list$) STEP 3
  csm01.product$=item_product_list$(temp,3)
  if rent_item and csm01.product$<>item_product_code$ then continue
  csm01.description$=csm01.product$
  READ RECORD (csm01,KEY=firm_id$+csm01.product$,ERR=*next)csm01$
  temp$=temp$+CVS(csm01.description$,3)+$0A$
NEXT temp
temp$ = temp$ + $ff$ + str(-1)
LET win_item.product$=temp$
win_item.platform$=""
win_item.oslevel$=""
win_item.revision$=""
win_item.license$=""
LET win_item.item_number$=""
LET win_item.description$=""
LET win_item.quantity$="1"
LET win_item.users$="1"
win_item.users2$=""
LET win_item.reference$=""
LET win_item.price$=""
LET win_item.listprice$=""
LET win_item.comments$=""
LET win_item.sam_standard$="0"
LET win_item.renew_dt$=" "
LET win_item.runtime$="0"
LET win_item.virtualFlag$="0"
LET contract$=""
LET contract_type$=""
LET sam_active$=""

LET win_item$=fngb__put_screen$(win_id_item$,win_item$)
dim csm01$:fattr(csm01$)
gosub new_item_props

LET focus_id=NUM(FATTR(win_item$,"Close","ID"))
rem ' new_context=gb__win.item
rem ' old_context=gb__win.main
gosub show_window
renew_dt_id=num(fattr(win_item$,"renew_dt","ID"))
renew_dt_btn_id=num(fattr(win_item$,"renew_dt_btn","ID"))
renew_dt!=currentWindow!.getControl(renew_dt_id)
renew_dt!.setText(" ")
runtime_id=num(fattr(win_item$,"runtime","ID"))
virtualFlag_id=num(fattr(win_item$,"virtualFlag","ID"))
sam_id=num(fattr(win_item$,"sam_standard","ID"))
prd_id=num(fattr(win_item$,"product","ID"))
if rent_item then
  win_item.product$=win_item.product$+$FF$+"0"
  item_platform_code$="ALL"
  temp_product_code$=item_product_code$
  temp_platform_code$=item_platform_code$
  temp_os_level_code$=""
  lb_id=num(fattr(win_item$,"platform","ID"))
  gosub platform_list
  item_platform_list$=platform_list$
  win_item.platform$=platform_desc_list$
  lb_id=num(fattr(win_item$,"oslevel","ID"))
  gosub os_level_list
  item_os_level_list$=os_level_list$
  win_item.oslevel$=os_level_desc_list$ + $ff$ + str(-1) 
  temp_os_level_code$=""
  temp_product_rev_code$=item_revision_code$
  lb_id=num(fattr(win_item$,"revision","ID"))
  gosub revision_list
  item_revision_list$=revision_list$
  win_item.revision$=revision_desc_list$
  ltcode$=item_license_code$
  prdcode$=item_product_code$
  lb_id=num(fattr(win_item$,"license","ID"))
  gosub license_list
  item_license_list$=license_list$
  win_item.license$=license_desc_list$
  PRINT (gb__sysgui)'CONTEXT'(new_context),'hide'(users2_id,users2_lbl_id,sam_id,runtime_id),'disable'(prd_id),'enable'(renew_dt_btn_id,renew_dt_id)
  PRINT (gb__sysgui)'CONTEXT'(new_context),'enable'(virtualFlag_id)
  gosub update_item_price
  win_item$=fngb__put_screen$(win_id_item$,win_item$)
else
  PRINT (gb__sysgui)'CONTEXT'(new_context),'show'(users2_id,users2_lbl_id,sam_id,runtime_id)
  PRINT (gb__sysgui)'CONTEXT'(new_context),'disable'(renew_dt_id,renew_dt_btn_id,runtime_id,virtualFlag_id),'enable'(prd_id)
fi

return

[Function (Change to Trade Select)]
rem ' -----------------------------------------------------------------
rem ' Change to Trade Select
rem ' -----------------------------------------------------------------

Change_to_Trade_Select:

rem ' create the item window if needed
new_context=fnCreateWindowIfNeeded("117")

LET edit_action$="new"
LET win_trade_select.starting_sn$=""
LET win_trade_select.selected_desc$=""
LET win_trade_select.available_sn_lbox$=""
LET win_trade_select.selected_sn_lbox$=""
LET win_trade_select$=fngb__put_fields$(win_id_trade_select$,win_trade_select$,"starting_sn,selected_desc,available_sn_lbox,selected_sn_lbox")

LET focus_id=NUM(FATTR(win_trade_select$,"starting_sn","ID"))
gosub show_window

return

[Function (Check For Trade)]
rem ' -----------------------------------------------------------------
rem ' Check For Trade
rem ' -----------------------------------------------------------------

Check_For_Trade:

LET trade_tran=0
LET trade_window=0
GOSUB ece83_serial_numbers

IF selected_sn_list$="" THEN RETURN

LET trade_tran=1
DIM m_item$(20)
LET m_item$(1)=ece11.item_number$
LET sam_flag=POS(ece11.sam_coverage$="S")
if pos("E"=ece11.lic_property1$)=1 then 
  ent_users=ece11.users
  std_users=ece11.users2
else
  ent_users=ece11.users2
  std_users=ece11.users
fi
std_add=0,ent_add=0
LET current_rev$=m_item$(10,3)

temp$=ece11.annual_dt$
if fnnum(temp$) then
  jul_renew=fnjul(temp$)
else
  jul_renew=0
fi

IF pricecheck THEN 
  GOSUB get_itemlist
  std_add=std_users-default_std_users
  ent_add=ent_users-default_ent_users
  GOSUB trade_price
  LET comments$=commentlist$
FI 

return

[Function (Clear ECE83)]
rem ' -----------------------------------------------------------------
rem ' Clear ECE83
rem ' -----------------------------------------------------------------

Clear_ECE83:

LET ece83key$=firm_id$+cust_num$+user_code$+ece11.line_number$
ece83.firm_id$=firm_id$
ece83.customer_nbr$=cust_num$
ece83.user_code$=user_code$
ece83.line_number$=ece11.line_number$

READ (ece83,KEY=ece83key$,DOM=next_ece83)
next_ece83: 
LET k$=KEY(ece83,END=clear_ece83_end)
IF pos(ece83key$=k$)=1 THEN REMOVE (ece83,KEY=k$); GOTO next_ece83
clear_ece83_end: 

return

[Function (Close Files)]
rem ' -----------------------------------------------------------------
rem ' Close Files
rem ' -----------------------------------------------------------------

Close_Files:

IF LEN(chan$) THEN LET chan=NUM(chan$(1,4)),chan$=chan$(5); CLOSE (chan); GOTO close_files

return

[Function (Create Order)]
rem ' -----------------------------------------------------------------
rem ' Create Order
rem ' Order_Number$ must be set before calling this routine
rem ' -----------------------------------------------------------------

Create_Order: 

reset_list$=""
LET mailtext$="Order Number: "+order_number$+$0A$
IF CVS(user_code$,3)="" THEN user$="" ELSE user$=" "+CVS(user_code$,3)
LET mailtext$=mailtext$+"Customer Number: "+firm_id$+"-"+cust_num$+user$+" ("+CVS(arm01.cust_name$,3)+")" + $0A$
IF LEN(win_checkout_2.reference$) THEN LET mailtext$=mailtext$+"Purchase Order: "+win_checkout_2.reference$ + $0A$
IF LEN(contact$) THEN LET mailtext$=mailtext$+"Contact: "+contact$ + $0A$
reset_text$=mailtext$+$0A$
IF win_checkout_2.credit_card THEN LET mailtext$=mailtext$+"Bill to: "+fnobscure_cc$(cc$) + $0A$
LET mailtext$=mailtext$ + $0A$

REM ' ARE03 - order header
LET are03.firm_id$=firm_id$
LET are03.ar_type$="  "
LET are03.customer_nbr$=cust_num$
LET are03.order_number$=order_number$
LET are03.sequence_000$="000"
LET are03.invoice_type$="S"
LET are03.ord_inv_flag$="O"
LET are03.backord_flag$=" "
LET are03.invoice_date$=fndate$(jul_today)
LET are03.ar_ship_date$=fndate$(jul_today+1)

LET ship_via$=FILL(10)+"UPS Int'l UPS 1 Day UPS 2 Day UPS 3 Day "

IF media THEN LET are03.ar_ship_via$=ship_via$(POS(freight_type$=" 123")*10+1,10) ELSE LET are03.ar_ship_via$=FILL(10)

LET are03.ar_inv_nbr$=FILL(7)
LET are03.ar_po_number$=win_checkout_2.reference$
LET are03.slspsn_code$=arm02.slspsn_code$

IF win_checkout_2.credit_card THEN LET are03.terms_code$="04",are03.rel_to_ship$="N" ELSE LET are03.terms_code$=arm02.terms_code$,are03.rel_to_ship$="Y"
rem ' sam_disc=pos(ece11.modify_flag$="RS")
sam_disc=pos(ece11.modify_flag$="R"); rem ' change because SAM discount was showing on invoices where it was the full discount used
gosub get_discount
LET are03.reserved_str_2$=FILL(9)
LET are03.disc_code$=discount_code$
LET are03.dist_code$=arm02.dist_code$
LET are03.ord_prt_flag$="N"
LET are03.ord_lock$="Y"; REM ' lock until all related records are updated
LET are03.message_code$=arm02.message_code$
LET are03.territory$=arm02.territory$
LET are03.list_prc_cde$="  "
LET are03.date_ordered$=fndate$(jul_today)
LET are03.tax_code$=arm02.tax_code$
LET are03.pricing_code$=arm02.pricing_code$
LET are03.ar_job_nbr$=FILL(10)
LET are03.ord_taken_by$="*"+user_code$
LET are03.cash_sale$="N"
LET are03.reprint_flag$=" "
LET are03.ord_cred_flg$=" "; REM ' R=Release, C=Credit Hold

IF ship_to THEN LET are03.shipto_nbr$="000099" ELSE LET are03.shipto_nbr$=FILL(6)

LET are03.tax_amount=tax
LET are03.freight_amt=freight
LET are03.discount_amt=0
LET are03.comm_percent=0

if canadian_table then
    amountin = taxable
    gosub convertToDollars
    are03.taxable_amt=amountout
else
    are03.taxable_amt=taxable
endif

LET are03.comm_amt=0

if canadian_table then
    amountin = total
    gosub convertToDollars
    are03.total_sales=amountout
else    
    are03.total_sales=total
endif

LET are03.total_cost=0

LET are03_key$=are03.firm_id$+are03.ar_type$+are03.customer_nbr$+are03.order_number$+are03.sequence_000$

LET are03$=FIELD(are03$)

WRITE RECORD (are03,KEY=are03_key$)are03$

if canadian_table then
	rem 'write the exchange rate record for this order
	dim art03_canada$:fattr(art03_canada$)
	art03_canada.firm_id$ = are03.firm_id$
	art03_canada.customer_nbr$ = are03.customer_nbr$
	art03_canada.invoice_date$ = are03.invoice_date$
	art03_canada.order_number$ = are03.order_number$
	art03_canada.ar_inv_nbr$ = fill(7)
	art03_canada.ratedate$ = canadian_exch.ratedate$
	art03_canada.sequence_nbr$ = canadian_exch.sequence_nbr$
	art03_canada.to_us_doll = canadian_exch.to_us_doll
	art03_canada.to_cana_doll = canadian_exch.to_cana_doll
	art03_canadaKey$ = art03_canada.firm_id$ + art03_canada.customer_nbr$ + art03_canada.invoice_date$ + art03_canada.order_number$
	write record(art03_canada,key=art03_canadaKey$)art03_canada$
endif


REM ' ARE33 - manual ship-to entry

IF !(ship_to) THEN GOTO no_ship_to

LET win_checkout_1$=fngb__get_screen$(win_id_checkout_1$,win_checkout_1$)

LET are33.firm_id$=firm_id$
LET are33.customer_nbr$=cust_num$
LET are33.order_number$=order_number$
LET are33.ship_to_name$=CVS(win_checkout_1.ship_to_name$,3)
LET are33.address_1$=CVS(win_checkout_1.ship_to_addr1$,3)
LET are33.address_2$=CVS(win_checkout_1.ship_to_addr2$,3)
LET are33.city$=CVS(win_checkout_1.ship_to_city$,3)
LET are33.state$=CVS(win_checkout_1.ship_to_state$,3)
LET are33.zip_code$=CVS(win_checkout_1.ship_to_zip$,3)
LET are33.country$=CVS(win_checkout_1.ship_to_country$,3)

LET are33_key$=are33.firm_id$+are33.customer_nbr$+are33.order_number$

LET are33$=FIELD(are33$)

WRITE RECORD (are33,KEY=are33_key$)are33$

LET mailtext$=mailtext$+"Ship to:" + $0A$
LET mailtext$=mailtext$+"   "+are33.ship_to_name$ + $0A$
LET mailtext$=mailtext$+"   "+are33.address_1$ + $0A$
LET mailtext$=mailtext$+"   "+are33.address_2$ + $0A$
LET mailtext$=mailtext$+"   "+are33.city$ + " "
LET mailtext$=mailtext$+are33.state$ + " "
LET mailtext$=mailtext$+are33.zip_code$ + " "
LET mailtext$=mailtext$+are33.country$ + $0A$ + $0A$

no_ship_to: 

REM ' ARE04 - pick ticket

LET are04.firm_id$=are03.firm_id$
LET are04.ord_inv_flag$=are03.ord_inv_flag$
LET are04.ar_type$=are03.ar_type$
LET are04.customer_nbr$=are03.customer_nbr$
LET are04.order_number$=are03.order_number$

LET are04_key$=are04.firm_id$+are04.ord_inv_flag$+are04.ar_type$+are04.customer_nbr$+are04.order_number$

LET are04$=FIELD(are04$)

WRITE RECORD (are04,KEY=are04_key$)are04$

REM ' ARE43 = open orders

LET are43.firm_id$=are03.firm_id$
LET are43.ar_type$=are03.ar_type$
LET are43.customer_nbr$=are03.customer_nbr$
LET are43.order_number$=are03.order_number$

LET are43_key$=are43.firm_id$+are43.ar_type$+are43.order_number$+are43.customer_nbr$

LET are43$=FIELD(are43$)

WRITE RECORD (are43,KEY=are43_key$)are43$

REM ' Now loop through the detail lines from the shopping cart

DIM detail$:"Line:c(4),Item:c(31),Users:c(5),Price:c(11),Qty:c(4),Ext:c(11)"
LET detail.Item$="Description"
LET detail.Users$="Users"
LET detail.Price$="     Price"
LET detail.Qty$=" Qty"
LET detail.Ext$=" Extension"
LET mailtext$=mailtext$+CVS(detail$,2) + $0A$ + $0A$

LET line_number=0
deactivated_list$=""
READ (ece11,KEY=firm_id$+cust_num$+user_code$,DOM=order_ece11_loop)

if canadian_table then canadian_total = 0

order_ece11_loop: 
if info(3,2)="thines" then escape
LET ece11_key$=KEY(ece11,END=order_ece11_endloop)
READ RECORD (ece11,KEY=ece11_key$)ece11$
gosub adjust_ece11_annual_dt
IF ece11.firm_id$<>firm_id$ OR ece11.customer_nbr$<>cust_num$ or ece11.user_code$<>user_code$ THEN GOTO order_ece11_endloop
IF reference$<>"" AND cvs(reference$,3)<>CVS(ece11.po_ref_number$,3) THEN GOTO order_ece11_loop
REM ' Stop generating the order if we're about to run out of line numbers
IF line_number+30>999 THEN GOTO order_ece11_endloop

DIM sn$(20)
LET sn$(1)=ece11.serial_nbr$
LET contract$="",xday=0,duration=365
LET pricecheck=1,new_sn$="",ds_xref$=""
GOSUB check_for_trade
IF trade_tran THEN GOTO skip_price

GOSUB sn_ec_price_setup
LET sam_flag=POS(ece11.sam_coverage$="S")
GOSUB ece11_ec_price
REM 'sam_required$ & duration & xday are set in ece11_ec_price
dim t_users[nbr_trans],t_desc$[nbr_trans]
trn=0
uc$=comments$+$0a$
while trn<=nbr_trans
 u$="",u=pos($0a$=uc$),t_users[trn]=ece11.users+ece11.users2
 if u then 
   u$=cvs(uc$(1,u),3),uc$=uc$(u+1)
   if pos("discount"=u$) or pos("Rabatt"=u$) then u$=""
   desc$=u$
 fi
 u=pos(","=u$),u1=pos("user"=u$)
 if u and u<u1 then u$=cvs(u$(u+1,u1-u-1),3),t_users[trn]=fnnum(u$)
 t_desc$[trn]=type$[trn](5)
 p=pos("  "=desc$);if p>1 then desc$=desc$(1,p-1)
 if pos("ADD"=type$[trn])=1 then t_desc$[trn]=desc$
 trn=trn+1
wend

skip_price: 
REM ' Skip this shopping cart line if we can't calculate a price
IF POS("**"=comments$)=1 OR type$[0]="" THEN GOTO order_ece11_loop

REM ' I think this is where I need to initialize serial numbers array
DIM hold_sn$[1:ece11.qty]

rem ' reset the maxSamBuyBack transaction flag
maxSamBuyBack = 0

REM ' can be many detail lines for each ECE11 record
LET last_line=nbr_trans
FOR line=0 TO last_line
LET line_number=line_number+10
LET line_number$=STR(line_number:"000")

REM 'CSM07 -Retrieve Type Of Sale record - skip this line if not found
READ RECORD (csm07,KEY=firm_id$+type$[line](1,3),DOM=*continue)csm07$

REM ' IVM01 - skip this line if not found
ivm_item$=type$[line](5)
gosub ivm_item
if ivmok=0 then continue

rem ' bypass line if REINSFEE, (RIF) and amount = 0
if cvs(ivm_item$,3) = "REINSFEE" and price[line] = 0 then 
    maxSamBuyBack = 1
    continue
endif

LET detail$=line_number$+" "+csm07.description$
LET mailtext$=mailtext$+CVS(detail$,2) + $0A$

LET detail$="    "+CVS(ivm01.item_desc$,2) + $0A$
LET qty=ece11.qty
IF trade_tran THEN LET qty=t_qty[line]
IF type$[line](1,2)="TS" THEN 
  qty=ece11.add_support
  detail$=""
  rpos=pos(ece11.reset_code$=reset_code_list$,2)
  if rpos then
    reset_list$=reset_list$+"Reset "+ece11.serial_nbr$+$0A$
    rr=pos($0a$=reset_reason_list$,1,int(rpos/2))
    if rr then
      rreason$=reset_reason_list$(rr+1)
      rr=pos($0a$=rreason$)
      if rr then reset_list$=reset_list$+rreason$(1,rr-1)+$0A$
    fi
  fi
fi
LET mailtext$=mailtext$+detail$

DIM detail$:FATTR(detail$)
p=pos($0a$=t_desc$[line])
if p>1 then t_desc$[line]=t_desc$[line](1,p-1)
p=pos("USERS "=cvs(t_desc$[line],4))
if p then p=p+6 else p=1
LET detail.Item$=t_desc$[line](p)
LET detail.Users$=STR(t_users[line]:"####-")
if t_desc$[line]<>type$[line](5) or pos("TS"=type$[line])=1 then detail.users$=""
LET detail.Price$=CVS(STR(price[line]/qty:"#######.00-"),64)
LET detail.Qty$=STR(qty:"###0")
LET detail.Ext$=CVS(STR(price[line]:"#######.00-"),64)
LET mailtext$=mailtext$+CVS(detail$,2) + $0A$

REM ' ARE13 - Order Line Detail

LET are13.firm_id$=are03.firm_id$
LET are13.ar_type$=are03.ar_type$
LET are13.customer_nbr$=are03.customer_nbr$
LET are13.order_number$=are03.order_number$
LET are13.line_number$=line_number$
LET are13.line_code$="S"
LET are13.man_price$="N"
LET are13.product_type$=ivm01.product_type$
LET are13.pull_assmble$="P"
LET are13.warehouse_id$=ivs01.warehouse_id$

LET are13.item_number$=type$[line](5)
rem ' if we have a max sam buyback then change the item number to UPGRADE
if maxSamBuyBack and cvs(are13.item_number$,3) = "SAMBUYBACK" then 
    are13.item_number$ = "UPGRADE" + fill(13," ")
    maxSamBuyBack = 0
endif

LET are13.order_memo$=FILL(40)
LET are13.est_shp_date$=fndate$(jul_today+1)
LET are13.commit_flag$="Y"
LET are13.pick_flag$=" "
LET ffl$=FATTR(are13$,"reserved_str_2"),ffl=DEC(ffl$(10,2))
LET are13.reserved_str_2$=FILL(ffl)
LET are13.unit_cost=0

LET are13.unit_price=price[line]/qty

if canadian_table then
    amountin = are13.unit_price
    gosub convertToDollars
    are13.unit_price=amountout
endif

LET are13.qty_ordered=qty
LET are13.qty_backord=0
LET are13.qty_shipped=qty
LET are13.std_list_prc=0

LET are13.ext_price=price[line]

if canadian_table then
    amountin = are13.ext_price
    gosub convertToDollars
    are13.ext_price=amountout
endif

arm10e.taxable_flag$="Y"
READ RECORD (arm10e,KEY=firm_id$+"ES")arm10e$
IF arm10e.taxable_flag$="Y" AND ivm01.taxable_flag$="Y" THEN LET are13.taxable_amt=price[line] ELSE LET are13.taxable_amt=0

if canadian_table and are13.taxable_amt <> 0 then
    amountin = are13.taxable_amt
    gosub convertToDollars
    are13.taxable_amt=amountout
endif

LET are13.disc_percent=0
LET are13.comm_percent=0
LET are13.comm_amt=0
LET are13.spl_comm_pct=0
LET are13.disc_cust=0

LET are13_key$=are13.firm_id$+are13.ar_type$+are13.customer_nbr$+are13.order_number$+are13.line_number$

LET are13$=FIELD(are13$)

WRITE RECORD (are13,KEY=are13_key$)are13$

REM ' ARE07 = open order lines (items)

LET are07.firm_id$=are13.firm_id$
LET are07.warehouse_id$=are13.warehouse_id$
LET are07.item_number$=are13.item_number$
LET are07.ar_type$=are13.ar_type$
LET are07.order_number$=are13.order_number$
LET are07.line_number$=are13.line_number$
LET are07.customer_nbr$=are13.customer_nbr$

LET are07_key$=are07.firm_id$+are07.warehouse_id$+are07.item_number$+are07.ar_type$+are07.order_number$+are07.line_number$+are07.customer_nbr$

LET are07$=FIELD(are07$)

WRITE RECORD (are07,KEY=are07_key$)are07$

REM ' ARE73 - order config record
dim are73$:fattr(are73$)
LET are73.firm_id$=are13.firm_id$
LET are73.ar_type$=are13.ar_type$
LET are73.customer_nbr$=are13.customer_nbr$
LET are73.order_number$=are13.order_number$
LET are73.line_number$=are13.line_number$
IF media THEN LET are73.media_type$="CDR" ELSE LET are73.media_type$="N/A"
LET are73.type_of_sale$=type$[line](1,3); REM 'NEW ADD UPD UNC UG4 PLX SM1 TRD
rem ' handle virtual license
if cvs(ece11.available$,3) = "VIR" and are73.type_of_sale$ = "NEW" then are73.media_type$ = "VIR"
if cvs(new_lprop$[0]+new_lprop$[1],3)<>"" then LET are73.odbc_rw$="W" else are73.odbc_rw$=" "

LET are73.fixed_float$="F"
temp$=""
if ece11.users and ece11.lic_property1$<>"  " then temp$=str(ece11.users)+" "+ece11.lic_property1$
if ece11.users2 and ece11.lic_property2$<>"  " then temp$=temp$+"  "+str(ece11.users2)+" "+ece11.lic_property2$
if pos(are73.type_of_sale$="SM1,TSI,ADD,RIF")=0 and temp$<>"" then mailtext$=mailtext$+fill(4)+"User detail: "+temp$ + $0A$
LET are73.exp_type$="   "
LET are73.exp_days_dt$=fill(8)
bbjrev$="";read (csm04,key=firm_id$+"CUR",dom=*next)*,bbjrev$
LET are73.cur_rev$=cvs(bbjrev$,3)
LET ffl$=FATTR(are73$,"dealer_str"),ffl=DEC(ffl$(10,2))
LET are73.dealer_str$=FILL(ffl)
LET are73.media_qty=media
LET are73.users=ece11.users
LET are73.users2=ece11.users2
rem 'set to T to indicate users are total new users- used in BSN.20,flexlic.bbx
LET are73.available1$="T" 
LET are73.available2$=" "
if pos(type$[line](1,3)="NEW,ADD,RNW")=0 and ece11.users2=0 then
  LET are73.users=t_users[line]
  LET are73.available1$=" " 
fi
sam_renew$=""

if pos("SM"=type$[line])=1 then
  if cvs(ece11.lic_property1$+ece11.lic_property2$,3)<>"" then
    p$=ece11.lic_property1$
    for u=1 to 2
      xx=new_users[0]*(pos(p$=new_lprop$[0])=1)+new_users[1]*(pos(p$=new_lprop$[1])=1)-cur_users[0]*(pos(p$=cur_lprop$[0])=1)-cur_users[1]*(pos(p$=cur_lprop$[1])=1)
      if xx then if u=1 then are73.users=xx else are73.users2=xx*(cvs(p$,3)<>"")
      p$=ece11.lic_property2$
    next u
    are73.available1$=" "
  fi
  if jul_renew then sam_renew$="SAM Annual  "+date(jul_renew:"%D %Ms %Yl")
fi 
if are73.users then LET are73.lic_property1$=ece11.lic_property1$
if are73.users2 then LET are73.lic_property2$=ece11.lic_property2$
LET are73.contract$=FILL(6)
LET temp$=type$[line](1,3)
IF pos(temp$="SM1,TRD,EXC,RNW") or (temp$="NEW" and rent_item) THEN 
  GOSUB get_sam_contract
  LET are73.contract$=contract$
  if rent_item then sam_renew$="Rental through "+date(jul_renew:"%D %Ms %Yl")
FI 

LET are73_key$=are73.firm_id$+are73.ar_type$+are73.customer_nbr$+are73.order_number$+are73.line_number$

LET are73$=FIELD(are73$)

WRITE RECORD (are73,KEY=are73_key$)are73$

LET media=0; REM ' only set media type in the first line of the order

REM ' ARE83 - license activity record(s)
LET license_seq=1; REM ' always 001
LET license_seq$=STR(license_seq:"000")
LET sequence_nbr=0; REM ' increment for each activity (1 or 3)

IF trade_tran THEN LET tmpsnlist$=are83_snlist$[line]

if pos(type$[line](1,3)="TRD,EXC") AND sam_contract$<>"" then
  DIM oldsmc01$:FATTR(smc01$)
  READ RECORD (smc01,KEY=sam_contract$(1,6),DOM=*break)oldsmc01$
  LET smc01.contr_start$=oldsmc01.contr_start$
  LET smc01.e_mail$=oldsmc01.e_mail$
  let smc01.invoiced_flag$=oldsmc01.invoiced_flag$
  LET smc01$=FIELD(smc01$)
  WRITE RECORD (smc01)smc01$
fi

REM ' ===================================
REM ' Allow for qty>1
REM ' ===================================

LET item_qty=are13.qty_ordered
IF type$[line](1,2)="TS" THEN LET item_qty=1

FOR item_count=1 TO item_qty

multi_are83_recs: 
  IF trade_tran THEN 
   LET sn$=new_sn$,p=POS($0A$=tmpsnlist$)
   IF p THEN LET sn$=PAD(tmpsnlist$(1,p-1),20),tmpsnlist$=tmpsnlist$(p+1)
   IF CVS(sn$,2)="" THEN CONTINUE
  FI 

  DIM are83$:FATTR(are83$)
  IF csm07.modify_snum$="N" THEN GOTO create_order_create_snum
  REM 'item_count should never be >1 if modifying (unless it's sam for BBj)
  REM 'modify_snum
  LET lic_count=0,lic_key$=""
  IF type$[line](1,1)="S" THEN IF !(trade_tran) AND are13.qty_ordered>1 THEN LET sn$=hold_sn$[item_count] FI ; GOTO skip_ec_an

IF pos(type$[line](1,3)="TSI,RIF") THEN GOTO skip_ec_an

CALL "ec_an",firm_id$,ece11.item_number$,sn$,order_number$,t_users[line],lic_key$,lic_count,ece11.uncounted_flag$

skip_ec_an: 
LET win_checkout_2.message$="S/N: "+sn$
LET win_checkout_2$=fngb__put_fields$(win_id_checkout_2$,win_checkout_2$,"message")
LET are83.action$="M"
LET are83.contract$=""
LET are83.sam_active$=""
LET are83.auth_code$=lic_key$
LET are83.license_cnt=lic_count
IF pos(type$[line](1,2)="SM,RN") THEN 
  if cvs(contract$,3)<>"" and item_count>1 then contract$="";gosub get_sam_contract 
  are83.contract$=contract$,are83.sam_active$=sam_active$
fi
IF type$[line]="NEW" and rent_item then are83.contract$=contract$
GOSUB write_are83

create_order_create_snum: 
IF csm07.create_snum$="N" THEN GOTO create_order_retire_snum
IF trade_tran THEN IF new_sn$<>"" THEN GOTO create_order_retire_snum
LET savesn$=sn$
CALL "ec_sn",firm_id$,ece11.item_number$,sn$,arm02.product_prefix$
CALL "ec_an",firm_id$,ece11.item_number$,sn$,order_number$,t_users[line],lic_key$,lic_count,ece11.uncounted_flag$

LET new_sn$=sn$
LET win_checkout_2.message$="S/N: "+sn$
LET win_checkout_2$=fngb__put_fields$(win_id_checkout_2$,win_checkout_2$,"message")
LET are83.action$="A"
LET are83.auth_code$=lic_key$
LET are83.license_cnt=lic_count
IF contract$<>"" THEN LET are83.contract$=contract$,are83.sam_active$=sam_active$
IF !(trade_tran) THEN LET hold_sn$[item_count]=sn$
GOSUB write_are83

REM 'Reset sn to existing sn from ece11 or tmpsnlist for deactivation
IF CVS(savesn$,3)<>"" THEN LET sn$=savesn$

create_order_retire_snum: 
IF csm07.retire_snum$="N" THEN GOTO create_order_done_detail
LET are83.action$="D"
LET are83.auth_code$=""
LET are83.license_cnt=0
LET are83.contract$="",are83.sam_active$=""

GOSUB write_are83
IF CVS(new_sn$,3)<>"" THEN LET sn$=new_sn$

create_order_done_detail: 
IF trade_tran AND POS($0A$=tmpsnlist$) THEN GOTO multi_are83_recs
REM ' ====================================
REM ' Allow for qty>1 in the shopping cart
REM ' ====================================
NEXT item_count

REM ' ====================================
REM ' The shopping cart record might generate many transactions (e.g. UPD + ADD + SAM)
REM ' ====================================
NEXT line

REM ' don't remove this until at least 3/31/2002 - maybe not then
IF promo_discount THEN GOSUB credit_promo

if ece11.modify_flag$="R" then
  call "ec_open::job_queue"
  job_queue.firm_id$=firm_id$
  job_queue.customer_nbr$=cust_num$
  job_queue.e_mail$=smc01.e_mail$
  job_queue.job$="RNWSAM"+date(0:"%mz%sz")
  job_queue.available$=usrlang$+contract$
  writerecord(job_queue)job_queue$
  close(job_queue)
fi
REMOVE (ece11,KEY=ece11_key$); REM ' remove from shopping cart
REMOVE (eceeu,key=ece11_key$,DOM=*next)
GOSUB clear_ece83
GOTO order_ece11_loop

order_ece11_endloop: 
rem 'Now go through the order and remove are83 records w/action=M if they are going to be deactivated anyway
ok=1
read(are83,key=are03_key$(1,17),dom=*next)
while ok
 are83key$=key(are83,end=*break)
 if are03_key$(1,17)<>are83key$(1,17) then ok=0;break
 readrecord(are83,key=are83key$)are83$
 if are83.action$<>"M" then continue
 if pos(are83.serial_nbr$=deactivated_list$)=0 then continue
 remove(are83,key=are83key$)
 temp$="   Modify     "+are83.serial_nbr$ + $0A$
 p=pos(temp$=mailtext$)
 while p
  mailtext$=mailtext$(1,p-1)+mailtext$(p+len(temp$))
  p=pos(temp$=mailtext$)
 wend
wend

DIM detail$:FATTR(detail$)
LET detail.Item$="Subtotal"
LET detail.Ext$=CVS(STR(subtotal:"#######.00-"),64)
LET mailtext$=mailtext$+CVS(detail$,2) + $0A$

IF tax THEN LET detail.Item$="Tax"; LET detail.Ext$=CVS(STR(tax:"#######.00-"),64); LET mailtext$=mailtext$+CVS(detail$,2) + $0A$

IF freight THEN LET detail.Item$="Freight"; LET detail.Ext$=CVS(STR(freight:"#######.00-"),64); LET mailtext$=mailtext$+CVS(detail$,2) + $0A$

LET detail.Item$="Total"
LET detail.Ext$=CVS(STR(total:"#######.00-"),64)
LET mailtext$=mailtext$+CVS(detail$,2) + $0A$ + $0A$
LET mailtext$=mailtext$+disc_incl$ + $0A$

LET are03.ord_lock$="N"; REM ' unlock the order header
LET are03$=FIELD(are03$)
WRITE RECORD (are03,KEY=are03_key$)are03$

LET win_checkout_1.Media$=""
LET win_checkout_1.Ship_To_Name$=CVS(tmm01.cont_firm$,3)
LET win_checkout_1.Ship_To_Addr1$=CVS(tmm01.address_1$,3)
LET win_checkout_1.Ship_To_Addr2$=CVS(tmm01.address_2$,3)
LET win_checkout_1.Ship_To_City$=CVS(tmm01.city$,3)
LET win_checkout_1.Ship_To_State$=CVS(tmm01.state$,3)
LET win_checkout_1.Ship_To_Zip$=CVS(tmm01.zip_code$,3)
LET win_checkout_1.Ship_To_Country$=CVS(country.country_name$,3)

LET freight_zone$=country.zone$
IF firm_id$="02" THEN LET freight_zone$=country.zone2$
if tmm01.country_code$="US" then LET freight_zone$="001"
LET freight_type$=standard_freight_type$
LET ship_to=0; REM ' don't write ARE33 ship-to record
LET win_checkout_1$=fngb__put_screen$(win_id_checkout_1$,win_checkout_1$)

LET win_checkout_2.message$="Order #"+order_number$
LET win_checkout_2$=fngb__put_fields$(win_id_checkout_2$,win_checkout_2$,"message")
no_rif=0,rent_item=0

gosub buildFeatureList
if featureOCList$ <> "" then
    mailtext$ = mailtext$ + featureOCList$
fi

PRINT (gb__sysgui)'SETCURSOR'(0)

junk$="M11"+$0a$+order_number$+$0a$
mb_mode=0
gosub translate_mbox
RETURN

Credit_promo: 
arm10e.code_desc$="Discount"
arm10e.taxable_flag$="Y"
readrecord(arm10e,key=firm_id$+"E"+promo_line_code$,dom=*next)arm10e$
LET line_number=line_number+10
LET line_number$=STR(line_number:"000")
REM ' ARE13 - Order Line Detail
LET are13.line_number$=line_number$
LET are13.line_code$=promo_line_code$
LET are13.product_type$=FILL(3)
LET are13.item_number$=FILL(20)
LET are13.order_memo$=arm10e.code_desc$
LET are13.est_shp_date$=fndate$(jul_today+1)
LET are13.unit_price=-(promo_discount/ece11.qty)
LET are13.ext_price=-promo_discount
IF arm10e.taxable_flag$="Y" THEN LET are13.taxable_amt=-promo_discount ELSE LET are13.taxable_amt=0
LET are13_key$=are13.firm_id$+are13.ar_type$+are13.customer_nbr$+are13.order_number$+are13.line_number$
LET are13$=FIELD(are13$)
WRITE RECORD (are13,KEY=are13_key$)are13$

REM ' ARE07 = open order lines (items)
LET are07.line_number$=are13.line_number$
LET are07_key$=are07.firm_id$+are07.warehouse_id$+are07.item_number$+are07.ar_type$+are07.order_number$+are07.line_number$+are07.customer_nbr$
LET are07$=FIELD(are07$)
WRITE RECORD (are07,KEY=are07_key$)are07$

LET detail$=line_number$+" "+are13.order_memo$
LET mailtext$=mailtext$+CVS(detail$,2) + $0A$

DIM detail$:FATTR(detail$)
LET detail.Item$=""
LET detail.Users$=FILL(5)
LET detail.Price$=CVS(STR(-(promo_discount/ece11.qty):"#######.00-"),64)
LET detail.Qty$=STR(ece11.qty:"###0")
LET detail.Ext$=CVS(STR(-promo_discount:"#######.00-"),64)
LET mailtext$=mailtext$+CVS(detail$,2) + $0A$

return

[Function (Delete CC)]
rem ' -----------------------------------------------------------------
rem ' Delete CC
rem ' -----------------------------------------------------------------

Delete_CC:

LET win_credit_card$=fngb__get_screen$(win_id_credit_card$,win_credit_card$)
LET win_credit_card.visa=0
LET win_credit_card.mastercard=0
LET win_credit_card.american_express=0

IF POS("V"=cc_rec.cc_type$)=1 THEN LET win_credit_card.visa=1
IF POS("M"=cc_rec.cc_type$)=1 THEN LET win_credit_card.mastercard=1
IF POS("A"=cc_rec.cc_type$)=1 THEN LET win_credit_card.american_express=1

LET win_credit_card.number$=cc_rec.cc_num$
LET win_credit_card.name$=cc_rec.cc_name$

LET temp$=win_credit_card.expiry_month$+$FF$,temp=POS($FF$=temp$)
LET index=cc_rec.cc_mm-1
LET temp$=temp$(1,temp)+STR(index)
LET win_credit_card.expiry_month$=temp$

LET temp$=win_credit_card.expiry_year$+$FF$,temp=POS($FF$=temp$)
LET index=cc_rec.cc_yyyy-NUM(DATE(0:"%Yl"))
LET temp$=temp$(1,temp)+STR(index)
LET win_credit_card.expiry_year$=temp$

LET win_credit_card$=fngb__put_screen$(win_id_credit_card$,win_credit_card$)

LET focus_id=NUM(FATTR(win_credit_card$,"Delete","ID"))
new_context=gb__win.credit_card
old_context=gb__win.account
gosub show_window

return

[Function (Disable Checkout 2 CC Info)]
rem ' -----------------------------------------------------------------
rem ' Disable Checkout 2 CC Info
rem ' -----------------------------------------------------------------

Disable_Checkout_2_CC_Info:

LET save_context=DEC(CTRL(gb__sysgui))

LET credit_card_id=NUM(FATTR(win_checkout_2$,"Credit_Card","ID"))
LET split_payment_id=NUM(FATTR(win_checkout_2$,"SplitPaymentBtn","ID"))
LET credit_card_list_id=NUM(FATTR(win_checkout_2$,"Credit_Card_List","ID"))
LET visa_id=NUM(FATTR(win_checkout_2$,"Visa","ID"))
LET mastercard_id=NUM(FATTR(win_checkout_2$,"MasterCard","ID"))
LET american_express_id=NUM(FATTR(win_checkout_2$,"American_Express","ID"))
LET number_id=NUM(FATTR(win_checkout_2$,"Number","ID"))
LET name_id=NUM(FATTR(win_checkout_2$,"Name","ID"))
LET expiry_month_id=NUM(FATTR(win_checkout_2$,"Expiry_Month","ID"))
LET expiry_year_id=NUM(FATTR(win_checkout_2$,"Expiry_Year","ID"))
LET save_credit_card_id=NUM(FATTR(win_checkout_2$,"Save_Credit_Card","ID"))
LET ccAmount1_id=NUM(FATTR(win_checkout_2$,"ccAmount1","ID"))

REM ' if this is a zero-cost order, don't allow credit card payment

gosub take_down_split_payment

IF total=0 or firm_id$<>"01" or basCanadian THEN 
    PRINT (gb__sysgui)'CONTEXT'(gb__win.checkout_2),'DISABLE'(credit_card_id),'DISABLE'(split_payment_id),'DISABLE'(credit_card_list_id),'DISABLE'(visa_id),'DISABLE'(mastercard_id),'DISABLE'(american_express_id),'DISABLE'(number_id),'DISABLE'(name_id),'DISABLE'(expiry_month_id),'DISABLE'(expiry_year_id),'DISABLE'(save_credit_card_id),'DISABLE'(save_credit_card_id),'DISABLE'(save_credit_card_id),'DISABLE'(ccAmount1_id),'CONTEXT'(save_context)
    
    splitPaymentBtn! = Cast(BBjRadioButton, BBjAPI().getSysGui().getWindow("Checkout 2").getControl(split_payment_id))
    splitPaymentBtn!.setSelected(0) 
    
    chkout2Message! = Cast(BBjStaticText, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Message"))
    chkout2Message!.setText("")
    
    ccAmount1! = Cast(BBjInputE, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("ccAmount1"))
    ccAmount1!.setText("")
    ccAmount1!.setEditable(0)

ELSE 
    PRINT (gb__sysgui)'CONTEXT'(gb__win.checkout_2),'ENABLE'(credit_card_id),'DISABLE'(split_payment_id),'DISABLE'(credit_card_list_id),'DISABLE'(visa_id),'DISABLE'(mastercard_id),'DISABLE'(american_express_id),'DISABLE'(number_id),'DISABLE'(name_id),'DISABLE'(expiry_month_id),'DISABLE'(expiry_year_id),'DISABLE'(save_credit_card_id),'DISABLE'(ccAmount1_id),'CONTEXT'(save_context)
    
    splitPaymentBtn! = Cast(BBjRadioButton, BBjAPI().getSysGui().getWindow("Checkout 2").getControl(split_payment_id))
    splitPaymentBtn!.setSelected(0)
    
    chkout2Message! = Cast(BBjStaticText, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Message"))
    chkout2Message!.setText("")
    
    ccAmount1! = Cast(BBjInputE, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("ccAmount1"))
    ccAmount1!.setText("")
    ccAmount1!.setEditable(0)

FI

if (firm_id$ <> "01" or basCanadian) and coverCCControlsID = 0 then
    chkoutwindow! = sysgui!.getWindow(gb__win.checkout_2)
    coverCCControls! = chkoutwindow!.addCEdit(window!.getAvailableControlID(), 400, 50, 355, 380, "")
    coverCCControls!.setDrawBorder(0)
    coverCCControls!.setFocusable(0)
    coverCCControls!.setOpaque(1)
    backcolor! = chkoutwindow!.getBackColor()
    coverCCControls!.setBackColor(backcolor!)
    coverCCControlsID = coverCCControls!.getID()
else
    if firm_id$ = "01" and !basCanadian and coverCCControlsID <> 0 then
        rem ' remove the cover up
        coverCCControls!.destroy()
        coverCCControls! = null()
        coverCCControlsID = 0
    fi
fi
    
return

[Function (Disable Edits)]
rem ' -----------------------------------------------------------------
rem ' Disable Edits
rem ' -----------------------------------------------------------------

Disable_Edits:

temp_list$="product/platform/oslevel/revision/license/users/sam_standard/renew_dt/renew_dt_btn/runtime/no_rif/"
WHILE LEN(temp_list$)
  p=POS("/"=temp_list$)
  ctl$=temp_list$(1,p-1),temp_list$=temp_list$(p+1)
  ctl_id=NUM(FATTR(win_edit_sn$,ctl$,"ID"))
  x$=CTRL(gb__sysgui,ctl_id,8),disabled=DEC(x$)
  IF support_only=0 AND disabled THEN PRINT (gb__sysgui)'ENABLE'(ctl_id)
  IF support_only AND disabled=0 THEN PRINT (gb__sysgui)'DISABLE'(ctl_id)
WEND

return

[Function (Disable List Button)]
rem ' -----------------------------------------------------------------
rem ' Disable List Button
rem ' -----------------------------------------------------------------

Disable_List_Button:

rem 'disable list button if no choices
if new_context=gb__win.item or new_context=gb__win.trade or new_context=gb__win.edit_sn then
  PRINT (gb__sysgui)'CONTEXT'(new_context)
  if lb_id then 
    PRINT (gb__sysgui)'enable'(lb_id)
    IF index=1 THEN PRINT (gb__sysgui)'disable'(lb_id) 
  fi
fi
lb_id=0

return

[Function (EC Price)]
rem ' -----------------------------------------------------------------
rem ' EC Price
rem ' -----------------------------------------------------------------

ec_price:

rem ' debuggin
if we_are_debuggin then
    print "entering ec_price sub-routine"
    print "sam_flag: ",sam_flag
    print "samfactor: ", samfactor
    print "jul_renew: ", date(jul_renew)
    print "jul_base: ", date(jul_base)
    print "jul_begin: ", date(jul_begin)
    print "jul_default: ",date(jul_default)
    print "sam_renew_status: ", sam_renew_status
    input "begin ec_price e=escape ",debuginput$:(""=epResume0,"e"=epEscape0)
    epEscape0: escape
    epResume0:
endif

gosub renew_range

rem ' debuggin
if we_are_debuggin then
    print "after gosub renew_range"
    print "sam_flag: ",sam_flag
    print "sam_factor: ", samfactor
    print "jul_renew: ",date(jul_renew)
    print "jul_base: ",date(jul_base)
    print "jul_begin: ",date(jul_begin)
    print "jul_default: ",date(jul_default)
    input "after renew_range e=escape ",debuginput$:(""=epResume00,"e"=epEscape00)
    epEscape00: escape
    epResume00:
endif

samfactor=sam_flag*(jul_renew-jul_base)*(jul_renew>=jul_begin)

xday$="0",xday$=stbl("buyback",err=*next)
xchk$=cvs(sn$,3)+":"+date(0:"%Y%Mz%Dz")+":"
px=pos(xchk$=xday$)
if px then xday$=xday$(px+len(xchk$))
xday=0,xday=num(xday$,err=*next)

cntr$=contract$
if sam_active$="N" and sam_renew_status>1 then sam_flag=0,cntr$=""
if sam_flag=0 then xday=0

gosub user_sort
gosub get_discount
if no_rif then new_item$(13,3)="EXP"

rem ' added check to see if we need a tier override kew 4/29/2009
rem ' fix for a problem found that calculated the upgrade at a lower tier when adding additional users
rem ' which should have pushed the tier to a higher level
to_cur_users = cur_users[0] + cur_users[1]
to_new_users = new_users[0] + new_users[1]

if sam_flag and cvs(cur_item$,3) = cvs(new_item$,3) and to_new_users > to_cur_users then
    xtra$=lang$+$0a$+str(disc_pct+partner_disc)+$0a$+str(add_tsi)+$0a$+str(to_new_users)+$0a$+"0"+$0a$+str(no_rif)+$0a$+str(sam_renew_status=20)+$0a$
else
    xtra$=lang$+$0a$+str(disc_pct+partner_disc)+$0a$+str(add_tsi)+$0a$+"0"+$0a$+"0"+$0a$+str(no_rif)+$0a$+str(sam_renew_status=20)+$0a$
fi

add_tsi=0
nbr_trans=0

rem ' debuggin
if we_are_debuggin then
    print "ec_price sub routine, first call to ec_price"
    print "sam flag, sam_factor, no_rif: ",sam_flag, samfactor, no_rif
    print "current: ",cur_item$,cur_users[all], cur_lprop$[all]
    print "new: ",new_item$,new_users[all],new_lprop$[all]
    print "comments: ",comments$
    print "xtra:",xtra$
    input "make the call ",*
endif

CALL "ec_price",firm_id$,cust_num$,qty,cur_item$,cur_users[all],cur_lprop$[all],new_item$,new_users[all],new_lprop$[all],type$[ALL],price[ALL],comments$,arm02,arm10i,csm01,csm02,csm03,csm04,csm05,csm07,csm10,csm13,ivm01,smc01,sam_flag,samfactor,cntr$,nbr_trans,xtra$

rem ' debuggin  
if we_are_debuggin then
    print "return from first call to ec_price"
    print "sam_factor: ", samfactor
    print "price [all]: ", price[all]
    print "type [all]: ", type$[all]
    print "comments: ",comments$
    input "return from call e=escape ",debuginput$:(""=epResume1,"e"=epEscape1)
    epEscape1: escape
    epResume1:
endif

xNewSam = 0
for nbr=0 to nbr_trans
    rem used in later calculation of sam buyback against the upgrade price
    rem ' use list price
    if pos("SM"= type$[nbr]) then xNewSam = price[nbr + nbr_trans + 1]
next nbr

LET ok=!(POS("**"=comments$)=1)
p=pos($0a$=comments$)
if p=0 then comments$=comments$+$0a$
if ok=0 then return

nlst=nbr_trans+1


if rent_item or pos("RN1"=cur_item$)=13 then
    rem ' do we need to adjust for a period longer than a year
    rem ' or a period of lees than a year if the transaction is an ADD
    
    prorateAdd = 0
    for myX = 0 to nbr_trans
        if pos("ADD" = type$[myX]) = 1 then 
            prorateAdd = 1
        fi
    next myX

    gosub prorate_rental_fee

    rem ' rn1factor=(jul_renew-jul_base)/365
    rem ' if rn1factor<=0 then rn1factor=1
    rem ' for nbr=0 TO nbr_trans
    rem '   price[nbr]=price[nbr]*rn1factor
    rem '   price[nbr+nlst]=price[nbr+nlst]*rn1factor
    rem ' next nbr
fi

rif_amt=0
for nbr=0 TO nbr_trans
  if pos("RIF"=type$[nbr]) then rif_amt=price[nbr + nbr_trans+ 1]
next nbr

xtra_sam=0,xtra_up=0,xhi=99999
if xday then
  rem ' xtra_sam=xhi
  rem ' xtra_up=xhi
  xloop=0
  rem 'calculate buyback twice if users changed, use lower amount
  while xloop<2
  xxd=xday

  dim xtype$[2],xprice[2],xu[2],xprop$[2],cu[2],lprop$[2]

  if xloop=0 then 
    cu[]=cur_users[]
    lprop$[]=cur_lprop$[] 
  else 
    cu[]=new_users[]
    lprop$[]=new_lprop$[]
  fi

  rem ' if doing a user change than use the higher user tier for calc
  if xloop=0 then
    utier = max(to_new_users, to_cur_users)
  else
    utier = 0
  fi

  xtra$=lang$+$0a$+str(disc_pct+partner_disc)+$0a$+"0"+$0a$+str(utier)+$0a$+"0"+$0a$

  xnbr_trans=0

rem ' debuggin
if we_are_debuggin then
    print "ec_price subroutine, second call to ec_price"
    print "current: ",xu[all], xprop$[all]
    print "new: ",cur_item$,cu[all],lprop$[all]
    print "xArrays: ",xtype$[all], xprice[all],xcomments$
    print "sam_flag: ",sam_flag," xxd: ",xxd," xnbr_trans ",xnbr_trans
    print "xtra:",xtra$
    input "make the call ",*
endif

  CALL "ec_price",firm_id$,cust_num$,qty,"",xu[all],xprop$[all],cur_item$,cu[all],lprop$[all],xtype$[ALL],xprice[ALL],xcomments$,arm02,arm10i,csm01,csm02,csm03,csm04,csm05,csm07,csm10,csm13,ivm01,smc01,sam_flag,xxd,"",xnbr_trans,xtra$

rem ' debuggin
if we_are_debuggin then
    print "return from second call to ec_price"
    print "xprice [all]: ", xprice[all]
    print "xtype [all]: ", xtype$[all]
    input "return from call e=escape ",debuginput$:(""=epResume2,"e"=epEscape2)
    epEscape2: escape
    epResume2:
endif

  rem 'calc SAM on extra days, find max update charge
  for tmp=0 to xnbr_trans
    rem 'use list price

    if pos("SM"=xtype$[tmp]) and xtra_sam=0 then 
        xtra_sam=xprice[tmp + xnbr_trans + 1]
    else
        if pos("SM"=xtype$[tmp]) and xtra_sam <> 0 then
            xtra_sam = min(xtra_sam, xprice[tmp + xnbr_trans + 1])
        fi
    fi

    if pos("NEW"=xtype$[tmp]) and xtra_up=0 then 
        xtra_up=xprice[tmp + xnbr_trans + 1]
    else
        if pos("NEW"=xtype$[tmp]) and xtra_up <> 0 then
            xtra_up = min(xtra_up, xprice[tmp + xnbr_trans + 1])
        fi
    fi
  next tmp

  if cur_users[0]=new_users[0] and cur_users[1]=new_users[1] then break
  xloop=xloop+1
  wend

  rem 'if SAM>max updt, then substitute lower amt

  xtra_up=xtra_up*.9
  sambuyback_ugd_sub = 0
    if xtra_up > 0 and xtra_up + xNewSam <= xtra_sam + rif_amt + xNewSam then 
    rem ' sam buy back is higher than the upgrade
    rem ' the SAM buy back becomes the upgrade price and the rif becomes 0
    xtra_sam = xtra_up
    rif_amt = 0
    sambuyback_ugd_sub = 1
  fi
fi

upg=-1,ad=0,sm=-1,dsxref_sam=0
dsc=1-(disc_pct+partner_disc)/100

rem ' do we have a SAM Buyback? Add a SAM BUY BACK trans
if xtra_sam > 0 then 
    rem ' build new arrays
    dim newType$[nbr_trans + 1]
    dim newPrice[(nbr_trans + 1) + (nbr_trans + 1) + 1]
    
    rem ' if (sambuyback_ugd_sub) and normal_disc <> disc_pct (sam_disc) then recalc at normal for the upgrade
    change_disc_to_normal = 0
    if sambuyback_ugd_sub and normal_disc <> disc_pct then
        change_disc_to_normal = 1
    fi
    
    for tmp=0 to nbr_trans
        newType$[tmp] = type$[tmp]
        newPrice[tmp] = price[tmp]
        if change_disc_to_normal and newPrice[tmp] <> price[tmp + nlst] then
            newPrice[tmp] = price[tmp + nlst] * (1 - ((normal_disc + partner_disc)/100))
        fi
        newPrice[tmp + nlst + 1] = price[tmp + nlst]
    next tmp

    if pos("BAS"=cur_item$)=1 then
        newType$[nbr_trans + 1]="UPD|SAMBUYBACK" + fill(20)
    else
        newType$[nbr_trans + 1]="UPD|SAMBUYBACKP5" + fill(20)
    fi
    newType$[nbr_trans + 1]=newType$[nbr_trans + 1](1,24)
    if change_disc_to_normal then
        newPrice[nbr_trans + 1]=xtra_sam * (1 - ((normal_disc + partner_disc)/100))
    else
        newPrice[nbr_trans + 1]=xtra_sam * (1 - ((disc_pct + partner_disc)/100))
    fi
    newPrice[nbr_trans + nlst + 2]=xtra_sam
    
    rem ' fix comments
    if sambuyback_ugd_sub then 
        newComment$ = "SAM Buy Back Max, "
    else
        newComment$ = "SAM Buy Back, "
    fi
    newComment$ = newComment$ + str(to_cur_users)
    if to_cur_users = 1 then 
        newComment$ = newComment$ + " user"
    else
        newComment$ = newComment$ + " users"
    fi
    comments$ = comments$ + newComment$ + $0A$

    rem ' now roll the new arrays into the existing arrays
    dim type$[nbr_trans + 1]
    dim price[(nbr_trans + 1) + (nbr_trans + 1) + 1]
    nbr_trans = nbr_trans + 1
    nlst = nbr_trans + 1
    for tmp = 0 to nbr_trans
        type$[tmp] = newType$[tmp]
        price[tmp] = newPrice[tmp]
        price[tmp + nlst] = newPrice[tmp + nlst]
    next tmp

fi

for tmp=0 to nbr_trans
  if len(type$[tmp])<4 then continue
  if pos("ADD"=type$[tmp]) then ad=1,xadd=tmp

  rem ' modified this piece of code because SAM Buy Back - xtra_sam is now it's own separate transaction - kew 10/29/2010
  rem ' if pos("SM"=type$[tmp]) then
  rem '   sm=tmp,price[tmp]= price[tmp] + xtra_sam * (1 - ((disc_pct + partner_disc)/100))
  rem '   price[tmp+nlst]= price[tmp + nlst] + xtra_sam
  rem ' fi

  rem ' do not add the xtra_sam to the existing sam
  if pos("SM"=type$[tmp]) then
    sm=tmp
  fi

  if pos("RIF"=type$[tmp]) and rif_amt = 0 then
     price[tmp] = 0
     price[tmp + nlst] = 0
  fi

  if pos(type$[tmp](1,3)="UPD,UG4")=0 or price[tmp]<=0 then continue
  upg=tmp
next tmp


while ad 
  if cvs(ds_xref$,3)="" or sm<0 then break
  dim dsn$:fattr(snm01$)
  readrecord(snm01,key=ds_xref$,dom=*break)dsn$
  if dsn.active_flag$<>"Y" then ds_xref$="";break
  new_i$=dsn.product$+dsn.platform$+dsn.os_level$+dsn.product_rev$+dsn.license_type$
  cur_i$=new_i$,samfactor=0
  dim ty$[0],pr[0]
  xtra$=lang$+$0a$+str(disc_pct+partner_disc)+$0a$+"0"+$0a$+"0"+$0a$+"0"+$0a$
  n_t=0

rem ' debuggin
if we_are_debuggin then
    print "ec_price subroutine, third call to ec_price"
    print "current: ",cur_i$,cur_users[all], cur_lprop$[all]
    print "new: ",new_i$,new_users[all],new_lprop$[all]
    print "xtra:",xtra$
    input "make the call ",*
endif

  CALL "ec_price",firm_id$,cust_num$,qty,cur_i$,cur_users[all],cur_lprop$[all],new_i$,new_users[all],new_lprop$[all],ty$[ALL],pr[ALL],cmts$,arm02,arm10i,csm01,csm02,csm03,csm04,csm05,csm07,csm10,csm13,ivm01,smc01,sam_flag,samfactor,contract$,n_t,xtra$

rem ' debuggin
if we_are_debuggin then
    print "return from thrid call to ec_price"
    print "pr [all]: ", pr[all]
    print "ty [all]: ", ty$[all]
    input "return from call e=escape ",debuginput$:(""=epResume3,"e"=epEscape3)
    epEscape3: escape
    epResume3:
endif

  for i=0 to n_t
    if pos("SM"=ty$[i]) and pr[i]>0 then price[sm]=price[sm]+pr[i],dsxref_sam=dsxref_sam+pr[i] 
    if pos("ADD"=ty$[i]) and pr[i]>0 then price[xadd]=price[xadd]+pr[i],dsxref_sam=dsxref_sam+pr[i]
  next i
  ad=0
  if dsxref_sam then comments$=comments$+"(Includes"+str(dsxref_sam:"####.00")+" for D/S "+cvs(ds_xref$,3)+")"+$0a$
wend

if upg<0 or sam_flag=0 or cvs(contract$,3)<>"" then return 
splevel=arm02.pricing_level
dim old_u[2],sm_u[2],old_lp$[2],new_lp$[2]
if cvs(new_lprop$[0],3)<>"" then new_lp$[0]=new_lprop$[0] else new_lp$[0]=new_item$(1,3)
new_lp$[1]=new_lprop$[1]
rem "Add as 1st tran means user reduction, use lower user count
if pos("AD"=type$[0])=1 then sm_u[]=new_users[] else sm_u[]=cur_users[]
call "price.pgm",firm_id$,"SM1",new_item$(10,3),old_u[all],sm_u[all],old_lp$[all],new_lp$[all],"","SM1",0,disc_pct,splevel,prc,samprc
if samprc<=0 then return

jd=0
first=1
read (snt01,key=snm01.serial_nbr$,dom=*next)
while 1
  read record(snt01,end=*break)snt01$
  if snt01.serial_nbr$<>snm01.serial_nbr$ then break
  if (pos(snt01.type_of_sale$="UPDUG4UG3PLXUNCEXC",3) or first) and snt01.ext_price>0 then jd=fnaonjul(snt01.trans_date$)
  first=0
wend

if jd then
  days=max(0,jul_today-jd)
  sam_upg=samprc*days/365
  if sam_upg>0 and sam_upg<price[upg] then 
    price[upg]=sam_upg
    price[upg+nlst]=sam_upg/dsc
    comments$=comments$+"*Price based on retroactive SAM"+$0a$
  fi
fi

return

[Function (ECE11 EC Price)]
rem ' -----------------------------------------------------------------
rem ' ECE11 EC Price
rem ' -----------------------------------------------------------------

ECE11_EC_Price:

READ RECORD (csm01,KEY=firm_id$+ece11.item_number$(1,3))csm01$
LET sam_required$=csm01.ctr_required$,duration=csm01.ctr_duration
DIM type$[0:1],price[0:1]; REM 'dummies, actually dimensioned in ec_price
LET add_tsi=ece11.add_support
no_rif=(ece11.no_rif_flag$="Y")

DIM cur_users[2],new_users[2],cur_lprop$[2],new_lprop$[2]
if cvs(sn$,3)<>"" then
  cur_lprop$[0]=snm02.lic_property1$
  cur_lprop$[1]=snm02.lic_property2$
  cur_users[0]=snm02.users1
  cur_users[1]=snm02.users2
  if cur_users[0]+cur_users[1]=0 then cur_users[0]=snm01.users
fi
new_users[0]=ece11.users
new_users[1]=ece11.users2
new_lprop$[0]=ece11.lic_property1$
new_lprop$[1]=ece11.lic_property2$
gosub user_sort
original_users=cur_users[0]
original_users2=cur_users[1]
temp$=ece11.annual_dt$
if fnnum(temp$) then
  jul_renew=fnjul(temp$)
else
  jul_renew=0
fi
qty=ece11.qty,new_item$=ece11.item_number$
rent_item=(pos("RN1"=ece11.item_number$)=13)
jul_base=jul_today
jul_default=jul_today+365
if jul_spec_date and sam_active$="Y" then jul_base=jul_spec_date
if ece11.modify_flag$="R" then
  jul_base=fnjul(smc01.annual_dt$)
  if rent_item then jul_default=jul_base+365
  sam_flag=1
fi

sam_disc=pos(ece11.modify_flag$="RS")
rem ' rental renewals are discounted at the normal discount not the SAM discount
if ece11.modify_flag$="R" and rent_item then sam_disc=0

gosub ec_price
if ece11.modify_flag$="R" and nbr_trans>0 then gosub delete_non_renews
gosub total_price

return

[Function (ECE83 Serial Numbers)]
rem ' -----------------------------------------------------------------
rem ' ECE83 Serial Numbers
rem ' -----------------------------------------------------------------

ECE83_Serial_Numbers:

LET selected_sn_list$=""
LET ece83key$=firm_id$+cust_num$+user_code$+ece11.line_number$
READ (ece83,KEY=ece83key$,DOM=get_ece83)
get_ece83: 
READ RECORD (ece83,END=get_ece83_end)ece83$
IF POS(ece83key$=ece83$)=1 THEN 
  LET selected_sn_list$=selected_sn_list$+ece83.serial_nbr$+$0A$
  GOTO get_ece83
FI 
get_ece83_end: 

return

[Function (Edit Cart Item)]
rem ' -----------------------------------------------------------------
rem ' Edit Cart Item
rem ' -----------------------------------------------------------------

Edit_Cart_Item: 
new_context=gb__win.item
old_context=gb__win.cart
LET win_item$=fngb__get_screen$(win_id_item$,win_item$)
init_item=1
runtime_id=num(fattr(win_item$,"runtime","ID"))
virtualFlag_id=num(fattr(win_item$,"virtualFlag","ID"))

DIM item$(20)
LET item$(1)=ece11.item_number$
ivm_item$=item$
gosub ivm_item
DIM sn$(20)

REM ' *** prepare product list ***
LET item_product_code$=item$(1,3)
LET item_platform_list$="",item_platform_code$=item$(4,3)
LET item_os_level_list$="",item_os_level_code$=item$(7,3)
LET item_revision_list$="",item_revision_code$=item$(10,3)
LET item_license_list$="",item_license_code$=item$(13,3)
rent_item=(item_license_code$="RN1")

LET temp_list$="",product_index=-1,index=0
FOR temp=1 TO LEN(item_product_list$) STEP 3
  LET csm01.product$=item_product_list$(temp,3)
  LET csm01.description$=csm01.product$
  READ RECORD (csm01,KEY=firm_id$+csm01.product$,ERR=*next)csm01$
  LET temp_list$=temp_list$+CVS(csm01.description$,3)+$0A$
  IF csm01.product$=item_product_code$ THEN LET product_index=index,sam_required$=csm01.ctr_required$
  LET index=index+1
NEXT temp
IF product_index>=0 THEN LET temp_list$=temp_list$+$FF$+STR(product_index)
LET win_item.product$=temp_list$

REM ' *** prepare platform list ***
lb_id=num(fattr(win_item$,"platform","ID"))
LET temp_product_code$=item_product_code$,temp_platform_code$=item_platform_code$
GOSUB platform_list
LET item_platform_list$=platform_list$,win_item.platform$=platform_desc_list$

REM ' *** prepare os level list ***
lb_id=num(fattr(win_item$,"oslevel","ID"))
LET temp_platform_code$=item_platform_code$,temp_os_level_code$=item_os_level_code$
GOSUB os_level_list
LET item_os_level_list$=os_level_list$
LET win_item.oslevel$=os_level_desc_list$

REM ' *** prepare revision list ***
lb_id=num(fattr(win_item$,"revision","ID"))
LET temp_os_level_code$=item_os_level_code$,temp_product_rev_code$=item_revision_code$
GOSUB revision_list
LET item_revision_list$=revision_list$
LET win_item.revision$=revision_desc_list$

REM ' *** prepare license list ***
lb_id=num(fattr(win_item$,"license","ID"))
LET ltcode$=item_license_code$,prdcode$=item_product_code$
GOSUB license_list
LET item_license_list$=license_list$
LET win_item.license$=license_desc_list$

LET win_item.item_number$=CVS(ivm01.item_number$,3)
LET win_item.description$=CVS(ivm01.item_desc$,3)
LET win_item.quantity$=STR(ece11.qty)
LET sam_flag=POS(ece11.sam_coverage$="S")
LET win_item.sam_standard$=STR(sam_flag<>0)
LET contract$=""
LET contract_type$=""
LET sam_active$=""
LET win_item.users$="0", win_item.users2$="0"
u1_prop$=ece11.lic_property1$,u1=pos(u1_prop$(1,1)="ES")
u2_prop$=ece11.lic_property2$,u2=pos(u2_prop$(1,1)="ES")
if u1=1 or u1+u2=0 then LET win_item.users$=STR(ece11.users)
if u2=1 then LET win_item.users$=STR(ece11.users2)
if u1=2 then LET win_item.users2$=STR(ece11.users)
if u2=2 then LET win_item.users2$=STR(ece11.users2)

rem --- handle the virtual flag
if cvs(ece11.available$,3)="VIR" then win_item.virtualFlag = 1 else win_item.virtualFlag = 0

READ RECORD (csm01,KEY=firm_id$+item$(1,3),dom=*next)csm01$
gosub new_item_props
READ RECORD (csm03,KEY=firm_id$+item$(7,3),dom=*next)csm03$
LET win_item.reference$=CVS(ece11.po_ref_number$,3)
if pos("R"=ece11.lic_property1$)=2 or pos("R"=ece11.lic_property2$)=2 or pos("RTM"=ece11.item_number$) then win_item.runtime$="1" else win_item.runtime$="0"

LET win_item$=fngb__put_screen$(win_id_item$,win_item$)

temp$=ece11.annual_dt$
if fnnum(temp$) then
  jul_renew=fnjul(temp$)
else
  jul_renew=0
fi
renew_dt_id=num(fattr(win_item$,"renew_dt","ID"))
renew_dt_btn_id=num(fattr(win_item$,"renew_dt_btn","ID"))
newWindow! = sysgui!.getWindow(new_context)
renew_dt!=newWindow!.getControl(renew_dt_id)
if jul_renew then renew_dt!.setValue(jul_renew) else renew_dt!.setText(" ")
temp$=renew_dt!.getText()
win_item.renew_dt$=temp$
GOSUB update_item_price

LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"comments,price,listprice")

LET focus_id=NUM(FATTR(win_item$,"Accept","ID"))
LET sam_std_id=NUM(FATTR(win_item$,"Sam_standard","ID"))

gosub show_window
PRINT (gb__sysgui)'CONTEXT'(new_context),'CUE'(focus_id,"Modify this purchase in shopping cart","")
IF sam_required$<>"A" THEN PRINT (gb__sysgui)'DISABLE'(sam_std_id) ELSE PRINT (gb__sysgui)'ENABLE'(sam_std_id)
if sam_flag then PRINT (gb__sysgui)'enable'(renew_dt_id,renew_dt_btn_id) ELSE PRINT (gb__sysgui)'disable'(renew_dt_id,renew_dt_btn_id)
if pos(item_product_code$=runtime_products$) then PRINT(gb__sysgui)'enable'(runtime_id) ELSE PRINT (gb__sysgui)'disable'(runtime_id)
if pos(item_product_code$=virtual_products$) then PRINT(gb__sysgui)'enable'(virtualFlag_id) ELSE PRINT (gb__sysgui)'disable'(virtualFlag_id)
RETURN

[Function (Edit Cart SN)]
rem ' -----------------------------------------------------------------
rem ' Edit Cart SN
rem ' -----------------------------------------------------------------

Edit_Cart_SN:

DIM sn$(20)
LET sn$(1)=ece11.serial_nbr$
GOSUB show_sn;rem 'reads SNM-01,SNM-02,SNT-01
rem 'sets product_code$,etc, auth$, contract$, exp_ok$
DIM item$(20)
LET item$(1)=ece11.item_number$
LET new_product_code$=item$(1,3)
LET new_platform_code$=item$(4,3)
LET new_os_level_code$=item$(7,3)
LET new_product_rev_code$=item$(10,3)
LET new_license_code$=item$(13,3)

if pos("Y"=exp_ok$)=1 then
  exp_ok$="YNN"
  csm04.key_or_licen$=" "
  READ RECORD (csm04,KEY=firm_id$+new_product_rev_code$,DOM=*next)csm04$
  if csm04.key_or_licen$="L" then exp_ok$(2,1)="Y" 
  if item$(13,3)="STD" then exp_ok$(3,1)="Y" 
fi

LET support_only=(ece11.support_only$="Y")
u1_prop$=ece11.lic_property1$
u2_prop$=ece11.lic_property2$
user1=ece11.users
user2=ece11.users2
old_context=gb__win.cart
temp_renew$=ece11.annual_dt$
sam_flag=POS(ece11.sam_coverage$="S")
no_rif=(ece11.no_rif_flag$="Y")

gosub show_edit_sn_window

return

[Function (Edit SN SAM Checkbox)]
rem ' -----------------------------------------------------------------
rem ' Edit SN SAM Checkbox
rem ' -----------------------------------------------------------------

Edit_SN_SAM_Checkbox:

LET win_edit_sn.sam_standard$=STR(sam_flag<>0)
GOSUB update_edit_sn_price
LET win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"comments,price,sam_standard,listprice")
renew_dt!.focus() 
PRINT (gb__sysgui)'flush'

return

[Function (Edit SN Show Props)]
rem ' -----------------------------------------------------------------
rem ' Edit SN Show Props
rem ' -----------------------------------------------------------------

Edit_SN_Show_Props:

users_id=NUM(FATTR(win_edit_sn$,"users","ID"))
users2_id=NUM(FATTR(win_edit_sn$,"users2","ID"))
if hide_props then
  ctl_id=NUM(FATTR(win_edit_sn$,"users_label","ID"))
  users_lbl$=ctrl(gb__sysgui,ctl_id,1,gb__win.edit_sn)
  p=pos("EXTENDED"=cvs(users_lbl$,4))
  if p then 
    if ee_users_lbl$="" then ee_users_lbl$=users_lbl$ 
    users_lbl$(P,8)="",users_lbl$=cvs(users_lbl$,32)
  fi
  win_edit_sn.users_label$=users_lbl$
  PRINT (gb__sysgui)'CONTEXT'(gb__win.edit_sn),'disable'(users2_id),
else
 if ee_users_lbl$<>"" then win_edit_sn.users_label$=ee_users_lbl$
 PRINT (gb__sysgui)'CONTEXT'(gb__win.edit_sn),'enable'(users2_id),
fi
if contract_type$="RN1" then PRINT (gb__sysgui)'CONTEXT'(gb__win.edit_sn),'disable'(users2_id),

rem ' if firm_id$ = "01" then PRINT (gb__sysgui)'CONTEXT'(gb__win.edit_sn),'disable'(users2_id),

rem ' temporary work around to prevent the exchange of SF users to EF user resulting from the
rem ' 5/1/2015 BSG price change.
rem ' if firm_id$ = "02" then PRINT (gb__sysgui)'CONTEXT'(gb__win.edit_sn),'disable'(users2_id),

return

[Function (Edit to Cart)]
rem ' -----------------------------------------------------------------
rem ' Edit to Cart
rem ' -----------------------------------------------------------------

Edit_to_Cart:

LET ece11$=FIELD(ece11$)
WRITE RECORD (ece11)ece11$
LET focus_id=NUM(FATTR(win_cart$,"Close","ID"))
new_context=gb__win.cart
old_context=gb__win.edit_sn
if ece11.modify_flag$="R" then old_context=gb__win.view_sn
GOSUB init_cart
gosub show_window

return

[Function (Edit_Cart_Item_Prep)]
rem ' -----------------------------------------------------------------
rem ' Edit_Cart_Item_Prep
rem ' -----------------------------------------------------------------

Edit_Cart_Item_Prep:

rem ' cart_rec$ must already be set by the caller

READ RECORD (ece11,KEY=firm_id$+cust_num$+user_code$+cart_rec.line$,DOM=missing_ece11)ece11$
gosub adjust_ece11_annual_dt

LET edit_action$="chg"
LET pricecheck=0
GOSUB check_for_trade
IF trade_tran THEN 
  LET product_code$=m_item$(1,3),platform_code$=m_item$(4,3)
  LET os_level_code$=m_item$(7,3),revision_code$=m_item$(10,3)
  LET license_code$=m_item$(13,3)
  LET win_trade.reference$=ece11.po_ref_number$
  LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"reference")
  PRINT (gb__sysgui)'SETCURSOR'(0)
  LET trade_window=1
  GOSUB trade_page
  RETURN
FI 
if ece11.modify_flag$="R" or pos("RN1"=ece11.item_number$)=13 then 
    gosub delete_cart_record
    return
fi

IF LEN(CVS(ece11.serial_nbr$,3)) THEN 
  rem ' create window if needed
  new_context=fnCreateWindowIfNeeded("103")
  GOSUB edit_cart_sn 
ELSE 
  rem ' create item window if needed
  new_context=fnCreateWindowIfNeeded("104")
  GOSUB edit_cart_item
fi

return

missing_ece11: 
PRINT (gb__sysgui)'SETCURSOR'(0)
LET i=MSGBOX("Shopping cart record not found.",0,"Can't Edit")

return

[Function (Edit_Credit_Card)]
rem ' -----------------------------------------------------------------
rem ' Edit_Credit_Card
rem ' -----------------------------------------------------------------

Edit_Credit_Card:

PRINT (gb__sysgui)'SETCURSOR'(3)

rem ' create the credit card window if needed
new_context=fnCreateWindowIfNeeded("114")

LET cc_rec$=SENDMSG(gb__sysgui,win_account_grid_id,81,theGridRow,$04$,gb__win.account)

LET win_credit_card$=fngb__get_screen$(win_id_credit_card$,win_credit_card$)

LET win_credit_card.visa=0
LET win_credit_card.mastercard=0
LET win_credit_card.american_express=0

IF POS("V"=cc_rec.cc_type$)=1 THEN LET win_credit_card.visa=1
IF POS("M"=cc_rec.cc_type$)=1 THEN LET win_credit_card.mastercard=1
IF POS("A"=cc_rec.cc_type$)=1 THEN LET win_credit_card.american_express=1

LET win_credit_card.number$=fnformat_cc$(cc_rec.cc_num$)
LET win_credit_card.name$=cc_rec.cc_name$

LET temp$=win_credit_card.expiry_month$+$FF$,temp=POS($FF$=temp$)
LET index=cc_rec.cc_mm-1
LET temp$=temp$(1,temp)+STR(index)
LET win_credit_card.expiry_month$=temp$

LET temp$=win_credit_card.expiry_year$+$FF$,temp=POS($FF$=temp$)
LET index=cc_rec.cc_yyyy-NUM(DATE(0:"%Yl"))
LET temp$=temp$(1,temp)+STR(index)
LET win_credit_card.expiry_year$=temp$

LET win_credit_card$=fngb__put_screen$(win_id_credit_card$,win_credit_card$)

LET focus_id=NUM(FATTR(win_credit_card$,"Expiry_Year","ID"))
new_context=gb__win.credit_card
old_context=gb__win.account
gosub show_window
REM BWH
creditCardWindow! = sysgui!.getWindow(gb__win.credit_card)
creditCardWindow!.getControl(100).setOpaque(sysgui!.FALSE)
creditCardWindow!.getControl(202).setOpaque(sysgui!.FALSE)

return

[Function (Enable Checkout 2 CC Info)]
rem ' -----------------------------------------------------------------
rem ' Enable Checkout 2 CC Info
rem ' -----------------------------------------------------------------

Enable_Checkout_2_CC_Info:

LET save_context=DEC(CTRL(gb__sysgui))
LET credit_card_id=NUM(FATTR(win_checkout_2$,"Credit_Card","ID"))
LET split_payment_id=NUM(FATTR(win_checkout_2$,"SplitPaymentBtn","ID"))
LET credit_card_list_id=NUM(FATTR(win_checkout_2$,"Credit_Card_List","ID"))
LET visa_id=NUM(FATTR(win_checkout_2$,"Visa","ID"))
LET mastercard_id=NUM(FATTR(win_checkout_2$,"MasterCard","ID"))
LET american_express_id=NUM(FATTR(win_checkout_2$,"American_Express","ID"))
LET number_id=NUM(FATTR(win_checkout_2$,"Number","ID"))
LET name_id=NUM(FATTR(win_checkout_2$,"Name","ID"))
LET expiry_month_id=NUM(FATTR(win_checkout_2$,"Expiry_Month","ID"))
LET expiry_year_id=NUM(FATTR(win_checkout_2$,"Expiry_Year","ID"))
LET save_credit_card_id=NUM(FATTR(win_checkout_2$,"Save_Credit_Card","ID"))
LET ccAmount1_id=NUM(FATTR(win_checkout_2$,"ccAmount1","ID"))

rem ' remove the cover up
if coverCCControlsID <> 0 then
    coverCCControls!.destroy()
    coverCCControls! = null()
    coverCCControlsID = 0
fi

PRINT (gb__sysgui)'CONTEXT'(gb__win.checkout_2),'ENABLE'(credit_card_id),'ENABLE'(split_payment_id),'ENABLE'(credit_card_list_id),'ENABLE'(visa_id),'ENABLE'(mastercard_id),'ENABLE'(american_express_id),'ENABLE'(number_id),'ENABLE'(name_id),'ENABLE'(expiry_month_id),'ENABLE'(expiry_year_id),'ENABLE'(save_credit_card_id),'ENABLE'(ccAmount1_id),'CONTEXT'(save_context)

splitPaymentBtn! = Cast(BBjRadioButton, BBjAPI().getSysGui().getWindow("Checkout 2").getControl(split_payment_id))
splitPaymentBtn!.setSelected(0) 

chkout2Message! = Cast(BBjStaticText, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("Message"))
chkout2Message!.setText("")

ccAmount1! = Cast(BBjInputE, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("ccAmount1"))
ccAmount1!.setText(CVS(STR(total:amount_mask$),3+64))
ccAmount1!.setEditable(0)

return

[Function (Get Contract Info)]
rem ' -----------------------------------------------------------------
rem ' Get Contract Info
rem ' -----------------------------------------------------------------

Get_Contract_Info:

LET sam_flag=0,contract_type$="",sam_active$="",days_expired=0, virtualEligible=0, bsgOnSAM = 0, bsgAllowExchange = 0, basOnSAM = 0
if len(cvs(snm01.contract$,3))<>6 then goto no_contract
FIND RECORD (smc01,KEY=snm01.contract$,DOM=no_contract)smc01$
LET contract_type$=smc01.contr_type$
LET days_expired=jul_today-fnjul(smc01.annual_dt$)
LET sam_active$=snm01.sam_active$
IF smc01.sam_active$="N" OR days_expired>0 THEN LET sam_active$="N"
IF sam_active$<>"N" AND POS("SM"=contract_type$) THEN sam_flag=1,sam_active$="Y"
rem ' IF sam_active$<>"N" AND POS("DV"=contract_type$) THEN sam_flag=1,sam_active$="Y"
IF POS("DV"=contract_type$) THEN sam_active$=""

rem --- virtual eligible
if jul_today < fnjul(smc01.annual_dt$) and smc01.sam_active$ <> "N" then virtualEligible = 1

rem --- control the exchange of sf to ef users for bsg
if firm_id$ = "02" and jul_today < fnjul(smc01.annual_dt$) and smc01.sam_active$ <> "N" then bsgOnSAM = 1
if firm_id$ = "01" and jul_today < fnjul(smc01.annual_dt$) and smc01.sam_active$ <> "N" then basOnSAM = 1
rem ' bsg contral exchange of sf to ef users OK if contract purchase or renewed on or after 05/01/2015
if firm_id$ = "02" and jul(2016,05,01) <= fnjul(smc01.annual_dt$) and smc01.sam_active$ <> "N" then bsgAllowExchange = 1 

no_contract: 
sam_renew_status=2
renewable=0
renewable_sam=0
if contract_type$<>"" then call "renew_sam.bbj",snm01.serial_nbr$,sam_renew_status
if contract_type$="SM1" and sam_active$="N" then
  if days_expired<0 or sam_renew_status=1 then sam_renew_status=2 
fi
dummy$=stbl("!CLEAR","buyback",err=*next)

rem ' preferred customer types get a 90 day renew window of no rif
preferred$="|AAI|AEI|APA|APE|API|APP|MG|MGI|MP|MPI|MS|MSI|"
gci_cust_type$=cvs(arm02.cust_type$,3)
preferred = pos(gci_cust_type$=preferred$)
if sam_renew_status<2 then 
  if contract_type$="SM1" then  
    if preferred then
        rem ' preferred customers get a 90 day window
        if days_expired>90 then dummy$=stbl("buyback",cvs(snm01.serial_nbr$,3)+":"+date(0:"%Y%Mz%Dz")+":"+str(days_expired)) 
        if days_expired<91 then renewable=1,renewable_sam=1
    else
        if days_expired>14 then dummy$=stbl("buyback",cvs(snm01.serial_nbr$,3)+":"+date(0:"%Y%Mz%Dz")+":"+str(days_expired)) 
        if days_expired<15 then renewable=1,renewable_sam=1
    fi
  else
    rem ' if days_expired<46 and days_expired>-760 and pos(contract_type$="DV1,RN1") then renewable=1
    if days_expired<46 and pos(contract_type$="DV1,RN1") then renewable=1
  fi
fi
rem 'sam_renew_status from renew_sam.bbj
rem '0 = Ok to renew using same contract or no SAM contract
rem '1 = Ok to renew- other sn's on this contract, make new one
rem '10 = SN not found or inactive
rem '15 = Current order exists for this SN
rem '20 = Open SAM invoice exists for this SN
rem '99 = Undetermined program failure

return

[Function (Get Discount)]
rem ' -----------------------------------------------------------------
rem ' Get Discount
rem ' -----------------------------------------------------------------

Get_Discount:

disc_pct=0,partner_disc=0,normal_disc=0,discount_code$=arm02.disc_code$
Readrecord (arm10i,KEY=firm_id$+"I"+discount_code$,ERR=*NEXT)arm10i$
disc_pct = arm10i.disc_percent, normal_disc = arm10i.disc_percent
tmptype$="APM"
if sam_disc and pos(arm02.cust_type$(1,1)=tmptype$) and firm_id$="01" then
  Readrecord (arm10i,KEY=firm_id$+"I"+arm02.disc_code_a$,err=*endif)arm10i$
  disc_pct=arm10i.disc_percent
  discount_code$=arm02.disc_code_a$
fi
if inhouse=0 and user_code$<>"**" and pos(arm02.cust_type$(1,1)=tmptype$) and firm_id$<>"01" then
  readrecord (arm10i,KEY=firm_id$+"I"+str(disc_pct+5:"00"),ERR=*endif)arm10i$
  partner_disc=5
  discount_code$=arm10i.disc_code$
fi

return

[Function (Get Itemlist)]
rem ' -----------------------------------------------------------------
rem ' Get Itemlist
rem ' -----------------------------------------------------------------

Get_Itemlist:

REM ' selected_sn_list$ must be set before calling this
LET itemlist$="",snlist$="",sam_dt$="",sam_contract$=""
LET default_std_users=0,default_ent_users=0,expired_sam=0,cl_usr=0,ds_usr=0
LET items=POS($0A$=selected_sn_list$,1,0)
IF items=0 THEN RETURN

LET templist$=selected_sn_list$
LET hold_sam_flag=sam_flag
use_date=1
LET lf=POS($0A$=templist$)
while lf
  LET tempsn$=templist$(1,lf-1),templist$=templist$(lf+1)
  lf=POS($0A$=templist$)
  READ RECORD (snm01,KEY=tempsn$,KNUM=0,DOM=*continue)snm01$
  if snm01.active_flag$<>"Y" then continue

  GOSUB get_contract_info
  if sam_active$="N" and sam_renew_status>1 then LET expired_sam=expired_sam+1
  IF sam_active$="N" OR sam_active$="" THEN 
    smc01.contract$=FILL(6)
    smc01.contr_type$="   "
    sam_flag=0,use_date=0
  fi
  if sam_flag and sam_dt$<>"" and smc01.annual_dt$<>sam_dt$ then use_date=0 
  if sam_flag and smc01.annual_dt$>sam_dt$ then 
    sam_dt$=smc01.annual_dt$
    sam_contract$=smc01.contract$
  fi
  dim snm02$:fattr(snm02$)
  READ RECORD (snm02,KEY=tempsn$,KNUM=0,DOM=*next)snm02$
  if pos("E"=snm02.lic_property1$)=1 then default_ent_users=default_ent_users+snm02.users1
  if pos("E"=snm02.lic_property2$)=1 then default_ent_users=default_ent_users+snm02.users2
  if pos("S"=snm02.lic_property2$)=1 then default_std_users=default_std_users+snm02.users2
  if pos("S"=snm02.lic_property1$)=1 then default_std_users=default_std_users+snm02.users1
  item$=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$
  p=POS(item$=itemlist$)
  IF p=0 THEN LET itemlist$=itemlist$+item$+$0A$

  snlist$=snlist$+snm01.serial_nbr$+STR(snm01.users)+" user"+$0A$+"     "+item$+$0A$
  if snm02.users1+snm02.users2=0 then
    IF snm01.product$="DS5" THEN 
      ds_usr=ds_usr+snm01.users 
    else
      cl_usr=cl_usr+snm01.users
    fi
  fi
wend

LET items=POS($0A$=itemlist$,1,0)
tmp=POS($0A$=snlist$,1,0)
rem 'if there is only 1 SN and it's a BAS product, don't do anything
if tmp=2 and pos("BAS"=itemlist$)=1 then 
    items=0,itemlist$=""
    junk$="M58"+$0a$
    mb_mode=0
    gosub translate_mbox
endif

ds_usr=min(cl_usr,ds_usr)
default_ent_users=ds_usr+default_ent_users
default_std_users=max(0,cl_usr-ds_usr)+default_std_users

if default_std_users+default_ent_users=0 then items=0,itemlist$=""

LET sam_flag=hold_sam_flag
if sam_dt$="" or use_date=0 then sam_dt$=date(jul_today+365:"%Y%Mz%Dz")
if special_date$<>"" then sam_dt$=special_date$
return

[Function (Get Order Number)]
rem ' -----------------------------------------------------------------
rem ' Get Order Number
rem ' -----------------------------------------------------------------

Get_Order_Number:

REM ' ARS10N - next order number

EXTRACT RECORD (ARS10N,KEY=firm_id$+"N",TIM=5,ERR=get_ars10n_locked)ars10n$
LET order_number=ars10n.nxt_ord_nbr
LET ars10n.nxt_ord_nbr=ars10n.nxt_ord_nbr+1
LET ars10n$=FIELD(ars10n$)
WRITE RECORD (ARS10N,KEY=firm_id$+"N")ars10n$
LET order_number$=STR(order_number:"0000000")

return

get_ars10n_locked: 
IF ERR=0 THEN WAIT 1; RETRY
GOTO gb__err

[Function (Get SAM Contract)]
rem ' -----------------------------------------------------------------
rem ' Get SAM Contract
rem ' -----------------------------------------------------------------

Get_SAM_Contract:

start_jul=jul_today
annual_jul=start_jul+duration
dim smc01$:fattr(smc01$)
FIND RECORD (smc01,KEY=contract$,DOM=new_contract)smc01$
if fnjul(smc01.expire_on_dt$)<jul_today or smc01.sam_active$="N" then smc01.renew_flag$="Y"
start_jul=fnjul(smc01.contr_start$)
IF temp$="TRD" or temp$="EXC" THEN GOTO new_contract
if xday then 
  annual_jul=fnjul(smc01.expire_on_dt$)+duration
  if sam_renew_status=0 then goto finish_contract else goto new_contract
fi
rem "Renew DV1: contract date is rolled in BSN.20, but ok to roll here, since BSN.20 checks the date and won't roll it again - leave BSN.20 alone unless directcomm gets changed to roll DV1 dates
if ece11.modify_flag$="R" then 
  smc01.renew_flag$="Y"
  if sam_renew_status=0 then goto finish_contract else goto new_contract
fi
GOTO contract_done

new_contract: 
gosub new_contract_number
contract$=new_contract_number$
LET smc01.contract$=contract$
LET smc01.contr_type$="SM1"
IF pos(ece11.item_number$(13,3)="KIT,NFR") THEN LET smc01.contr_type$="DV1"
IF rent_item THEN smc01.contr_type$="RN1"
LET smc01.firm_id$=firm_id$
LET smc01.customer_nbr$=cust_num$
smc01.e_mail$=ecm01.e_mail$
close(tmm03,err=*next)
call "ec_open::tmm03"
read(tmm03,key=firm_id$+cust_num$,dom=*next)
while 1
  read record(tmm03,end=*break)tmm03$
  if pos(firm_id$+cust_num$=tmm03$)<>1 then break
  em$=cvs(tmm03.e_mail$,3)
  if em$="" or pos("@"=em$)=0 then continue
  if tmm03.sam_contact$="Y" then smc01.e_mail$=em$;break
wend
close(tmm03,err=*next)

finish_contract:
if jul_renew then annual_jul=jul_renew
LET expire$=DATE((annual_jul):"%Yl%Mz%Dz")
LET smc01.contr_start$=DATE(start_jul:"%Yl%Mz%Dz")
LET smc01.annual_dt$=expire$
LET smc01.expire_on_dt$=expire$
LET smc01.new_flag$="Y"
LET smc01.invoiced_flag$=" "
LET smc01$=FIELD(smc01$)

write_contract: 
if smc01.contr_type$="SM1" then smc01.sam_active$="Y" else smc01.sam_active$=" "
sam_active$=smc01.sam_active$
WRITE RECORD (smc01)smc01$

contract_done: 

return

[Function (IVM Item)]
rem ' -----------------------------------------------------------------
rem ' IVM Item
rem ' -----------------------------------------------------------------

IVM_Item:

dim ivm01$:fattr(ivm01$)
LET ivm01.firm_id$=firm_id$,ivm01.item_number$=ivm_item$
LET ivm01.item_desc$="N/A"
ivmok=0
FIND RECORD (ivm01,KEY=firm_id$+ivm_item$,ERR=*next)ivm01$;ivmok=1
if ivmok or len(cvs(ivm_item$,3))<15 then return
ivm_item$(10,3)="CUR"
if ivm_item$(13,3)<>"STD" and ivm_item$(1,3)="BAS" then ivm_item$(13,3)="EXP"
FIND RECORD (ivm01,KEY=firm_id$+ivm_item$,ERR=*next)ivm01$;ivmok=1

return

[Function (Init Account)]
rem ' -----------------------------------------------------------------
rem ' Init Account
rem ' -----------------------------------------------------------------

Init_Account:

rem ' ensure that the Account window has been instantiated
dump_context=fnCreateWindowIfNeeded("110")
rem ' account uses the credit card template
dump_context=fnCreateWindowIfNeeded("114")

REM ' win_account$ = fngb__get_screen$(win_id_account$,win_account$)
LET win_account.firstName$=cvs(ecm01.first_name$,3)
LET win_account.lastName$=cvs(ecm01.last_name$,3)
LET win_account.email$=cvs(ecm01.e_mail$,3)
LET win_account.email2$=cvs(ecm01.e_mail2$,3)
LET win_account.password$=""
LET win_account.confirm_password$=""
LET win_account$=fngb__put_fields$(win_id_account$,win_account$,"email,email2,password,confirm_password,firstName,lastName")

IF !(init_credit_card) THEN GOSUB init_credit_card

LET win_account_grid_id=NUM(FATTR(win_account$,"Grid","ID"))

DIM cc_rec$:"cc_key:c(20):SHOW=0:,"+"cc_num:c(16*):ALIGN=0 SHOW=1 LABEL=Card_Number LENGTH=16:,"+"cc_type:c(1*):ALIGN=0 SHOW=1 LABEL=Card_Type LENGTH=16:,"+"cc_name:c(30*):ALIGN=0 SHOW=1 LABEL=Name_On_Card LENGTH=30:,"+"cc_mm:n(2*):ALIGN=0 SHOW=1 LABEL=MM LENGTH=2:,"+"cc_yyyy:n(4*):ALIGN=0 SHOW=1 LABEL=YYYY LENGTH=4:"

IF cc_file THEN CLOSE (cc_file)
LET cc_file=UNT
INITFILE cc_file$
OPEN (cc_file)cc_file$
READ (ecm02,KEY=firm_id$+cust_num$+user_code$,DOM=setup_cc_loop)

setup_cc_loop: 
READ RECORD (ecm02,END=setup_cc_endloop)ecm02$
IF CVS(ecm02.firm_id$,3)<>CVS(firm_id$,3) OR CVS(ecm02.customer_nbr$,3)<>CVS(cust_num$,3) or cvs(ecm02.user_code$,3)<>cvs(user_code$,3) THEN GOTO setup_cc_endloop

LET ccu$="",cce$=CVS(ecm02.credit_card_num$,3)
CALL "BCC.11",ccu$,cce$
IF ccu$="" THEN LET ccu$=cce$
LET cc_rec.cc_num$=fnobscure_cc$(ccu$)
LET cc_rec.cc_key$=ccu$

IF ecm02.cc_type$="V" THEN LET cc_rec.cc_type$="Visa" ELSE IF ecm02.cc_type$="M" THEN LET cc_rec.cc_type$="MasterCard" ELSE IF ecm02.cc_type$="A" THEN LET cc_rec.cc_type$="AmEx" ELSE LET cc_rec.cc_type$=ecm02.cc_type$
LET cc_rec.cc_name$=CVS(ecm02.cc_name$,3)
LET cc_rec.cc_mm$=STR(NUM(ecm02.cc_expires_mo$):"00")
LET cc_rec.cc_yyyy$=STR(NUM(ecm02.cc_expires_yr$):"0000")
WRITE RECORD (cc_file,KEY=cc_rec.cc_key$)cc_rec$
GOTO setup_cc_loop

setup_cc_endloop: 
CLOSE (cc_file)
OPEN (cc_file)cc_file$
rem ' set up grid
LET batch!=sysgui!.get_message_batch()
batch!.addSendMsg(win_account_grid_id,80,cc_file,FATTR(cc_rec$),gb__win.account)
batch!.addSendMsg(win_account_grid_id,81,0,$01$,gb__win.account); REM ' read-only grid
batch!.addSendMsg(win_account_grid_id,49,1,$$,gb__win.account); REM ' highlight row
batch!.addSendMsg(win_account_grid_id,57,1,$$,gb__win.account); REM ' highlight colour
batch!.addSendMsg(win_account_grid_hdr,84,0,$$,gb__win.account); REM ' alignment
REM # batch!.addSendMsg(win_account_grid_hdr,20,0,$$,gb__win.account); rem ' info block
batch!.processAll()

LET init_account=1

return

[Function (Init Cart)]
rem ' -----------------------------------------------------------------
rem ' Init Cart
rem ' -----------------------------------------------------------------

Init_Cart:

LET win_cart$=fngb__get_screen$(win_id_cart$,win_cart$)
LET win_cart_grid_id=NUM(FATTR(win_cart$,"Grid","ID"))
LET subtotal=0
LET listtotal=0
LET reference_list$=""

DIM cart_rec$:"Line:c(4):SHOW=0:,"+"Reference:c(10*):ALIGN=0 SHOW=1 LABEL=PurchaseOrder LENGTH=10:,"+"Serial_Number:c(16*):ALIGN=0 SHOW=1 LABEL=Serial_Number LENGTH=16:,"+"Quantity:c(8*):ALIGN=1 SHOW=1 LABEL=Qty LENGTH=8:,"+"Item_Number:c(20*):ALIGN=0 SHOW=1 LABEL=Item_Number LENGTH=20:,"+"Users:c(8*):ALIGN=1 SHOW=1 LABEL=Users LENGTH=8:,"+"Price:c(12*):ALIGN=1 SHOW=1 LABEL=Price LENGTH=12:,"+"Sam:c(4*):ALIGN=0 SHOW=1 LABEL=SAM LENGTH=1:"
IF cart_file THEN CLOSE (cart_file)
LET cart_file=UNT
INITFILE cart_file$
OPEN (cart_file)cart_file$
READ (ece11,KEY=firm_id$+cust_num$+user_code$,DOM=setup_cart_loop)
setup_cart_loop: 
READ RECORD (ece11,END=setup_cart_endloop)ece11$
gosub adjust_ece11_annual_dt
IF CVS(ece11.firm_id$,3)<>CVS(firm_id$,3) OR CVS(ece11.customer_nbr$,3)<>CVS(cust_num$,3) OR CVS(ece11.user_code$,3)<>CVS(user_code$,3) THEN GOTO setup_cart_endloop
LET cart_rec.line$=ece11.line_number$
LET cart_rec.reference$=CVS(ece11.po_ref_number$,3)
if cart_rec.reference$="" then cart_rec.reference$=fill(10)
LET cart_rec.serial_number$=CVS(ece11.serial_nbr$,3)
LET cart_rec.quantity$=STR(ece11.qty)
LET cart_rec.item_number$=ece11.item_number$
LET cart_rec.users$=STR(ece11.users+ece11.users2)

IF ece11.sam_coverage$="S" THEN cart_rec.sam$="Yes" ELSE cart_rec.sam$="No"

LET contract$=""
LET pricecheck=1
bad_sn=0
GOSUB check_for_trade
IF trade_tran THEN
  checklist$=selected_sn_list$
  dim tmpsn$(20)
  p=pos($0a$=checklist$)
  while p
    tmpsn$(1)=checklist$(1,p-1)
    checklist$=checklist$(p+1)
    dim snm01$:fattr(snm01$)
    readrecord(snm01,knum=0,key=tmpsn$,dom=*next)snm01$
    if snm01.active_flag$<>"Y" or snm01.firm_id$<>firm_id$ or snm01.customer_nbr$<>cust_num$ then bad_sn=1;break
    p=pos($0a$=checklist$)
  wend
  GOTO got_price
fi

DIM sn$(20)
LET sn$(1)=ece11.serial_nbr$
GOSUB sn_ec_price_setup
if cvs(sn$,3)<>"" then
  if snm01.active_flag$<>"Y" then bad_sn=1
  if ece11.support_only$<>"Y" and (snm01.firm_id$<>firm_id$ or snm01.customer_nbr$<>cust_num$) then bad_sn=1
  if bad_sn then goto got_price
fi
LET sam_flag=POS(ece11.sam_coverage$="S")

GOSUB ece11_ec_price

got_price: 
if bad_sn then
  REMOVE (ece11,KEY=firm_id$+cust_num$+user_code$+cart_rec.line$,ERR=*next)
  REMOVE (eceeu,KEY=firm_id$+cust_num$+user_code$+cart_rec.line$,ERR=*next)
  gosub clear_ece83
  goto setup_cart_loop
fi
IF POS("**"=comments$)=1 THEN LET cart_rec.price$=comments$ ELSE LET cart_rec.price$=CVS(STR(price:"#,###,##0.00-"),64)

WRITE RECORD (cart_file,KEY=ece11.line_number$)cart_rec$
LET subtotal=subtotal+price
LET listtotal=listtotal+listprice

IF LEN(cart_rec.reference$) AND POS(cart_rec.reference$+$0A$=reference_list$)=0 THEN LET reference_list$=reference_list$+cart_rec.reference$+$0A$

GOTO setup_cart_loop

setup_cart_endloop: 
rem reset the grid rem out 9/17/2010 kew no need to change the gird from a DataAware Grid to a standard grid
rem skipping this code prevents the grid from flashing in BUI
rem LET batch!=sysgui!.get_message_batch()
rem batch!.addSendMsg(win_cart_grid_id,80,0,FATTR(cart_rec$),gb__win.cart)
rem batch!.processAll()

CLOSE (cart_file)
OPEN (cart_file)cart_file$

p=pos($0a$=reference_list$,1,0)
if p>1 then reference_list$="*** Entire Cart ***"+$0A$+reference_list$
LET win_cart.subtotal$=CVS(STR(subtotal:"#,###,##0.00-"),64)
LET win_cart.listprice$=CVS(STR(listtotal:"#,###,##0.00-"),64)
LET win_cart.reference$=reference_list$+$FF$+"0"
LET win_cart$=fngb__put_fields$(win_id_cart$,win_cart$,"subtotal,listprice,reference")


LET batch!=sysgui!.get_message_batch()
batch!.addSendMsg(win_cart_grid_id,80,cart_file,FATTR(cart_rec$),gb__win.cart)
batch!.addSendMsg(win_cart_grid_id,81,0,$01$,gb__win.cart); REM ' read-only grid
batch!.addSendMsg(win_cart_grid_id,49,1,$$,gb__win.cart); REM ' highlight row
batch!.addSendMsg(win_cart_grid_id,57,1,$$,gb__win.cart); REM ' highlight colour
batch!.addSendMsg(win_cart_grid_hdr,84,0,$$,gb__win.cart); REM ' alignment
REM # batch!.addSendMsg(win_cart_grid_hdr,20,0,$$,gb__win.cart); rem ' info block
batch!.processAll()

LET init_cart=1

return

[Function (Init Cart Record)]
rem ' -----------------------------------------------------------------
rem ' Init Cart Record
rem ' -----------------------------------------------------------------

Init_Cart_Record:

LET line_number=0
LET status$=""
LET temp$=sn$
REM 'SN$ contains list of serials+$0a$ for multi sn transactions
init_cart_sn_check: 
LET lf=POS($0A$=temp$)
IF lf THEN LET sn$=temp$(1,lf-1),temp$=temp$(lf+1) ELSE LET temp$=""
IF CVS(sn$,3)="" THEN GOTO ece83_endloop

READ (ece83,KEY=firm_id$+cust_num$,DOM=ece83_loop)
ece83_loop: 
READ RECORD (ece83,END=ece83_endloop)ece83$
IF POS(firm_id$+cust_num$=ece83$)<>1 THEN GOTO ece83_endloop
IF CVS(sn$,3)<>CVS(ece83.serial_nbr$,3) THEN GOTO ece83_loop
LET status$="M14"
goto init_cart_failed
ece83_endloop: 

READ (ece11,KEY=firm_id$+cust_num$,DOM=ece11_loop)
ece11_loop: 
READ RECORD (ece11,END=ece11_endloop)ece11$ 
gosub adjust_ece11_annual_dt
IF POS(firm_id$+cust_num$=ece11$)<>1 THEN GOTO ece11_endloop
IF CVS(sn$,3)<>"" AND CVS(sn$,3)=CVS(ece11.serial_nbr$,3) THEN LET status$="M14";goto init_cart_failed
if cvs(ece11.user_code$,3)=cvs(user_code$,3) then line_number=NUM(ece11.line_number$)
GOTO ece11_loop
ece11_endloop: 
IF temp$<>"" THEN GOTO init_cart_sn_check

LET line_number=line_number+1
IF line_number>9999 THEN LET status$="M15";goto init_cart_failed

DIM ece11$:FATTR(ece11$)
LET ece11.firm_id$=firm_id$
LET ece11.customer_nbr$=cust_num$
LET ece11.user_code$=user_code$
LET ece11.line_number$=STR(line_number:"0000")

return

init_cart_failed:
junk$=status$+$0a$+cvs(sn$,3)+$0a$
mb_mode=0
gosub translate_mbox
return

[Function (Init Checkout 1)]
rem ' -----------------------------------------------------------------
rem ' Init Checkout 1
rem ' -----------------------------------------------------------------

Init_Checkout_1:

LET win_checkout_1$=fngb__get_screen$(win_id_checkout_1$,win_checkout_1$)

LET win_checkout_1.License_1$=cvs(ecm01.e_mail$,3)
LET win_checkout_1.License_2$=cvs(ecm01.e_mail2$,3)
LET win_checkout_1.Media$=""

LET win_checkout_1.Bill_To_Name$=CVS(tmm01.cont_firm$,3)
LET win_checkout_1.Bill_To_Addr1$=CVS(tmm01.address_1$,3)
LET win_checkout_1.Bill_To_Addr2$=CVS(tmm01.address_2$,3)
LET win_checkout_1.Bill_To_City$=CVS(tmm01.city$,3)
LET win_checkout_1.Bill_To_State$=CVS(tmm01.state$,3)
LET win_checkout_1.Bill_To_Zip$=CVS(tmm01.zip_code$,3)
LET win_checkout_1.Bill_To_Country$=CVS(country.country_name$,3)

LET win_checkout_1.Ship_To_Name$=CVS(tmm01.cont_firm$,3)
LET win_checkout_1.Ship_To_Addr1$=CVS(tmm01.address_1$,3)
LET win_checkout_1.Ship_To_Addr2$=CVS(tmm01.address_2$,3)
LET win_checkout_1.Ship_To_City$=CVS(tmm01.city$,3)
LET win_checkout_1.Ship_To_State$=CVS(tmm01.state$,3)
LET win_checkout_1.Ship_To_Zip$=CVS(tmm01.zip_code$,3)
LET win_checkout_1.Ship_To_Country$=CVS(country.country_name$,3)

LET win_checkout_1$=fngb__put_screen$(win_id_checkout_1$,win_checkout_1$)
LET init_checkout_1=1

return

[Function (Init Checkout 2)]
rem ' -----------------------------------------------------------------
rem ' Init Checkout 2
rem ' -----------------------------------------------------------------

Init_Checkout_2:

LET win_checkout_2$=fngb__get_screen$(win_id_checkout_2$,win_checkout_2$)

LET cc_count=0
LET credit_card_list$=""
READ (ecm02,KEY=firm_id$+cust_num$+user_code$,DOM=count_ecm02_loop)
count_ecm02_loop: 
READ RECORD (ecm02,END=count_ecm02_endloop)ecm02$
IF ecm02.firm_id$<>firm_id$ OR ecm02.customer_nbr$<>cust_num$ or ecm02.user_code$<>user_code$ THEN GOTO count_ecm02_endloop
LET cc_count=cc_count+1
GOTO count_ecm02_loop

count_ecm02_endloop: 
DIM cc_key$[cc_count],cc_num$[cc_count],cc_type$[cc_count],cc_name$[cc_count],cc_month[cc_count],cc_year[cc_count]
IF cc_count=0 THEN GOTO setup_ecm02_endloop

LET cc_count=0
READ (ecm02,KEY=firm_id$+cust_num$+user_code$,DOM=setup_ecm02_loop)
setup_ecm02_loop: 
READ RECORD (ecm02,END=setup_ecm02_endloop)ecm02$
IF ecm02.firm_id$<>firm_id$ OR ecm02.customer_nbr$<>cust_num$ or ecm02.user_code$<>user_code$ THEN GOTO setup_ecm02_endloop

LET ccu$="",cce$=CVS(ecm02.credit_card_num$,3)
CALL "BCC.11",ccu$,cce$
IF cce$="" THEN LET ccu$=cce$
LET cc_key$[cc_count]=ccu$
LET cc_num$[cc_count]=fnobscure_cc$(ccu$)
LET cc_type$[cc_count]=CVS(ecm02.cc_type$,7)
LET cc_name$[cc_count]=CVS(ecm02.cc_name$,3)
LET cc_month[cc_count]=NUM(ecm02.cc_expires_mo$)
LET cc_year[cc_count]=NUM(ecm02.cc_expires_yr$)
LET credit_card_list$=credit_card_list$+cc_type$[cc_count]+" "+cc_num$[cc_count]+" "+cc_name$[cc_count]+$0A$
LET cc_count=cc_count+1
GOTO setup_ecm02_loop

setup_ecm02_endloop: 
LET win_checkout_2.credit_card_list$=credit_card_list$ + $FF$ + str(-1)

LET temp$=""
LET year=NUM(DATE(0:"%Yl"))
FOR temp=year TO year+10
    LET temp$=temp$+STR(temp)+$0A$
NEXT temp
LET win_checkout_2.expiry_year$=temp$ + $FF$ + str(-1)
LET win_checkout_2.expiry_year_2$=temp$ + $FF$ + str(-1)

LET temp$=""
FOR temp=1 TO 12
    LET temp$=temp$+DATE(JUL(year,temp,1):"%Ml")+$0A$
NEXT temp
LET win_checkout_2.expiry_month$=temp$ + $FF$ + str(-1)
LET win_checkout_2.expiry_month_2$=temp$ + $FF$ + str(-1)

LET win_checkout_2$=fngb__put_screen$(win_id_checkout_2$,win_checkout_2$)

LET init_checkout_2=1

return

[Function (Init Credit Card)]
rem ' -----------------------------------------------------------------
rem ' Init Credit Card
rem ' -----------------------------------------------------------------

Init_Credit_Card:

REM 'win_credit_card$=fngb__get_screen$(win_id_credit_card$,win_credit_card$)

LET temp$=""
LET year=NUM(DATE(0:"%Yl"))
FOR temp=year TO year+10
    LET temp$=temp$+STR(temp)+$0A$
NEXT temp
LET win_credit_card.expiry_year$=temp$

LET temp$=""
FOR temp=1 TO 12
    LET temp$=temp$+DATE(JUL(year,temp,1):"%Ml")+$0A$
NEXT temp
LET win_credit_card.expiry_month$=temp$

LET win_credit_card$=fngb__put_fields$(win_id_credit_card$,win_credit_card$,"expiry_year,expiry_month")

LET init_credit_card=1

return

[Function (Init Ship Intl)]
rem ' -----------------------------------------------------------------
rem ' Init Ship Intl
rem ' -----------------------------------------------------------------

Init_Ship_Intl:

LET win_ship_intl$=fngb__get_screen$(win_id_ship_intl$,win_ship_intl$)

LET ctry_list$="",ctry=-1,index=-1
dim tmp_country$:fattr(country$)
READ (country,KEY="",knum=1,DOM=ctry_loop)
ctry_loop: 
READ RECORD (country,ERR=ctry_endloop)tmp_country$
LET ctry=ctry+1
LET ctry_list$=ctry_list$+CVS(tmp_country.country_name$,3)+$0A$
IF tmp_country.country_code$=tmm01.country_code$ THEN LET index=ctry
GOTO ctry_loop
ctry_endloop: 
IF index>=0 THEN LET ctry_list$=ctry_list$+$FF$+STR(index)

LET win_ship_intl.Bill_To_Name$=CVS(tmm01.cont_firm$,3)
LET win_ship_intl.Bill_To_Addr1$=CVS(tmm01.address_1$,3)
LET win_ship_intl.Bill_To_Addr2$=CVS(tmm01.address_2$,3)
LET win_ship_intl.Bill_To_City$=CVS(tmm01.city$,3)
LET win_ship_intl.Bill_To_State$=CVS(tmm01.state$,3)
LET win_ship_intl.Bill_To_Zip$=CVS(tmm01.zip_code$,3)
LET win_ship_intl.Bill_To_Country$=CVS(country.country_name$,3)

LET win_ship_intl.Ship_To_Name$=CVS(tmm01.cont_firm$,3)
LET win_ship_intl.Ship_To_Addr1$=CVS(tmm01.address_1$,3)
LET win_ship_intl.Ship_To_Addr2$=CVS(tmm01.address_2$,3)
LET win_ship_intl.Ship_To_City$=CVS(tmm01.city$,3)
LET win_ship_intl.Ship_To_State$=CVS(tmm01.state$,3)
LET win_ship_intl.Ship_To_Zip$=CVS(tmm01.zip_code$,3)
LET win_ship_intl.Ship_To_Country$=ctry_list$

LET win_ship_intl$=fngb__put_screen$(win_id_ship_intl$,win_ship_intl$)

LET init_ship_intl=1

return

[Function (Init Ship USA)]
rem ' -----------------------------------------------------------------
rem ' Init Ship USA
rem ' -----------------------------------------------------------------

Init_Ship_USA:

LET win_ship_usa$=fngb__get_screen$(win_id_ship_usa$,win_ship_usa$)

LET state_list$="",state=-1,index=-1
READ (states,KEY="",DOM=state_loop)
state_loop: 
READ RECORD (states,ERR=state_endloop)states$
LET state=state+1
LET state_list$=state_list$+states.state_code$+" "+CVS(states.state_name$,3)+$0A$
IF states.state_code$=tmm01.state$ THEN LET index=state
GOTO state_loop
state_endloop: 
IF index>=0 THEN LET state_list$=state_list$+$FF$+STR(index)

LET win_ship_usa.Bill_To_Name$=CVS(tmm01.cont_firm$,3)
LET win_ship_usa.Bill_To_Addr1$=CVS(tmm01.address_1$,3)
LET win_ship_usa.Bill_To_Addr2$=CVS(tmm01.address_2$,3)
LET win_ship_usa.Bill_To_City$=CVS(tmm01.city$,3)
LET win_ship_usa.Bill_To_State$=CVS(tmm01.state$,3)
LET win_ship_usa.Bill_To_Zip$=CVS(tmm01.zip_code$,3)

LET win_ship_usa.Ship_To_Name$=CVS(tmm01.cont_firm$,3)
LET win_ship_usa.Ship_To_Addr1$=CVS(tmm01.address_1$,3)
LET win_ship_usa.Ship_To_Addr2$=CVS(tmm01.address_2$,3)
LET win_ship_usa.Ship_To_City$=CVS(tmm01.city$,3)
LET win_ship_usa.Ship_To_State$=state_list$
LET win_ship_usa.Ship_To_Zip$=CVS(tmm01.zip_code$,3)

LET win_ship_usa.one_day=0
LET win_ship_usa.two_day=0
LET win_ship_usa.three_day=0
IF freight_type$="1" THEN LET win_ship_usa.one_day=1
IF freight_type$="2" THEN LET win_ship_usa.two_day=1
IF freight_type$="3" THEN LET win_ship_usa.three_day=1

LET win_ship_usa$=fngb__put_screen$(win_id_ship_usa$,win_ship_usa$)

LET init_ship_usa=1

return

[Function (Init_Structure)]
rem ' -----------------------------------------------------------------
rem ' Init_Structure
rem ' -----------------------------------------------------------------

Init_Structure:

rem ' same as Initialize Structure but by window based on new Context

switch cwin_context

    case gb__win.login
        win_id_login$=fngb__win_id$(gb__win.login)
        DIM win_login$:fngb__template$(win_id_login$)
        break

    case gb__win.main
        win_id_main$=fngb__win_id$(gb__win.main)
        DIM win_main$:fngb__template$(win_id_main$)
        break

    case gb__win.view_sn
        win_id_view_sn$=fngb__win_id$(gb__win.view_sn)
        DIM win_view_sn$:fngb__template$(win_id_view_sn$)
        break

    case gb__win.edit_sn
        win_id_edit_sn$=fngb__win_id$(gb__win.edit_sn)
        DIM win_edit_sn$:fngb__template$(win_id_edit_sn$)
        init_edit_sn=0
        break

    case gb__win.item
        win_id_item$=fngb__win_id$(gb__win.item)
        DIM win_item$:fngb__template$(win_id_item$)
        init_item=0
        break

    case gb__win.cart
        win_id_cart$=fngb__win_id$(gb__win.cart)
        DIM win_cart$:fngb__template$(win_id_cart$)
        win_cart_grid_hdr=102
        init_cart=0
        gosub get_cart_grid
        break

    case gb__win.checkout_1
        win_id_checkout_1$=fngb__win_id$(gb__win.checkout_1)
        DIM win_checkout_1$:fngb__template$(win_id_checkout_1$)
        init_checkout_1=0
        break

    case gb__win.ship_usa
        win_id_ship_usa$=fngb__win_id$(gb__win.ship_usa)
        DIM win_ship_usa$:fngb__template$(win_id_ship_usa$)
        DIM temp_ship_usa$:FATTR(win_ship_usa$)
        init_ship_usa=0
        break

    case gb__win.ship_intl
        win_id_ship_intl$=fngb__win_id$(gb__win.ship_intl)
        DIM win_ship_intl$:fngb__template$(win_id_ship_intl$)
        DIM temp_ship_intl$:FATTR(win_ship_intl$)
        init_ship_intl=0
        break

    case gb__win.checkout_2
        win_id_checkout_2$=fngb__win_id$(gb__win.checkout_2)
        DIM win_checkout_2$:fngb__template$(win_id_checkout_2$)
        init_checkout_2=0
        break

    case gb__win.account
        win_id_account$=fngb__win_id$(gb__win.account)
        DIM win_account$:fngb__template$(win_id_account$)
        win_account_grid_hdr=107
        init_account=0
        break

    case gb__win.history
        win_id_history$=fngb__win_id$(gb__win.history)
        DIM win_history$:fngb__template$(win_id_history$)
        win_history_grid_hdr=109
        init_history=0
        break

    case gb__win.clients
        win_id_clients$=fngb__win_id$(gb__win.clients)
        DIM win_clients$:fngb__template$(win_id_clients$)
        win_clients_grid_hdr=102
        init_clients=0
        break

    case gb__win.find_sn
        win_id_find_sn$=fngb__win_id$(gb__win.find_sn)
        DIM win_find_sn$:fngb__template$(win_id_find_sn$)
        win_find_sn_grid_hdr=109
        init_find_sn=0
        break

    case gb__win.credit_card
        win_id_credit_card$=fngb__win_id$(gb__win.credit_card)
        DIM win_credit_card$:fngb__template$(win_id_credit_card$)
        init_credit_card=0
        break

    case gb__win.reset_license
        win_id_reset_license$=fngb__win_id$(gb__win.reset_license)
        DIM win_reset_license$:fngb__template$(win_id_reset_license$)
        init_reset_license=0
        break

    case gb__win.trade_select
        win_id_trade_select$=fngb__win_id$(gb__win.trade_select)
        DIM win_trade_select$:fngb__template$(win_id_trade_select$)
        break

    case gb__win.trade
        win_id_trade$=fngb__win_id$(gb__win.trade)
        DIM win_trade$:fngb__template$(win_id_trade$)
        init_trade=0
        break

    case gb__win.send_rpt
        win_id_send_rpt$=fngb__win_id$(gb__win.send_rpt)
        dim win_send_rpt$:fngb__template$(win_id_send_rpt$)
        break

    case gb__win.renewal
        win_id_renewal$=fngb__win_id$(gb__win.renewal)
        dim win_renewal$:fngb__template$(win_id_renewal$)
        break
    
    case gb__win.serialNbrFeatures
        win_id_serialNbrFeatures$=fngb__win_id$(gb__win.serialNbrFeatures)
        dim win_serialNbrFeatures$:fngb__template$(win_id_serialNbrFeatures$)
        break

swend

return

[Function (Initialize Structure)]
rem ' -----------------------------------------------------------------
rem ' Initialize Structure
rem ' -----------------------------------------------------------------

Initialize_Structure:

win_id_login$=fngb__win_id$(gb__win.login)
DIM win_login$:fngb__template$(win_id_login$)

win_id_main$=fngb__win_id$(gb__win.main)
DIM win_main$:fngb__template$(win_id_main$)

win_id_view_sn$=fngb__win_id$(gb__win.view_sn)
DIM win_view_sn$:fngb__template$(win_id_view_sn$)

win_id_edit_sn$=fngb__win_id$(gb__win.edit_sn)
DIM win_edit_sn$:fngb__template$(win_id_edit_sn$)
init_edit_sn=0

win_id_item$=fngb__win_id$(gb__win.item)
DIM win_item$:fngb__template$(win_id_item$)
init_item=0

win_id_cart$=fngb__win_id$(gb__win.cart)
DIM win_cart$:fngb__template$(win_id_cart$)
win_cart_grid_hdr=102
init_cart=0

win_id_checkout_1$=fngb__win_id$(gb__win.checkout_1)
DIM win_checkout_1$:fngb__template$(win_id_checkout_1$)
init_checkout_1=0

win_id_ship_usa$=fngb__win_id$(gb__win.ship_usa)
DIM win_ship_usa$:fngb__template$(win_id_ship_usa$)
DIM temp_ship_usa$:FATTR(win_ship_usa$)
init_ship_usa=0

win_id_ship_intl$=fngb__win_id$(gb__win.ship_intl)
DIM win_ship_intl$:fngb__template$(win_id_ship_intl$)
DIM temp_ship_intl$:FATTR(win_ship_intl$)
init_ship_intl=0

win_id_checkout_2$=fngb__win_id$(gb__win.checkout_2)
DIM win_checkout_2$:fngb__template$(win_id_checkout_2$)
init_checkout_2=0

win_id_account$=fngb__win_id$(gb__win.account)
DIM win_account$:fngb__template$(win_id_account$)
win_account_grid_hdr=107
init_account=0

win_id_history$=fngb__win_id$(gb__win.history)
DIM win_history$:fngb__template$(win_id_history$)
win_history_grid_hdr=109
init_history=0

win_id_clients$=fngb__win_id$(gb__win.clients)
DIM win_clients$:fngb__template$(win_id_clients$)
win_clients_grid_hdr=102
init_clients=0

win_id_find_sn$=fngb__win_id$(gb__win.find_sn)
DIM win_find_sn$:fngb__template$(win_id_find_sn$)
win_find_sn_grid_hdr=109
init_find_sn=0

win_id_credit_card$=fngb__win_id$(gb__win.credit_card)
DIM win_credit_card$:fngb__template$(win_id_credit_card$)
init_credit_card=0

win_id_reset_license$=fngb__win_id$(gb__win.reset_license)
DIM win_reset_license$:fngb__template$(win_id_reset_license$)
init_reset_license=0

win_id_trade_select$=fngb__win_id$(gb__win.trade_select)
DIM win_trade_select$:fngb__template$(win_id_trade_select$)

win_id_trade$=fngb__win_id$(gb__win.trade)
DIM win_trade$:fngb__template$(win_id_trade$)
init_trade=0

win_id_send_rpt$=fngb__win_id$(gb__win.send_rpt)
dim win_send_rpt$:fngb__template$(win_id_send_rpt$)

win_id_renewal$=fngb__win_id$(gb__win.renewal)
dim win_renewal$:fngb__template$(win_id_renewal$)

return

[Function (Insert CC)]
rem ' -----------------------------------------------------------------
rem ' Insert CC
rem ' -----------------------------------------------------------------

Insert_CC:

PRINT (gb__sysgui)'SETCURSOR'(3)

rem ' create credit card window if needed
new_context=fnCreateWindowIfNeeded("114")

LET win_credit_card$=fngb__get_screen$(win_id_credit_card$,win_credit_card$)
LET win_credit_card.visa=0
LET win_credit_card.mastercard=0
LET win_credit_card.american_express=0
LET win_credit_card.number$=""
LET win_credit_card.name$=""

LET temp$=win_credit_card.expiry_month$+$FF$,temp=POS($FF$=temp$)
LET temp$=temp$(1,temp-1)
LET win_credit_card.expiry_month$=temp$ + $FF$ + str(-1)

LET temp$=win_credit_card.expiry_year$+$FF$,temp=POS($FF$=temp$)
LET temp$=temp$(1,temp-1)
LET win_credit_card.expiry_year$=temp$ + $FF$ + str(-1)

LET win_credit_card$=fngb__put_screen$(win_id_credit_card$,win_credit_card$)

LET focus_id=NUM(FATTR(win_credit_card$,"Visa","ID"))
new_context=gb__win.credit_card
old_context=gb__win.account
gosub show_window
REM BWH
creditCardWindow! = sysgui!.getWindow(gb__win.credit_card)
creditCardWindow!.getControl(100).setOpaque(sysgui!.FALSE)
creditCardWindow!.getControl(202).setOpaque(sysgui!.FALSE)

return

[Function (Item SAM Checkbox)]
rem ' -----------------------------------------------------------------
rem ' Item SAM Checkbox
rem ' -----------------------------------------------------------------

Item_SAM_Checkbox:

LET win_item.sam_standard$=STR(sam_flag=1)
GOSUB update_item_price
LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"comments,price,listprice,sam_standard")
renew_dt!.focus() 

return

[Function (License History)]
rem ' -----------------------------------------------------------------
rem ' License History
rem ' -----------------------------------------------------------------

License_History:

LET ichan=LOGEXTRACT,temp_item$="",lbox$="",l_hostid$=""
DIM tmpl$:FATTR(logextract$); GOSUB build_temp_item
LET ichan=SN_LICENSE
DIM tmpl$:FATTR(sn_license$); GOSUB build_temp_item
LET ichan=LICENSE_RESET,lrx$=CVS(FATTR(license_reset$),4)
LET p=POS("RESET_DATE"=lrx$)
IF p THEN LET lrx$=lrx$(1,p-1)+lrx$(p+6)
LET p=POS("RESET_TIME"=lrx$)
IF p THEN LET lrx$=lrx$(1,p-1)+lrx$(p+6)
resets=0
DIM tmpl$:lrx$; GOSUB build_temp_item
IF LEN(temp_item$)<50 THEN GOTO current_status
LET temp_item$=SSORT(temp_item$,50)
LET holddate$="",fill$=FILL(65,"_")
license_history_loop: 
date$=temp_item$(1,8)
time$=temp_item$(9,6)
ichan=NUM(temp_item$(15,2))
k$=CVS(temp_item$(17,34),2)
temp_item$=temp_item$(51)
IF holddate$=date$ THEN LET lbox$=lbox$+$0A$ ELSE LET lbox$=lbox$+fill$+$0A$+date$(5,2)+"/"+date$(7,2)+"/"+date$(1,4)+$0A$
LET holddate$=date$,time$=time$(1,2)+":"+time$(3,2)
SWITCH ichan
    CASE LOGEXTRACT; DIM tmpl$:FATTR(logextract$); BREAK
    CASE SN_LICENSE; DIM tmpl$:FATTR(sn_license$); BREAK
    CASE LICENSE_RESET; DIM tmpl$:lrx$; BREAK
SWEND
READ RECORD (ichan,KEY=k$)tmpl$
LET lbox$=lbox$+"  "; REM +time$+" "
SWITCH ichan
  CASE LOGEXTRACT; LET lbox$=lbox$+"License Request Received"+$0A$
  LET x$=CVS(tmpl.firstname$+tmpl.lastname$,35),y$=CVS(tmpl.company$,3)
  IF x$<>"" AND y$<>"" THEN LET x$=x$+"/"
  IF x$+y$<>"" THEN LET lbox$=lbox$+"        From: "+x$+y$+$0A$
  IF CVS(tmpl.email$,2)<>"" THEN LET lbox$=lbox$+"       Email: "+tmpl.email$+$0A$
  IF CVS(tmpl.fax$,2)<>"" THEN LET lbox$=lbox$+"         Fax: "+tmpl.fax$+$0A$
  IF CVS(tmpl.hostname$,2)<>"" THEN LET lbox$=lbox$+"    HostName: "+tmpl.hostname$+$0A$
  LET lbox$=lbox$+"      HostId: "+tmpl.hostid$+$0A$
  LET lbox$=lbox$+"      Auth #: "+tmpl.authnum$+$0A$
  BREAK
  CASE SN_LICENSE; dim sn_host$:fattr(sn_host$) 
  readrecord(sn_host,key=tmpl$(1,26),dom=*next)sn_host$
  l_hostid$=tmpl.hostid$,xx$=""
  if cvs(sn_host.hostid1$,3)<>"" then
    xx$=$0a$
    l_hostid$=cvs(sn_host.hostname1$,3)+" "+cvs(sn_host.hostid1$,3)+","+$0a$
    l_hostid$=l_hostid$+cvs(sn_host.hostname2$,3)+" "+cvs(sn_host.hostid2$,3)+","
    l_hostid$=l_hostid$+$0a$+cvs(sn_host.hostname3$,3)+" "+cvs(sn_host.hostid3$,3)
  fi
  LET lbox$=lbox$+"License Generated"+$0A$
  LET lbox$=lbox$+"      HostId: "+xx$+l_hostid$+$0A$
  LET lbox$=lbox$+"      Auth #: "+tmpl.authnum$+FILL(12)+"Revision: "+tmpl.prod_rev$+$0A$
  LET lbox$=lbox$+"       Users: "+STR(tmpl.users:"###0 ")+cvs(tmpl.lic_property1$+str(tmpl.users2:"#### ")+tmpl.lic_property2$,35)+FILL(15)+"LicenseType: "+tmpl.prod_type$+$0A$
  IF CVS(tmpl.expire$,2)<>"" THEN LET lbox$=lbox$+"     Expires: "+tmpl.expire$+$0A$
  BREAK
  CASE LICENSE_RESET
  rreason$="",p=pos(tmpl.reset_code$=reset_code_list$)
  if p>2 then
    p1=pos($0a$=reset_reason_list$,1,int(p/2))
    if p1 then
      rreason$=" ("+reset_reason_list$(p1+1)
      p=pos($0a$=rreason$)
      if p then rreason$=rreason$(1,p-1)+")"
    fi
  fi
  IF POS("00"=tmpl.reset_by$)=0 THEN LET tmpl.reset_by$="BASIS"
  let lbox$=lbox$+"License Status Reset by "+tmpl.reset_by$+rreason$+$0a$
  BREAK
SWEND
IF temp_item$<>"" THEN GOTO license_history_loop
current_status: 
LET s$=""
IF snm01.active_flag$<>"Y" THEN GOTO current_status_end
GOSUB license_status
IF license_status<0 THEN GOTO current_status_end
LET s$=$0A$+"Current License Status: "+STR(license_status)
IF license_status=0 THEN LET s$=s$+" (Ready for licensing)" ELSE LET s$=s$+" (Licensed)"
s$=s$+$0a$+"Resets for this License: "+str(resets)+$0a$+fill$+$0a$
current_status_end: 
LET lbox$=s$+lbox$+$0A$
return

build_temp_item: 
read (ichan,key=cvs(sn$,2),dom=*next)
while 1
  let k$=key(ichan,end=*break)
  if pos(cvs(sn$,2)=k$)<>1 then break
  read record(ichan,key=k$)tmpl$
  if ichan=license_reset then
    if tmpl.reset_to$="0" then resets=resets+1 else continue
  fi
  let time$=pad(tmpl.time$,6),p=pos(":"=time$)
  if p then let time$=time$(1,p-1)+time$(p+1)+" "
  if ichan=logextract then let time$="00000"+tmpl.seq_num$
  let x$=pad(k$,34),temp_item$=temp_item$+tmpl.date$+time$+str(ichan:"00")+x$
wend

return

[Function (License List)]
rem ' -----------------------------------------------------------------
rem ' License List
rem ' -----------------------------------------------------------------

License_List:

LET license_list$="",this_license$="",temp_list$=""
READ (csm13,KEY=firm_id$+"E"+prdcode$,DOM=*next)
while 1
  READ RECORD (csm13,END=*break)csm13$
  IF csm13.firm_id$+csm13.cm_file_type$+csm13.cm_id_1$<>firm_id$+"E"+prdcode$ THEN break
  IF ltcode$=csm13.cm_id_2$ THEN LET this_license$=csm13.cm_id_2$ ELSE LET temp_list$=temp_list$+csm13.cm_id_2$
wend
LET temp_list$=this_license$+temp_list$
LET license_desc_list$="",license_type_index=-1,index=0
IF temp_list$="" THEN RETURN
IF ltcode$="" THEN LET ltcode$=temp_list$(1,3)
dim csm05$:fattr(csm05$)
READ RECORD (csm05,KEY=firm_id$+ltcode$,ERR=*next)csm05$
expiring_license=(csm05.expires$="Y")+(csm05.license_type$="EXP")
FOR temp=1 TO LEN(temp_list$) STEP 3
  LET csm05.license_type$=temp_list$(temp,3)
  LET csm05.description$=csm05.license_type$
  READ RECORD (csm05,KEY=firm_id$+csm05.license_type$,ERR=*next)csm05$
  if csm05.online_flag$<>"Y" then continue
  rem 'Select only current lic type for expiring license - can't change exp type
  if expiring_license and csm05.license_type$<>ltcode$ THEN continue
  rem 'Select only permanent lic types if current lic is not expiring
  if  csm05.expires$="Y" and expiring_license=0 THEN continue
  LET license_desc_list$=license_desc_list$+CVS(csm05.description$,3)+$0A$
  license_list$=license_list$+temp_list$(temp,3)
  IF csm05.license_type$=ltcode$ THEN LET license_type_index=index
  LET index=index+1
NEXT temp
IF license_type_index>=0 THEN 
    license_desc_list$ = license_desc_list$ + $FF$ + STR(license_type_index)
else
    license_desc_list$ = license_desc_list$ + $FF$ + STR(-1)
fi
rem 'disable list if 1 of 2 options is for runtime - use checkbox to set runtimes
if index=2 and pos("RTM"=license_list$,3) then index=1

gosub disable_list_button

return

[Function (License Status)]
rem ' -----------------------------------------------------------------
rem ' License Status
rem ' -----------------------------------------------------------------

License_Status:

LET license_status=-1,license_status_channel=0
READ (are83,KEY="",DOM=license_status_are83)
license_status_are83: 
LET k$=KEY(are83,END=end_license_status_are83)
READ RECORD (are83,KEY=k$)are83$
IF CVS(sn$,2)<>CVS(are83.serial_nbr$,2) OR are83.snhist_flag$="Y" OR LEN(CVS(are83.auth_code$,3))<>10 THEN GOTO license_status_are83
IF are83.action$="D" THEN LET license_status=-1; GOTO license_status_are83
LET license_status=are83.license_cnt,license_status_channel=are83,license_status_key$=k$
GOTO license_status_are83
end_license_status_are83: 
IF license_status>=0 THEN GOTO license_status_end
READ (snt01,KEY=CVS(sn$,2),ERR=license_status_snt01)
license_status_snt01: 
LET k$=KEY(snt01,END=license_status_end)
READ RECORD (snt01,KEY=k$)snt01$
IF POS(CVS(sn$,2)=snt01.serial_nbr$)<>1 THEN GOTO license_status_end
IF LEN(CVS(snt01.auth_code$,3))<>10 THEN GOTO license_status_snt01
IF snt01.action$="D" THEN LET license_status=-1; GOTO license_status_snt01
LET license_status=snt01.license_cnt,license_status_channel=snt01,license_status_key$=k$
GOTO license_status_snt01
license_status_end: 

return

[Function (Listbox Changes)]
rem ' -----------------------------------------------------------------
rem ' Listbox Changes
rem ' -----------------------------------------------------------------

Listbox_Changes:

LET list1$="",list2$=""
LET ctl_id=NUM(FATTR(win_trade_select$,lbox1$,"ID"))
LET changelist$=CTRL(gb__sysgui,ctl_id,ctl_function,gb__win.trade_select)
LET temp=LEN(changelist$)
IF temp AND changelist$(temp,1)<>$0A$ THEN LET changelist$=changelist$+$0A$
LET changecount=POS($0A$=changelist$,1,0)
IF changecount=0 THEN RETURN
LET list1$=CTRL(gb__sysgui,ctl_id,7,gb__win.trade_select)

LET ctl_id=NUM(FATTR(win_trade_select$,lbox2$,"ID"))
LET list2$=CTRL(gb__sysgui,ctl_id,7,gb__win.trade_select)

LET start_sn$=""

FOR a=1 TO changecount
  IF a=1 THEN LET x=1 ELSE LET x=POS($0A$=changelist$,1,a-1)+1
  LET p=POS($0A$=changelist$,1,a),temp$=changelist$(x,p-x)
  ds$="",p=pos(temp$=xreflist$)
  if p then 
     ds$=xreflist$(p),p=pos($0a$=ds$)
     if p=41 then ds$=ds$(21,20) else ds$=temp$
  fi
  rem 'never move ds by itself from 1 list to another, but always add it along w/ the client
  if ds$<>temp$ then
    if POS(temp$=list2$)=0 THEN LET list2$=list2$+temp$+$0a$
    if ds$<>"" and pos("available"=lbox1$) and POS(ds$=list2$)=0 THEN LET list2$=list2$+ds$+$0a$
  fi
  LET p=POS(temp$=list1$),q=LEN(temp$)+1
  if p then  
    IF p=1 THEN LET list1$=list1$(q+1) ELSE LET list1$=list1$(1,p-1)+list1$(p+q)
    LET start_sn$=list1$(p)+FILL(20),start_sn$=start_sn$(1,20)
    IF CVS(start_sn$,3)="" THEN LET l=LEN(list1$); IF l>20 THEN LET start_sn$=list1$(l-20,20)
  fi
  rem 'if removing client from selected list, also remove linked ds
  if ds$="" then continue
  p=pos(ds$=list1$),q=len(ds$)+1
  if p=0 then continue
  if p=1 THEN LET list1$=list1$(q+1) ELSE LET list1$=list1$(1,p-1)+list1$(p+q)
NEXT a

LET list2$=SSORT(list2$,21)

LET changecount=POS($0A$=list2$,1,0)
IF changecount=0 THEN RETURN

REM - Find index of start_sn if list1$ is available list
IF POS("available"=lbox1$) THEN 
  LET i=0,p=POS(CVS(start_sn$,3)=list1$)
  IF p THEN LET i=POS($0A$=list1$(1,p),1,0)
  IF i THEN LET list1$=list1$+$FF$+STR(i)
FI 
IF CVS(start_sn$,3)<>"" THEN GOSUB set_starting_sn

return

[Function (Load_images)]
rem ' -----------------------------------------------------------------
rem ' Load_images
rem ' -----------------------------------------------------------------

Load_images:

rem ' context to load images for is in cwin_context
xx_form = 0
while xx_form<gb__forms
  xx_form=xx_form+1
  if gb__form_context[xx_form] = cwin_context then
      print(gb__sysgui,err=*continue)'context'(gb__form_context[xx_form])
      rc = fnAddImagesSetBorder(gb__form_context[xx_form])
  fi
wend

return

[Function (NC Up Routine)]
rem ' -----------------------------------------------------------------
rem ' NC Up Routine
rem ' -----------------------------------------------------------------

NC_Up_Routine:

LET mailtext$="This confirmation is for a NO CHARGE transaction." + $0A$ + "No invoice will be sent to you." + $0A$ + $0A$
IF CVS(user_code$,3)="" THEN user$="" ELSE user$=" "+CVS(user_code$,3)
LET mailtext$=mailtext$+"Customer Number: "+firm_id$+"-"+cust_num$+user$+" ("+CVS(arm01.cust_name$,3)+")" + $0A$
IF LEN(reference$) THEN LET mailtext$=mailtext$+"Purchase Order: "+reference$ + $0A$
IF LEN(contact$) THEN LET mailtext$=mailtext$+"Contact: "+contact$ + $0A$
LET mailtext$=mailtext$ + $0A$

LET line_number=0,nc_sn$="",nc_item$="",nc_type$=""
email1$=win_checkout_1.license_1$, email2$=win_checkout_1.license_2$
READ (ece11,KEY=firm_id$+cust_num$+user_code$,DOM=nc_ece11_loop)

nc_ece11_loop: 
LET ece11_key$=KEY(ece11,END=nc_ece11_endloop)
READ RECORD (ece11,KEY=ece11_key$)ece11$
gosub adjust_ece11_annual_dt
IF ece11.firm_id$<>firm_id$ OR ece11.customer_nbr$<>cust_num$ or ece11.user_code$<>user_code$ THEN GOTO nc_ece11_endloop
rem 'reference$ can be 10 spaces
IF reference$<>"" AND cvs(reference$,3)<>CVS(ece11.po_ref_number$,3) THEN GOTO nc_ece11_loop

rem 'Check for multiple sn's - if not multi sn, put ece11 sn in array to be processed
GOSUB ece83_serial_numbers
if selected_sn_list$="" then selected_sn_list$=ece11.serial_nbr$+$0a$

while pos(ece11.line_number$=nc_trans$)=1
  type$=nc_trans$(5,3), nc_trans$=nc_trans$(9), users=ece11.users
  REM 'CSM07 - Retrieve Type Of Sale record-skip this line if not found
  READ RECORD (csm07,KEY=firm_id$+type$,DOM=*continue)csm07$
  rem 'Skip if this isn't a modify only
  IF csm07.modify_snum$="N" or csm07.retire_snum$<>"N" or csm07.create_snum$<>"N" THEN continue

  ivm_item$=ece11.item_number$
  gosub ivm_item
  if ivmok=0 then continue

  LET mailtext$=mailtext$+CVS(csm07.description$,3) + $0A$
  LET mailtext$=mailtext$+"    "+CVS(ivm01.item_desc$,3) + $0A$
  LET mailtext$=mailtext$+"    "+ece11.item_number$
  LET mailtext$=mailtext$+STR(users:"####0-")+" User" + $0A$

  rem 'Build list of sn's,item#'s,saletypes for later update
  while pos($0a$=selected_sn_list$)
   s=pos($0a$=selected_sn_list$)
   sn$=selected_sn_list$(1,s-1),selected_sn_list$=selected_sn_list$(s+1)
   nc_sn$=nc_sn$+pad(sn$,20)+$0a$
   nc_item$=nc_item$+ece11.item_number$+$0a$
   nc_type$=nc_type$+type$+ece11.uncounted_flag$+$0a$
   win_checkout_2.message$="S/N: "+sn$
   win_checkout_2$=fngb__put_fields$(win_id_checkout_2$,win_checkout_2$,"message")
   mailtext$=mailtext$+"    "+sn$ + $0A$
  wend
wend

REMOVE (ece11,KEY=ece11_key$)
REMOVE (eceeu,key=ece11_key$,DOM=*next)
GOSUB clear_ece83

GOTO nc_ece11_loop

nc_ece11_endloop: 
templist$=nc_sn$
Rem 'Now update all the sn's collected above
rem 'pass po# in msg$
msg$=win_checkout_2.reference$

call "nc_update.bbj",nc_sn$,nc_item$,nc_type$,email1$,email2$,msg$
rem 'msg$ returns list of sn's processed - should be same as list passed
if templist$<>msg$ then x=1; rem 'what to do if not all processed?

return

[Function (New Item Props)]
rem ' -----------------------------------------------------------------
rem ' New Item Props
rem ' -----------------------------------------------------------------

New_Item_Props:

users2_id=NUM(FATTR(win_item$,"users2","ID"))
users2_lbl_id=NUM(FATTR(win_item$,"users2_lbl","ID"))
if pos(" "=csm01.lic_property1$+csm01.lic_property2$)=0 or rent_item then
  PRINT (gb__sysgui)'CONTEXT'(gb__win.item),'enable'(users2_id)
  if ee_users_lbl$<>"" then win_item.users_lbl$=ee_users_lbl$
else
  ctl_id=NUM(FATTR(win_item$,"users_lbl","ID"))
  users_lbl$=ctrl(gb__sysgui,ctl_id,1,gb__win.item)
  p=pos("EXTENDED"=cvs(users_lbl$,4))
  if p then
    if ee_users_lbl$="" then ee_users_lbl$=users_lbl$ 
    users_lbl$(P,8)="",users_lbl$=cvs(users_lbl$,32)
  fi
  win_item.users_lbl$=users_lbl$
  PRINT (gb__sysgui)'CONTEXT'(gb__win.item),'disable'(users2_id)
fi

rem ' purchase of SF users in firm 01 is no longer allowed - reversed 10/16/2018
rem ' if firm_id$ = "01" then PRINT (gb__sysgui)'CONTEXT'(gb__win.item),'disable'(users2_id)

LET win_item$=fngb__put_fields$(win_id_item$,win_item$,"users_lbl,users2_lbl,users2")
return

[Function (Next Release)]
rem ' -----------------------------------------------------------------
rem ' Next Release
rem ' -----------------------------------------------------------------

Next_Release:

if pos("CUR"=revision_desc_list$)=0 then return
READ RECORD (csm04,KEY=firm_id$+"NXT",DOM=*next)csm04$
if pos(firm_id$+"NXT"=csm04$)<>1 then return
nxtmp$=cvs(csm04.description$,3)
pnxt=pos(nxtmp$=revision_list$,3)
if pnxt then return
countdown=fnjul(csm04.available1$(1,8))-jul_today
if countdown<=0 then if abs(countdown)>60 then return
remaining=days_expired*-1
ctx=dec(ctrl(gb__sysgui))
rem ' the NEXT release is available to serial numbers with active SAM beginning on 1/1/xxxx
rem ' if ctx=gb__win.edit_sn and (days_expired>=0 or remaining<countdown) then return
if ctx=gb__win.edit_sn and days_expired>=0 then return

revision_list$=revision_list$+nxtmp$
revision_desc_list$=revision_desc_list$+"Next ("+nxtmp$+")"+$0A$
IF nxtmp$=temp_product_rev_code$ THEN revision_index=index
index=index+1

return

[Function (OS Level List)]
rem ' -----------------------------------------------------------------
rem ' OS Level List
rem ' -----------------------------------------------------------------

OS_Level_List:

DIM rec$(100)
LET temp$=""
temp=0
READ (CSM13B,KEY=firm_id$+"B"+temp_platform_code$,DOM=*next)
while 1
  READ RECORD (CSM13B,END=*break)csm13b$
  IF csm13b.firm_id$<>firm_id$ OR csm13b.cm_file_type$<>"B" OR csm13b.platform$<>temp_platform_code$ THEN break
  REM ' now make sure this o/s level is legal for this product
  READ (CSM13H,KEY=firm_id$+"H"+csm13b.os_level$,DOM=*next)
  ok=0  
  while ok=0
    READ RECORD (CSM13H,END=*break)csm13h$
    IF csm13h.firm_id$<>firm_id$ OR csm13h.cm_file_type$<>"H" OR csm13h.os_level$<>csm13b.os_level$ THEN break
    IF csm13h.product$=temp_product_code$ THEN ok=1
  wend
  if ok=0 then continue  
  READ RECORD (csm03,KEY=firm_id$+csm13b.os_level$,DOM=*continue)csm03$
  LET rec$(1)=fnosdesc$(x$)
  LET rec$(95)=csm13b.os_level$
  LET temp$=temp$+rec$
  if csm13b.os_level$=temp_os_level_code$ then temp=1
wend
while temp=0
  READ RECORD (csm03,KEY=firm_id$+temp_os_level_code$,DOM=*break)csm03$
  LET rec$(1)=fnosdesc$(x$)
  LET rec$(95)=temp_os_level_code$
  LET temp$=temp$+rec$
  temp=1
wend
LET os_level_list$="",os_level_desc_list$="",index=0,os_level_index=-1
IF temp$="" THEN RETURN
LET temp$=SSORT(temp$,100)
FOR temp=1 TO LEN(temp$) STEP 100
  LET os_level_list$=os_level_list$+temp$(temp+94,3)
  LET os_level_desc_list$=os_level_desc_list$+CVS(temp$(temp,90),3)+$0A$
  IF temp$(temp+94,3)=temp_os_level_code$ THEN LET os_level_index=index
  LET index=index+1
NEXT temp
if index=1 then os_level_index=0,temp_os_level_code$=temp$(95,3)
IF os_level_index<>-1 THEN 
    os_level_desc_list$ = os_level_desc_list$ + $FF$ + STR(os_level_index)
else
    os_level_desc_list$ = os_level_desc_list$ + $FF$ + STR(-1)
fi
gosub disable_list_button

return

[Function (Open Files)]
rem ' -----------------------------------------------------------------
rem ' Open Files
rem ' -----------------------------------------------------------------

Open_Files:

LET chan$=""; REM ' track channels we open so we can close them at EOJ

CALL "ec_open::ARE03"; LET chan$=chan$+STR(are03:"0000")
CALL "ec_open::ARE04"; LET chan$=chan$+STR(are04:"0000")
CALL "ec_open::ARE07"; LET chan$=chan$+STR(are07:"0000")
CALL "ec_open::ARE13"; LET chan$=chan$+STR(are13:"0000")
CALL "ec_open::ARE33"; LET chan$=chan$+STR(are33:"0000")
CALL "ec_open::ARE43"; LET chan$=chan$+STR(are43:"0000")
CALL "ec_open::ARE63"; LET chan$=chan$+STR(ARE63:"0000")
CALL "ec_open::ARE64"; LET chan$=chan$+STR(ARE64:"0000")
CALL "ec_open::ARE73"; LET chan$=chan$+STR(are73:"0000")
CALL "ec_open::ARE83"; LET chan$=chan$+STR(are83:"0000")
CALL "ec_open::ARM01"; LET chan$=chan$+STR(arm01:"0000")
CALL "ec_open::ARM02"; LET chan$=chan$+STR(arm02:"0000")
CALL "ec_open::ARM02_CANADA";chan$=chan$+STR(arm02_canada:"0000")
CALL "ec_open::ARM10B"; LET chan$=chan$+STR(ARM10B:"0000")
CALL "ec_open::ARM10E"; LET chan$=chan$+STR(arm10e:"0000")
CALL "ec_open::ARM10F"; LET chan$=chan$+STR(arm10f:"0000")
CALL "ec_open::ARM10I"; LET chan$=chan$+STR(arm10i:"0000")
CALL "ec_open::ARM40"; LET chan$=chan$+STR(arm40:"0000")
CALL "ec_open::ARS10N"; LET chan$=chan$+STR(ARS10N:"0000")
CALL "ec_open::COUNTRY"; LET chan$=chan$+STR(country:"0000")
CALL "ec_open::CSM01"; LET chan$=chan$+STR(csm01:"0000")
CALL "ec_open::CSM02"; LET chan$=chan$+STR(csm02:"0000")
CALL "ec_open::CSM03"; LET chan$=chan$+STR(csm03:"0000")
CALL "ec_open::CSM04"; LET chan$=chan$+STR(csm04:"0000")
CALL "ec_open::CSM05"; LET chan$=chan$+STR(csm05:"0000")
CALL "ec_open::CSM06"; LET chan$=chan$+STR(CSM06:"0000")
CALL "ec_open::CSM07"; LET chan$=chan$+STR(csm07:"0000")

REM ' pricing table
canadian_table = 0
dummy$=stbl("!CLEAR","CANADIAN_TABLE",err=*next)
READ RECORD(ARM02_CANADA,KEY=firm_id$+cust_num$,dom=*next)ARM02_CANADA$; canadian_table = 1
if canadian_table then
    CALL "ec_open::CSM10_CANADA"; LET chan$=chan$+STR(csm10_canada:"0000")
    csm10 = csm10_canada
    dim csm10$:fattr(csm10_canada$)
    call "ec_open::CANADIAN_EXCH";LET chan$=chan$+STR(canadian_exch:"0000")
    call "ec_open::ART03_CANADA";LET chan$=chan$+STR(art03_canada:"0000")
    keyExhRate$=keyl(canadian_exch)
    read record(canadian_exch,key=keyExhRate$)canadian_exch$
    dummy$=stbl("CANADIAN_TABLE","YES")
else
    CALL "ec_open::CSM10"; LET chan$=chan$+STR(csm10:"0000")
endif

CALL "ec_open::CSM13"; LET chan$=chan$+STR(csm13:"0000")
CALL "ec_open::CSM13A"; LET chan$=chan$+STR(CSM13A:"0000")
CALL "ec_open::CSM13B"; LET chan$=chan$+STR(CSM13B:"0000")
CALL "ec_open::CSM13C"; LET chan$=chan$+STR(CSM13C:"0000")
CALL "ec_open::CSM13D"; LET chan$=chan$+STR(CSM13D:"0000")
CALL "ec_open::CSM13H"; LET chan$=chan$+STR(CSM13H:"0000")
CALL "ec_open::ECE11"; LET chan$=chan$+STR(ece11:"0000")
CALL "ec_open::ECE83"; LET chan$=chan$+STR(ece83:"0000")
CALL "ec_open::ECEEU"; LET chan$=chan$+str(eceeu:"0000")
CALL "ec_open::ECM01"; LET chan$=chan$+STR(ecm01:"0000")
CALL "ec_open::ECM02"; LET chan$=chan$+STR(ecm02:"0000")
CALL "ec_open::IVM01"; LET chan$=chan$+STR(ivm01:"0000")
CALL "ec_open::IVS01"; LET chan$=chan$+STR(ivs01:"0000")
CALL "ec_open::LICENSE_RESET"; LET chan$=chan$+STR(LICENSE_RESET:"0000")
CALL "ec_open::LOGEXTRACT"; LET chan$=chan$+STR(LOGEXTRACT:"0000")
CALL "ec_open::SHIPPING"; LET chan$=chan$+STR(SHIPPING:"0000")
CALL "ec_open::SERIALNUMBERS"; LET chan$=chan$+STR(SERIALNUMBERS:"0000")
CALL "ec_open::SN_LICENSE"; LET chan$=chan$+STR(SN_LICENSE:"0000")
CALL "ec_open::SN_HOST"; LET chan$=chan$+STR(SN_HOST:"0000")
CALL "ec_open::SN_LIMIT_HOSTID"; LET chan$=chan$+STR(SN_LIMIT_HOSTID:"0000")
CALL "ec_open::SMC01"; LET chan$=chan$+STR(smc01:"0000")
CALL "ec_open::SNM01"; LET chan$=chan$+STR(snm01:"0000")
CALL "ec_open::SNM02"; LET chan$=chan$+STR(snm02:"0000")
CALL "ec_open::SNM04"; LET chan$=chan$+STR(snm04:"0000")
CALL "ec_open::SNMEL"; LET chan$=chan$+STR(snmel:"0000")
CALL "ec_open::SNMEU"; LET chan$=chan$+STR(snmeu:"0000")
CALL "ec_open::SNT01"; LET chan$=chan$+STR(snt01:"0000")
CALL "ec_open::SNT02"; LET chan$=chan$+STR(snt02:"0000")
CALL "ec_open::SNT04"; LET chan$=chan$+STR(snt04:"0000")
CALL "ec_open::STATES"; LET chan$=chan$+STR(states:"0000")
CALL "ec_open::TMM01"; LET chan$=chan$+STR(tmm01:"0000")
Call "ec_open::SAM2_DS_XREF";LET chan$=chan$+STR(sam2_ds_xref:"0000")
Call "ec_open::SN_DORMANT_SN";LET chan$=chan$+str(sn_dormant_sn:"0000")
rem ' get reset reasons & close file - no need to keep it open
call "ec_open::reset_reason"
reset_reason_list$="Select a reason for reset:"+$0a$
reset_code_list$="??"
while 1
  readrecord(reset_reason,err=*break)reset_reason$
  reset_reason_list$=reset_reason_list$+cvs(reset_reason.reason$,3)+$0a$
  reset_code_list$=reset_code_list$+reset_reason.reset_code$
wend
close(reset_reason,err=*next)
reset_reason_list$=reset_reason_list$+$ff$+"0"

return

[Function (Platform List)]
rem ' -----------------------------------------------------------------
rem ' Platform List
rem ' -----------------------------------------------------------------

Platform_List:

DIM rec$(100)
LET temp$=""
temp=0
READ (CSM13A,KEY=firm_id$+"A"+temp_product_code$,DOM=*next)
while 1 
  READ RECORD (CSM13A,END=*break)csm13a$
  IF csm13a.firm_id$<>firm_id$ OR csm13a.cm_file_type$<>"A" OR csm13a.product$<>temp_product_code$ THEN break
  READ RECORD (csm02,KEY=firm_id$+csm13a.platform$,DOM=*continue)csm02$
  LET rec$(1)=csm02.description$
  LET rec$(95)=csm13a.platform$
  LET temp$=temp$+rec$
  if csm13a.platform$=temp_platform_code$ then temp=1 
wend

while temp=0
  READ RECORD (csm02,KEY=firm_id$+temp_platform_code$,DOM=*break)csm02$
  temp=1
  LET rec$(1)=csm02.description$
  LET rec$(95)=temp_platform_code$
  LET temp$=temp$+rec$
wend

LET platform_list$="",platform_desc_list$="",platform_index=-1,index=0
IF temp$="" THEN RETURN
LET temp$=SSORT(temp$,100)
FOR temp=1 TO LEN(temp$) STEP 100
    LET platform_desc_list$=platform_desc_list$+CVS(temp$(temp,90),3)+$0A$
    LET platform_list$=platform_list$+temp$(temp+94,3)
    IF temp$(temp+94,3)=temp_platform_code$ THEN LET platform_index=index
    LET index=index+1
NEXT temp
if index=1 then platform_index=0,temp_platform_code$=temp$(95,3)
IF platform_index>=0 THEN 
    platform_desc_list$ = platform_desc_list$ + $FF$ + STR(platform_index)
else
    platform_desc_list$ = platform_desc_list$ + $FF$ + STR(-1)
fi

gosub disable_list_button

return

[Function (Product List)]
rem ' -----------------------------------------------------------------
rem ' Product List
rem ' -----------------------------------------------------------------

Product_List:

LET product_list$="",this_code$=""
READ (csm13,KEY=firm_id$+"D"+product_code$,DOM=*next)
while 1
  READ RECORD (csm13,END=*break)csm13d$
  IF csm13d.firm_id$+csm13d.cm_file_type$+csm13d.product$<>firm_id$+"D"+product_code$ THEN break
  IF  pos(csm13d.new_product$=product_list$,3) then continue
  READ RECORD (csm01,KEY=firm_id$+csm13d.new_product$,DOM=*continue)csm01$
  rem ' IF csm13d.type_of_sale$="TRD" THEN IF sam_active$="N" continue
  IF product_code$=csm13d.new_product$ THEN LET this_code$=product_code$ ELSE if csm01.online_flag$="Y" then LET product_list$=product_list$+csm13d.new_product$
wend
LET product_list$=this_code$+product_list$

return

[Function (Put Order Number)]
rem ' -----------------------------------------------------------------
rem ' Put Order Number
rem ' -----------------------------------------------------------------

Put_Order_Number:

REM ' ARS10N - next order number

EXTRACT RECORD (ARS10N,KEY=firm_id$+"N",TIM=5,ERR=put_ars10n_locked)ars10n$
IF ars10n.nxt_ord_nbr=NUM(order_number$)+1 THEN LET ars10n.nxt_ord_nbr=NUM(order_number$)
LET ars10n$=FIELD(ars10n$)
WRITE RECORD (ARS10N,KEY=firm_id$+"N")ars10n$

return

put_ars10n_locked: 
IF ERR=0 THEN WAIT 1; RETRY
GOTO gb__err

[Function (Renew Dt Info)]
rem ' -----------------------------------------------------------------
rem ' Renew Dt Info
rem ' -----------------------------------------------------------------

Renew_Dt_Info:
renew_dt_info$=""
gosub renew_range
dim param$:"mbid:c(4),lang:c(2*),text1:c(1*),text2:c(1*)"
param.lang$=lang$
param.mbid$="R3"
param.text1$=begin_dt$
param.text2$=end_dt$
call "ec_translate.bbj",param$
renew_dt_info$=param.text1$+$0a$
if jul_spec_date=jul_default then renew_dt_info$=""

return

[Function (Renew Range)]
rem ' -----------------------------------------------------------------
rem ' Renew Range
rem ' -----------------------------------------------------------------

Renew_Range:

if jul_spec_date then
  jul_renew=jul_spec_date
  jul_default=jul_spec_date
  jul_begin=jul_spec_date
  jul_end=jul_spec_date
  return
fi

jul_begin=jul_default
rem jul_end=jul_default-1
jul_end=jul(2099,12,31)
begin_dt$=date(jul_begin:"%D %Ms %Yl")
end_dt$=date(jul_end:"%D %Ms %Yl")
end_dt$(len(end_dt$)-1)="xx"

rem ' rentals are a minimum of 1 year with no maximum
rem ' the normal begin date jul_begin will suffice for the rental minimum check mirroring the SAM contract period
rem ' if new_context=gb__win.item and rent_item then jul_end=jul_begin+335,end_dt$=date(jul_end:"%D %Ms %Yl")

return

[Function (Revision List)]
rem ' -----------------------------------------------------------------
rem ' Revision List
rem ' -----------------------------------------------------------------

Revision_List:

DIM rec$(100)
LET temp$="",current_rev$=" ",temp=0
READ (CSM13C,KEY=firm_id$+"C"+temp_os_level_code$,DOM=*next)
while 1
  READ RECORD (CSM13C,END=*break)csm13c$
  IF csm13c.firm_id$<>firm_id$ OR csm13c.cm_file_type$<>"C" OR csm13c.os_level$<>temp_os_level_code$ THEN break
  READ RECORD (csm04,KEY=firm_id$+csm13c.product_rev$,DOM=*continue)csm04$
  LET rec$(1)=csm04.description$
  LET rec$(95)=csm04.product_rev$
  LET temp$=temp$+rec$
  if temp_product_rev_code$=csm04.product_rev$ then temp=1 
  if csm13c.product_rev$="CUR" then 
    rec$(1)="CURRENT"
    rec$(95)=csm04.description$
    temp$=rec$
    temp=1
    break
  fi
wend
while temp=0
  READ RECORD (csm04,KEY=firm_id$+temp_product_rev_code$,DOM=*break)csm04$
  LET rec$(1)=csm04.description$
  LET rec$(95)=csm04.product_rev$
rem  LET temp$=temp$+rec$
  temp=1
wend
LET revision_desc_list$="",revision_list$="",index=0,revision_index=-1
IF temp$="" THEN RETURN
LET temp$=SSORT(temp$,100)
FOR temp=1 TO LEN(temp$) STEP 100
  LET revision_desc_list$=revision_desc_list$+CVS(temp$(temp,90),3)+$0A$
  LET revision_list$=revision_list$+temp$(temp+94,3)
  LET current_rev$=temp$(temp+94,3)
  IF temp$(temp+94,3)=temp_product_rev_code$ THEN LET revision_index=index
  LET index=index+1
NEXT temp
gosub next_release
if index=1 then let revision_index=0,temp_product_rev_code$=temp$(95,3)
IF revision_index<>-1 THEN 
    revision_desc_list$ = revision_desc_list$ + $FF$ + STR(revision_index)
else
    revision_desc_list$ = revision_desc_list$ + $FF$ + STR(-1)
fi
gosub disable_list_button

return

[Function (SN EC Price Setup)]
rem ' -----------------------------------------------------------------
rem ' SN EC Price Setup
rem ' -----------------------------------------------------------------

SN_EC_Price_Setup:

dim snm01$:fattr(snm01$)
READ RECORD (snm01,KNUM=0,KEY=sn$,err=*next)snm01$
dim snm02$:fattr(snm02$)
READ RECORD (snm02,KNUM=0,KEY=sn$,err=*next)snm02$
ds_xref$=""
readrecord(sam2_ds_xref,key=sn$,knum=0,err=*next)sam2_ds_xref$;ds_xref$=sam2_ds_xref.ds_serial_nbr$
LET cur_item$=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$
LET contract$=CVS(snm01.contract$,3)
GOSUB get_contract_info
DIM csm05$:FATTR(csm05$)
READ RECORD (csm05,KEY=firm_id$+ece11.item_number$(13,3),DOM=*NEXT)csm05$
expiring_license=(csm05.expires$="Y")+(csm05.license_type$="EXP")

return

[Function (Scan_SN_Show_SN)]
rem ' -----------------------------------------------------------------
rem ' Scan_SN_Show_SN
rem ' -----------------------------------------------------------------

Scan_SN_Show_SN:

LET find_sn_rec$=SENDMSG(gb__sysgui,win_find_sn_grid_id,81,theGridRow,$04$,gb__win.find_sn)
DIM sn$(20)
LET sn$(1)=find_sn_rec.serial_number$
GOSUB show_sn

LET focus_id=NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
new_context=gb__win.view_sn
old_context=gb__win.find_sn
gosub show_window

return

[Function (Send Mail)]
rem ' -----------------------------------------------------------------
rem ' Send Mail
rem ' -----------------------------------------------------------------

Send_Mail:

rem ' ensure there are not multiple addresses in the from
xkPos = pos(","=arm10f.e_mail$)
if xkPos <> 0 then 
    xkFrom$ = arm10f.e_mail$(1,xkPos-1)
else
    xkFrom$=""
fi

if xkFrom$<>"" then
    LET sendfrom$ = CVS(xkFrom$,3)
else
    sendfrom$ = CVS(arm10f.e_mail$,3)
fi

rem ' 10/17/12 kew - firm 02 confirmations were coming from sales@basis-europe.eu
rem ' the move to the new email system did not like that address
if firm_id$ = "02" then
    sendfrom$ = "customer-service@basis.cloud"
fi

sendsubject$ = "BASIS Order " + STR(order_number) + " Confirmation"
if nc_up then sendsubject$ = "BASIS Confirmation (Non Chargeable)"
sendattach$ = ""
sls_email$ = cvs(arm10f.e_mail$,3)
LET sendto$ = "customer-service@basis.cloud"
sendcc$=sls_email$

IF CVS(ecm01.e_mail$,3) <> "" THEN sendto$ = CVS(ecm01.e_mail$,3)
IF CVS(ecm01.e_mail$,3) <> "" or firm_id$ = "02" THEN
  sendcc$="customer-service@basis.cloud"
  if sls_email$ <> "" then sendcc$ = sendcc$ + "," + sls_email$
fi

sendbcc$ = ""
rem ' tracking'
sendbcc$ = "kurt.e.williams@comcast.net"

sendmsgtxt$ = mailtext$
errmsg$ = "Mail Failed"
rem ' debug
rem ' sendfrom$ = "customer-service@basis.cloud"
rem ' sendto$ = "kurt.e.williams@comcast.net"
rem ' sendcc$ = "kw5121151@gmail.com"
rem ' sendbcc$ = ""
call "sendEmail.src", err=send_mail_done, sendfrom$, sendto$, sendcc$, sendbcc$, sendsubject$, sendmsgtxt$, sendattach$; errmsg$ = ""

send_mail_done: 
IF LEN(errmsg$) OR CVS(ecm01.e_mail2$,3) = "" THEN GOTO send_mail2_done
sendto$ = CVS(ecm01.e_mail2$,3)
sendcc$=""
rem ' debug
rem ' sendfrom$ = "customer-service@basis.cloud"
rem ' sendto$ = "kurt.e.williams@comcast.net"
rem ' sendcc$ = "kw5121151@gmail.com"
rem ' sendbcc$ = ""
call "sendEmail.src", err=send_mail2_done, sendfrom$, sendto$, sendcc$, sendbcc$, sendsubject$, sendmsgtxt$, sendattach$

send_mail2_done: 
PRINT (gb__sysgui)'SETCURSOR'(0)
IF LEN(errmsg$) THEN 
  gosub no_ack
  return
fi
if reset_list$="" then return
sendto$ = "sales@basis.cloud"
sendcc$ = "customer-service@basis.cloud"
sendsubject$ = "License Reset Request from Bcomm"
sendmsgtxt$ = reset_text$+reset_list$
rem ' debug
rem ' sendfrom$ = "customer-service@basis.cloud"
rem ' sendto$ = "kurt.e.williams@comcast.net"
rem ' sendcc$ = ""
rem ' sendbcc$ = ""
call "sendEmail.src", err=*next, sendfrom$, sendto$, sendcc$, sendbcc$, sendsubject$, sendmsgtxt$, sendattach$

return

[Function (Send Mail Failure)]
rem ' -----------------------------------------------------------------
rem ' Send Mail Failure
rem ' -----------------------------------------------------------------

Send_Mail_Failure:

sendfrom$ = CVS(arm10f.e_mail$,3)
sendto$ = CVS(ecm01.e_mail$,3)
sendcc$ = CVS(arm10f.e_mail$,3) + "," + "customer-service@basis.cloud"
rem ' sendbcc$ = ""
sendbcc$ = "kurt.e.williams@comcast.net"

sendsubject$ = "Problem with BASIS Order " + STR(order_number)
sendattach$ = ""

temp$ = CVS(STR(total:amount_mask$),3+64)
if oneCard then
    sendmsgtxt$ = "Credit card transaction failed for customer " + firm_id$ + cust_num$ + user_code$ + " order " + order_number$ + " (" + temp$ + ")" + $0A$ + $0A$
    sendmsgtxt$ = sendmsgtxt$ + "The credit card processor reported the card declined with this message: " + failureMessage$ + $0A$ + $0A$
else
    rem ' two card
    sendmsgtxt$ = "The credit card transactions failed for customer " + firm_id$ + cust_num$ + user_code$ + " order " + order_number$ + " (" + temp$ + ")" + $0A$ + $0A$
    sendmsgtxt$ = sendmsgtxt$ + "The credit card processor reported the cards declined with these messages: " + failureMessage$ + $0A$ + $0A$
fi    
errmsg$ = "Email Failed"
rem ' debug
rem ' sendfrom$ = "customer-service@basis.cloud"
rem ' sendto$ = "kurt.e.williams@comcast.net"
rem ' sendcc$ = ""
rem ' sendbcc$ = ""
call "sendEmail.src", err=send_mail_failure_done, sendfrom$, sendto$, sendcc$, sendbcc$, sendsubject$, sendmsgtxt$, sendattach$; errmsg$ = ""

send_mail_failure_done: 
IF LEN(errmsg$) OR CVS(ecm01.e_mail2$,3)="" THEN GOTO send_mail2_failure_done
sendto$=CVS(ecm01.e_mail2$,3)
sendcc$=""
rem ' debug
rem ' sendfrom$ = "customer-service@basis.cloud"
rem ' sendto$ = "kurt.e.williams@comcast.net"
rem ' sendcc$ = ""
rem ' sendbcc$ = ""
call "sendEmail.src", err=send_mail2_failure_done, sendfrom$, sendto$, sendcc$, sendbcc$, sendsubject$, sendmsgtxt$, sendattach$

send_mail2_failure_done: 
PRINT (gb__sysgui)'SETCURSOR'(0)
IF LEN(errmsg$) THEN gosub no_ack
sendto$ = "customer-service@basis.cloud,sales@basis.cloud"
sendcc$ = ""
sendmsgtxt$ = failureMessage$ + " for customer number: " + firm_id$ + cust_num$ + user_code$
rem ' debug
rem ' sendfrom$ = "customer-service@basis.cloud"
rem ' sendto$ = "kurt.e.williams@comcast.net"
rem ' sendcc$ = ""
rem ' sendbcc$ = ""
call "sendEmail.src", err=*next, sendfrom$, sendto$, sendcc$, sendbcc$, sendsubject$, sendmsgtxt$, sendattach$
RETURN

no_ack:
junk$="M12"+$0a$
mb_mode=0
gosub translate_mbox

return

[Function (Show Edit SN Window)]
rem ' -----------------------------------------------------------------
rem ' Show Edit SN Window
rem ' -----------------------------------------------------------------

Show_Edit_SN_Window:

if edit_action$="new" then
  no_rif=0
  temp_renew$=" "
  if cvs(contract$,3)<>"" then temp_renew$=smc01.annual_dt$
fi 

if pos(contract_type$="DV1,RN1") and days_expired>0 then junk$="M22"+$0a$,mb_mode=0;gosub translate_mbox;RETURN
new_context=fnCreateWindowIfNeeded("103")
cur_context=dec(ctrl(gb__sysgui))
LET old_product_code$=product_code$
LET old_platform_code$=platform_code$
LET old_os_level_code$=os_level_code$
LET old_product_rev_code$=product_rev_code$
LET old_license_code$=license_type_code$

REM ' *** prepare product list ***
GOSUB product_list
IF product_list$="" THEN 
  PRINT (gb__sysgui)'context'(cur_context),'SETCURSOR'(0)
  junk$="M33"+$0a$+product_code$+$0a$,mb_mode=0;gosub translate_mbox
  RETURN
fi
LET temp$=product_list$,product_desc_list$=""
LET product_index=-1,index=0
FOR temp=1 TO LEN(temp$) STEP 3
  if pos("DS"=old_product_code$)=1 and temp$(temp,3)="BAS" then continue
  LET csm01.product$=temp$(temp,3)
  LET csm01.description$=csm01.product$
  READ RECORD (csm01,KEY=firm_id$+csm01.product$,ERR=*next)csm01$
  LET product_desc_list$=product_desc_list$+CVS(csm01.description$,3)+$0A$
  IF csm01.product$=new_product_code$ THEN LET product_index=index,sam_required$=csm01.ctr_required$
  LET index=index+1
NEXT temp
IF product_index<0 THEN LET product_index=0
LET product_desc_list$=product_desc_list$+$FF$+STR(product_index)

REM ' *** prepare license list ***
LET ltcode$=new_license_code$,prdcode$=new_product_code$
GOSUB license_list
if expiring_license=1 and pos(contract_type$="DV1,RN1")=0 then license_list$=""
IF license_list$="" THEN PRINT (gb__sysgui)'context'(cur_context),'SETCURSOR'(0); junk$="M33"+$0a$+new_license_code$+$0a$,mb_mode=0;gosub translate_mbox; RETURN

REM ' *** prepare platform list ***
LET temp_product_code$=new_product_code$,temp_platform_code$=new_platform_code$
GOSUB platform_list

REM ' *** prepare os level list ***
LET temp_platform_code$=new_platform_code$,temp_os_level_code$=new_os_level_code$
GOSUB os_level_list

REM ' *** prepare revision list ***
LET temp_os_level_code$=new_os_level_code$,temp_product_rev_code$=new_product_rev_code$
GOSUB revision_list
LET csm04.description$=new_product_rev_code$
READ RECORD (csm04,KEY=firm_id$+new_product_rev_code$,DOM=*next)csm04$
REM ' Add current revision to list if missing
if pos(new_product_rev_code$=revision_list$)=0 and expiring_license=0 then
  LET revision_list$=new_product_rev_code$+revision_list$
  p=pos($FF$=revision_desc_list$)
  if p then revision_desc_list$=revision_desc_list$(1,p-1)
  LET revision_desc_list$=CVS(csm04.description$,3)+$0A$+revision_desc_list$+$FF$+STR(0)
fi

REM ' *** display screen ***
LET win_edit_sn$=fngb__get_screen$(win_id_edit_sn$,win_edit_sn$)
if init_edit_sn=0 then
ctl_id=NUM(FATTR(win_edit_sn$,"renew_dt_lbl","ID"))
orig_lbl_title$=ctrl(gb__sysgui,ctl_id,1)
ctl_id=NUM(FATTR(win_edit_sn$,"Sam_standard","ID"))
orig_sam_title$=ctrl(gb__sysgui,ctl_id,1)
fi
init_edit_sn=1
LET win_edit_sn.serial_number$=CVS(sn$,3)
LET win_edit_sn.description$=CVS(desc$,3)
LET win_edit_sn.cur_product$=product$
LET win_edit_sn.product$=product_desc_list$
LET win_edit_sn.cur_platform$=platform$
LET win_edit_sn.platform$=platform_desc_list$
LET win_edit_sn.cur_oslevel$=os_level$
LET win_edit_sn.oslevel$=os_level_desc_list$
LET win_edit_sn.cur_revision$=product_rev$
LET win_edit_sn.revision$=revision_desc_list$
LET win_edit_sn.cur_license$=license_type$
LET win_edit_sn.license$=license_desc_list$
LET win_edit_sn.cur_users$=str(snm01.users)
LET win_edit_sn.sam_standard$=STR(sam_flag<>0)
LET win_edit_sn.available_support$=STR(snm01.avail_support)
LET win_edit_sn.users$=str(user1),win_edit_sn.users2$=str(user2)
LET win_edit_sn.cur_runtime$="No"
if pos("RTM"=license_type_code$) or pos("R"=snm02.lic_property1$)=2 or pos("R"=snm02.lic_property2$)=2 then win_edit_sn.cur_runtime$="Yes"
LET win_edit_sn.runtime$="0"
if pos("RTM"=new_license_code$) or pos("R"=u1_prop$)=2 or pos("R"=u2_prop$)=2 then win_edit_sn.runtime$="1"
hide_props=1
u1=pos(u1_prop$(1,1)="ES")
u2=pos(u2_prop$(1,1)="ES")
if u1=1 then win_edit_sn.users$=str(user1),win_edit_sn.users2$=str(user2)
if u1=2 then win_edit_sn.users$=str(user2),win_edit_sn.users2$=str(user1)
if snm02.lic_property1$+snm02.lic_property2$<>fill(4) then
  win_edit_sn.cur_users$=cvs(str(snm02.users1:"####")+" "+snm02.lic_property1$+" "+str(snm02.users2:"####")+" "+snm02.lic_property2$,35)
  hide_props=0
fi
gosub edit_sn_show_props
renew_dt_id=num(fattr(win_edit_sn$,"renew_dt","ID"))
renew_dt_btn_id=num(fattr(win_edit_sn$,"renew_dt_btn","ID"))
newWindow! = sysgui!.getWindow(new_context)
renew_dt!=newWindow!.getControl(renew_dt_id)
sam_std_id=NUM(FATTR(win_edit_sn$,"Sam_standard","ID"))
jul_renew=0
if fnnum(temp_renew$) then jul_renew=fnjul(temp_renew$)

if jul_renew then renew_dt!.setValue(jul_renew) else renew_dt!.setText(" ")
IF CVS(contract$,3)="" or sam_active$="N" THEN win_edit_sn.sam_covered$="No" ELSE win_edit_sn.sam_covered$="Yes"
if edit_action$="new" then 
  win_edit_sn.additional_support$=""
  win_edit_sn.reference$=""
else 
  win_edit_sn.additional_support$=STR(ece11.add_support)
  win_edit_sn.reference$=ece11.po_ref_number$
fi
win_edit_sn.no_rif$=str(no_rif)

PRINT (gb__sysgui)'SETCURSOR'(0),'CONTEXT'(new_context)
runtime_id=num(fattr(win_edit_sn$,"runtime","ID"))
GOSUB update_edit_sn_price
temp$=renew_dt!.getText()
win_edit_sn.renew_dt$=temp$
win_edit_sn$=fngb__put_screen$(win_id_edit_sn$,win_edit_sn$)
if pos("**CALL BASIS"=cvs(comments$,4)) then support_only=1

focus_id=NUM(FATTR(win_edit_sn$,"Cancel","ID"))
upd_id=NUM(FATTR(win_edit_sn$,"Accept","ID"))
sam_title$=orig_sam_title$
lbl_id=NUM(FATTR(win_edit_sn$,"renew_dt_lbl","ID"))
lbl_title$=orig_lbl_title$
if expiring_license=1 then
  dim param$:"mbid:c(4),lang:c(2*),text1:c(1*),text2:c(1*)"
  param.lang$=lang$
  param.mbid$="R2"
  param.text1$=new_license_code$
  param.text2$=""
  rem call "ec_translate.bbj",param$
  rem sam_title$=param.text1$
  rem lbl_title$=param.text2$
fi
PRINT (gb__sysgui)'title'(sam_std_id,sam_title$),'title'(lbl_id,lbl_title$)

no_rif_id=NUM(FATTR(win_edit_sn$,"no_rif","ID"))
if pos("Y"=exp_ok$)=1 then PRINT (gb__sysgui)'show'(no_rif_id) else PRINT (gb__sysgui)'hide'(no_rif_id) 
gosub show_window
GOSUB disable_edits
if pos("N"=exp_ok$)>1 or sam_flag=0 then PRINT (gb__sysgui)'DISABLE'(no_rif_id) 
DIM csm03$:FATTR(csm03$)
READ RECORD (csm03,KEY=firm_id$+item$(7,3),DOM=*NEXT)csm03$
IF support_only THEN return 

if sam_renew_status = 15 or sam_renew_status = 20 then
    rem ' there is either an order or a SAM Renew order in pending open orders table ARE03 for this serial number.
    srsmsg$ = "Temporarily SAM can not be renewed via B-Comm for this serial number " + $0A$ + "because there is an order in the Order Entry files for this " + $0A$ + "serial number."
    srsresp = msgbox(srsmsg$, 64, "SAM Renewal")
fi
if expiring_license or sam_renew_status>1 or renewable_sam then PRINT (gb__sysgui)'DISABLE'(sam_std_id,renew_dt_id,renew_dt_btn_id) 

IF (pos(sam_required$="AR") and cvs(contract$,3)="") THEN 
  PRINT (gb__sysgui)'ENABLE'(sam_std_id)
  if edit_action$="chg" and sam_flag then print(gb__sysgui)'enable'(renew_dt_id,renew_dt_btn_id)
fi
if u1+u2+hide_props=0 then PRINT (gb__sysgui)'disable'(users_id) else PRINT (gb__sysgui)'enable'(users_id) 
if pos(new_product_code$=runtime_products$) and expiring_license=0 then PRINT(gb__sysgui)'enable'(runtime_id) ELSE PRINT (gb__sysgui)'disable'(runtime_id)

return

[Function (Show SN)]
rem ' -----------------------------------------------------------------
rem ' Show SN
rem ' -----------------------------------------------------------------

Show_SN:

rem ' create the view sn form if needed
dump_context = fnCreateWindowIfNeeded("102")

LET save_context=DEC(CTRL(gb__sysgui))
PRINT (gb__sysgui)'CONTEXT'(gb__win.view_sn)
LET support_only=0
LET win_view_sn$=fngb__get_screen$(win_id_view_sn$,win_view_sn$)
LET win_view_sn.serial_number$=CVS(sn$,3)
LET win_view_sn.authorization$=""
LET win_view_sn.purchase_date$=""
LET win_view_sn.status$=""
LET win_view_sn.product$=""
LET win_view_sn.platform$=""
LET win_view_sn.oslevel$=""
LET win_view_sn.revision$=""
LET win_view_sn.license$=""
LET win_view_sn.users$=""
LET win_view_sn.item_number$=""
LET win_view_sn.description$=""
LET win_view_sn.expiration_date$=""
LET win_view_sn.enduser$=""
LET win_view_sn.available_support$=""
LET win_view_sn.virtualFlag = 0
LET win_view_sn.limitHostIDMsg$ = ""
LET win_view_sn.limitHostIDHost$ = ""
LET win_view_sn.renewType$ = ""
ds_xref$=""
sam_flag=0
read record(sam2_ds_xref,key=sn$,knum=0,dom=*next)sam2_ds_xref$;ds_xref$=sam2_ds_xref.ds_serial_nbr$

IF CVS(sn$,3)="" THEN GOTO set_focus_view_sn
ok=0
FIND RECORD (snm01,KNUM=0,KEY=sn$,dom=*next)snm01$;ok=1
if ok=0 then
  junk$="M2"+$0a$+cvs(sn$,3)+$0a$
  mb_mode=0
  gosub translate_mbox
  GOTO set_focus_view_sn
fi
IF snm01.firm_id$<>firm_id$ OR snm01.customer_nbr$<>cust_num$ THEN 
  IF inhouse THEN 
    i=MSGBOX(CVS(sn$,3)+" available ONLY for Support sale.",0,firm_id$+cust_num$+" not owner")
    support_only=1 
  ELSE 
    PRINT (gb__sysgui)'SETCURSOR'(0)
    junk$="M3"+$0a$+cvs(sn$,3)+$0a$
    mb_mode=0
    gosub translate_mbox
    sn$=""
    GOTO set_focus_view_sn
  fi
fi
dim snm02$:fattr(snm02$)
READ RECORD (snm02,KNUM=0,KEY=sn$,dom=*next)snm02$

rem ' temp code to limit the abiliity of BSG customers from exchanging SF user for EF users
bsgSFUsers = 0, basSFUsers = 0, bsgEFUsers = 0, bsgEFUsers = 0
if firm_id$ = "02" then
    if snm02.lic_property1$ = "SF" then 
        bsgSFUsers = snm02.users1
    else
        if snm02.lic_property2$ = "SF" then
            bsgSFUsers = snm02.users2
        endif
    endif
endif
if firm_id$ = "02" then
    if snm02.lic_property1$ = "EF" then 
        bsgEFUsers = snm02.users1
    else
        if snm02.lic_property2$ = "EF" then
            bsgEFUsers = snm02.users2
        endif
    endif
endif
if firm_id$ = "01" then
    if snm02.lic_property1$ = "SF" then 
        basSFUsers = snm02.users1
    else
        if snm02.lic_property2$ = "SF" then
            basSFUsers = snm02.users2
        endif
    endif
endif
if firm_id$ = "01" then
    if snm02.lic_property1$ = "EF" then 
        basEFUsers = snm02.users1
    else
        if snm02.lic_property2$ = "EF" then
            basEFUsers = snm02.users2
        endif
    endif
endif

LET auth$="*** Not Available ***"
READ (snt01,KNUM=0,KEY=sn$,DOM=*next)
while 1
  READ RECORD (snt01,END=*break)snt01$
  IF CVS(snt01.serial_nbr$,3)<>CVS(sn$,3) THEN break
  if cvs(snt01.auth_code$,3)="" THEN continue
  LET auth$=snt01.auth_code$
wend
contract$=CVS(snm01.contract$,3)
expiration_date$=""
GOSUB get_contract_info

dim param$:"mbid:c(4),lang:c(2*),text1:c(1*),text2:c(1*)"
param.lang$=lang$
param.mbid$="R4"
call "ec_translate.bbj",param$
rem ' toggle_off$=param.text1$
rem ' toggle_on$=param.text2$
rem ' toggle_cue$=toggle_off$
rem ' if sam_flag=1 and smc01.renew_flag$="N" then toggle_cue$=toggle_on$
param.mbid$="R5"
call "ec_translate.bbj",param$
rnw_active_text$=param.text1$
rnw_inactive_text$=param.text2$

IF contract_type$<>"" THEN expiration_date$=DATE(fnjul(smc01.expire_on_dt$):"%D %Ms %Yl")
if contract_type$="SM1" and snm01.sam_active$="N" then expiration_date$="NO SAM"
product_code$=snm01.product$
dim csm01$:fattr(csm01$)
FIND RECORD (csm01,KEY=firm_id$+product_code$,ERR=*next)csm01$
product$=CVS(csm01.description$,3)
sam_required$=csm01.ctr_required$

platform_code$=snm01.platform$
dim csm02$:fattr(csm02$)
FIND RECORD (csm02,KEY=firm_id$+platform_code$,ERR=*next)csm02$
platform$=CVS(csm02.description$,3)
rem --- if cvs(snm01.media_type$,3) = "VIR" then platform$ = platform$ + "        (Virtual)"
if cvs(snm01.media_type$,3) = "VIR" then let win_view_sn.virtualFlag = 1

os_level_code$=snm01.os_level$
dim csm03$:fattr(csm03$)
FIND RECORD (csm03,KEY=firm_id$+os_level_code$,ERR=*next)csm03$
os_level$=fnosdesc$(x$)

product_rev_code$=snm01.product_rev$
dim csm04$:fattr(csm04$)
FIND RECORD (csm04,KEY=firm_id$+product_rev_code$,ERR=*next)csm04$
product_rev$=CVS(csm04.description$,3)

license_type_code$=snm01.license_type$
dim csm05$:fattr(csm05$)
FIND RECORD (csm05,KEY=firm_id$+license_type_code$,ERR=*next)csm05$
license_type$=CVS(csm05.description$,3)

DIM item$(20)
item$(1)=snm01.product$+snm01.platform$+snm01.os_level$+snm01.product_rev$+snm01.license_type$
ivm_item$=item$
gosub ivm_item
desc$=ivm01.item_desc$

exp_ok$="NNN"
if sam_renew_status<2 and contract_type$="SM1" and renewable_sam=0 then 
  ivm_item$(13,3)="EXP"
  gosub ivm_item
  if ivmok then exp_ok$(1,1)="Y"
fi
if csm04.key_or_licen$="L" then exp_ok$(2,1)="Y"
if snm01.license_type$="STD" then exp_ok$(3,1)="Y"

server_sn$=""
REM ' is this serial a linked server or client?
READ (snt02,KNUM=0,KEY=sn$,DOM=*next)
while 1
  k$=KEY(snt02,ERR=*break)
  IF POS(sn$=k$)=1 THEN LET server_sn$=sn$;break
  READ (snt02,KNUM=1,KEY=sn$,DOM=*next)
  k$=KEY(snt02,ERR=*break)
  IF POS(sn$=k$)=1 THEN LET server_sn$=k$(21,20)
  break
wend
win_view_sn.authorization$=auth$
d$=fnaondate$(snm01.orig_sale_date$)
win_view_sn.purchase_date$=d$
win_view_sn.status$=snm01.active_flag$
win_view_sn.product$=product$
win_view_sn.platform$=platform$
win_view_sn.oslevel$=os_level$
win_view_sn.revision$=product_rev$
win_view_sn.license$=license_type$
win_view_sn.users$=STR(snm01.users)
if snm02.users1 then win_view_sn.users$=str(snm02.users1)+" "+snm02.lic_property1$
if snm02.users2 then win_view_sn.users$=win_view_sn.users$+", "+str(snm02.users2)+" "+snm02.lic_property2$
win_view_sn.item_number$=item$
win_view_sn.description$=desc$
win_view_sn.expiration_date$=expiration_date$
win_view_sn.available_support$=STR(snm01.avail_support)
IF snm01.product$="TAO" THEN win_view_sn.authorization$="N/A",win_view_sn.users$="N/A"
eu$=""
readrecord(snmel,key=sn$,knum=0,dom=*next)snmel$
while sn$=snmel.serial_nbr$
  readrecord(snmeu,key=snmel.end_user_nbr$,dom=*next)snmeu$
  if snmeu.end_user_nbr$<>snmel.end_user_nbr$ then break
  eu$=cvs(snmeu.reference_nbr$,3)
  if eu$<>"" then eu$="("+eu$+") "
  eu$=eu$+cvs(snmeu.company_name$,3)
  break
wend
win_view_sn.enduser$=eu$

rem ' manage the stopPerPetNote check box
checksn$ = sn$ + fill(20), checksn$ = checksn$(1,20)
found = 0
read record(sn_dormant_sn, key = checksn$, dom=*next)sn_dormant_sn$; found = 1
if found then
    win_view_sn.stopPerPetNote = 1
else
    win_view_sn.stopPerPetNote = 0
fi

rem ' manage the lmited to specific hostid Message
found = 0
read record(sn_limit_hostid, key = checksn$, dom=*next)sn_limit_hostid$; found = 1
if found then 
    win_view_sn.limitHostIDMsg$ = "Lmited to host: "
    win_view_sn.limitHostIDHost$ = sn_limit_hostid.hostid$
else
    win_view_sn.limitHostIDMsg$ = ""
    win_view_sn.limitHostIDHost$ = ""
fi

set_focus_view_sn: 
win_view_sn$=fngb__put_screen$(win_id_view_sn$,win_view_sn$)
upd_id=NUM(FATTR(win_view_sn$,"Change","ID"))
rnw_id=NUM(FATTR(win_view_sn$,"renew","ID"))
ctl_id=NUM(FATTR(win_view_sn$,"Serial_Number","ID"))
rem ' toggle_id=NUM(FATTR(win_view_sn$,"toggle_renew","ID")) ; rem ' toggle_renew is gone
rnw_status$=rnw_active_text$
if smc01.renew_flag$="N" then rnw_status$=rnw_inactive_text$
if sam_flag=0 or sam_active$="N" then rnw_status$=""
ctl_id=NUM(FATTR(win_view_sn$,"renewal_status","ID"))
print (gb__sysgui)'title'(ctl_id,rnw_status$) 

IF win_view_sn.status$="Y" THEN 
  sn_editable=LEN(sn$)
  PRINT (gb__sysgui)'ENABLE'(upd_id)
  rem ' if sam_flag then 
  rem '   PRINT (gb__sysgui)'enable'(toggle_id),'CUE'(toggle_id,toggle_cue$,"")
  rem '   if sam_renew_status=20 then print (gb__sysgui)'disable'(toggle_id)
  rem ' fi
  rem ' if contract_type$ = "DV1" or contract_type$ = "RN1" then
  rem '   PRINT (gb__sysgui)'enable'(toggle_id),'CUE'(toggle_id,toggle_cue$,"")
  rem ' fi
  if renewable then print (gb__sysgui)'enable'(rnw_id) else print (gb__sysgui)'disable'(rnw_id)
ELSE 
  sn_editable=0
  PRINT (gb__sysgui)'DISABLE'(upd_id,rnw_id)
fi

rem ' set the renew type list button
viewSN! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow("View SN"))
renewTypeListButton! = viewSN!.getListButton("renewType")
renewTypeListButton!.removeAllItems()
renewTypeListItems$ = "Active" + $0A$ + "Proforma" + $0A$ + "No Renew" + $0A$
renewTypeListButton!.insertItems(0, renewTypeListItems$)
renTypMast$ = "AYN"; renTyp$ = smc01.renew_flag$
rtIndex = pos(renTyp$ = renTypMast$)
ListItems$ = renewTypeListItems$
if rtIndex = 0 then rtIndex = 2
for x = 1 to rtIndex
    p = pos($0A$ = ListItems$)
    xItem$ = ListItems$(1, p - 1)
    ListItems$ = ListItems$(p + 1)
next x
rtIndex = rtIndex - 1
renewTypeListButton!.selectIndex(rtIndex)

rem ' manage the virutal chack box
if snm01.product$ <> "BAS" and snm01.product$ <> "PR5" and snm01.product$ <> "VP5" then
    sysgui!.getWindow(gb__win.view_sn).getControl("virtualFlag").setEnabled(0)
else 
    if snm01.active_flag$ = "N" then
        sysgui!.getWindow(gb__win.view_sn).getControl("virtualFlag").setEnabled(0)
    else
        if virtualEligible or cvs(snm01.media_type$,3) = "VIR" then
            sysgui!.getWindow(gb__win.view_sn).getControl("virtualFlag").setEnabled(1)
        else
            sysgui!.getWindow(gb__win.view_sn).getControl("virtualFlag").setEnabled(0)
        fi
    fi
fi

rem ' added to ensure the Renew button and Toggle Renew button are always disabled for HeimBAS
rem ' HeimBAS mod
if firm_id$="02" and cust_num$="020005" then
    rem ' disable the SAM Renewal buttons
    sysgui!.getWindow(gb__win.view_sn).getControl(181).setEnabled(0)
    rem ' sysgui!.getWindow(gb__win.view_sn).getControl(182).setEnabled(0)
    rem ' 116 is renewType
    sysgui!.getWindow(gb__win.view_sn).getControl(116).setEnabled(0)
fi

rem ' added to manage the Send License button
if csm04.key_or_licen$ = "L" and snm01.active_flag$ = "Y" then
    rem ' serial number is a licensed product and is active
    sysgui!.getWindow(gb__win.view_sn).getControl(106).setEnabled(1)
else
    sysgui!.getWindow(gb__win.view_sn).getControl(106).setEnabled(0)
fi

PRINT (gb__sysgui)'FOCUS'(ctl_id),'CONTEXT'(save_context)

return

[Function (Show Window)]
rem ' -----------------------------------------------------------------
rem ' Show Window
rem ' -----------------------------------------------------------------

Show_Window:

print(gb__sysgui)'context'(old_context),'setcursor'(3)
dim loc$:"x:i(2),y:i(2),w:u(2),h:u(2)"
loc$=ctrl(gb__sysgui,0,0,old_context)
print(gb__sysgui)'context'(new_context),'move'(0,loc.x,loc.y)
gosub win_title
print(gb__sysgui)'context'(old_context),'hide'(0),'context'(new_context),'enable'(0),'show'(0),'focus'(0),'raise','setcursor'(0),'flush'

if focus_id then print(gb__sysgui)'context'(new_context),'focus'(focus_id)
currentWindow! = sysgui!.getWindow(new_context)
jul_today=jul(0,0,0)

rem ' added to allow HeimBAS to manage their serial nubmers
rem ' HeimBAS mod
if gb__win.cart > 0 and new_context = gb__win.cart then
    if firm_id$="02" and cust_num$="020005" then
        rem ' disable the purchase button
        sysgui!.getWindow(gb__win.cart).getControl(114).setEnabled(0)
    fi
fi
if gb__win.view_sn > 0 and new_context = gb__win.view_sn then
    if firm_id$="02" and cust_num$="020005" then
        rem ' disable the SAM Renewal buttons
        sysgui!.getWindow(gb__win.view_sn).getControl(181).setEnabled(0)
        rem ' sysgui!.getWindow(gb__win.view_sn).getControl(182).setEnabled(0)
        rem ' 116 is renewType
        sysgui!.getWindow(gb__win.view_sn).getControl(116).setEnabled(0)
    fi
fi

rem ' added 5/29/2013 to hide the objects assicated with shipping CD-ROMs
if gb__win.checkout_1 > 0 and new_context = gb__win.checkout_1 then
    currentWindow!.getControl(200).setVisible(0); rem ' Ship Media group box
    currentWindow!.getControl(902).setVisible(0); rem ' CD-ROM label
    currentWindow!.getControl(903).setVisible(0); rem ' CD-ROM edit box
    currentWindow!.getControl(904).setVisible(0); rem ' Reset Button
    currentWindow!.getControl(905).setVisible(0); rem ' USA ship button
    currentWindow!.getControl(906).setVisible(0); rem ' Internation ship button
    currentWindow!.getControl(928).setVisible(0); rem ' shipping address group box 
    currentWindow!.getControl(929).setVisible(0); rem ' static text
fi

rem ' manage the profServBtn 
if gb__win.main > 0 and new_context = gb__win.main then
    if firm_id$ = "01" then
        currentWindow!.getControl("profServBtn").setVisible(0); rem ' Purchase Professional Service Button
    else
        if firm_id$ = "02" then
            currentWindow!.getControl("profServBtn").setVisible(1); rem ' Purchase Professional Service Button
        else
            currentWindow!.getControl("profServBtn").setVisible(0); rem ' Purchase Professional Service Button
        fi
    fi
fi

if gb__win.view_sn > 0 and new_context = gb__win.view_sn then
    if firm_id$ = "01" then
        currentWindow!.getControl(110).setVisible(1); rem ' Direct Renew Button
        currentWindow!.getControl(181).setVisible(1); rem ' Renew button
    else
        if firm_id$ = "02" then
            currentWindow!.getControl(110).setVisible(0); rem ' Direct Renew Button
            currentWindow!.getControl(181).setVisible(1); rem ' Renew button
        fi
    fi
fi

rem ' manage the Features button on the Edit SN form
rem ' if gb__win.edit_sn > 0 and new_context = gb__win.edit_sn then
rem '     featureBtn! = cast(BBjButton, BBjAPI().getSysGui().getWindow(gb__win.edit_sn).getControl("featureBtn"))
rem '     featureBtn!.setVisible(1)
rem ' fi
rem ' this feature button will be available to all customers

rem ' reversed out 10/16/2018
rem ' if firm_id$ = "01" and new_context = gb__win.edit_sn then
rem '     users2_id = 160
rem '     PRINT (gb__sysgui)'CONTEXT'(gb__win.edit_sn),'disable'(users2_id),
rem ' fi
rem ' if firm_id$ = "01" and new_context = gb__win.trade then
rem '     std_users = 143
rem '     PRINT (gb__sysgui)'CONTEXT'(gb__win.trade),'disable'(std_users),
rem ' fi

return

[Function (Start SN Description)]
rem ' -----------------------------------------------------------------
rem ' Start SN Description
rem ' -----------------------------------------------------------------

Start_SN_Description:

LET tmpdesc$=CVS(snm01.serial_nbr$,3)+" - "
READ RECORD (csm01,KEY=firm_id$+item$(1,3),DOM=*NEXT)csm01$; LET tmpdesc$=tmpdesc$+CVS(csm01.description$,3)+" - "
READ RECORD (csm02,KEY=firm_id$+item$(4,3),DOM=*NEXT)csm02$; LET tmpdesc$=tmpdesc$+CVS(csm02.description$,3)+" - "
READ RECORD (csm03,KEY=firm_id$+item$(7,3),DOM=*NEXT)csm03$; LET tmpdesc$=tmpdesc$+CVS(csm03.description$,3)+" - "
READ RECORD (csm04,KEY=firm_id$+item$(10,3),DOM=*NEXT)csm04$; LET tmpdesc$=tmpdesc$+"Revision "+CVS(csm04.description$,3)+" - "
READ RECORD (csm05,KEY=firm_id$+item$(13,3),DOM=*NEXT)csm05$; LET tmpdesc$=tmpdesc$+CVS(csm05.description$,3)+" - "+STR(start_users)+" user"
IF start_users>1 THEN LET tmpdesc$=tmpdesc$+"s"
READ RECORD (smc01,KEY=snm01.contract$,DOM=start_sn_description_done)smc01$
LET days_expired=jul_today-fnjul(smc01.annual_dt$)
LET tmp$=smc01.annual_dt$,tmpandt$=tmp$(5,2)+"/"+tmp$(7,2)+"/"+tmp$(1,4)
LET tmpdesc$=tmpdesc$+" -- SAM date "+tmpandt$
IF smc01.sam_active$="N" or days_expired>0 or snm01.sam_active$="N" then tmpdesc$=tmpdesc$+" (INACTIVE)"
p=pos(snm01.serial_nbr$=xreflist$)
if p=0 then goto start_sn_description_done
temp$=xreflist$(p),p=pos($0a$=temp$)
if p=41 then tmpdesc$=tmpdesc$+" -- Data server "+cvs(temp$(21,20),3)+" is linked to allow exchange to Extended"
start_sn_description_done: 

return

[Function (Total Price)]
rem ' -----------------------------------------------------------------
rem ' Total Price
rem ' -----------------------------------------------------------------

Total_Price:

LET price=0,listprice=0,promo_discount=0
FOR nbr=0 TO nbr_trans
IF type$[nbr]<>"" THEN 
  LET price=price+price[nbr] 
  listprice=listprice+price[nbr+nbr_trans+1]
fi

p=pos($0a$=comments$,1,nbr+1)
if p=0 then continue
comments$=comments$(1,p-1)+str(price[nbr]:"######.00-")+comments$(p)
NEXT nbr
disc_incl$=""
if partner_disc=0 or price=0 then return
rem tmppct=0,promo_line_code$=""
rem if inhouse or user_code$="**" or pos("P"=arm02.cust_type$)<>1 then return
rem tmppct=.05
rem promo_line_code$="o"
rem LET promo_discount=listprice*tmppct
rem LET price=price-promo_discount
rem LET m$=STR(promo_discount:"######.00"),m$=CVS(m$,3)
disc_incl$="(Online discount applied)"
rem if lang$="DE" then m$="Rabatt inbegriffen"
comments$=comments$+disc_incl$+$0a$

return

[Function (Trade Newitem)]
rem ' -----------------------------------------------------------------
rem ' Trade Newitem
rem ' -----------------------------------------------------------------

Trade_Newitem:

DIM m_item$(20)
LET m_item$(1,3)=product_code$,m_item$(4,3)=platform_code$
LET m_item$(7,3)=os_level_code$,m_item$(10,3)=revision_code$
LET m_item$(13,3)=license_code$

LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"sam_standard,ent_users,std_users")

LET sam_flag=(win_trade.sam_standard$="1")
LET ent_users=fnnum(win_trade.ent_users$)
std_users=fnnum(win_trade.std_users$)
std_add=std_users-default_std_users
ent_add=ent_users-default_ent_users

return

[Function (Trade Page)]
rem ' -----------------------------------------------------------------
rem ' Trade Page
rem ' -----------------------------------------------------------------

Trade_Page:

rem ' create the trade window if needed
new_context=fnCreateWindowIfNeeded("118")

PRINT (gb__sysgui)'SETCURSOR'(3)
GOSUB get_itemlist
IF items=0 THEN PRINT (gb__sysgui)'SETCURSOR'(0); RETURN
jul_base=jul_today
jul_default=fnjul(sam_dt$)
IF edit_action$="new" THEN 
  LET sam_flag=1,sam_required$="R"
  LET product_code$="",platform_code$="",os_level_code$=""
  LET revision_code$="",license_code$=""
  std_users=default_std_users
  ent_users=default_ent_users
  ent_add=0,std_add=0
  jul_renew=fnjul(sam_dt$)
else
  std_add=std_users-default_std_users
  ent_add=ent_users-default_ent_users
FI 

LET msg$=""
if expired_sam then 
  junk$="M46"+$0a$
  mb_mode=0
  gosub translate_mbox
  PRINT (gb__sysgui)'SETCURSOR'(0)
  RETURN
fi
IF edit_action$="new" OR !(init_trade) THEN LET win_trade$=fngb__get_screen$(win_id_trade$,win_trade$),init_trade=1

LET ilen=POS($0A$=itemlist$),product_code_list$="",product_desc_list$=""
LET index=0,product_index=-1

FOR i=0 TO items-1
  LET product$=itemlist$(ilen*i+1,3)
  READ (CSM13D,KEY=firm_id$+"D"+product$,DOM=*next)
  while 1
    READ RECORD (CSM13D,END=*break)csm13d$
    IF csm13d.firm_id$+csm13d.cm_file_type$+csm13d.product$<>firm_id$+"D"+product$ THEN break
    if pos(csm13d.type_of_sale$="TRD,EXC")=0 then continue
    READ RECORD (csm01,KEY=firm_id$+csm13d.new_product$,DOM=*continue)csm01$
    if csm01.online_flag$<>"Y" then continue
    LET p=POS(csm01.description$=product_desc_list$)
    IF p=0 THEN 
      LET product_desc_list$=product_desc_list$+csm01.description$+$0A$
      LET product_code_list$=product_code_list$+csm01.product$
      IF product_code$=csm01.product$ THEN LET product_index=index
      LET index=index+1
    FI 
  wend
NEXT i
if index=1 then product_index=0,product_code$=product_code_list$(1,3)
IF product_index>=0 THEN LET product_desc_list$=product_desc_list$+$FF$+STR(product_index)
lb_id=num(fattr(win_trade$,"product","ID"))
gosub disable_list_button

REM *** Platform list, license type list
LET platform_desc_list$="",license_desc_list$=""
IF product_code$<>"" THEN 
  LET temp_product_code$=product_code$,temp_platform_code$=platform_code$
  lb_id=num(fattr(win_trade$,"platform","ID"))
  GOSUB platform_list
  LET ltcode$=license_code$,prdcode$=product_code$
  lb_id=num(fattr(win_trade$,"license","ID"))
  GOSUB license_list
  platform_code$=temp_platform_code$
FI 

REM *** Os level list
LET os_level_desc_list$=""
IF platform_code$<>"" THEN 
  LET temp_platform_code$=platform_code$,temp_os_level_code$=os_level_code$
  GOSUB os_level_list
  WHILE os_level_index<0
    READ RECORD (csm03,KEY=firm_id$+os_level_code$,DOM=*break)csm03$
    LET os_level_list$=os_level_code$+os_level_list$
    LET os_level_desc_list$=fnosdesc$(x$)+$0A$+os_level_desc_list$+$FF$+STR(0),os_level_index=1
  WEND
  os_level_code$=temp_os_level_code$
FI 

REM *** Revision list
LET revision_desc_list$=""
IF os_level_code$<>"" THEN 
  LET temp_os_level_code$=os_level_code$
  LET temp_product_rev_code$=revision_code$
  lb_id=num(fattr(win_trade$,"revision","ID")) 
  GOSUB revision_list
  WHILE product_rev_index<0
    READ RECORD (csm04,KEY=firm_id$+product_rev_code$,DOM=*break)csm04$
    LET revision_list$=product_rev_code$+revision_list$
    LET revision_desc_list$=CVS(csm04.description$,3)+$0A$+revision_desc_list$+$FF$+STR(0),product_rev_index=1
  WEND
  revision_code$=temp_product_rev_code$
FI 

LET win_trade.product$=product_desc_list$
LET win_trade.platform$=platform_desc_list$
LET win_trade.oslevel$=os_level_desc_list$
LET win_trade.revision$=revision_desc_list$
LET win_trade.license$=license_desc_list$
LET win_trade.price$=""
LET win_trade.listprice$=""
LET win_trade.comments$=""
LET win_trade.ent_users$=STR(ent_users)
LET win_trade.std_users$=STR(std_users)
LET win_trade.sam_standard$=STR(sam_flag=1)
LET win_trade.runtime$="0"
IF edit_action$="chg" THEN 
  if pos("R"=ece11.lic_property1$)=2 or pos("R"=ece11.lic_property2$)=2 then win_trade.runtime$="1"
  win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"runtime")
fi
LET win_trade.selected_sn_lbox$=snlist$
READ RECORD (csm01,KEY=firm_id$+product_code$,DOM=*NEXT)csm01$
LET sam_required$=csm01.ctr_required$
LET prod_group_id=NUM(FATTR(win_trade$,"new_product","ID"))
LET cart_id=NUM(FATTR(win_trade$,"accept","ID"))
LET cancel_id=NUM(FATTR(win_trade$,"cancel","ID"))
LET std_cbox_id=NUM(FATTR(win_trade$,"sam_standard","ID"))
focus_id=0

tradeWindow! = sysgui!.getWindow(gb__win.trade)
renew_dt_btn_id=num(fattr(win_trade$,"renew_dt_btn","ID"))
renew_dt_id=num(fattr(win_trade$,"renew_dt","ID"))
renew_dt!=tradeWindow!.getControl(renew_dt_id)
if jul_renew then renew_dt!.setValue(jul_renew) else renew_dt!.setText(" ")
temp$=renew_dt!.getText()
win_trade.renew_dt$=temp$

old_context=gb__win.trade_select
IF edit_action$="chg" THEN 
  LET trade_window=1
  GOSUB trade_price
  old_context=gb__win.cart
fi
LET win_trade$=fngb__put_screen$(win_id_trade$,win_trade$)
gosub show_window

PRINT (gb__sysgui)'context'(new_context),'ENABLE'(std_cbox_id,renew_dt_id,renew_dt_btn_id)

rem ' disable std_users - reversed 10/16/2018
rem ' if firm_id$ = "01" then print(gb__sysgui)'context'(new_context),'disable'(143)

rem BWH 
tradeWindow!.getControl(prod_group_id).setOpaque(sysgui!.FALSE)

PRINT (gb__sysgui)'DISABLE'(std_cbox_id)

return

[Function (Trade Price)]
rem ' -----------------------------------------------------------------
rem ' Trade Price
rem ' -----------------------------------------------------------------

Trade_Price:

rem ' block user counts over 9999
if std_users + ent_users > 9999 then
    commentlist$="**Price can't be calculated for this item" + $0A$
    win_trade.price$="n/a"
    win_trade.listprice$="n/a"
    goto set_trade_comments
fi

REM 'm_item$,sam_flag,default_std_users,default_ent_users,ent_add,std_add,itemlist$ must all be set before calling this routine 
LET items=POS($0A$=itemlist$,1,0),ilen=POS($0A$=itemlist$),tranlist$="",commentlist$="",ok=0
IF items=0 THEN RETURN
LET z=55; REM length of tranlist entry
REM Dim sn array elements>number of possible transactions - sn's
REM (terminated by $0a$) are stored in the element of the array 
REM corresponding to transaction # (zero based)
DIM sn_array$[items*10]

if pos($0a$=selected_sn_list$)=0 then return
if pos("   "=m_item$)<16 then return

if trade_window then
  jul_renew=renew_dt!.getValue()
  if jul_renew<0 then jul_renew=0
fi
LET win_trade$=fngb__get_fields$(win_id_trade$,win_trade$,"runtime")
ffun=(win_trade.runtime$="0")
rem 'pass runtime flag in tranlist - clear tranlist in ec_trade
if ffun=0 then tranlist$="R"
sam_disc=0
gosub get_discount
xtra$=lang$+$0a$+str(disc_pct+partner_disc)+$0a$+"0"+$0a$+"0"+$0a$+"0"+$0a$

rem ' debuggin
if we_are_debuggin then
    print "before call to ec_trade.bbj"
    print "ec_trade: ",selected_sn_list$
    print "ec_trade: ",m_item$
    print "ec_trade: extended add: ",ent_add
    print "ec_trade: standard add: ",std_add
    print "ec_trade: jul renew: ",jul_renew
    print "ec_trade: comment list: ",commentlist$
    print "ec_trade: tranlist: ",tranlist$
    print "ec_trade: xtra: ",xtra$
    input "before call e=escape ",debuginput$:(""=tpbResume1,"e"=tpbEscape1)
    tpbEscape1: escape
    tpbResume1:
endif

call "ec_trade.bbj",firm_id$,cust_num$,arm02,arm10i,csm01,csm02,csm03,csm04,csm05,csm07,csm10,csm13,ivm01,smc01,snm01,snm02,snt01,selected_sn_list$,m_item$,ent_add,std_add,jul_renew,commentlist$,tranlist$,xtra$

rem ' debuggin
if we_are_debuggin then
    print "after call to ec_trade"
    print "ec_trade: extended add: ",ent_add
    print "ec_trade: standard add: ",std_add
    print "ec_trade: jul renew: ",jul_renew
    print "ec_trade: comment list: ",commentlist$
    if mod(len(tranlist$),55) = 0 then
    	for x = 1 to len(tranlist$) step 55
    		print "ec_trade: tranlist$(" + str(x) + ",55): "
                print tranlist$(x,55)
    	next x
    else
	print "ec_trade: tranlist: ",tranlist$
    endif
    print "ec_trade: xtra: ",xtra$
    input "return from call e=escape ",debuginput$:(""=tpResume1,"e"=tpEscape1)
    tpEscape1: escape
    tpResume1:
endif

i=0,tempcom$=commentlist$,addcom$=""
while len(tempcom$)
 p=pos($0a$=tempcom$);if p=0 then break
 temp$=tempcom$(1,p-1),tempcom$=tempcom$(p+1)
 if pos(" to "=temp$) then addcom$=cvs(temp$,3); rem 'save user change comment for later use 
 if pos("decrease"=temp$)=0 or len(temp$)<9 then continue
 temp$=temp$(len(temp$)-8)
 if pos(temp$=selected_sn_list$) then sn_array$[0]=sn_array$[0]+temp$+$0a$,i=1
wend
sn_array$[i]=selected_sn_list$
DIM new_users[2],new_lprop$[2],cur_users[2],cur_lprop$[2]
std_users=default_std_users+std_add 
ent_users=default_ent_users+ent_add 
temp$="RF"
i=0
if ent_users then new_lprop$[i]="E"+temp$(ffun+1,1),new_users[i]=ent_users,i=i+1
if std_users then new_lprop$[i]="S"+temp$(ffun+1,1),new_users[i]=std_users
LET ok=!(POS("**"=commentlist$)=1)
if ok=0 then 
    win_trade.price$="n/a"
    win_trade.listprice$="n/a"
    goto set_trade_comments
fi
jul_base=jul_today
jul_default=fnjul(sam_dt$)
if jul_renew=0 then jul_renew=jul_default
gosub renew_dt_info
commentlist$=commentlist$+renew_dt_info$

if trade_window then renew_dt!.setValue(jul_renew)

IF LEN(tranlist$)<z THEN GOTO set_trade_comments

REM "Reset nbr_trans, type/price arrays for create_order subroutine in
REM "checkout, putting transactions and associated sn's in proper order
LET nbr_trans=LEN(tranlist$)/z-1,tran=0
DIM type$[nbr_trans],price[nbr_trans*2+1],are83_snlist$[nbr_trans],t_qty[nbr_trans],t_users[nbr_trans],t_desc$[nbr_trans]

FOR y=0 TO 3; REM put in line_sort order (0 - 3)
  FOR x=0 TO nbr_trans
    IF STR(y)=tranlist$(x*z+1,1) THEN 
      LET type$[tran]=tranlist$(x*z+2,3)+"|"+tranlist$(x*z+5,20)
      LET t_desc$[tran]=type$[tran](5)
      if pos("ADD"=type$[tran]) and addcom$<>"" then t_desc$[tran]=addcom$
      LET price[tran]=NUM(tranlist$(x*z+34,11))
      price[tran+nbr_trans+1]=NUM(tranlist$(x*z+45,11))
      LET t_qty[tran]=NUM(tranlist$(x*z+31,3))
      LET t_users[tran]=NUM(tranlist$(x*z+25,6))
      LET are83_snlist$[tran]=sn_array$[x]
      LET tran=tran+1
    FI 
  NEXT x
NEXT y

GOSUB total_price
IF partner_disc THEN LET commentlist$=commentlist$+disc_incl$+$0a$
LET win_trade.price$=CVS(STR(price:amount_mask$),3+64)
LET win_trade.listprice$=CVS(STR(listprice:amount_mask$),3+64)

set_trade_comments: 
LET win_trade.comments$=commentlist$
IF trade_window THEN 
  LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"price,listprice,comments")
  IF sam_flag=0 AND hold_sam_flag THEN 
    LET win_trade.sam_standard$="0"
    LET win_trade$=fngb__put_fields$(win_id_trade$,win_trade$,"sam_standard")
  FI 
FI 
trade_price_end: 

return

[Function (Trade Recalc)]
rem ' -----------------------------------------------------------------
rem ' Trade Recalc
rem ' -----------------------------------------------------------------

Trade_Recalc:

GOSUB trade_newitem

LET trade_window=1
GOSUB trade_price
PRINT (gb__sysgui)'context'(gb__win.trade),'ENABLE'(renew_dt_id,renew_dt_btn_id)

return

[Function (Translate Mbox)]
rem ' -----------------------------------------------------------------
rem ' Translate Mbox
rem ' -----------------------------------------------------------------

Translate_Mbox:

dim param$:"mbid:c(4),lang:c(2*=0),text1:c(1*=0),text2:c(1*=0)"
param.lang$=lang$
j1=pos($0a$=junk$)
if j1 then param.mbid$=junk$(1,j1-1),junk$=junk$(j1+1)
j1=pos($0a$=junk$)
if j1 then param.text1$=junk$(1,j1-1),junk$=junk$(j1+1)
j1=pos($0a$=junk$)
if j1 then param.text2$=junk$(1,j1-1),junk$=junk$(j1+1)
call "ec_translate.bbj",param$
i=MSGBOX(param.text2$,mb_mode,param.text1$)

return

[Function (Unset RIF)]
rem ' -----------------------------------------------------------------
rem ' Unset RIF
rem ' -----------------------------------------------------------------

Unset_RIF:

  win_edit_sn.no_rif$="0",no_rif=0
  win_edit_sn$=fngb__put_fields$(win_id_edit_sn$,win_edit_sn$,"no_rif")
  renew_dt!.focus() 
enable_disable_rif:
  if pos("N"=exp_ok$) or sam_flag=0 then PRINT (gb__sysgui)'DISABLE'(no_rif_id) else PRINT (gb__sysgui)'enable'(no_rif_id) 

return

[Function (Update Edit SN Price)]
rem ' -----------------------------------------------------------------
rem ' Update Edit SN Price
rem ' Assumes win_edit_sn$ is up to date
rem ' -----------------------------------------------------------------

Update_Edit_SN_Price: 
LET sam_flag=(win_edit_sn.sam_standard$="1")

DIM old_item_code$(20)
LET old_item_code$(1)=old_product_code$+old_platform_code$+old_os_level_code$+old_product_rev_code$+old_license_code$
LET temp_os_level_code$=old_os_level_code$
LET temp_product_rev_code$=old_product_rev_code$

LET temp$=win_edit_sn.product$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(product_list$) THEN LET new_product_code$=product_list$(temp*3+1,3)

LET temp$=win_edit_sn.platform$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(platform_list$) THEN LET new_platform_code$=platform_list$(temp*3+1,3)

LET temp$=win_edit_sn.oslevel$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(os_level_list$) THEN LET new_os_level_code$=os_level_list$(temp*3+1,3),temp_os_level_code$=new_os_level_code$

LET temp$=win_edit_sn.revision$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(revision_list$) THEN LET new_product_rev_code$=revision_list$(temp*3+1,3),temp_product_rev_code$=new_product_rev_code$

LET temp$=win_edit_sn.license$,temp=POS($FF$=temp$)
IF temp THEN LET temp=NUM(temp$(temp+1)); IF temp>=0 AND (temp+1)*3<=LEN(license_list$) THEN LET new_license_code$=license_list$(temp*3+1,3)

DIM new_item_code$(20)
LET new_item_code$(1)=new_product_code$+new_platform_code$+new_os_level_code$+new_product_rev_code$+new_license_code$

DIM item$(20)
LET item$(1)=new_item_code$
ivm_item$=item$
gosub ivm_item
if ivmok=0 then 
  ok=0,comments$="**Continue"+$0a$
  if lang$="DE" then comments$="**Fortsetzen"+$0a$
  goto no_price
fi

LET qty=1
DIM type$[0:1],price[0:1]; REM 'dummies - redimensioned in price program

DIM cur_users[2],new_users[2],cur_lprop$[2],new_lprop$[2]
cur_lprop$[0]=snm02.lic_property1$
cur_lprop$[1]=snm02.lic_property2$
cur_users[0]=snm02.users1
cur_users[1]=snm02.users2
if cur_users[0]+cur_users[1]=0 then cur_users[0]=snm01.users
dim csmtmp$:fattr(csm01$)
READ RECORD (csm01,KEY=firm_id$+item$(1,3),DOM=*NEXT)csmtmp$
new_users[0]=fnnum(win_edit_sn.users$)
new_users[1]=fnnum(win_edit_sn.users2$)

if new_users[0] + new_users[1] > 9999 then
    comments$="**Price can't be calculated for this item" + $0A$
    ok=0
    goto no_price
fi

LET win_edit_sn$=fngb__get_fields$(win_id_edit_sn$,win_edit_sn$,"runtime")
ffun=(win_edit_sn.runtime$="0")
temp$="RF"
p0$="E"+temp$(ffun+1,1)
p1$="S"+temp$(ffun+1,1)
temp$=csmtmp.lic_property1$+csmtmp.lic_property2$+csmtmp.lic_property3$+csmtmp.lic_property4$
if pos(p0$=temp$,2) and new_users[0] then new_lprop$[0]=p0$
if pos(p1$=temp$,2) and new_users[1] then new_lprop$[1]=p1$
gosub user_sort
DIM csm05$:FATTR(csm05$)
READ RECORD (csm05,KEY=firm_id$+new_item_code$(13,3),DOM=*NEXT)csm05$
expiring_license=(csm05.expires$="Y")+(csm05.license_type$="EXP")
DIM csm04$:FATTR(csm04$)
READ RECORD (csm04,KEY=firm_id$+new_item_code$(10,3),DOM=*NEXT)csm04$
if csm04.key_or_licen$="L" then exp_ok$(2,1)="Y" else exp_ok$(2,1)="Y"
if new_license_code$="STD" then exp_ok$(3,1)="Y" else exp_ok$(3,1)="N"
if pos("N"=exp_ok$) then 
  if no_rif then gosub unset_rif
else
  gosub enable_disable_rif
fi
add_tsi=fnnum(win_edit_sn.additional_support$)
cur_item$=old_item_code$,new_item$=new_item_code$
jul_renew=renew_dt!.getValue()
if jul_renew<0 then jul_renew=0
jul_base=jul_today
jul_default=jul_today+365
if jul_spec_date and sam_active$="Y" then jul_base=jul_spec_date
sam_disc=1
if new_users[0]<>cur_users[0] or new_users[1]<>cur_users[1] then sam_disc=0
if cvs(new_lprop$[0],3)<>cvs(cur_lprop$[0],3) or cvs(new_lprop$[1],3)<>cvs(cur_lprop$[1],3) then sam_disc=0
if sam_flag and cvs(contract$,3)="" then sam_disc=0

gosub ec_price

IF ok=0 then GOTO no_price
PRINT (gb__sysgui)'DISABLE'(renew_dt_id,renew_dt_btn_id) 
if sam_flag and sam_active$<>"Y" then 
  gosub renew_dt_info 
  if jul_renew<jul_default then jul_renew=jul_default
  renew_dt!.setValue(jul_renew)
  PRINT (gb__sysgui)'ENABLE'(renew_dt_id,renew_dt_btn_id)
  comments$=comments$+renew_dt_info$
fi

GOSUB total_price

no_price: 
LET win_edit_sn.comments$=comments$
if expiring_license=1 then
  jul_renew=fnjul(smc01.annual_dt$)+csm05.expire_days*(sam_flag<>0)*(ok<>0)
  renew_dt!.setValue(jul_renew)
fi

IF ok THEN 
  win_edit_sn.price$=CVS(STR(price:amount_mask$),3+64) 
  win_edit_sn.listprice$=CVS(STR(listprice:amount_mask$),3+64) 
ELSE  
  win_edit_sn.price$="n/a"
  win_edit_sn.listprice$="n/a"
fi

return

[Function (Update Item Price)]
rem ' -----------------------------------------------------------------
rem ' Update Item Price
rem ' Assumes win_item$ is up to date
rem ' -----------------------------------------------------------------
Update_Item_Price: 

LET item_code$="",desc$="",contract$=""
IF item_product_code$="" THEN LET item_code$=item_code$+"---" ELSE LET item_code$=item_code$+item_product_code$; FIND RECORD (csm01,KEY=firm_id$+item_product_code$)csm01$; LET sam_required$=csm01.ctr_required$
IF item_platform_code$="" THEN LET item_code$=item_code$+"---" ELSE LET item_code$=item_code$+item_platform_code$
IF item_os_level_code$="" THEN LET item_code$=item_code$+"---" ELSE LET item_code$=item_code$+item_os_level_code$
IF item_revision_code$="" THEN LET item_code$=item_code$+"---" ELSE LET item_code$=item_code$+item_revision_code$
IF item_license_code$="" THEN LET item_code$=item_code$+"---" ELSE LET item_code$=item_code$+item_license_code$

DIM item$(20)
LET item$(1)=item_code$

ivm_item$=item$
gosub ivm_item
LET desc$=ivm01.item_desc$
LET win_item.item_number$=item_code$
LET win_item.description$=desc$

LET qty=fnnum(win_item.quantity$)
LET users=fnnum(win_item.users$)
LET users2=fnnum(win_item.users2$)
LET sam_flag=(win_item.sam_standard$="1")
LET sam_std_id=NUM(FATTR(win_item$,"Sam_standard","ID"))

rem ' block user counts over 9999
if users + users2 > 9999 then
    comments$="**Price can't be calculated for this item" + $0A$
    ok=0
    goto skip_price_total
fi

LET save_context=DEC(CTRL(gb__sysgui))
PRINT (gb__sysgui)'CONTEXT'(gb__win.item)
LET win_item$=fngb__get_fields$(win_id_item$,win_item$,"runtime")
DIM csmtmp$:FATTR(csm01$)
READ RECORD (csm01,KEY=firm_id$+item$(1,3),DOM=*NEXT)csmtmp$
DIM csm03$:FATTR(csm03$)
READ RECORD (csm03,KEY=firm_id$+item$(7,3),DOM=*NEXT)csm03$
DIM type$[0:1],price[0:1]; REM ' dummies - redimensioned in price program
DIM cur_users[2],new_users[2],cur_lprop$[2],new_lprop$[2]
new_users[0]=users,new_users[1]=users2
temp$="RF"
ffun=(win_item.runtime$="0")
p0$="E"+temp$(ffun+1,1)
p1$="S"+temp$(ffun+1,1)
temp$=csmtmp.lic_property1$+csmtmp.lic_property2$+csmtmp.lic_property3$+csmtmp.lic_property4$
if pos(p0$=temp$,2) and new_users[0] then new_lprop$[0]=p0$
if pos(p1$=temp$,2) and new_users[1] then new_lprop$[1]=p1$
gosub user_sort
cur_item$="",new_item$=item_code$
jul_renew=renew_dt!.getValue()
if jul_renew<0 then jul_renew=0
jul_base=jul_today
jul_default=jul_today+365

rem ' added to set HeimBAS expiration date for 4 specific dates through out the year
rem ' HeimBAS mod
if firm_id$="02" and cust_num$="020005" then
    gosub setHeimBASSRenewDate
fi

sam_disc=0
gosub ec_price
IF ok=0 THEN GOTO skip_price_total
PRINT (gb__sysgui)'DISABLE'(renew_dt_id,renew_dt_btn_id) 
if sam_flag or rent_item and cvs(contract$,3)="" then 
  gosub renew_dt_info 
  if jul_renew=0 then jul_renew=jul_default
  renew_dt!.setValue(jul_renew)
  PRINT (gb__sysgui)'ENABLE'(renew_dt_id,renew_dt_btn_id)
  comments$=comments$+renew_dt_info$
fi
GOSUB total_price

skip_price_total: 
LET win_item.comments$=comments$
IF ok THEN 
  win_item.price$=CVS(STR(price:amount_mask$),3+64) 
  win_item.listprice$=CVS(STR(listprice:amount_mask$),3+64) 
ELSE 
  win_item.price$="n/a"
  win_item.listprice$="n/a"
fi

RETURN

[Function (Upg To)]
rem ' -----------------------------------------------------------------
rem ' Upg To
rem ' -----------------------------------------------------------------

Upg_To:

bbjprod$=ece11.item_number$(1,3)
bbjrev$=ece11.item_number$(10,3)

rem 'Not already a BBj product
if pos(bbjprod$="BEFBERBSFBSR,3")=0 then
 bbjprod$="B"+ece11.sam_coverage$+"R"
 if ece11.item_number$(13,3)<>"RTM" and ece11.item_number$(1,3)<>"ODB" then let bbjprod$(3,1)="F"
fi
rem 'Find the current rev of BBj
read (csm04,key=firm_id$+"CUR",dom=*next)*,bbjrev$
rem 'Not a valid BBj product
if pos(bbjprod$="BEFBERBSFBSR,3")=0 then bbjprod$="   ",bbjrev$="   "
rem 'Already got current product&rev
if bbjprod$=ece11.item_number$(1,3) and bbjrev$=ece11.item_number$(10,3) then bbjprod$="   ",bbjrev$="   "
ece11.upg_to_product$=bbjprod$
ece11.upg_to_rev$=cvs(bbjrev$,3)

return

[Function (User Sort)]
rem ' -----------------------------------------------------------------
rem ' User Sort
rem ' -----------------------------------------------------------------

User_Sort:

if cvs(cur_lprop$[0],3)<>cvs(new_lprop$[0],3) and cvs(cur_lprop$[1],3)<>cvs(new_lprop$[1],3) then
  hold$=cvs(new_lprop$[0],3)
  hold=new_users[0]
  new_lprop$[0]=cvs(new_lprop$[1],3)
  new_users[0]=new_users[1]
  new_lprop$[1]=hold$
  new_users[1]=hold
fi

return

[Function (Verify Credit Card)]
REM ' -----------------------------------------------------------------
REM ' Verify Credit Card
REM '
REM ' Note that this routine is specifically designed to accept
REM ' ONLY Visa (4), MasterCard (2 and 5), and American Express numbers (3).
REM ' It rejects other credit card number formats which might be
REM ' valid, including:
REM ' Diner's Club/Carte Blanche - starts with 3, LEN=14
REM ' Discover - starts with 6 (6011), LEN=16
REM ' enRoute - starts with 2 (2014, 2149), LEN=15
REM ' JCB - starts with 3, LEN=16
REM ' JCB - starts with 1800 or 2131, LEN=15
REM ' -----------------------------------------------------------------

Verify_Credit_Card: 

REM ' pass CC$ = credit card number
REM ' return VALID = 0 or 1

LET valid=0
LET l=LEN(cc$)
IF l=0 OR l>16 THEN GOTO cc_done

IF cc$(1,1)<>"2" and cc$(1,1)<>"3" AND cc$(1,1)<>"4" AND cc$(1,1)<>"5" THEN GOTO cc_done; REM ' not Amex, Visa, or MasterCard

IF cc$(1,1)="3" AND l<>15 THEN GOTO cc_done; REM ' Invalid Amex
IF cc$(1,1)="4" AND l<>16 AND l<>13 THEN GOTO cc_done; REM ' Invalid Visa
IF (cc$(1,1)="2" OR cc$(1,1)="5") AND l<>16 THEN GOTO cc_done; REM ' Invalid MasterCard

rem ' validate using the Luhn Formula
LET sum=NUM(cc$(l,1),ERR=cc_done)
FOR c=l-1 TO 1 STEP -1
    LET digit=NUM(cc$(c,1),ERR=cc_done)
    IF MOD(l-c,2)=1 THEN LET double=digit*2,sum=sum+INT(double/10)+MOD(double,10) ELSE LET sum=sum+digit
NEXT c
LET valid=(MOD(sum,10)=0)
rem if info(3,2)="thines" or info(3,2)="kwilliam" then valid=1

cc_done: 
RETURN

DEF fnformat_cc$(temp_cc$)
    IF LEN(temp_cc$)=16 THEN RETURN STR(temp_cc$:"XXXX XXXX XXXX XXXX") ELSE IF LEN(temp_cc$)=15 THEN RETURN STR(temp_cc$:"XXXX XXXXXX XXXXX") ELSE IF LEN(temp_cc$)=13 THEN RETURN STR(temp_cc$:"XXXX XXX XXX XXX") ELSE RETURN temp_cc$
FNEND

DEF fnobscure_cc$(temp_cc$)
    IF LEN(temp_cc$)=16 THEN LET temp_cc$=STR(temp_cc$:"XXXX XXXX XXXX XXXX"); LET temp_cc$(1,15)="**** **** ****" ELSE IF LEN(temp_cc$)=15 THEN LET temp_cc$=STR(temp_cc$:"XXXX XXXXXX XXXXX"); LET temp_cc$(1,11)="**** ******" ELSE IF LEN(temp_cc$)=13 THEN LET temp_cc$=STR(temp_cc$:"XXXX XXX XXX XXX"); LET temp_cc$(1,12)="**** *** ***"
    RETURN temp_cc$
FNEND

[Function (Win Title)]
rem ' -----------------------------------------------------------------
rem ' Win Title
rem ' -----------------------------------------------------------------

Win_Title:

temp$=ctrl(gb__sysgui,0,1,new_context),temp1$=temp$
pcn1=pos("    "=temp$)
if pcn1 then temp$=temp$(1,pcn1-1)
temp$=cvs(temp$,3)
if new_context<>gb__win.login then temp$=temp$+fill(4)+cust_num$+user_code$
if canadian_table then
  if pos("CAN$"=temp$)=0 then temp$=temp$+" CAN$"
fi
if inhouse then
 if pos(server_name$=temp$)=0 then temp$=temp$+fill(4)+server_name$
fi
if temp1$<>temp$ then print (gb__sysgui)'context'(new_context),'title'(0,temp$)

return

[Function (Write ARE83)]
rem ' -----------------------------------------------------------------
rem ' Write ARE83
rem ' -----------------------------------------------------------------

Write_ARE83:

are83_loop=0
while are83_loop<2
REM ' Called by create_order subroutine
LET sequence_nbr=sequence_nbr+1
LET sequence_nbr$=STR(sequence_nbr:"000")
LET are83.firm_id$=are13.firm_id$
LET are83.ar_type$=are13.ar_type$
LET are83.customer_nbr$=are13.customer_nbr$
LET are83.order_number$=are13.order_number$
LET are83.line_number$=are13.line_number$
LET are83.license_seq$=license_seq$
LET are83.sequence_nbr$=sequence_nbr$
REM 'are83.action$ must be set before calling this subroutine
LET are83.snhist_flag$="N"
REM 'are83.auth_code$ must be set before calling this subroutine
if pos("U"=are73.type_of_sale$)=1 then
  LET are83.upg_to_product$=ece11.upg_to_product$
  LET are83.upg_to_rev$=ece11.upg_to_rev$
fi
LET ffl$=FATTR(are83$,"available"),ffl=DEC(ffl$(10,2))
LET are83.available$=FILL(ffl)
LET ffl$=FATTR(are83$,"dealer_str"),ffl=DEC(ffl$(10,2))
LET are83.dealer_str$=FILL(ffl)
LET are83.serial_nbr$=sn$
if are83_loop=1 then LET are83.serial_nbr$=ds_xref$, are83.auth_code$=""
REM 'are83.license_cnt must be set before calling this subroutine

LET are83_key$=are83.firm_id$+are83.ar_type$+are83.customer_nbr$+are83.order_number$+are83.line_number$+are83.license_seq$+are83.sequence_nbr$
LET are83$=FIELD(are83$)
WRITE RECORD (are83,KEY=are83_key$)are83$
GOSUB write_snmeu

LET temp$="DeactivateModify    Activate  ",temp=POS(are83.action$="DMA")
IF temp THEN LET mailtext$=mailtext$+"   "+temp$(temp*10-9,10)+" "+are83.serial_nbr$+sam_renew$ + $0A$
if are83.action$="D" then deactivated_list$=deactivated_list$+are83.serial_nbr$+$0a$
if are83_loop=0 then
  readrecord(sam2_ds_xref,key=sn$,knum=0,err=*next)sam2_ds_xref$
  sam2_ds_xref.available$="X",sam2_ds_xref$=field(sam2_ds_xref$)
  if sam2_ds_xref.client_serial_nbr$=sn$ then writerecord(sam2_ds_xref)sam2_ds_xref$
fi
if cvs(ds_xref$,3)="" or pos(are73.type_of_sale$="SM1,ADD")=0 then break
are83_loop=are83_loop+1
wend

return

[Function (adjust_ece11_annual_dt)]
rem ' -----------------------------------------------------------------
rem ' adjust_ece11_annual_dt
rem ' -----------------------------------------------------------------

adjust_ece11_annual_dt:

rem ' kew 11/16/2011
rem ' does the stored annual date in ECE11 need to be adjusted?
rem ' for example and order is placed int the shopping cart with an annual date
rem ' a year out. It sits for a few deys or weeks, making the time to the annual date
rem ' less than one year. If so we need to adjust

rem ' to adjust the annual date the record must have a serial number and an annual_dt and there 
rem ' must be no special exipriation date (jul_spec_date)
rem ' also do not adjust a rental renewal

rem ' check for rental renewal
if pos("RN1" = ece11.item_number$) = 13 and ece11.modify_flag$ = "R" then goto aead_bypass

if jul_spec_date = 0 and cvs(ece11.serial_nbr$,3) <> "" and cvs(ece11.annual_dt$,3) <> "" then
    rem ' get the annual dt in the contract if any
    aead_sql$ = "SELECT t2.annual_dt FROM SNM01 t1 INNER JOIN SMC01 t2 ON t1.contract = t2.contract WHERE t1.serial_nbr = '"
    aead_sql$ = aead_sql$ + cvs(ece11.serial_nbr$,3) + "'"
    aead_chan = sqlunt
    sqlopen(aead_chan)dbConnect$
    sqlprep(aead_chan)aead_sql$
    sqlexec(aead_chan)
    dim aead_sqltemp$:sqltmpl(aead_chan)
    aead_sqltemp$ = sqlfetch(aead_chan, err=*next)
    rem ' if there is no contract date or the contract date has changed
    if cvs(aead_sqltemp.annual_dt$,3) = "" or aead_sqltemp.annual_dt$ <> ece11.annual_dt$ then
        rem ' we have an a new annual date it should be at least a year away from today
        jul_default=jul_today+365
        aead_annual_dt$ = date(jul_default:"%Y%Mz%Dz")
        if ece11.annual_dt$ < aead_annual_dt$ then
            ece11.annual_dt$ = aead_annual_dt$
        endif
    endif
    sqlclose(aead_chan)
endif

aead_bypass:

return

[Function (agedARReportJasper)]
rem ' -----------------------------------------------------------------
rem ' agedARReportJasper
rem ' -----------------------------------------------------------------

agedARReportJasper:

rem ' fill the report
reportName$ = "bcommAging.jasper"
report! = new BBJasperReport(reportName$, dbConnect$)
report!.putParam("FIRM_ID",firm_id$)
report!.putParam("CUSTOMER",cust_num$)
report!.putParam("ASOFDATE",asofDate$)
report!.fill()

rem ' export it to a pdf, move it to the web server and kick off the brows
tempServerFile! = File.createTempFile("BASIS",".pdf")
tempServerFile$ = tempServerFile!.getAbsolutePath()
report!.exportToPDF(BBjAPI().FALSE,tempServerFile$)
sslReq = BBUtils.isWebServerSSLEnabled()
url$ = BBUtils.copyFileToWebServer(tempServerFile$,"jaspertemp", sslReq)
BBjAPI().getThinClient().browse(url$)

rem ' clean up the temp file
rem ' tempServerFile!.delete()

rem ' clean up the jaspertemp directory, deleting all file older than 7 days
BBUtils.deleteWebServerFilesOlderThanNDays("jaspertemp",7)

rem ' destroy the report
report!.destroy()

return

[Function (blockGermanCustomers)]
rem ' -----------------------------------------------------------------
rem ' blockGermanCustomers
rem ' -----------------------------------------------------------------

blockGermanCustomers:

rem ' used to special VAT rate during the pandemic, removed 01/14/2021

rem ' germanCustomer = 0

rem ' if firm_id$ = "02" and (arm02.tax_code$ = "VA" or arm01.country$ = "GERMANY") then
rem '     xresp = msgbox("Diese Bestellung muss aufgrund der aktuellen Mehrwertsteuer-Regelung manuell bearbeitet werden. Bitte wenden Sie sich an Ihren Innendienst", 0, "Process Manually")
rem '     germanCustomer = 1
rem ' fi
rem ' HEIMBAS exemption
rem ' if cust_num$ = "020005" then germanCustomer = 0

return

[Function (buildFeatureList)]
rem ' -----------------------------------------------------------------
rem ' buildFeatureList
rem ' -----------------------------------------------------------------

buildFeatureList:

read record(snt04,key = sn$,dom=*next)snt04$

featureOCList$ = ""
featLine$ = ""
count = 0
while 1
    read record(snt04, end=*break)snt04$
    if cvs(snt04.serial_nbr$,3) <> cvs(sn$,3) then break
    if cvs(snt04.feature$,7) = "SOFTWAREASSETMANAGEMENT" then continue 
    count = count + 1
    featUsers$ = str(snt04.users:"####0") 
    
    featLine$ = str(count:"#0") + ". " 
    if cvs(snt04.prod_code$,3) = "" then
        featLine$ = featLine$ + "(---) - "
    else 
        featLine$ = featLine$ + "(" + cvs(snt04.prod_code$,3) + ") - "
    fi
    featLine$ = featLine$ + cvs(snt04.feature$,3) + " - " + featUsers$ + $0A$
    featureOCList$ = featureOCList$ + featline$

wend

if featureOCList$ <> "" then
   featureOCList$ = "This license has the following features." + $0A$ + $0A$ + "   (Prod)  Feature   Users" + $0A$ + $0A$ + featureOCList$
fi

return

[Function (calcPaymentSplit)]
rem ' -----------------------------------------------------------------
rem ' calcPaymentSplit
rem ' -----------------------------------------------------------------

calcPaymentSplit:

splitPayment! = Cast(BBjRadioButton, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("SplitPaymentBtn"))

if splitPayment!.isSelected() then

    ccAmount1! = Cast(BBjInputE, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("ccAmount1"))
    ccAmount2! = Cast(BBjInputE, BBjAPI().getSysGui().getWindow("Checkout 2").getControl("ccAmount2"))
    
    ccAmt1$ = ccAmount1!.getText()
    ccAmt1$ = fnStripNumFormat$(ccAmt1$)
        
    isNumeric = 0
    ccAmt1 = round(num(ccAmt1$, err=*next)); isNumeric = 1
    
    rem ' validate ccAmt1
    if !isNumeric then
      ccAmount1!.focus()
    else
      rem ' second card must be at least $50
      if ccAmt1 > total - 50 then
          splitPayment!.setSelected(0)
          gosub take_down_split_payment
      else    
          if ccAmt1 < 50 then ccAmt1 = 50
          ccAmount1!.setText(CVS(STR(ccAmt1:amount_mask$),3+64))
          ccAmt2 = total - ccAmt1
          ccAmount2!.setText(CVS(STR(ccAmt2:amount_mask$),3+64))
      fi
    fi
fi    



return

[Function (convertToDollars)]
rem ' -----------------------------------------------------------------
rem ' convertToDollars
rem ' -----------------------------------------------------------------

convertToDollars:

rem ' the amount to convert is in amountin
rem ' the converted amount is in amountout

amountout = 0
call "canDollConversion", canadian_exch$, 1, amountin, amountout

return

[Function (createAndSetDownloadBBjURL)]
rem ' -----------------------------------------------------------------
rem ' createAndSetDownloadBBjURL
rem ' -----------------------------------------------------------------

createAndSetDownloadBBjURL:

parameterTemplate$ = "CONTACT_FIRST:c(50*),CONTACT_LAST:c(50*),CONTACT_COMPANY:c(50*),CONTACT_EMAIL:c(50*),CONTACT_ADD1:c(50*),CONTACT_ADD2:c(50*),CONTACT_CITY:c(50*),CONTACT_STPROV:c(50*),CONTACT_CODE:c(50*),CONTACT_COUNTRY:c(50*),product:c(25*),revision:c(25*),PKG_OPTION1:c(2*),PKG_OPTION2:c(2*),PKG_OPTION3:c(2*),PKG_OPTION4:c(2*),PKG_OPTION5:c(2*),GETANNOUNCEMENTS:c(2*),LANGUAGE:c(4*)"

declare BBjString parameterString!
declare BBjTemplatedString paramPrepString!

paramPrepString! = BBjAPI().makeTemplatedString(parameterTemplate$)

paramPrepString!.setFieldValue("CONTACT_FIRST", cvs(ecm01.first_name$,3))
paramPrepString!.setFieldValue("CONTACT_LAST", cvs(ecm01.last_name$,3))
paramPrepString!.setFieldValue("CONTACT_COMPANY", cvs(tmm01.cont_firm$,3))
paramPrepString!.setFieldValue("CONTACT_EMAIL", cvs(ecm01.e_mail$,3))
paramPrepString!.setFieldValue("CONTACT_ADD1", cvs(tmm01.address_1$,3))
paramPrepString!.setFieldValue("CONTACT_ADD2", cvs(tmm01.address_2$,3))
paramPrepString!.setFieldValue("CONTACT_CITY", cvs(tmm01.city$,3))

found=0
read record(states,key=cvs(tmm01.state$,3),err=*next)states$;found=1
if found then
    paramPrepString!.setFieldValue("CONTACT_STPROV", cvs(states.state_name$,3))
else

endif

paramPrepString!.setFieldValue("CONTACT_CODE", cvs(tmm01.zip_code$,3))

found=0
read record(country,key=cvs(tmm01.country_code$,3),err=*next)country$; found=1
if found then 
    if cvs(country.country_name$,3)="U.S.A." then
        paramPrepString!.setFieldValue("CONTACT_COUNTRY", "United States")
    else
        paramPrepString!.setFieldValue("CONTACT_COUNTRY", cvs(country.country_name$,3))
    endif
endif

paramPrepString!.setFieldValue("product", "BBj")
paramPrepString!.setFieldValue("revision", "")
paramPrepString!.setFieldValue("PKG_OPTION1", "1")
paramPrepString!.setFieldValue("PKG_OPTION2", "0")
paramPrepString!.setFieldValue("PKG_OPTION3", "0")
paramPrepString!.setFieldValue("PKG_OPTION4", "0")
paramPrepString!.setFieldValue("PKG_OPTION5", "0")
paramPrepString!.setFieldValue("GETANNOUNCEMENTS", "1")

if cvs(country.lang_code$,3) <> "" then
    paramPrepString!.setFieldValue("LANGUAGE", cvs(country.lang_code$,11))
else
    paramPrepString!.setFieldValue("LANGUAGE", "en")
endif

rem ' encode the paramters
USE java.net.URLEncoder

parameterString! = paramPrepString!.getString()
parameterString! = java.net.URLEncoder.encode(parameterString!, "UTF-8")
parameterString! = "?contactInfo=" + parameterString!

rem ' this one references https://www.basis.cloud/bbj-download
rem ' dlbbj_html$ = "<html><table align=""center"" border=""0""><tr><td align=""center""><a onclick=""window.open('https://www.basis.cloud/bbj-download"
rem ' this one references the app directly https://poweredbybbj.com/apps/productDownloadPage
dlbbj_html$ = "<html><table align=""center"" border=""0""><tr><td align=""center""><a onclick=""window.open('https://poweredbybbj.com/apps/productDownloadPage"
dlbbj_html$ = dlbbj_html$ + parameterString!
dlbbj_html$ = dlbbj_html$ + "');"" href=""#"">Download BBj</a></td></tr></table></html>"

return

[Function (delete_non_renews)]
rem ' -----------------------------------------------------------------
rem ' delete_non_renews
rem ' -----------------------------------------------------------------

delete_non_renews:
rem 'remove any transaction other than SM1 or RNW
com$="",t$="",pr=0,listp=0
for nbr=0 TO nbr_trans
 if pos("SM1"=type$[nbr]) or pos("RNW"=type$[nbr]) then
   t$=type$[nbr],pr=price[nbr]
   listp=price[nbr+nbr_trans+1]
   p=pos($0a$=comments$)
   if p then com$=comments$(1,p)
   continue
 fi
 p=pos($0a$=comments$)
 if p then comments$=comments$(p+1)
next nbr

nbr_trans=0
dim type$[0],price[1]
comments$=com$
type$[0]=t$
price[0]=pr
price[1]=listp
return

[Function (fnAddImageControl!)]
rem ' -----------------------------------------------------------------
rem ' fnAddImageControl!
rem ' -----------------------------------------------------------------

rem Function called to add an image control to the window
def fnAddImageControl!(curContext,x,y,width,height,image$)
  image!     = NULL()
  imageCtrl! = NULL()

    REM Get the current window
  window! = sysgui!.getWindow(curContext)

    REM Get the specified image
  image! = fnGetImage!(image$)

    REM Add the image control if the window and image are not NULL
  if (window! <> NULL() and image! <> NULL()) then
    imageCtrl! = window!.addImageCtrl(window!.getAvailableControlID(),x,y,width,height,image!)
  endif

    REM Return the image control
  return imageCtrl!
fnend

[Function (fnAddImagesSetBorder)]
rem ' -----------------------------------------------------------------
rem ' fnAddImagesSetBorder
rem ' -----------------------------------------------------------------

rem Function called to add an images and set the border for the passed window

def fnAddImagesSetBorder(curContext)
  returnCode = 0

  REM Determine the current window
  switch curContext
    case splash
      REM '(SPLASH)
      imageControl! = fnAddImageControl!(curContext,0,0,493,352,"poweredbybbjALL.png")
      returnCode = 1
      break
    case gb__form_context[1]
      REM ' Form ID 100 (LOGIN)
      imageControl! = fnAddImageControl!(curContext,250,45,291,100,"bcomlogo.png")
      returnCode = 1
      break
    case gb__form_context[2]
      REM ' Form ID 101 (MAIN)
      imageControl! = fnAddImageControl!(curContext,600,65,44,40,"Newlicense.png")
      imageControl! = fnAddImageControl!(curContext,600,190,42,35,"viewlicense.png")
      imageControl! = fnAddImageControl!(curContext,600,300,42,35,"shopcart.png")
      imageControl! = fnAddImageControl!(curContext,600,385,42,35,"accountinfo.png")
      returnCode = 1
      break
    case gb__form_context[3]
      REM ' Form ID 102 (VIEW_SN)
      imageControl! = fnAddImageControl!(curContext,525,275,150,94,"MagnifyingGlass.png")
      returnCode = 1
      break
    case gb__form_context[4]
      REM ' Form ID 103 (EDIT_SN)
      returnCode = fnSetToolButtonImage(curContext,1020,"calendar.png")
      break
    case gb__form_context[5]
      REM ' Form ID 104 (ITEM)
      returnCode = fnSetToolButtonImage(curContext,232,"calendar.png")
      break
    case gb__form_context[6]
      REM ' Form ID 105 (CART)
      imageControl! = fnAddImageControl!(curContext,36,90,35,30,"shopcart.png")
      imageControl! = fnAddImageControl!(curContext,36,195,40,35,"modifycart.png")
      returnCode = 1
      break
    case gb__form_context[7]
      REM ' Form ID 106 (CHECKOUT_1)
      break
    case gb__form_context[8]
      REM ' Form ID 107 (SHIP_USA)
      break
    case gb__form_context[9]
      REM ' Form ID 108 (SHIP_INTL)
      break
    case gb__form_context[10]
      REM ' Form ID 109 (CHECKOUT_2)
      imageControl! = fnAddImageControl!(curContext,460,115,50,31,"visa.png")
      imageControl! = fnAddImageControl!(curContext,460,175,50,31,"mastercard.png")
      imageControl! = fnAddImageControl!(curContext,460,235,50,31,"amex.png")
      returnCode = 1
      break
    case gb__form_context[11]
      REM ' Form ID 110 (ACCOUNT)
      break
    case gb__form_context[12]
      REM ' Form ID 111 (HISTORY)
      break
    case gb__form_context[13]
      REM ' Form ID 112 (CLIENTS)
      break
    case gb__form_context[14]
      REM ' Form ID 113 (FIND_SN)
      break
    case gb__form_context[15]
      REM ' Form ID 114 (CREDIT_CARD)
      imageControl! = fnAddImageControl!(curContext,112,30,291,100,"logo.png")
      imageControl! = fnAddImageControl!(curContext,90,210,50,31,"visa.png")
      imageControl! = fnAddImageControl!(curContext,90,250,50,31,"mastercard.png")
      imageControl! = fnAddImageControl!(curContext,90,290,50,31,"amex.png")
      returnCode = 1
      break
    case gb__form_context[16]
      REM ' Form ID 116 (reset_license)
      break
    case gb__form_context[17]
      REM ' Form ID 117 (trade_select)
      break
    case gb__form_context[18]
      REM ' Form ID 118 (TRADE)
      returnCode = fnSetToolButtonImage(curContext,146,"calendar.png")
      break
    case gb__form_context[19]
      REM ' Form ID 119 (send_rpt)
      break
    case gb__form_context[20]
      REM ' Form ID 120 (renewal)
      returnCode = fnSetToolButtonImage(curContext,137,"calendar.png")
      break
    case default
      break
  swend    

  REM Determine if running in an Applet
  if info(3,6) = "2" then
    REM Get the current window and remove it's border
    window! = sysgui!.getWindow(curContext)
    if (window! <> NULL()) then
      window!.setTitleBarVisible(0)
    endif
  endif

    return returnCode

  fnend

[Function (fnCreateWindowIfNeeded)]
rem ' -----------------------------------------------------------------
rem ' User Defined Function: fnCreateWindowIfNeeded
rem ' -----------------------------------------------------------------

def fnCreateWindowIfNeeded(this_window_id$)

rem returns the context of this_window_id$

cwin_return = -1

cwin_location = pos(this_window_id$=ecWindowList$)

if cwin_location > 0 then
    cwin_window = int(cwin_location/4)+1

    if gb__window.context[cwin_window] > 0 then
        cwin_return = gb__window.context[cwin_window]
    else
        cwin_context = fngb__window(this_window_id$)
        gosub load_images
        gosub init_structure
        cwin_return = cwin_context
    fi

fi

return cwin_return

fnend

[Function (fnGetImage!)]
rem ' -----------------------------------------------------------------
rem ' fnGetImage!
rem ' -----------------------------------------------------------------

rem Function called to get an image

def fnGetImage!(image$)
  getImage! = NULL()

    getImage! = imageHashMap!.get(image$)
  if (getImage! <> NULL()) then
     return getImage!
  endif   

    REM Get a reference to sysgui and the image manager
  imageManager! = sysgui!.getImageManager()

    rem ' Determine if running in an Applet or Web Start
    rem ' if info(3,6) = "2" or info(3,6) = "3" then
    rem ' Running in an Applet or Web Start, load image from client jar
    rem ' getImage! = imageManager!.loadImageFromClientJar(image$)
    rem ' else
    rem ' Running in an Applet or Web Start, load image server
    getImage! = imageManager!.loadImageFromFile(image$)
    rem ' endif

    REM Add the image to the hash map
  if (getImage! <> NULL()) then
     imageHashMap!.put(image$, getImage!)
  endif   

    REM Return the image
  return getImage!

  fnend

[Function (fnSetToolButtonImage!)]
rem ' -----------------------------------------------------------------
rem ' fnSetToolButtonImage!
rem ' -----------------------------------------------------------------
rem Function called to set an image for a tool button
def fnSetToolButtonImage(curContext,toolButtonID,image$)
  image!      = NULL()
  window!     = NULL()
  toolButton! = NULL()

    REM Get the current window
  window! = sysgui!.getWindow(curContext)
  if (window! <> NULL()) then
    toolButton! = window!.getControl(toolButtonID)
  endif

    REM Get the specified image
  image! = fnGetImage!(image$)

    REM Add the image to the tool button, if the tool button and image are not NULL
  if (toolButton! <> NULL() and image! <> NULL()) then
    toolButton!.setImage(image!)
    return 1
  endif

  return 0
fnend

[Function (fncenter)]
rem ' -----------------------------------------------------------------
rem ' fncenter
rem ' -----------------------------------------------------------------

def fncenter(xx__context)
    if info(3,6)="2" then return 0
    dim xx__win$:"x:u(2),y:u(2),w:u(2),h:u(2)"
    xx__win$=ctrl(gb__sysgui,0,0)
    gb__x=max(0,int((gb__sysgui_fin.screen_width-xx__win.w)/2))
    gb__y=max(40,int((gb__sysgui_fin.screen_height-xx__win.h)/2))
    print (gb__sysgui)'move'(0,gb__x,gb__y)
    return 1
fnend

[Function (get_cart_grid)]
rem ' -----------------------------------------------------------------
rem ' get_cart_grid
rem ' -----------------------------------------------------------------

get_cart_grid:

ourSysGui!=BBjAPI().getSysGui()
cartWindow!=ourSysGui!.getWindow(gb__win.cart)
cartControlVector! = cartWindow!.getAllControls()

for i=0 to cartControlVector!.size() - 1
    control!= cast(BBjControl, cartControlVector!.getItem(i))
    if control!.getName().equals("Grid") then 
        cast(BBjGrid, control!).setHorizontalScrollable(0)
        break
    fi
next i

return

[Function (get_end_user_data)]
rem ' -----------------------------------------------------------------
rem ' get_end_user_data
rem ' -----------------------------------------------------------------

get_end_user_data:

gosub init_end_user_args
eu_args.firm_id$=ece11.firm_id$, eu_args.customer_nbr$=ece11.customer_nbr$
eu_args.user_code$=ece11.user_code$, eu_args.line_number$=ece11.line_number$
eu_args.serial_nbr$=ece11.serial_nbr$,eu_args.lang$=lang$
eu_args.states=states, eu_args.country=country, eu_args.csm01=csm01
eu_args.eceeu=eceeu, eu_args.snmeu=snmeu, eu_args.snmel=snmel
eu_args.callersContext=ec_hide_context

rem ' hide this calling window
callingWindow! = BBjAPI().getSysGui().getWindow(ec_hide_context)
callingWindow!.setVisible(0)

call "ec_end_user.bbj", eu_args$
eu_args$=""

rem ' show this calling window again, forcing a repaint
blankcontext = fnCreateWindowIfNeeded("121")
tempWindow! = BBjAPI().getSysGui().getWindow(blankcontext)
tempWindow!.setVisible(1)
tempWindow!.setVisible(0)
callingWindow!.setVisible(1)
callingWindow!.focus()

return

[Function (init_end_user_args)]
rem ' -----------------------------------------------------------------
rem ' init_end_user_args
rem ' -----------------------------------------------------------------

init_end_user_args:

dim eu_args$:"FIRM_ID:C(2),CUSTOMER_NBR:C(6),USER_CODE:C(2),LINE_NUMBER:C(4*=10),SERIAL_NBR:C(20*=10),LANG:C(2*=10),STATES:N(5*=10),COUNTRY:N(5*=10),CSM01:N(5*=10),ECEEU:N(5*=10),SNMEU:N(5*=10),SNMEL:N(5*=10),CALLERSCONTEXT:N(5*=10)"

return

[Function (init_eu_man_args)]
rem ' -----------------------------------------------------------------
rem ' init_eu_man_args
rem ' -----------------------------------------------------------------

init_eu_man_args:

dim eu_args$:"FIRM_ID:C(2),CUSTOMER_NBR:C(6),LANG:C(2*=10),STATES:N(5*=10),COUNTRY:N(5*=10),CSM01:N(5*=10),SNMEL:N(5*=10),SNMEU:N(5*=10),SNM01:N(5*=10),CALLERSCONTEXT:N(5*=10)"

return

[Function (loadVendorFeaturesGrid)]
rem ' -----------------------------------------------------------------
rem ' loadVendorFeaturesGrid
rem ' -----------------------------------------------------------------

loadVendorFeaturesGrid:

serialNbrFeatures! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow(new_context))
featuresGrid! = cast(BBjStandardGrid, serialNbrFeatures!.getControl("featureGrid"))
featuresGrid!.clearText()
featuresGrid!.setColumnHeaderCellAlignment(0, featuresGrid!.GRID_ALIGN_LEFT)
featuresGrid!.setColumnAlignment(0,featuresGrid!.GRID_ALIGN_LEFT)
featuresGrid!.setColumnWidth(5, 0)
featuresGrid!.setColumnWidth(6, 0)

wrksn$ = fill(20, " ")
wrksn$(1) = chkSN$

vfSerialNbr! = cast(BBjEditBox, serialNbrFeatures!.getControl("vfSerialNbr"))
vfSerialNbr!.setText(cvs(wrksn$,3))

featureGridItems! = BBjAPI().makeVector()

looping = 1, featureCnt = 0, vfHasBARISTAfeatureLine = 0

if gridType$ = "ReadOnly" then

    rem ' provide a simulation of the BBj Feature Lines
    rem ' build feature column
    
    vfsql$ = "SELECT * FROM SNM01 where serial_nbr = '" + cvs(wrksn$,3) + "'" 
    vfsqlChan = sqlunt
    sqlopen(vfsqlChan,mode="UID=basisaon,PWD=kQbmV7vAXRTyhazJ_ggAxD54@pRaCT-X*rH_7ww")"AddOnData"
    sqlprep(vfsqlChan)vfsql$
    sqlexec(vfsqlChan)
    dim vfrec$:sqltmpl(vfsqlChan)
    vfrec$=sqlfetch(vfsqlChan)
    sqlclose(vfsqlchan)
    
    vfLicense$ = vfrec.license_type$
    vfRevision$ = vfrec.product_rev$
    if len(vfRevision$) >= 3 and vfRevision$(3,1) = "X" then vfRevision$ = vfRevision$(1,2) + ".0" 
    vfProduct$ = vfrec.product$
    vfTempUsers = num(vfrec.users$)
    vfInactive = (vfrec.active_flag$ = "N")
    vfContract$ = cvs(vfrec.contract$,3)
    
    vfsql$ = "SELECT * FROM SNM02 where serial_nbr = '" + cvs(wrkSN$,3) + "'" 
    vfsqlChan = sqlunt
    sqlopen(vfsqlChan,mode="UID=basisaon,PWD=kQbmV7vAXRTyhazJ_ggAxD54@pRaCT-X*rH_7ww")"AddOnData"
    sqlprep(vfsqlChan)vfsql$
    sqlexec(vfsqlChan)
    dim vfrec$:sqltmpl(vfsqlChan)
    dim vfUsers[2]
    dim vfUsers_lbl$[2]
    while 1
        found = 0
        vfrec$=sqlfetch(vfsqlChan, end = *break)
        found = 1
        vfUsers[1] = num(vfrec.users1$)
        vfUsers_lbl$[1] = vfrec.lic_property1$ 
        vfUsers[2] = num(vfrec.users2$)
        vfUsers_lbl$[2] = vfrec.lic_property2$
        break
    wend 
    if !found then vfUsers[1] = vfTempUsers
    sqlclose(vfsqlchan)
    
    if vfContract$ <> "" then
        vfsql$ = "SELECT * FROM SMC01 where contract = '" + vfContract$ + "'" 
        vfsqlChan = sqlunt
        sqlopen(vfsqlChan,mode="UID=basisaon,PWD=kQbmV7vAXRTyhazJ_ggAxD54@pRaCT-X*rH_7ww")"AddOnData"
        sqlprep(vfsqlChan)vfsql$
        sqlexec(vfsqlChan)
        dim vfrec$:sqltmpl(vfsqlChan)
        vfrec$=sqlfetch(vfsqlChan)
        sqlclose(vfsqlchan)
        vfExpireDate$ = vfrec.expire_on_dt$
        vfExpireDate$ = vfExpireDate$(5,2) + "-" + vfExpireDate$(7,2) + "-" + vfExpireDate$(1,4)
    else
        vfExpireDate$ = ""
    fi
    
    rem ' vfSN_detail_child_window! = cast(BBjChildWindow, BBjAPI().getSysGui().getWindow("serial_number").getControl(126))
    rem ' xresp = msgbox(vfLicense$ + " " + vfRevision$ + " " + vfProduct$ + " " + str(vfUsers[1]) + " " + str(vfUsers[2]) + " " + str(vfInactive) + " " + vfUsers_lbl$[1] + " " + vfUsers_lbl$[2], 0, "debug")
    
    featureCnt = 0
    for x = 1 to 2
       if vfUsers[x] <> 0 then
            if vfProduct$ = "BAS" then
                vfFeature$ = "BBj "
            else
                vfFeature$ = vfProduct$ + " "
            fi
            if vfUsers_lbl$[x] = "EF" then
                vfFeature$ = vfFeature$ + "Extended Users "
            else
                if vfUsers_lbl$[x] = "SF" then
                    vfFeature$ = vfFeature$ + "Standard Users "
                else
                    vfFeature$ = vfFeature$ + "Users"
                fi
            fi
            featureGridItems!.addItem(vfFeature$)
            featureGridItems!.addItem(vfRevision$)
            featureGridItems!.addItem(vfProduct$)
            
            vfExpires$ = ""
            if vfInactive then
                vfExpireDate$ = "Deactivated"
            else
                if pos(vfLicense$ = "RN1KITNFREXP") <> 0 then
                    if vfLicense$ = "RN1" then
                        rem ' expireDate$ = "Expires with the Rental Contract on " + cw_sn_sam.expiration$
                        vfExpires$ = "RNT expires " + vfExpireDate$
                    else
                        if vfLicense$ = "KIT" or vfLicense$ = "NFR" then
                            rem ' expireDate$ = "Expires with the Developers Kit on " + cw_sn_sam.expiration$
                            vfExpires$ = "DVK expires " + vfExpireDate$ 
                        else
                            rem ' expireDate$ = "Expires with the SAM Contract on " + cw_sn_sam.expiration$
                            vfExpires$ = "EXP expires " + vfExpireDate$
                        fi
                    fi
                fi
            fi
            featureGridItems!.addItem(vfExpires$)
            featureGridItems!.addItem(str(vfUsers[x]))
            featureGridItems!.addItem("")
            featureGridItems!.addItem("")
            featureCnt = featureCnt + 1
       fi
                    
    next 

    rem ' read record(snt04, key = cvs(wrksn$,3), dom=*next)snt04$
    vfsql$ = "SELECT * FROM SNT04 where serial_nbr = '" + cvs(wrksn$,3) + "' ORDER BY PROD_CODE" 
    vfsqlChan = sqlunt
    sqlopen(vfsqlChan,mode="UID=basisaon,PWD=kQbmV7vAXRTyhazJ_ggAxD54@pRaCT-X*rH_7ww")"AddOnData"
    sqlprep(vfsqlChan)vfsql$
    sqlexec(vfsqlChan)
    dim vfrec$:sqltmpl(vfsqlChan)
    
    while looping
        dim vfrec$:fattr(vfrec$)
        vfrec$=sqlfetch(vfsqlChan, end=*break)

        rem ' read record(snt04, end = *break)snt04$
        rem ' if pos(cvs(wrksn$,3) = snt04$) <> 1 then break
        
        rem ' skip the all upper case versions of this feature'
        if cvs(vfrec.feature$,3) = "SOFTWAREASSETMANAGEMENT" then continue
    
        rem ' hold softwareAssetManagemen feature until the end'
        if cvs(vfrec.feature$,3) = "SoftwareAssetManagement" then
            dim holdSAM$:fattr(vfrec$)
            holdSAM$ = vfrec$
            holdingSAM = 1
            continue
        fi
        
        featureCnt = featureCnt + 1
        
        if cvs(vfrec.feature$,7) = "BARISTA" then vfHasBARISTAfeatureLine = 1
                                                 
        featureGridItems!.addItem(vfrec.feature$)
        featureGridItems!.addItem(cvs(vfrec.feature_rev$,3))
        featureGridItems!.addItem(vfrec.prod_code$)

        expireDate$ = cvs(vfrec.expire_on_dt$,3)
        if len(expireDate$) = 8 then 
            expireDate$ = expireDate$(5,2) + "-" + expireDate$(7,2) + "-" + expireDate$(1,4)
        else
            if pos(vfLicense$ = "RN1KITNFREXP") <> 0 then
                if vfLicense$ = "RN1" then
                    rem ' expireDate$ = "Expires with the Rental Contract on " + cw_sn_sam.expiration$
                    expireDate$ = "RNT expires " + vfExpireDate$
                else
                    if vfLicense$ = "KIT" or vfLicense$ = "NFR" then
                        rem ' expireDate$ = "Expires with the Developers Kit on " + cw_sn_sam.expiration$
                        expireDate$ = "DVK expires " + vfExpireDate$ 
                    else
                        rem ' expireDate$ = "Expires with the SAM Contract on " + cw_sn_sam.expiration$
                        expireDate$ = "EXP expires " + vfExpireDate$
                    fi
                fi
            fi
        fi
        featureGridItems!.addItem(expireDate$)
        featureGridItems!.addItem(vfrec.users$)
        featureGridItems!.addItem("")
        featureGridItems!.addItem("")
    
    wend
    if holdingSAM then
        featureCnt = featureCnt + 1
        featureGridItems!.addItem(holdSAM.feature$)
        featureGridItems!.addItem(cvs(holdSAM.feature_rev$,3))
        featureGridItems!.addItem(holdSAM.prod_code$)
        expireDate$ = cvs(holdSAM.expire_on_dt$,3)
        expireDate$ = expireDate$(5,2) + "-" + expireDate$(7,2) + "-" + expireDate$(1,4)
        featureGridItems!.addItem(expireDate$)
        featureGridItems!.addItem(holdSAM.users$)
        featureGridItems!.addItem("")
        featureGridItems!.addItem("")
        holdingSAM = 0 
        dim holdSAM$:fattr(holdSAM$)
    fi   
    sqlclose(vfsqlchan)
    
else

    rem ' gridType$ = "Editable"
    read record(arm40, key = firm_id$ + "007808", knum=2, dom=*next)arm40$
    
    while looping
        read record(arm40, end = *break)arm40$
        if pos(firm_id$ + "007808" = arm40$) <> 1 then break
        found = 0
        read record(snt04, key = wrksn$ + arm40.feature$,dom=*next)snt04$; found = 1
        if !found then
            rem ' the feature is currently not on the license
            
            featureCnt = featureCnt + 1
            featureGridItems!.addItem(arm40.feature$)
            featureGridItems!.addItem(cvs(arm40.feature_rev$,3))
            featureGridItems!.addItem(arm40.prod_code$)
            expireDate$ = ""
            featureGridItems!.addItem(expireDate$)
            gridUsers$ = "0"
            featureGridItems!.addItem(gridUsers$)
            featureGridItems!.addItem(gridUsers$)
            featureGridItems!.addItem("")
        else
            rem ' the feature is currently on the license
            
            featuresGrid!.setColumnWidth(5, 75)
            featuresGrid!.setColumnWidth(6, 75)

            
            featureCnt = featureCnt + 1
            featureGridItems!.addItem(snt04.feature$)
            featureGridItems!.addItem(cvs(snt04.feature_rev$,3))
            featureGridItems!.addItem(snt04.prod_code$)
            expireDate$ = cvs(snt04.expire_on_dt$,3)
            if len(expireDate$) = 8 then expireDate$ = expireDate$(1,4) + "-" + expireDate$(5,2) + "-" + expireDate$(7,2)  
            featureGridItems!.addItem(expireDate$)
            featureGridItems!.addItem(snt04.users$)
            featureGridItems!.addItem("0")
            featureGridItems!.addItem("")
        fi
    wend
fi

rem ' for developers kits simulate the Barista Feature Line
if (vfLicense$ = "KIT" or vfLicense$ = "NFR") and !vfHasBARISTAfeatureLine then
        featureGridItems!.addItem("BARISTA")
        featureGridItems!.addItem(vfRevision$)
        featureGridItems!.addItem("BAR")
        featureGridItems!.addItem(vfExpireDate$)
        barUsers = 0
        for u1 = 1 to 2
            barUsers =  barUsers + vfUsers[u1]
        next u1
        featureGridItems!.addItem(str(barUsers))
        featureGridItems!.addItem("")
        featureGridItems!.addItem("")
        featureCnt = featureCnt + 1
fi        

if featureCnt > 0 then
    
    featuresGrid!.setNumRows(featureCnt)
    notEditable = 0
    editable = 1
    cols = 6
    
    if gridType$ = "ReadOnly" then 
        cols = 6
        for x = 0 to featureCnt - 1
            for y = 0 to cols
                featuresGrid!.setCellEditable(x, y, notEditable)
            next y
        next x
    else
        rem ' gridType$ = "Editable" 
        cols = 6
        for x = 0 to featureCnt - 1
            for y = 0 to cols
                rem ' col 5 is the add users column which is editable
                if y = 5 then
                    featuresGrid!.setCellEditable(x, y, editable)
                else
                    featuresGrid!.setCellEditable(x, y, notEditable)
                fi
            next y
        next x
    fi

    featuresGrid!.setCellText(0,0,featureGridItems!)
fi

return

[Function (maintainPerpetualFlag)]
rem ' -----------------------------------------------------------------
rem ' maintainPerpetualFlag
rem ' -----------------------------------------------------------------

maintainPerpetualFlag:

if setPerpetualFlag then
    dim sn_dormant_sn$:fattr(sn_dormant_sn$)
    sn_dormant_sn.serial_nbr$ = sn$
    sn_dormant_sn.firm_id$ = firm_id$
    sn_dormant_sn.customer_nbr$ = cust_num$
    sn_dormant_sn.comments$ = "From bcomm " + firm_id$ + cust_num$ + user_code$ + " " + date(0:"%Y%Mz%Dz")
    sn_dormant_sn$ = field(sn_dormant_sn$)
    write record(sn_dormant_sn,key=sn$)sn_dormant_sn$
    rem ' write a comment to the snm04 table
    perpetComment$="Stop Perpet Notes by " + firm_id$ + cust_num$ + user_code$ + " " + date(0:"%Y%Mz%Dz")
    gosub write_perpetual_comment
else
    if unSetPerpetualFlag then
        remove(sn_dormant_sn,key=sn$, dom=*next)
        rem ' write a comment to the snm04 table
        perpetComment$="Clear Perpet Notes by " + firm_id$ + cust_num$ + user_code$ + " " + date(0:"%Y%Mz%Dz")
        gosub write_perpetual_comment
    fi
fi

gosub show_sn

return

write_perpetual_comment: 
    LET seq=1
    READ (snm04,KEY=sn$,DOM=*NEXT)
    WHILE seq<100
        READ RECORD (snm04,END=*break)snm04$
        IF snm04.serial_nbr$=sn$ THEN 
            LET seq=NUM(snm04.comments_seq$)+1
            CONTINUE
        fi
        LET snm04.serial_nbr$=sn$
        LET snm04.comments_seq$=STR(seq:"00"),seq=100
        LET snm04.cmt_line$=perpetComment$
        LET snm04$=FIELD(snm04$)
        WRITE RECORD (snm04,KEY=snm04$(1,22))snm04$
    WEND
return

[Function (maintainVirtualFlag)]
rem ' -----------------------------------------------------------------
rem ' maintainVirtualFlag
rem ' -----------------------------------------------------------------

maintainVirtualFlag:

if setVirtualFlag then
    extract record(snm01,key=sn$)snm01$
    snm01.media_type$ = "VIR"
    snm01$ = field(snm01$)
    write record(snm01,key=sn$)snm01$
    rem ' write a comment to the snm04 table
    virComment$="set to virtual by " + firm_id$ + cust_num$ + user_code$ + " " + date(0:"%Y%Mz%Dz")
    gosub write_virtual_comment
    resp = msgbox("You will need to re-register the license to get a virtual license file.",0,"Re-Register Required")
else
    if unSetVirtualFlag then
        usvf_msgtxt$ = "You will need to re-register the license to get a non-virtual license file."
        if !virtualEligible and cvs(snm01.media_type$,3) = "VIR" then
            usvf_msgtxt$ = usvf_msgtxt$ + " If you would like to return the license to virtual status, SAM will need to be reinstated."
        fi
        extract record(snm01,key=sn$)snm01$
        snm01.media_type$ = "N/A"
        snm01$ = field(snm01$)
        write record(snm01,key=sn$)snm01$
        rem ' write a comment to the snm04 table
        virComment$="to non-virtual by " + firm_id$ + cust_num$ + user_code$ + " " + date(0:"%Y%Mz%Dz")
        gosub write_virtual_comment
        resp = msgbox(usvf_msgtxt$,0,"Re-Register Required")
    fi
fi

gosub show_sn

return

write_virtual_comment: 
    LET seq=1
    READ (snm04,KEY=snm01.serial_nbr$,DOM=*NEXT)
    WHILE seq<100
        READ RECORD (snm04,END=*break)snm04$
        IF snm04.serial_nbr$=snm01.serial_nbr$ THEN 
            LET seq=NUM(snm04.comments_seq$)+1
            CONTINUE
        fi
        LET snm04.serial_nbr$=snm01.serial_nbr$
        LET snm04.comments_seq$=STR(seq:"00"),seq=100
        LET snm04.cmt_line$=virComment$
        LET snm04$=FIELD(snm04$)
        WRITE RECORD (snm04,KEY=snm04$(1,22))snm04$
    WEND
return

[Function (new_contract_number)]
rem ' -----------------------------------------------------------------
rem ' new_contract_number
rem ' -----------------------------------------------------------------

new_contract_number:
DIM counter$:"type:c(3),filler:c(7),nbr:n(6)"
LET counter.type$="CTR"
LET counter.nbr=1
EXTRACT RECORD (SERIALNUMBERS,KEY=counter.type$,DOM=*NEXT)counter$
LET new_contract_number$=STR(counter.nbr:"000000")
LET counter.nbr$=STR((counter.nbr+1):"000000")
LET counter$=FIELD(counter$)
WRITE RECORD (SERIALNUMBERS,KEY=counter.type$)counter$

return

[Function (new_dt_check)]
rem ' -----------------------------------------------------------------
rem ' new_dt_check
rem ' -----------------------------------------------------------------

new_dt_check:
ok_dt=1
jul_renew=renew_dt!.getValue()
days=jul_renew-jul_base
yrs=int(days/365)
if yrs>1 then
  i=msgbox("New expiration date: "+date(jul_renew:"%D %Ms %Yl"),4+32,"Confirm")
  if i<>6 then renew_dt!.setValue(jul_default);ok_dt=0
fi
return

[Function (po_number_check)]
rem ' -----------------------------------------------------------------
rem ' po_number_check
rem ' -----------------------------------------------------------------

po_number_check:
p0$=cvs(ece11.PO_REF_NUMBER$,7)
p0=pos("SAM RENEW"=p0$)
if p0 then 
  i=MSGBOX("Can't use "+p0$+$0a$+"In Purchase Order",0,"Reserved for BASIS use")
  PRINT (gb__sysgui)'SETCURSOR'(0)
fi
return

[Function (prep_routine)]
rem ' -----------------------------------------------------------------
rem ' prep_routine
rem ' -----------------------------------------------------------------

prep_routine:

REM BWH Get a reference to sysgui
sysgui! = BBjAPI().getSysGui()
REM resize applet if running in browser                                           
IF !(POS(" 5 "=SYS)) AND INFO(3,6)="2" THEN
  applet! = BBjApi().getAppletProxy()
  applet!.setBounds(0,0,500,400)
fi

rem 'adjust the effective DPI of the fonts on the sysgui for clients on Linux
tc! = bbjapi().getThinClient()
rem IF (tc!.getClientOSName().startsWith("Linux"))
IF !(tc!.getClientOSName().startsWith("Windows"))
    sysgui! = bbjapi().getSysGui()
    sysgui!.setEffectiveDPI(92)
FI

REM BWH Create Java Hash Map to hold image objects
imageHashMap! = new java.util.HashMap()
REM BWH Add a image control instead of using IMAGE mnemonic

splash=gb__sysgui_fin.available_context
PRINT (gb__sysgui)'CONTEXT'(splash),'WINDOW'(0,0,493,352,$$,$01000010$)
rc = fnAddImagesSetBorder(splash)
center=FNCENTER(splash)
PRINT (gb__sysgui)'SHOW'(0),'FOCUS'(0),'RAISE'

pass_firm$="01"
lang$="EN"
p0=POS($0A$=gb__arg$)
if p0>1 then 
  pass_firm$=gb__arg$(1,p0-1)
  gb__arg$=gb__arg$(p0+1)
fi
p0=POS($0A$=gb__arg$)
if p0>1 then 
  lang$=gb__arg$(1,p0-1)
  gb__arg$=gb__arg$(p0+1)
fi
if lang$<>"EN" then gb__resource$="ec_"+cvs(lang$,8)+".arc"
reschan=unt
resok=0
open(reschan,err=*next)gb__resource$;resok=1
close(reschan,err=*next)
if resok=0 then gb__resource$="ec.arc"

return

[Function (process_credit_cards)]
rem ' -----------------------------------------------------------------
rem ' process_credit_cards
rem ' -----------------------------------------------------------------

process_credit_cards:

REM ' Attempt to Process Credit Card Transaction

rem ' is this a split payment (two cards)?
oneCard = 0
twoCards = 0
card1Succeeded = 0
card2Succeeded = 0 

if win_checkout_2.SplitPaymentBtn = 0 then
    oneCard = 1
else
    twoCards = 1
    notificationFrom$ = "customer-service@basis.cloud"
    notificationTo$ = "kw5121151@gmail.com"
    notificationSubject$ = "Split Payment Used purchase license"
    notificationMsg$ = firm_id$ + cust_num$ + user_code$ + " used the split payment to purchase a license."
    call "sendEmail.src",notificationFrom$, notificationTo$, "", "", notificationSubject$, notificationMsg$, ""    
fi
    
rem ' process card 1, their should always be a card 1
unique$=date(0:"%Yd%Mz%Dz%Hz%mz%sz")+order_number$

LET win_checkout_2.message$="Processing Charge..."
LET win_checkout_2$=fngb__put_fields$(win_id_checkout_2$,win_checkout_2$,"message")

rem ' credit card authorization
dim ccCallStr$:"CARDNUMBER:C(16*=10),EXPDATE:C(6*=10),AMOUNT:C(12*=10),NAME:C(40*=10),UNIQUEID:C(20*=10),CVV2:C(4*=10),CCTYPE:C(1*=10),CCSTREET:C(30*=10),CCZIP:C(5*=10),COMMENT1:C(128*=10)"

ccCallStr.CARDNUMBER$=cc$
ccExpYear$=STR(expiry_year:"0000"),ccExpYear$=ccExpYear$(3,2)
ccCallStr.EXPDATE$=STR(expiry_month:"00") + ccExpYear$

ccCallStr.AMOUNT$=fnStripNumFormat$(cvs(win_checkout_2.ccAmount1$,3))
ccCallStr.NAME$=CVS(win_checkout_2.name$,3)

ccCallStr.UNIQUEID$=unique$
ccCallStr.CVV2$=verification_args.CVV2$

if win_checkout_2.visa THEN LET ccCallStr.CCTYPE$="V"
if win_checkout_2.mastercard THEN LET ccCallStr.CCTYPE$="M"
if win_checkout_2.american_express THEN LET ccCallStr.CCTYPE$="A"
    
ccCallStr.CCSTREET$=verification_args.address$
ccCallStr.CCZIP$=verification_args.zip$
ccCallStr.COMMENT1$=firm_id$+cust_num$+"/"+order_number$

rem ' debug
rem ' xresp = msgbox(ccCallStr$, 0, "debug")

call "ec_creditCardProcessing.bbj", ccCallStr$

rem ' debug
rem ' xresp = msgbox("card 1 approval status: " + str(ccCallStr.is_approved), 0, "debug")

if ccCallStr.is_approved then
    rem ' card 1 accepted 
    card1Succeeded = 1
else
    rem ' card 1 rejected
    card1Succeeded = 0
fi

if twoCards then
    
    rem ' process card 2
    wait 1
    unique2$=date(0:"%Yd%Mz%Dz%Hz%mz%sz")+order_number$
    
    dim ccCallStr2$:"CARDNUMBER:C(16*=10),EXPDATE:C(6*=10),AMOUNT:C(12*=10),NAME:C(40*=10),UNIQUEID:C(20*=10),CVV2:C(4*=10),CCTYPE:C(1*=10),CCSTREET:C(30*=10),CCZIP:C(5*=10),COMMENT1:C(128*=10)"

    ccCallStr2.CARDNUMBER$=cc_2$
    ccExpYear$=STR(expiry_year_2:"0000"),ccExpYear$=ccExpYear$(3,2)
    ccCallStr2.EXPDATE$=STR(expiry_month_2:"00") + ccExpYear$

    ccCallStr2.AMOUNT$=fnStripNumFormat$(cvs(win_checkout_2.ccAmount2$,3))
    ccCallStr2.NAME$=CVS(win_checkout_2.name2$,3)
    
    ccCallStr2.UNIQUEID$=unique2$
    ccCallStr2.CVV2$=verification_args.CVV2_2$

    if win_checkout_2.visa_2 THEN LET ccCallStr2.CCTYPE$="V"
    if win_checkout_2.mastercard_2 THEN LET ccCallStr2.CCTYPE$="M"
    if win_checkout_2.american_express_2 THEN LET ccCallStr2.CCTYPE$="A"

    ccCallStr2.CCSTREET$=verification_args.address_2$
    ccCallStr2.CCZIP$=verification_args.zip_2$
    ccCallStr2.COMMENT1$=firm_id$+cust_num$+"/"+order_number$

    rem ' debug
    rem ' xresp = msgbox(ccCallStr2$, 0, "debug")

    call "ec_creditCardProcessing.bbj", ccCallStr2$
    
    rem ' xresp = msgbox("card 2 approval status: " + str(ccCallStr2.is_approved), 0, "debug")
    
    if ccCallStr2.is_approved then
        rem ' card 2 accepted 
        card2Succeeded = 1
    else
        rem ' card 2 rejected
        card2Succeeded = 0
    fi
fi

failureMessage$ = ""
partialFailureMessage$ = ""
partialFailure = 0

if oneCard and card1Succeeded then
    rem ' fully paid by one card
    failed = 0
else
    if oneCard and !card1Succeed then
        rem ' the card was declined, nothing paid
        failed = 1
        failureMessage$=ccCallStr.message$
    else
        if twoCards and card1Succeeded and card2Succeeded then
            rem ' both cards accecpted, fully paid
            failed = 0
        else
            if (twoCards and card1Succeeded and !card2Succeed) or (twoCards and card2Succeeded and !card1Succeeded) then
                rem ' two cards, one card accepted and one card declined
                rem ' process order partially paid, balance will be on account
                failed = 0
                msgAmount1$ = cvs(win_checkout_2.ccAmount1$,3)
                msgAmount2$ = cvs(win_checkout_2.ccAmount2$,3)
                msgAmt1 = num(fnStripNumFormat$(cvs(win_checkout_2.ccAmount1$,3)))
                msgAmt2 = num(fnStripNumFormat$(cvs(win_checkout_2.ccAmount2$,3)))
                xRemBal = (msgAmt1 + msgAmt2)
                if !card1Succeeded then
                    partialFailureMessage$ = ccCallStr.message$
                    xMsg$ = "Card 1 (" + msgAmount1$ + ") was declined and Card 2 (" + msgAmount2$ + ") was apporved. Basis will accept your order placing the remaining balance (" + msgAmount1$ + ") on account. "
                    xMsg$ = xMsg$ + "The credit card processor reported the card declined with this message: " + partialFailureMessage$
                    reply = msgbox(xMsg$, 0, "Partially Paid")
                    
                    xMsgFrom$ = "customber-service@basis.cloud"
                    xMsgTo$ = "customer-service@basis.cloud"
                    xMsgCC$ = ""
                    xMsgBcc$ = "kurt.e.williams@comcast.net"
                    xMsgSubject$ = "FYI - One card in split payment was declined."
                    xEMsg$ = firm_id$ + cust_num$ + user_code$ + " entered order number " + order_number$
                    xEMsg$ = xEMsg$ + " and attempted to pay for the order with a credit card split payment. " + $0A$ + $0A$
                    xEMsg$ = xEMsg$ + xMsg$ 
                    call "sendEmail.src",xMsgFrom$, xMsgTo$, xMsgCc$, xMsgBcc$, xMsgSubject$, xEMsg$, ""
                    
                else
                    partialFailureMessage$ = ccCallStr2.message$
                    xMsg$ = "Card 1 (" + msgAmount1$ + ") was approved and Card 2 (" + msgAmount2$ + ") was declined. Basis will accept your order placing the remaining balance (" + msgAmount2$ + ") on account. "
                    xMsg$ = xMsg$ + "The credit card processor reported the card declined with this message: " + partialFailureMessage$
                    reply = msgbox(xMsg$, 0, "Partially Paid")

                    xMsgFrom$ = "customer-service@basis.cloud"
                    xMsgTo$ = "customer-service@basis.cloud"
                    xMsgCC$ = ""
                    xMsgBcc$ = "kurt.e.williams@comcast.net"
                    xMsgSubject$ = "FYI - One card in split payment was declined."
                    xEMsg$ = firm_id$ + cust_num$ + user_code$ + " entered order number " + order_number$
                    xEMsg$ = xEMsg$ + " and attempted to pay for the order with a credit card split payment. " + $0A$ + $0A$
                    xEMsg$ = xEMsg$ + xMsg$ 
                    call "sendEmail.src",xMsgFrom$, xMsgTo$, xMsgCc$, xMsgBcc$, xMsgSubject$, xEMsg$, ""

                fi
            else
                rem ' both cards declined, nothing paid
                failed = 1
                failureMessage$ = "Card 1: " + ccCallStr.message$ + " - Card 2: " + ccCallStr2.message$ 
            fi
        fi
    fi
fi
    
return

[Function (prorate_rental_fee)]
rem ' -----------------------------------------------------------------
rem ' prorate_rental_fee
rem ' -----------------------------------------------------------------

prorate_rental_fee:

rem ' executed from ec_price sub routine

rem ' jul_base = start date
rem ' jul_renew = expire date
rem ' jul_today = today's date

while 1

    periodLenYears = 1
    extraDays =0

    rem ' rental period must be one full year. Unless the customer has a special_date defined in SPEC_DATE
    rem ' to align their expirations on a single day in the year then the period could be less than one year
    rem ' periodDays = jul_renew-jul_base
    periodDays = jul_renew-jul_today
    if periodDays < 365 and jul_spec_date and !(prorateAdd) then
        periodLenYears = 0
    else
        if periodDays <=365 then break
    fi

    base_day = num(date(jul_base:"%D"))
    base_month = num(date(jul_base:"%M"))
    base_year = num(date(jul_base:"%Y"))
    renew_day = num(date(jul_renew:"%D"))
    renew_month = num(date(jul_renew:"%M"))
    renew_year = num(date(jul_renew:"%Y"))

    rem ' check for one year including a leap day
    if base_day = renew_day and base_month = renew_month and base_year = renew_year + 1 and period_days = 366 then break

    rem ' more than one year on even year breaks?
    if base_day = renew_day and base_month = renew_month then 
        periodLenYears = renew_year - base_year
        extraDays = 0
        break
    fi

    rem ' not on even year breaks, got some extra days
    if base_month > renew_month or (base_month = renew_month and base_day > renew_day) then
        periodLenYears = (renew_year - base_year) - 1
        fullYrsJul = jul(base_year + periodLenYears, base_month, base_day)
        extraDays = jul_renew - fullYrsJul
        break
    fi

    if base_month < renew_month or (base_month = renew_month and base_day < renew_day) then
        periodLenYears = (renew_year - base_year)
        fullYrsJul = jul(base_year + periodLenYears, base_month, base_day)
        extraDays = jul_renew - fullYrsJul
        break
    fi

    rem ' that should account for all situations 
    periodLenYars = 20
    break

wend

if periodLenYears > 1 or extraDays > 0 or (periodDays < 365 and prorateAdd) then

    rem ' adjust price 

    rem ' need a dailyFee if we have extra days or are doing an Add
    rem ' and have days less than a year (365)
    if extraDays > 0  or (periodDays < 365 and prorateAdd) then
        dim dailyFee[nbr_trans + nbr_trans + 1]
        for nbr = 0 to nbr_trans
            precision 4
            dailyFee[nbr]  = price[nbr] / 365
            dailyFee[nbr + nlst] = price[nbr + nlst] / 365
            precision 2
        next nbr
    fi

    
    for nbr=0 TO nbr_trans

        rem ' rental period on an even year greater than one year
        if periodLenYears > 1 then
            price[nbr]=price[nbr] * periodLenYears
            price[nbr+nlst]=price[nbr+nlst] * periodLenYears
        fi

        rem ' rental period is less than one year, jul_spec_date customers
        if extraDays > 0 and jul_spec_date then
            price[nbr] = (extraDays * dailyFee[nbr])
            print price[nbr]

            price[nbr + nlst] = (extraDays * dailyFee[nbr + nlst])
            print price[nbr + nlst]
                    
        else

            rem ' rental period has extra days greater than a year
            if extraDays > 0 then
                price[nbr] = price[nbr] + (extraDays * dailyFee[nbr])
                print price[nbr]

                price[nbr + nlst] = price[nbr + nlst] + (extraDays * dailyFee[nbr + nlst])
                print price[nbr + nlst]
            fi
        fi

        rem ' rental period is in days less than 365 and is an ADD transaction to 
        rem ' an existing rental license
        if (periodDays < 365 and prorateAdd) then
            price[nbr] = periodDays * dailyFee[nbr]
            print price[nbr]
            
            price[nbr + nlst] = periodDays * dailyFee[nbr + nlst]
            print price[nbr + nlst]

        fi

    next nbr

fi

return

[Function (setHeimBASSRenewDate)]
rem ' -----------------------------------------------------------------
rem ' setHeimBASSRenewDate
rem ' -----------------------------------------------------------------

setHeimBASSRenewDate:

rem ' HeimBAS rental expire on one of 4 dates 3/15/xxxx, 6/15/xxxx, 9/15/xxxx and 12/15/xxxx

hCurRenew$ = date(jul_default:"%Y%Mz%Dz")
hCurYear = num(hCurRenew$(1,4))
hCurMonth = num(hCurRenew$(5,2))
hCurDay = num(hCurRenew$(7,2))
renewDay = 15

switch hCurMonth

    case 1; renewMonth = 3; renewYear = hCurYear; break
    case 2; renewMonth = 3; renewYear = hCurYear; break
    case 3
        if hCurDay <= renewDay then 
            renewMonth = 3 
        else 
            renewMonth = 6
        fi
        renewYear = hCurYear
        break
    case 4; renewMonth = 6; renewYear = hCurYear; break
    case 5; renewMonth = 6; renewYear = hCurYear; break
    case 6
        if hCurDay <= renewDay then 
            renewMonth = 6 
        else 
            renewMonth = 9
        fi
        renewYear = hCurYear
        break
    case 7; renewMonth = 9; renewYear = hCurYear; break
    case 8; renewMonth = 9; renewYear = hCurYear; break
    case 9
        if hCurDay <= renewDay then 
            renewMonth = 9 
        else 
            renewMonth = 12
        fi
        renewYear = hCurYear
        break
    case 10; renewMonth = 12; renewYear = hCurYear; break
    case 11; renewMonth = 12; renewYear = hCurYear; break
    case 12
        if hCurDay <= renewDay then 
            renewMonth = 12 
            renewYear = hCurYear
        else 
            renewMonth = 3
            renewYear = hCurYear + 1
        fi
        break
    case default; break

swend

jul_default = jul(renewYear, renewMonth, renewDay)

return

[Function (toggle_renew_flag)]
rem ' -----------------------------------------------------------------
rem ' toggle_renew_flag
rem ' -----------------------------------------------------------------

toggle_renew_flag:
smc01.renew_flag$=rnw_flag$
extractrecord(smc01,key=snm01.contract$,dom=*next)smc01$
if pos(smc01.renew_flag$=rnw_flag$) then 
  read(smc01,err=*next)
  return
fi
if rnw_flag$="N" then
  junk$="M49"+$0a$
  mb_mode=4+256
  gosub translate_mbox
  if i<>6 then return
fi
print(gb__sysgui)'setcursor'(3)
sn_count=0
dim sn1$:fattr(snm01$)
extract(snm01,key=smc01.contract$,knum=3,dom=*next)
while 1
  read record(snm01,end=*break)sn1$
  if sn1.contract$<>smc01.contract$ then break
  if snm01.serial_nbr$<>sn1.serial_nbr$ then sn_count=1;break
wend
if sn_count then
  gosub new_contract_number
  smc01.contract$=new_contract_number$
  extractrecord(snm01,key=snm01.serial_nbr$,knum=0)snm01$  
  snm01.contract$=smc01.contract$
  snm01$=field(snm01$)
  writerecord(snm01)snm01$
fi
smc01.renew_flag$=rnw_flag$
smc01$=field(smc01$)
writerecord(smc01)smc01$

rem ' if rnw_flag$ = "N" then
rem '     toggleComment$="set to not auto renew by " + firm_id$ + cust_num$ + user_code$ + " " + date(0:"%Y%Mz%Dz")
rem ' else
rem '     toggleComment$="set to auto renew by " + firm_id$ + cust_num$ + user_code$ + " " + date(0:"%Y%Mz%Dz")
rem ' fi
rem ' gosub write_toggle_comment

call "ec_open::job_queue"
jq$=firm_id$+cust_num$
if rnw_flag$="N" then 
  job_queue.firm_id$=firm_id$
  job_queue.customer_nbr$=cust_num$
  rem ' toggle_cue$=toggle_on$
  job_queue.e_mail$=smc01.e_mail$
  job_queue.e_mail2$=ecm01.user_code$
  job_queue.job_date$=smc01.expire_on_dt$
  job_queue.job$="CANSAM"+date(0:"%mz%sz")
  job_queue.available$=usrlang$+cvs(snm01.serial_nbr$,3) + " (users: " + str(snm01.users) + ")"
  writerecord(job_queue)job_queue$
  else 
  rem ' toggle_cue$=toggle_off$
  read(job_queue,key=jq$,dom=*next)
  while 1
    jkey$=key(job_queue,end=*break)
    if pos(jq$=jkey$)<>1 then break
    readrecord(job_queue,key=jkey$)job_queue$
    if pos("CANSAM"=job_queue.job$)=0 then break
    if pos(cvs(lang$+snm01.serial_nbr$,3)=job_queue.available$) then
      remove(job_queue,key=jkey$)
      break
    fi
  wend
fi
close(job_queue)
rem ' print(gb__sysgui)'cue'(toggle_id,toggle_cue$,"")
rnw_status$=rnw_active_text$
if smc01.renew_flag$="N" then rnw_status$=rnw_inactive_text$
ctl_id=NUM(FATTR(win_view_sn$,"renewal_status","ID"))
print (gb__sysgui)'title'(ctl_id,rnw_status$) 
print(gb__sysgui)'setcursor'(0)
return

write_toggle_comment: 
    LET seq=1
    READ (snm04,KEY=snm01.serial_nbr$,DOM=*NEXT)
    WHILE seq<100
        READ RECORD (snm04,END=*break)snm04$
        IF snm04.serial_nbr$=snm01.serial_nbr$ THEN 
            LET seq=NUM(snm04.comments_seq$)+1
            CONTINUE
        fi
        LET snm04.serial_nbr$=snm01.serial_nbr$
        LET snm04.comments_seq$=STR(seq:"00"),seq=100
        LET snm04.cmt_line$=toggleComment$
        LET snm04$=FIELD(snm04$)
        WRITE RECORD (snm04,KEY=snm04$(1,22))snm04$
    WEND
return

[Function (write_snmeu)]
rem ' -----------------------------------------------------------------
rem ' write_snmeu
rem ' -----------------------------------------------------------------

write_snmeu:

dim snmel$:fattr(snmel$)
dim snmeu$:fattr(snmeu$)

theLine$=ece11.firm_id$+ece11.customer_nbr$+ece11.user_code$+ece11.line_number$
read record(eceeu,key=theLine$,dom=skip_snmeu)eceeu$
eceeu$=field(eceeu$)

snmeu.end_user_nbr$=eceeu.end_user_nbr$
snmeu.reference_nbr$=eceeu.reference_nbr$
snmeu.company_name$=eceeu.company_name$
snmeu.contact$=eceeu.contact$
snmeu.addr_1$=eceeu.addr_1$
snmeu.addr_2$=eceeu.addr_2$
snmeu.addr_3$=eceeu.addr_3$
snmeu.city$=eceeu.city$
snmeu.state$=eceeu.state$
snmeu.postal_code$=eceeu.postal_code$
snmeu.country$=eceeu.country$
snmeu.email_address$=eceeu.email_address$
snmeu.phone_number$=eceeu.phone_number$
snmeu.industry$=eceeu.industry$
snmeu.other_industry$=eceeu.other_industry$
snmeu.basis_prod$=eceeu.basis_prod$
snmeu.advantage$=eceeu.advantage$
snmeu.announcements$=eceeu.announcements$
snmeu.app_modules_used$=eceeu.app_modules_used$
snmeu.firm_id$=firm_id$
snmeu.customer_nbr$=cust_num$
snmeu.contact_phone$=eceeu.contact_phone$

rem ' write an existing snmeu record
snmeu_write_existing:
write record(snmeu)snmeu$
call "euMarCommUpdaterCallable.src", snmeu$

snmeu_write_link:
snmel.serial_nbr$=are83.serial_nbr$
snmel.end_user_nbr$=snmeu.end_user_nbr$
write record(snmel)snmel$
call "euLoggerCallable.src", snmel.serial_nbr$, snmel.end_user_nbr$, firm_id$, cust_num$, "L"

skip_snmeu:
return

