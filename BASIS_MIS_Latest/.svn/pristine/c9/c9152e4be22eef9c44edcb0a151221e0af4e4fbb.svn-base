   rem ' Program Name: ec_rollHeimBASContracts.src
   rem ' Resource File: ec_rollHeimBASContracts.arc
   rem ' Generated by GUIBuilder 4.0 (June 29, 2022 at 12:36:08)
   rem ' Portions Copyright (C) 1997-2022 BASIS International Ltd.  All rights reserved.

   seterr gb__no_arg
   enter gb__arg$; gb__args=-1,gb__args=pos($0a$=fattr(gb__arg$,$$),1,0)
gb__no_arg:
   seterr 0

   precision 99
   gb__show_forms=2; rem ' Create all forms at the beginning

   rem ' gb_ini.cod - GUIBuilder generated programs: Initialization
   rem ' Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
   rem
   rem ' ***** I N I T I A L I Z A T I O N *****
   rem ' The first part of the initialization section ensures that the
   rem ' environment will support the requirements of the generated 
   rem ' program.  These requirements are:
   rem '     1.  The interpreter supports GUI
   rem '     2.  The interpreter is Visual PRO/5 2.0 or above
   rem '     3.  A SYSGUI device is defined in config.bbx
   rem

   rem ' 1. Make sure the interpreter in use supports GUI
   if info(6,0)="" then
:     print 'cs',;
:     print "This interpreter does not support GUI.";
:     print "Press any key to continue.",;
:     read record(0,siz=1);
:     stop
   rem

   rem ' 2. Make sure the interpreter in use is Visual PRO/5 2.0 or above
   if sys<"LEVEL 5" or (cvs(sys,3)="LEVEL 5" and cvs(rev,3)<"REV 2.0") then
:     input(0,err=gb__eoj)
:      	'ask'("",4,"Requires at least Visual PRO/5 Rev. 2.0.  "+
:      	"This program will now terminate.","&Terminate:Y"+$0a$),
:      	'ee',gb__temp$,'be',;
:     goto gb__eoj
   rem

   seterr gb__err; setesc gb__esc

   rem ' 3. Check config.bbx for SYSGUI and SYSPRINT devices
   gb__alias=0,gb__sysgui$="",gb__sysprint$=""
   dim gb__tsk$:"type:u(1),opens:u(1),name:c(1*=0),dname:c(1*=0),pname:c(1*=0),modes:c(1*=0)"

gb__check_tsk:
   gb__tsk$=tsk(gb__alias,err=gb__done_with_tsk)

   if gb__sysgui$="" and cvs(gb__tsk.pname$,7)="SYSGUI" then
:     gb__sysgui$=gb__tsk.name$

   if gb__sysprint$="" and cvs(gb__tsk.pname$,7)="SYSPRINT" then
:     gb__sysprint$=gb__tsk.name$

   if gb__sysgui$="" or gb__sysprint$="" then
:     gb__alias=gb__alias+1;
:     goto gb__check_tsk

gb__done_with_tsk:
   if gb__sysgui$="" then
:     gb__sysgui$="not defined in config.bbx";
:     goto gb__cannot_open_sysgui

   rem ' Open SYSGUI device
   gb__sysgui=unt; open (gb__sysgui,err=gb__cannot_open_sysgui)gb__sysgui$
   goto gb__opened_sysgui

gb__cannot_open_sysgui:
   gb__err$="Unable to open the SYSGUI device (alias "+gb__sysgui$+
:    ") in program "+pgm(-2)+".  Visual PRO/5 cannot maintain a graphical "+
:    "user interface without this device.  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"SYSGUI error")
   goto gb__eoj

gb__opened_sysgui:
   dim gb__sysgui_fin$:tmpl(gb__sysgui,ind=0)
   gb__sysgui_fin$=fin(gb__sysgui)

   rem ' splash screen, if any, can go here
   rem ' splash=gb__sysgui_fin.available_context
   rem ' print (gb__sysgui)'context'(splash),'window'(0,0,500,400,$$,$01000000$),'image'(0,0,500,400,"mysplash.gif")

   dim gb__event$:tmpl(gb__sysgui)
   gb__event=len(gb__event$)

   rem ' Open the resource file (try both .arc and .brc if necessary)
   gb__resource$="ec_rollHeimBASContracts.arc"
   if pos("ec.bbj"= pgm(-2)) then gosub prep_routine
   gb__handle=resopen(gb__resource$,err=gb__resource_fallback);
:  goto gb__opened_resource

gb__resource_fallback:
   gb__temp=pos(".brc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"arc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

   gb__temp=pos(".arc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"brc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

gb__cannot_open_resource:
   gb__err$="Unable to open resource file ec_rollHeimBASContracts.arc"+
:    " in program "+pgm(-2)+".  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"Resource file error")
   goto gb__eoj

   rem ' ------------------------------------------------------------------------
   rem ' Functions to manipulate screens and data
   rem ' ------------------------------------------------------------------------

   rem ' Get data from screen into template record
   def fngb__get_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put data from template record to screen
   def fngb__put_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Get fields from screen into template record
   def fngb__get_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put fields from template record to screen
   def fngb__put_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Set focus to specified Window ID
   def fngb__focus_win_id(xx__win_id$)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui,err=gb__focus_win_id)'context'(xx__context),'focus'(0),'raise',
      return xx__context
   gb__focus_win_id:
      xx__form=fngb__form(xx__win_id$)
      print (gb__sysgui)'context'(xx__context),
:                       'resource'(len(gb__resource$[xx__form])),gb__resource$[xx__form],
      return xx__context
   fnend


   rem ' Get form number given Window ID
   def fngb__form(xx__win_id$)
       gb__form=-1,xx__form_id$=xx__win_id$
       xx__form=pos("."=xx__form_id$)
       if xx__form then
:         xx__form_id$=xx__form_id$(1,xx__form-1)
       for xx__form=1 to gb__forms
           if gb__form.id$[xx__form]=xx__form_id$ then
:             gb__form=xx__form;
:             break
       next xx__form
       return gb__form
   fnend


   rem ' Set focus to specified Window ID + Control ID
   def fngb__focus_ctl_id(xx__win_id$,xx__ctl_id)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Set focus to specified Window ID + Control Name
   def fngb__focus_ctl_name(xx__win_id$,xx__ctl_name$)
      dim xx__rec$:fngb__template$(xx__win_id$)
      xx__ctl_id=num(fattr(xx__rec$,xx__ctl_name$,"ID"))
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Get Window ID given Context
   def fngb__win_id$(xx__context)
       xx__win_id$=""
       for xx__window=1 to gb__windows
           if gb__window.context[xx__window]=xx__context then
:             xx__win_id$=gb__window.win_id$[xx__window];
:             break
       next xx__window
       return xx__win_id$
   fnend


   rem ' Get Context given Window ID
   def fngb__context(xx__win_id$)
      gb__window=-1,gb__context=-1
      for xx__window=1 to gb__windows
          if gb__window.win_id$[xx__window]=xx__win_id$ then
:            gb__window=xx__window,gb__context=gb__window.context[gb__window];
:            break
      next xx__window
      if gb__context>=0 or gb__window<0 then
:        return gb__context
      return fngb__window(xx__win_id$)
   fnend


   rem ' Get Window Information given Window ID
   def fngb__win_info$(xx__win_id$)
      dim gb__win_info$(0)
      xx__context=fngb__context(xx__win_id$)
      if xx__context<0 then
:        return gb__win_info$
      dim gb__win_info$:"class:u(1),type:u(1),hidden:u(1),disabled:u(1),"
:                      +"context:u(2),eventmask:u(4),flags:u(4),focus:u(2),"
:                      +"x:i(2),y:i(2),w:u(2),h:u(2),title:c(16*=)"
      gb__win_info$=ctrl(gb__sysgui,0,4,xx__context)
:                  +ctrl(gb__sysgui,0,8,xx__context)
:                  +bin(xx__context,2)
:                  +sendmsg(gb__sysgui,0,21,0,"",xx__context)
:                  +sendmsg(gb__sysgui,0,22,0,"",xx__context)
:                  +ctrl(gb__sysgui,0,2,xx__context)
:                  +ctrl(gb__sysgui,0,0,xx__context)
:                  +ctrl(gb__sysgui,0,1,xx__context)
      return gb__win_info$
   fnend

gb__opened_resource:

   rem ==================== End of gb_ini.cod ====================

rem ' Instantiate form(s)

gb__forms = 1
dim gb__form_context[gb__forms],gb__resource$[gb__forms],gb__form$:"id[1]:c(4*=10)"

gb__windows=1; rem ' includes child windows, if any
gb__win_id$ = "101"

dim gb__win$:"ROLLEXPIRATIONDATES:I(2)"

gb__win.ROLLEXPIRATIONDATES=-1

dim gb__window$:"win_id[1]:c(8*=10),win_name[1]:c(16*=10),context[1]:n(4*=10)"
gb__window.win_id$[1]="101",gb__window.win_name$[1]="ROLLEXPIRATIONDATES",gb__window.context[1]=-1,gb__form.id$[1]="101"

gb__context = fngb__window("101"); rem ' rollExpirationDates

rem ' Instantiate the form corresponding to a given window

   def fngb__window(xx__win_id$)
      gb__window = 0
      for xx__window=1 to gb__windows
         if gb__window.win_id$[xx__window]=xx__win_id$ then
:           gb__window = xx__window;
:           break
      next xx__window
      if gb__window = 0 then 
:        return -1
      if gb__window.context[gb__window] >= 0 then
:        return gb__window.context[gb__window]

      switch fngb__form(xx__win_id$)

         case 1; rem ' Load Form ID 101 (ROLLEXPIRATIONDATES)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[1]=gb__sysgui_fin.available_context
         gb__resource$[1]=resget(gb__handle,1,101)
         print (gb__sysgui)'context'(gb__form_context[1]),'resource'(len(gb__resource$[1])),gb__resource$[1]
         gb__win.ROLLEXPIRATIONDATES=gb__form_context[1]
         gb__window.context[1]=gb__win.ROLLEXPIRATIONDATES
         break
      swend

      return gb__window.context[gb__window]
   fnend

rem ' Get template for controls on a given window

   def fngb__template$(xx__win_id$)
      if xx__win_id$="101" then return "LEFTSIDE:C(255*=0):ID=100 TYPE=18 X=120 Y=105 W=200 H=249:,RIGHTSIDE:C(255*=0):ID=101 TYPE=18 X=470 Y=105 W=200 H=249:,SELECTSOME:C(1*=0):ID=102 TYPE=11 X=370 Y=130 W=50 H=25:,SELECTALL:C(1*=0):ID=103 TYPE=11 X=370 Y=165 W=50 H=25:,DESELECTALL:C(1*=0):ID=104 TYPE=11 X=370 Y=200 W=50 H=25:,DESELECTSOME:C(1*=0):ID=106 TYPE=11 X=370 Y=235 W=50 H=25:,EXPIRATIONDATE:C(64*=0):ID=105 TYPE=17 X=120 Y=70 W=170 H=25:,ROLLTO:C(64*=0):ID=107 TYPE=17 X=470 Y=70 W=170 H=25:,ROLLDATES:C(1*=0):ID=108 TYPE=11 X=470 Y=370 W=200 H=25:,DONE:C(1*=0):ID=109 TYPE=11 X=600 Y=460 W=170 H=25:,EXPIREDATES:C(255*=0):ID=110 TYPE=19 X=190 Y=370 W=130 H=130:,STATICTEXT01:C(64*=0):ID=111 TYPE=17 X=100 Y=375 W=90 H=25:,HEADERTEXT:C(64*=0):ID=112 TYPE=17 X=0 Y=0 W=790 H=25:"
      return ""
   fnend

rem ' start up

USE java.io.File
USE java.io.FileInputStream
USE java.io.BufferedInputStream
USE java.util.Properties
USE java.lang.StringBuffer
USE java.util.Enumeration

declare File file!
declare FileInputStream fis!
declare BufferedInputStream bis!
declare Properties props!
declare StringBuffer sqlBuilder!
declare BBjString ourDbUrl!
declare Enumeration keys!

declare BBjTopLevelWindow ourWindow!
declare BBjStaticText expirationDate!
declare BBjStaticText rollTo!
declare BBjListBox leftSide!
declare BBjListBox rightSide!
declare BBjListButton expireDates!
declare BBjButton rollDates!
declare BBjButton selectSome!
declare BBjButton selectAll!
declare BBjButton deselectSome!
declare BBjButton deselectAll!

declare BBjVector selectedIndices!
declare BBjVector serialNbrList!

declare BBjRecordSet rs!
declare BBjRecordData data!

declare BBjControl aControl!

rem ' get the db connect string
rem ' locate the properties file
props=unt
open(props)"ec_sql.properties"
props$=fid(props), props$=props$(9)
close(props)

file!= new java.io.File(props$)
fis!=new java.io.FileInputStream(file!)
bis!=new java.io.BufferedInputStream(fis!)
props!=new java.util.Properties()
props!.load(bis!)
		
sqlBuilder!= new StringBuffer(props!.getProperty("sqlURL.urlprefix") + props!.getProperty("sqlURL.server")+":")
sqlBuilder!.append(props!.getProperty("sqlURL.port")+"?database=")
sqlBuilder!.append(props!.getProperty("sqlURL.database")+"&user="+props!.getProperty("sqlURL.user")+"&password=")
sqlBuilder!.append(props!.getProperty("sqlURL.password"))
ourDbUrl! = sqlBuilder!.toString()

bis!.close()
fis!.close()

firm_id$ = gb__arg.firm_id$
customer_nbr$ = gb__arg.customer_nbr$
user_code$ = gb__arg.user_code$
x = num(gb__arg.screenx$)
y = num(gb__arg.screeny$)
lang$ = gb__arg.lang$
cred_hold$ = gb__arg.cred_hold$

gosub openFiles

rem ' this function is limited to BSG customer HeimBAS 020005
if customer_nbr$ <> "020005" then
    gosub closeFiles
    goto gb__eoj
endif

gosub setUpDates

ourWindow! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow(gb__win.rollExpirationDates))

gosub prepTranslation

rem ' load expiration date list box
expireDates! = cast(BBjListButton, ourWindow!.getControl("expireDates"))
expireDates!.removeAllItems()
if gotPast then expireDates!.addItem(date(julPast:"%Y-%Mz-%Dz"))
expireDates!.addItem(date(julNext:"%Y-%Mz-%Dz"))
expireDates!.addItem(date(julTwo:"%Y-%Mz-%Dz"))
expireDates!.addItem(date(julThree:"%Y-%Mz-%Dz"))
expireDates!.addItem(date(julFour:"%Y-%Mz-%Dz"))
expireDates!.selectIndex(0)

selectSome! = cast(BBjButton, ourWindow!.getControl("selectSome"))
selectAll! = cast(BBjButton, ourWindow!.getControl("selectAll"))
deselectSome! = cast(BBjButton, ourWindow!.getControl("deselectSome"))
deselectAll! = cast(BBjButton, ourWindow!.getControl("deselectAll"))
rollDates! = cast(BBjButton, ourWindow!.getControl("rollDates"))
gosub enableDisableButtons

expirationDate! = cast(BBjStaticText, ourWindow!.getControl("expirationDate"))
rollTo! = cast(BBjStaticText, ourWindow!.getControl("rollTo"))
gosub setListBoxLabels

leftSide! = cast(BBjListBox, ourWindow!.getControl("leftSide"))
rightSide! = cast(BBjListBox, ourWindow!.getControl("rightSide"))
leftSide!.removeAllItems()
rightSide!.removeAllItems()

gosub loadLeftSide

gosub prepWindow
ourWindow!.setVisible(1)
rem ' ---------------------------------------------------------------
rem ' Event Loop
rem ' ---------------------------------------------------------------

dim gb__closed[gb__windows]; rem ' track window status
dim gb__generic$:noticetpl(0,0); rem ' generic notice template
gb__eoj=0
goto gb__event

rem ' Load gb__notice$ string only if we're handling the event

gb__notice:
   gb__generic$=notice(gb__sysgui,gb__event.x%)
   dim gb__notice$:noticetpl(gb__generic.objtype%,gb__event.flags%)
   gb__notice$=gb__generic$
return

gb__event: repeat
   read record (gb__sysgui,siz=gb__event,err=gb__event_loop_end)gb__event$

   rem ' Get Window ID or Popup ID
   gb__win_id$=$$,gb__popup_id=gb__event.x*(gb__event.code$="P")
   if gb__popup_id=0 then gb__win_id$=fngb__win_id$(gb__event.context)

   rem ' Track whether event was handled
   gb__event_handled=0

   rem ' Handle events for Window ID 101 (rollExpirationDates)
   while gb__win_id$="101"
      if gb__event.id=102 and gb__event.code$="B" then
:        gosub W101_C102_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=103 and gb__event.code$="B" then
:        gosub W101_C103_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=104 and gb__event.code$="B" then
:        gosub W101_C104_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=106 and gb__event.code$="B" then
:        gosub W101_C106_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=108 and gb__event.code$="B" then
:        gosub W101_C108_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=109 and gb__event.code$="B" then
:        gosub W101_C109_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=110 and gb__event.code$="N" and gb__event.flags=2 then
:        gosub gb__notice;
:        gosub W101_C110_LIST_SELECT;
:        gb__event_handled=1;
:        break
      break; rem ' Catch unhandled events
   wend; rem ' End of Window ID 101

   rem ' We're done when all windows have been closed.
   rem ' Developer can terminate event loop by setting
   rem ' gb__eoj=1 in any event handler.

   if !(gb__eoj) then
:     gb__eoj=1;
:     for gb__window=1 to gb__windows;
:        gb__eoj=(gb__eoj and gb__closed[gb__window]);
:     next gb__window

until gb__eoj

gb__event_loop_end: rem ' -------------------------------------

rem gb_eoj.cod - GUIBuilder generated programs: End of Job
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** P R O G R A M   E X I T **************************************
rem
gb__eoj:
   if gb__forms and gb__sysgui then
:     for gb__temp=1 to gb__forms;
:        print (gb__sysgui)'context'(gb__form_context[gb__temp]),'destroy'(0);
:     next gb__temp

   if gb__sysgui then
:     close (gb__sysgui)

   resclose (gb__handle,err=gb__eoj_final)

gb__eoj_final:

   if tcb(13) then
:     exit
:  else
:     release

rem gb_err.cod - GUIBuilder generated programs: Error handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E R R O R   H A N D L E R ************************************
rem
gb__err:
   
   rem ' terminate on Network Lost Errors
   if err = 71 or err = 72 then goto gb__eoj

   gb__temp=msgbox(errmes(-1)+" ("+str(err)+")"+
:      " occurred at line "+str(tcb(5))+
:      " in program "+pgm(-2),5+48,"Error handler")

   if gb__temp=4 then
:     retry
:  else
:     goto gb__eoj

rem gb_esc.cod - GUIBuilder generated programs: Escape handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E S C A P E   H A N D L E R ***********************************
rem
gb__esc:
   
   rem ' terminate program when ESCAPE detected.
   goto gb__eoj
   
   gb__temp=msgbox("An ESCAPE has been detected.  Do you want to end this "+
:     "program?",4+32+256,"ESCAPE handler")
   if gb__temp=7 then
:     return
:  else
:     goto gb__eoj

rem ' -----------------------------------------------------------------
rem ' closeFiles
rem ' -----------------------------------------------------------------

closeFiles:

close(smc01)
close(snm04)
close(snm01)

return
rem ' -----------------------------------------------------------------
rem ' enableDisableButtons
rem ' -----------------------------------------------------------------

enableDisableButtons:

selectedDateIndex = expireDates!.getSelectedIndex()
expirationDate$ = expireDates!.getItemAt(selectedDateIndex)

edYear = num(expirationDate$(1,4))
edMonth = num(expirationDate$(6,2))
edDay = num(expirationDate$(9,2))

julEd = jul(edYear, edMonth, edDay)

if abs(julToday - julEd ) <= 45 then
    selectSome!.setEnabled(1)
    selectAll!.setEnabled(1)
    deselectSome!.setEnabled(1)
    deselectAll!.setEnabled(1)
    if cred_hold$ <> "Y" then
        rollDates!.setEnabled(1)
    else
        rollDates!.setEnabled(0)
    endif
else
    selectSome!.setEnabled(0)
    selectAll!.setEnabled(0)
    deselectSome!.setEnabled(0)
    deselectAll!.setEnabled(0)
    rollDates!.setEnabled(0)
endif

return
rem ' -----------------------------------------------------------------
rem ' loadLeftSide
rem ' -----------------------------------------------------------------

loadLeftSide:

rem ' clean out the left and right side
leftSide!.removeAllItems()
rightSide!.removeAllItems()

selectedDateIndex = expireDates!.getSelectedIndex()
expirationDate$ = expireDates!.getItemAt(selectedDateIndex)

rem ' remove dashes
expirationDate$ = expirationDate$(1,4) + expirationDate$(6,2) + expirationDate$(9,2)

sql$ = "CALL HEIMBAS_QUERY('" + expirationDate$ + "')"

rs! = BBjAPI().createSQLRecordSet(ourDbUrl!,"",sql$)

if rs!.isEmpty() then
    leftSide!.addItem("No serial numbers")
else
    rs!.first()

    while 1
        data! = rs!.getCurrentRecordData()
        serialNbr$ = data!.getFieldValue("SERIAL_NBR")
        leftSide!.addItem(serialNbr$)
        rs!.next(err=*break)
    wend
endif

return
rem ' -----------------------------------------------------------------
rem ' openFiles
rem ' -----------------------------------------------------------------

openFiles:

call "ec_open::SMC01"; rem ' SAM and RENTAL contract file
call "ec_open::SNM04"; rem ' serial number comment file
call "ec_open::SNM01"; rem ' serial number file

return
rem ' -----------------------------------------------------------------
rem ' prepTranslation
rem ' -----------------------------------------------------------------

prepTranslation:

rem ' locate ec_rollHeimBASContracts.properties file
sqlprops=unt
open(sqlprops)"ec_rollHeimBASContracts.properties"
sqlprops$=fid(sqlprops)
sqlprops$=sqlprops$(9)
close(sqlprops)

rem ' load the properties object with the properties
file!= new java.io.File(sqlprops$)
fis!=new java.io.FileInputStream(file!)
bis!=new java.io.BufferedInputStream(fis!)
props!=new Properties()
props!.load(bis!)
keys! = cast(Enumeration, props!.keys())

while keys!.hasMoreElements()
    theKey$ = cast(BBjString, keys!.nextElement())

    rem ' skip if not this language
    keyLang$ = theKey$(1,2)
    if (keyLang$ <> lang$) then continue
    
    theText$ = cast(BBjString, props!.getProperty(theKey$))
    contName$ = cvs(theKey$(4),3)

    if contName$ = "windowTitle" then
        ourWindow!.setTitle(theText$)
        continue
    endif

    if contName$ = "expiring" then
        expiringLabel$ = theText$
        continue
    endif

    if contName$ = "rollTo" then
        rollToLabel$ = theText$
        continue
    endif

    if contName$ = "messageboxTitle" then
        messageBoxTitle$ = theText$
        continue
    endif

    if contName$ = "messageText" then
        messageText$ = theText$
        continue
    endif

    aControl! = ourWindow!.getControl(contName$)
    aControl!.setText(theText$)
    
wend

return
rem ' -----------------------------------------------------------------
rem ' prepWindow
rem ' -----------------------------------------------------------------

prepWindow:

rem ' locate the window
ourWindow!.setLocation(x,y)

rem ' this is where we would get the translations from the properties file and
rem ' apply them to the form

return
rem ' -----------------------------------------------------------------
rem ' setListBoxLabels
rem ' -----------------------------------------------------------------

setListBoxLabels:

selectedDateIndex = expireDates!.getSelectedIndex()
expirationDate$ = expireDates!.getItemAt(selectedDateIndex)

if expiringLabel$ <> "" then
    expirationDate!.setText(expiringLabel$ + " " + expirationDate$)
else
    expirationDate!.setText("Expiring: " + expirationDate$)
endif

aYear = num(expirationDate$(1,4))
aMonth = num(expirationDate$(6,2))
aDay = num(expirationDate$(9,2))
aYear = aYear + 1
julRollTo = jul(aYear, aMonth, aDay)

if rollToLabel$ <> "" then
    rollTo!.setText(rollToLabel$ + " " + date(julRollTo:"%Y-%Mz-%Dz"))
else
    rollTo!.setText("Roll To: " + date(julRollTo:"%Y-%Mz-%Dz"))
endif

return
rem ' -----------------------------------------------------------------
rem ' setUpDates
rem ' -----------------------------------------------------------------

setUpDates:

julToday = jul(0,0,0)
nowYear = num(date(julToday:"%Y"))
nowMonth = num(date(julToday:"%M"))
nowDay = num(date(julToday:"%D"))

rem ' find the next expire date
nextDay = 15
nextYear = nowYear
if mod(nowMonth,3) = 0 and nowDay <= 15 then
    nextMonth = nowMonth
else 
    if mod(nowMonth,3) = 0 and nowDay > 15 then
        nextMonth = nowMonth + 3
    else
        if mod(nowMonth,3) = 1 then
            nextMonth = nowMonth + 2
        else
            if mod(nowMonth,3) = 2 then
                nextMonth = nowMonth + 1
            endif
        endif
    endif
endif
if nextMonth > 12 then
    nextYear = nextYear + 1
    nextMonth = nextMonth - 12
endif
julNext = jul(nextYear, nextMonth, nextDay)

rem ' next get the 3 succeeding expiry dates
twoMonth = nextMonth + 3
twoYear = nextYear
twoDay = 15
if twoMonth > 12 then
    twoYear = nextYear + 1
    twoMonth = twoMonth - 12
endif
julTwo = jul(twoYear, twoMonth, twoDay)

threeMonth = twoMonth + 3
threeYear = twoYear
threeDay = 15
if threeMonth > 12 then
    threeYear = threeYear + 1
    threeMonth = threeMonth - 12
endif
julThree = jul(threeYear, threeMonth, threeDay)

fourMonth = threeMonth + 3
fourYear = threeYear
fourDay = 15
if fourMonth > 12 then
    fourYear = fourYear + 1
    fourMonth = fourMonth - 12
endif
julFour = jul(fourYear, fourMonth, fourDay)

rem ' do we have one in the past
pastMonth = nextMonth - 3
pastYear = nextYear
if pastMonth <= 0 then 
    pastMonth = 12
    pastYear = pastYear - 1
endif
pastDay = 15
julPast = jul(pastYear, pastMonth, pastDay)
if julToday - julPast <= 44 then 
    gotPast = 1
else
    gotPast = 0
endif


return

rem ' ---------------------------------------------------------------
rem ' Win=101 rollExpirationDates Ctl=102 selectSome (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C102_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' move the selections to the right
selectedIndices! = leftSide!.getSelectedIndices()

count =  selectedIndices!.size()

rem ' move from the left to the right
if count > 0 then
    for x = 0 to count - 1
        index = selectedIndices!.getItem(x)
        moveSN$ = leftSide!.getItemAt(index)
        rightSide!.addItem(moveSN$)
    next x

    rem ' romove the selected items from the left sode
    rem ' process from highest to lowest to preserve the index numbers
    for x = count -1  to 0 step -1
        index = selectedIndices!.getItem(x)
        leftSide!.removeItemAt(index)
    next x
endif
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 rollExpirationDates Ctl=103 selectAll (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C103_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' move everything on the left to the right
count = leftSide!.getItemCount()

rem ' move from the left to the right
if count > 0 then
    for x = 0 to count - 1
        moveSN$ = leftSide!.getItemAt(x)
        rightSide!.addItem(moveSN$)
    next x

    leftSide!.removeAllItems()
endif
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 rollExpirationDates Ctl=104 deselectAll (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C104_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' move all on the right to the left
count = rightSide!.getItemCount()

if count > 0 then
    gosub loadLeftSide
endif
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 rollExpirationDates Ctl=106 deselectSome (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C106_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' move the selections to the left
selectedIndices! = rightSide!.getSelectedIndices()

count =  selectedIndices!.size()

rem ' move from the right to the left
if count > 0 then
    for x = 0 to count - 1
        index = selectedIndices!.getItem(x)
        moveSN$ = rightSide!.getItemAt(index)

        rem ' insert back on the left in proper order
        cnt = leftSide!.getItemCount()
        if cnt > 0 then
            added = 0
            for y = 0 to cnt - 1
                checkSN$ = leftSide!.getItemAt(y)
                if checkSN$ > moveSN$ then
                    leftSide!.insertItemAt(y, moveSN$)
                    added = 1
                    break
                endif
            next y
            rem ' if if has not been added add it to the end
            if !added leftSide!.addItem(moveSN$)
        else
            leftSide!.addItem(moveSN$)
        endif
    next x

    rem ' romove the selected items from the right sode
    rem ' process from highest to lowest to preserve the index numbers
    for x = count - 1  to 0 step -1
        index = selectedIndices!.getItem(x)
        rightSide!.removeItemAt(index)
    next x
endif
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 rollExpirationDates Ctl=108 rollDates (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C108_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' how many serial numbers to process
count = rightSide!.getItemCount()

if count > 0 then
    rem ' get the list
    serialNbrList! = rightSide!.getAllItems()

    rem ' set the new expiration date
    expirationDate$ = expireDates!.getItemAt(selectedDateIndex)
    aYear = num(expirationDate$(1,4))
    aMonth = num(expirationDate$(6,2))
    aDay = num(expirationDate$(9,2))
    aYear = aYear + 1
    newDate$ = str(aYear) + str(aMonth:"00") + str(aDay:"00")
    newExpireDate$ = newDate$(5,2) + "/" + newDate$(7,2) + "/" + newDate$(1,4)
 
    rollCount = 0
    emailText$ = user_code$ + " rolled the following serial numbers: " + $0A$

    for x = 0 to serialNbrList!.size() - 1
	serialNbr$ = cast(BBjString, serialNbrList!.getItem(x))
	
        rollCount = rollCount + 1
        emailText$ = emailText$ + cvs(serialNbr$,3) + $0A$

        read record(snm01, key = serialNbr$)snm01$
	
	extract record(smc01, key = snm01.contract$)smc01$
	
	smc01.expire_on_dt$ = newDate$
	smc01.annual_dt$ = newDate$

	smc01$ = field(smc01$)
	write record(smc01)smc01$

        rem ' write the serial number comment
        seq=1
        com$="expire rolled to " + newExpireDate$ + " on " + DATE(0:"%Mz/%Dz/%Y") + " by " + user_code$
        if len(com$)>48 then let com$=com$(1,48)
        read (snm04,key=serialNbr$,dom=*next)

        while seq<100
            read record (snm04,END=*break)snm04$
            if snm04.serial_nbr$ = serialNbr$ then 
                let seq=num(snm04.comments_seq$)+1
                continue
            endif
            let snm04.serial_nbr$ = serialNbr$
            let snm04.comments_seq$=str(seq:"00")
            let snm04.cmt_line$=com$
            let snm04$=field(snm04$)
            write record (snm04,key=snm04$(1,22))snm04$
            break
            wend
    
    next x

    gosub loadLeftSide

    if messageBoxTitle$ <> "" then
        title$ = messageBoxTitle$
    else
        title$ = "Roll Complete"
    endif

    if messageText$ <> "" then
        msg$ = str(rollCount) + " " + messageText$
    else
        msg$ = str(rollCount) + " serial numbers have been rolled to the new expiration date."
    endif
    trash = msgbox(msg$, 0, title$)

    rem ' send a notificateion email
    
    from$ = "customer-service@basis.cloud"
    subject$ = "HeimBAS serial number roll"
    file$ = ""
    to$ = "kurt.e.williams@comcast.net, nspence@basis.cloud, swald@basis.cloud"
    cc$ = ""
    bcc$ = ""
    msgtxt$ = emailText$
    call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msgtxt$, file$

endif
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 rollExpirationDates Ctl=109 done (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C109_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub closeFiles
goto gb__eoj
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 rollExpirationDates Ctl=110 expireDates (List Button) LIST_SELECT (N2:19)
rem ' ---------------------------------------------------------------

W101_C110_LIST_SELECT:
rem ' Notify Event - List Control - List Selection (2)
rem ' gb__event! = cast(BBjListSelectEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub setListBoxLabels
gosub enableDisableButtons
gosub loadleftSide
RETURN


rem gb_std.cod - Put your standard subroutines/functions/etc. here.

END
