0001 REM <ec_an.bbx>
0010 REM Generate authorization # or activation key
0020 rem IF INFO(3,2)="thines" THEN ESCAPE
0030 SETERR enter_err
0040 SETESC ERR_EXIT
0050 uncounted_flag$="N"
0060 ENTER FIRM$,ITEM$,SERIALNUM$,ORDER$,USERS,LIC_KEY$,LCOUNT,uncounted_flag$,err=enter_err
0070 enter_err:
0080 seterr err_exit
0090 LET LCOUNT=0,FILES=4,C=1; DIM CHAN[FILES]
0100 CALL "ec_open::BBXTYPES"; LET CHAN[C]=BBXTYPES,C=C+1
0110 CALL "ec_open::CSM03"; LET CHAN[C]=CSM03,C=C+1
0120 CALL "ec_open::CSM04"; LET CHAN[C]=CSM04,C=C+1
0130 CALL "ec_open::SNT01"; LET CHAN[C]=SNT01,C=C+1
0140 READ RECORD (CSM04,KEY=FIRM$+ITEM$(10,3),DOM=ERR_EXIT)CSM04$
0150 LET P=POS("."=CSM04.DESCRIPTION$); IF P=0 THEN LET P=2
0160 LET REVLVL$=CSM04.DESCRIPTION$(1,P)
0170 IF CVS(CSM04.KEY_OR_LICEN$,4)="K" THEN GOTO KEYGEN
0180 IF CVS(CSM04.KEY_OR_LICEN$,4)<>"L" THEN LET LIC_KEY$="NOT REQUIRED"; GOTO CLOSE_EXIT
0190 READ RECORD (CSM03,KEY=FIRM$+ITEM$(7,3),DOM=ERR_EXIT)CSM03$
0200 LET FLOAT$="Y"
0210 IF USERS=1 AND CSM03.FIXED_LIC_FLAG$="Y" and uncounted_flag$="Y" and pos("ODB"=item$)=1 THEN LET FLOAT$="N"
0220 LET S$=CVS(SERIALNUM$,2),O$=CVS(ORDER$,2)
0230 IF LEN(S$)<9 OR LEN(O$)<5 THEN GOTO ERR_EXIT
0240 LET L4$=S$(LEN(S$)-3,4)
0250 IF FLOAT$<>"N" THEN LET L4$=L4$+"1" ELSE LET L4$=L4$+"0"
0260 LET LIC_KEY$=O$(LEN(O$)-4,5)+L4$
0270 IF LEN(LIC_KEY$)<>10 THEN GOTO ERR_EXIT
0280 REM Get last license count- Need to pass back to set ARE-83.license_cnt
0290 lastauth$=""
0300 read (snt01,key=s$,dom=*next)
0310 while 1
0320   READ RECORD(SNT01,END=*break)snt01$
0330   IF POS(s$=snt01$)<>1 THEN break
0340   temp$=cvs(snt01.auth_code$,3)
0350   if temp$<>"" then LCOUNT=snt01.license_cnt,lastauth$=temp$
0360 wend
0370 if pos(l4$=lastauth$)=6 then lic_key$=lastauth$
0380 GOTO CLOSE_EXIT
0390 KEYGEN: 
0400 LET TYPE$=ITEM$(13,3),SERIAL$=CVS(SERIALNUM$,3),RV$="REV "+REVLVL$
0410 READ (CSM03,KEY=FIRM$+ITEM$(7,3),DOM=ERR_EXIT)*,*,P$; LET PORT$=P$(1,5)
0420 IF POS(ITEM$(1,3)="P4E DS4") THEN LET PORT$=PORT$(1,4)
0430 IF PORT$(1,4)="1467" THEN LET PORT$="14675"; IF TYPE$="STD" THEN LET TYPE$="ODBC"
0440 LET LIC_KEY$="",KUSERS=USERS
0450 LET TEMP_FILE$=stbl("TEMP")+SERIAL$+".tmp"
0460 LET KEY_TEMP$=stbl("TEMP")+SERIAL$+".key"
0470 LET KEY_PROGRAM$=stbl("KEYGEN")+"key"
0480 IF PORT$(1,3)="146" AND KUSERS=1 THEN LET KUSERS=0
0490 LET TYPE_ERROR=0
0500 READ_TYPES: READ (BBXTYPES,ERR=TYPE_ERROR)A$
0510 IF POS(TYPE$=A$)=1 THEN GOTO END_TYPES
0520 GOTO READ_TYPES
0530 TYPE_ERROR: LET TYPE_ERROR=1
0540 END_TYPES: 
0550 IF POS($09$=A$)=0 OR TYPE_ERROR THEN LET LIC_KEY$="ERROR -type"; GOTO END_KEYGEN
0560 LET A$=A$(POS($09$=A$)+1)
0570 REM xlate commas to newlines
0580 LET A$=TBL(A$,TBL=NEWLINE_TBL)
0590 IF POS("SQL"=TYPE$)=1 THEN LET PORT$(1,1)="2"
0600 REM write temp file with key generating commands
0610 ERASE TEMP_FILE$,ERR=STRING_TEMP_FILE
0620 STRING_TEMP_FILE: STRING TEMP_FILE$
0630 LET TEMP=UNT
0640 OPEN (TEMP)TEMP_FILE$
0650 PRINT (TEMP)"serial "+SERIAL$
0660 PRINT (TEMP)"portid "+PORT$
0670 PRINT (TEMP)"rev "+RV$
0680 PRINT (TEMP)"users ",KUSERS
0690 REM Turn off network switch on multi-user 10665 
0700 IF PORT$="10665" AND KUSERS>1 THEN PRINT (TEMP)"network 0"
0710 PRINT (TEMP)A$
0720 PRINT (TEMP)"key"
0730 CLOSE (TEMP)
0740 LET A=SCALL("/bin/cat "+TEMP_FILE$+" | "+KEY_PROGRAM$+" > "+KEY_TEMP$)
0750 LET KTEMP=UNT,A$="ERROR -no key"
0760 OPEN (KTEMP,ERR=CLOSE_KTEMP)KEY_TEMP$
0770 READ_KTEMP: READ (KTEMP,ERR=CLOSE_KTEMP)A$
0780 GOTO READ_KTEMP
0790 CLOSE_KTEMP: CLOSE (KTEMP,ERR=ERASE_KTEMP)
0800 ERASE_KTEMP: LET LIC_KEY$=A$
0810 ERASE KEY_TEMP$,ERR=ERASE_TEMP_FILE
0820 ERASE_TEMP_FILE: ERASE TEMP_FILE$,ERR=END_KEYGEN
0830 GOTO END_KEYGEN
0840 NEWLINE_TBL: TABLE FF 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27 28 29 2A 2B 0A
0850 END_KEYGEN: 
0860 IF LEN(CVS(LIC_KEY$,2))=13 AND POS("ERROR"=LIC_KEY$)=0 THEN GOTO CLOSE_EXIT
0870 ERR_EXIT: 
0880 IF LIC_KEY$="" THEN LET LIC_KEY$=STR(ERR)+" in "+STR(TCB(5))
0890 CLOSE_EXIT: 
0900 IF FILES=0 THEN GOTO PGM_EXIT
0910 FOR I=1 TO FILES
0920 CLOSE (CHAN[I],ERR=NEXTI)
0930 NEXTI: NEXT I
0940 PGM_EXIT: EXIT
