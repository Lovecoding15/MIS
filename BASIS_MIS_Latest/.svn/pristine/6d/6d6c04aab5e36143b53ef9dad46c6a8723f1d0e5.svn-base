   rem ' Program Name: C:/eclipse202103r/workspace/b_commerce/ops_call.src
   rem ' Resource File: ops_call.arc
   rem ' Generated by GUIBuilder 4.0 (April 4, 2022 at 16:11:40)
   rem ' Portions Copyright (C) 1997-2022 BASIS International Ltd.  All rights reserved.

   seterr gb__no_arg
   enter gb__arg$; gb__args=-1,gb__args=pos($0a$=fattr(gb__arg$,$$),1,0)
gb__no_arg:
   seterr 0

   precision 2
   gb__show_forms=2; rem ' Create all forms at the beginning

   rem ' gb_ini.cod - GUIBuilder generated programs: Initialization
   rem ' Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
   rem
   rem ' ***** I N I T I A L I Z A T I O N *****
   rem ' The first part of the initialization section ensures that the
   rem ' environment will support the requirements of the generated 
   rem ' program.  These requirements are:
   rem '     1.  The interpreter supports GUI
   rem '     2.  The interpreter is Visual PRO/5 2.0 or above
   rem '     3.  A SYSGUI device is defined in config.bbx
   rem

   rem ' 1. Make sure the interpreter in use supports GUI
   if info(6,0)="" then
:     print 'cs',;
:     print "This interpreter does not support GUI.";
:     print "Press any key to continue.",;
:     read record(0,siz=1);
:     stop
   rem

   rem ' 2. Make sure the interpreter in use is Visual PRO/5 2.0 or above
   if sys<"LEVEL 5" or (cvs(sys,3)="LEVEL 5" and cvs(rev,3)<"REV 2.0") then
:     input(0,err=gb__eoj)
:      	'ask'("",4,"Requires at least Visual PRO/5 Rev. 2.0.  "+
:      	"This program will now terminate.","&Terminate:Y"+$0a$),
:      	'ee',gb__temp$,'be',;
:     goto gb__eoj
   rem

   seterr gb__err; setesc gb__esc

   rem ' 3. Check config.bbx for SYSGUI and SYSPRINT devices
   gb__alias=0,gb__sysgui$="",gb__sysprint$=""
   dim gb__tsk$:"type:u(1),opens:u(1),name:c(1*=0),dname:c(1*=0),pname:c(1*=0),modes:c(1*=0)"

gb__check_tsk:
   gb__tsk$=tsk(gb__alias,err=gb__done_with_tsk)

   if gb__sysgui$="" and cvs(gb__tsk.pname$,7)="SYSGUI" then
:     gb__sysgui$=gb__tsk.name$

   if gb__sysprint$="" and cvs(gb__tsk.pname$,7)="SYSPRINT" then
:     gb__sysprint$=gb__tsk.name$

   if gb__sysgui$="" or gb__sysprint$="" then
:     gb__alias=gb__alias+1;
:     goto gb__check_tsk

gb__done_with_tsk:
   if gb__sysgui$="" then
:     gb__sysgui$="not defined in config.bbx";
:     goto gb__cannot_open_sysgui

   rem ' Open SYSGUI device
   gb__sysgui=unt; open (gb__sysgui,err=gb__cannot_open_sysgui)gb__sysgui$
   goto gb__opened_sysgui

gb__cannot_open_sysgui:
   gb__err$="Unable to open the SYSGUI device (alias "+gb__sysgui$+
:    ") in program "+pgm(-2)+".  Visual PRO/5 cannot maintain a graphical "+
:    "user interface without this device.  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"SYSGUI error")
   goto gb__eoj

gb__opened_sysgui:
   dim gb__sysgui_fin$:tmpl(gb__sysgui,ind=0)
   gb__sysgui_fin$=fin(gb__sysgui)

   rem ' splash screen, if any, can go here
   rem ' splash=gb__sysgui_fin.available_context
   rem ' print (gb__sysgui)'context'(splash),'window'(0,0,500,400,$$,$01000000$),'image'(0,0,500,400,"mysplash.gif")

   dim gb__event$:tmpl(gb__sysgui)
   gb__event=len(gb__event$)

   rem ' Open the resource file (try both .arc and .brc if necessary)
   gb__resource$="ops_call.arc"
   if pos("ec.bbj"= pgm(-2)) then gosub prep_routine
   gb__handle=resopen(gb__resource$,err=gb__resource_fallback);
:  goto gb__opened_resource

gb__resource_fallback:
   gb__temp=pos(".brc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"arc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

   gb__temp=pos(".arc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"brc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

gb__cannot_open_resource:
   gb__err$="Unable to open resource file ops_call.arc"+
:    " in program "+pgm(-2)+".  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"Resource file error")
   goto gb__eoj

   rem ' ------------------------------------------------------------------------
   rem ' Functions to manipulate screens and data
   rem ' ------------------------------------------------------------------------

   rem ' Get data from screen into template record
   def fngb__get_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put data from template record to screen
   def fngb__put_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Get fields from screen into template record
   def fngb__get_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put fields from template record to screen
   def fngb__put_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Set focus to specified Window ID
   def fngb__focus_win_id(xx__win_id$)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui,err=gb__focus_win_id)'context'(xx__context),'focus'(0),'raise',
      return xx__context
   gb__focus_win_id:
      xx__form=fngb__form(xx__win_id$)
      print (gb__sysgui)'context'(xx__context),
:                       'resource'(len(gb__resource$[xx__form])),gb__resource$[xx__form],
      return xx__context
   fnend


   rem ' Get form number given Window ID
   def fngb__form(xx__win_id$)
       gb__form=-1,xx__form_id$=xx__win_id$
       xx__form=pos("."=xx__form_id$)
       if xx__form then
:         xx__form_id$=xx__form_id$(1,xx__form-1)
       for xx__form=1 to gb__forms
           if gb__form.id$[xx__form]=xx__form_id$ then
:             gb__form=xx__form;
:             break
       next xx__form
       return gb__form
   fnend


   rem ' Set focus to specified Window ID + Control ID
   def fngb__focus_ctl_id(xx__win_id$,xx__ctl_id)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Set focus to specified Window ID + Control Name
   def fngb__focus_ctl_name(xx__win_id$,xx__ctl_name$)
      dim xx__rec$:fngb__template$(xx__win_id$)
      xx__ctl_id=num(fattr(xx__rec$,xx__ctl_name$,"ID"))
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Get Window ID given Context
   def fngb__win_id$(xx__context)
       xx__win_id$=""
       for xx__window=1 to gb__windows
           if gb__window.context[xx__window]=xx__context then
:             xx__win_id$=gb__window.win_id$[xx__window];
:             break
       next xx__window
       return xx__win_id$
   fnend


   rem ' Get Context given Window ID
   def fngb__context(xx__win_id$)
      gb__window=-1,gb__context=-1
      for xx__window=1 to gb__windows
          if gb__window.win_id$[xx__window]=xx__win_id$ then
:            gb__window=xx__window,gb__context=gb__window.context[gb__window];
:            break
      next xx__window
      if gb__context>=0 or gb__window<0 then
:        return gb__context
      return fngb__window(xx__win_id$)
   fnend


   rem ' Get Window Information given Window ID
   def fngb__win_info$(xx__win_id$)
      dim gb__win_info$(0)
      xx__context=fngb__context(xx__win_id$)
      if xx__context<0 then
:        return gb__win_info$
      dim gb__win_info$:"class:u(1),type:u(1),hidden:u(1),disabled:u(1),"
:                      +"context:u(2),eventmask:u(4),flags:u(4),focus:u(2),"
:                      +"x:i(2),y:i(2),w:u(2),h:u(2),title:c(16*=)"
      gb__win_info$=ctrl(gb__sysgui,0,4,xx__context)
:                  +ctrl(gb__sysgui,0,8,xx__context)
:                  +bin(xx__context,2)
:                  +sendmsg(gb__sysgui,0,21,0,"",xx__context)
:                  +sendmsg(gb__sysgui,0,22,0,"",xx__context)
:                  +ctrl(gb__sysgui,0,2,xx__context)
:                  +ctrl(gb__sysgui,0,0,xx__context)
:                  +ctrl(gb__sysgui,0,1,xx__context)
      return gb__win_info$
   fnend

gb__opened_resource:

   rem ==================== End of gb_ini.cod ====================

rem ' Instantiate form(s)

gb__forms = 1
dim gb__form_context[gb__forms],gb__resource$[gb__forms],gb__form$:"id[1]:c(4*=10)"

gb__windows=1; rem ' includes child windows, if any
gb__win_id$ = "101"

dim gb__win$:"CREDIT_SAM:I(2)"

gb__win.CREDIT_SAM=-1

dim gb__window$:"win_id[1]:c(8*=10),win_name[1]:c(16*=10),context[1]:n(4*=10)"
gb__window.win_id$[1]="101",gb__window.win_name$[1]="CREDIT_SAM",gb__window.context[1]=-1,gb__form.id$[1]="101"

gb__context = fngb__window("101"); rem ' credit_sam

rem ' Instantiate the form corresponding to a given window

   def fngb__window(xx__win_id$)
      gb__window = 0
      for xx__window=1 to gb__windows
         if gb__window.win_id$[xx__window]=xx__win_id$ then
:           gb__window = xx__window;
:           break
      next xx__window
      if gb__window = 0 then 
:        return -1
      if gb__window.context[gb__window] >= 0 then
:        return gb__window.context[gb__window]

      switch fngb__form(xx__win_id$)

         case 1; rem ' Load Form ID 101 (CREDIT_SAM)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[1]=gb__sysgui_fin.available_context
         gb__resource$[1]=resget(gb__handle,1,101)
         print (gb__sysgui)'context'(gb__form_context[1]),'resource'(len(gb__resource$[1])),gb__resource$[1]
         gb__win.CREDIT_SAM=gb__form_context[1]
         gb__window.context[1]=gb__win.CREDIT_SAM
         break
      swend

      return gb__window.context[gb__window]
   fnend

rem ' Get template for controls on a given window

   def fngb__template$(xx__win_id$)
      if xx__win_id$="101" then return "INVOICE_NBR:C(64*=0):ID=110 TYPE=16 X=70 Y=130 W=75 H=20:,INV_LBL:C(64*=0):ID=510 TYPE=17 X=20 Y=130 W=40 H=20:,DATE_LBL:C(64*=0):ID=520 TYPE=17 X=150 Y=130 W=30 H=20:,PO_LBL:C(64*=0):ID=530 TYPE=17 X=270 Y=130 W=25 H=20:,PO:C(64*=0):ID=130 TYPE=16 X=300 Y=130 W=100 H=20:,INVOICE:C(64*=0):ID=140 TYPE=22 X=20 Y=155 W=380 H=190:,DATE:C(16*=0):ID=120 TYPE=114 X=185 Y=130 W=80 H=20:,OK_BTN:C(1*=0):ID=1 TYPE=11 X=370 Y=65 W=70 H=20:,CANCEL_BTN:C(1*=0):ID=2 TYPE=11 X=370 Y=40 W=70 H=20:,SELECTED_LBOX:C(255*=0):ID=101 TYPE=18 X=20 Y=25 W=100 H=67:,REJECTED_LBOX:C(255*=0):ID=105 TYPE=18 X=240 Y=25 W=100 H=67:,ADD_BTN:C(1*=0):ID=7 TYPE=11 X=130 Y=40 W=100 H=20:,REMOVE_BTN:C(1*=0):ID=8 TYPE=11 X=130 Y=65 W=100 H=20:,SELECTED_LBL:C(64*=0):ID=501 TYPE=17 X=20 Y=5 W=100 H=20:,REJECTED_LBL:C(64*=0):ID=505 TYPE=17 X=220 Y=5 W=90 H=20:,CUST_LBL:C(64*=0):ID=540 TYPE=17 X=20 Y=100 W=50 H=20:,CUST_NUM:C(64*=0):ID=150 TYPE=16 X=70 Y=102 W=75 H=20:,CUST_NAME:C(64*=0):ID=160 TYPE=16 X=150 Y=102 W=250 H=20:"
      return ""
   fnend

rem ' (1) Don't show borders on button controls
rem ' (2) Force XP borders on list and edit controls
seterr err_exit
setesc err_exit
sysgui!=bbjapi().getSysGui()
if (info(3,6)="0" and info(0,0)="Windows XP" and info(1,1)>="1.4.2")
:  or (info(3,6)<>"0" and
:  bbjapi().getThinClient(err=*next).getClientOSName(err=*next)="Windows XP" and
:  bbjapi().getThinClient(err=*next).getClientJavaVersion(err=*next)>="1.4.2")
:  then bbjapi().getSysGui().setLookAndFeel("WindowsXPLookAndFeel")
DIM DATE$:"default:c(32*=0),sm[12]:c(3*=0),m[12]:c(32*=0),sd[7]:c(3*=0),d[7]:c(32*=0)"
date$=stbl("!DATE")
date.default$="%Mz/%Dz/%Y"
dummy$=stbl("!DATE",date$)
l=0
while l<7
  p=pos($0a$=gb__arg$)
  if p=0 then break
  if l=0 then chan$=gb__arg$(1,p-1)
  if l=1 then old_context=num(gb__arg$(1,3))
  if l=2 then x=num(gb__arg$(1,4)),y=num(gb__arg$(5,4))
  if l=3 then action$=gb__arg$(1,p-1)
  if l=4 then security_level=num(gb__arg$(1,3))
  if l=5 then uid$=gb__arg$(1,p-1)
  l=l+1,gb__arg$=gb__arg$(p+1)
wend
while len(chan$)>2
  f=num(chan$(1,3)),f$=fid(f),f$=cvs(f$(9),4),chan$=chan$(4)
  if pos("ARM-10"=f$) then arm10=f
  if pos("TMM-01"=f$) then 
    tmm01=f
    call "templates.pgm::tmm01"
  fi
wend

gb__context = fngb__window("101")
print (gb__sysgui)'context'(old_context),'hide'(0)
if action$="credit_sam" then gosub credit_sam
rem ' ---------------------------------------------------------------
rem ' Event Loop
rem ' ---------------------------------------------------------------

dim gb__closed[gb__windows]; rem ' track window status
dim gb__generic$:noticetpl(0,0); rem ' generic notice template
gb__eoj=0
goto gb__event

rem ' Load gb__notice$ string only if we're handling the event

gb__notice:
   gb__generic$=notice(gb__sysgui,gb__event.x%)
   dim gb__notice$:noticetpl(gb__generic.objtype%,gb__event.flags%)
   gb__notice$=gb__generic$
return

gb__event: repeat
   read record (gb__sysgui,siz=gb__event,err=gb__event_loop_end)gb__event$

   rem ' Get Window ID or Popup ID
   gb__win_id$=$$,gb__popup_id=gb__event.x*(gb__event.code$="P")
   if gb__popup_id=0 then gb__win_id$=fngb__win_id$(gb__event.context)

   rem ' Track whether event was handled
   gb__event_handled=0

   rem ' Handle events for Window ID 101 (credit_sam)
   while gb__win_id$="101"
      if gb__event.code$="X" then
:        gosub W101_C0_WIN_CLOSE;
:        gb__closed[1]=1;
:        gb__event_handled=1;
:        break
      if gb__event.id=1 and gb__event.code$="B" then
:        gosub W101_C1_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=101 and gb__event.code$="l" and gb__event.flags=0 then
:        gosub W101_C101_LIST_CLICK;
:        gb__event_handled=1;
:        break
      if gb__event.id=105 and gb__event.code$="l" and gb__event.flags=0 then
:        gosub W101_C105_LIST_CLICK;
:        gb__event_handled=1;
:        break
      if gb__event.id=2 and gb__event.code$="B" then
:        gosub W101_C2_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=7 and gb__event.code$="B" then
:        gosub W101_C7_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=8 and gb__event.code$="B" then
:        gosub W101_C8_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      break; rem ' Catch unhandled events
   wend; rem ' End of Window ID 101

   rem ' We're done when all windows have been closed.
   rem ' Developer can terminate event loop by setting
   rem ' gb__eoj=1 in any event handler.

   if !(gb__eoj) then
:     gb__eoj=1;
:     for gb__window=1 to gb__windows;
:        gb__eoj=(gb__eoj and gb__closed[gb__window]);
:     next gb__window

until gb__eoj

gb__event_loop_end: rem ' -------------------------------------

err_exit:
if info(3,2)="thines" then escape
xresp = msgbox("An error occurred: at " + str(tcb(5)) + ", error code is: " + str(err) + " " + errmes(-1),0,"debug")
pgm_exit:
while len(chan$)>2
  close(num(chan$(1,3)),err=*next)
  chan$=chan$(4)
wend
dim loc$:"x:i(2),y:i(2),w:u(2),h:u(2)"
loc$=ctrl(gb__sysgui,0,0,old_context)
if gb__forms and gb__sysgui then
  for gb__temp=1 to gb__forms
  print (gb__sysgui,err=*next)'context'(gb__form_context[gb__temp]),'destroy'(0)
  next gb__temp
fi
print (gb__sysgui)'context'(old_context),'move'(0,loc.x,loc.y),'enable'(0),'show'(0),'raise','flush'
close (gb__sysgui)
resclose(gb__handle,err=*next)
exit
rem gb_eoj.cod - GUIBuilder generated programs: End of Job
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** P R O G R A M   E X I T **************************************
rem
gb__eoj:
   if gb__forms and gb__sysgui then
:     for gb__temp=1 to gb__forms;
:        print (gb__sysgui)'context'(gb__form_context[gb__temp]),'destroy'(0);
:     next gb__temp

   if gb__sysgui then
:     close (gb__sysgui)

   resclose (gb__handle,err=gb__eoj_final)

gb__eoj_final:

   if tcb(13) then
:     exit
:  else
:     release

rem gb_err.cod - GUIBuilder generated programs: Error handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E R R O R   H A N D L E R ************************************
rem
gb__err:
   
   rem ' terminate on Network Lost Errors
   if err = 71 or err = 72 then goto gb__eoj

   gb__temp=msgbox(errmes(-1)+" ("+str(err)+")"+
:      " occurred at line "+str(tcb(5))+
:      " in program "+pgm(-2),5+48,"Error handler")

   if gb__temp=4 then
:     retry
:  else
:     goto gb__eoj

rem gb_esc.cod - GUIBuilder generated programs: Escape handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E S C A P E   H A N D L E R ***********************************
rem
gb__esc:
   
   rem ' terminate program when ESCAPE detected.
   goto gb__eoj
   
   gb__temp=msgbox("An ESCAPE has been detected.  Do you want to end this "+
:     "program?",4+32+256,"ESCAPE handler")
   if gb__temp=7 then
:     return
:  else
:     goto gb__eoj

rem ' -----------------------------------------------------------------
rem ' build_lists
rem ' -----------------------------------------------------------------

build_lists:
slist$=""
rlist$=""
read(tmpsam,key="",knum=1,err=*next)
while 1
  readrecord(tmpsam,end=*break)samrec$
  if samrec.credit$="Y" then 
    slist$=slist$+samrec.invoice$+$0a$
  else
    rlist$=rlist$+samrec.invoice$+$0a$
  fi
wend
ps=pos(invoice$+$0a$=slist$)
pr=pos(invoice$+$0a$=rlist$)
if ps or pr+ps=0 then slist$=slist$+$ff$+str(int(ps/8))
if pr then rlist$=rlist$+$ff$+str(int(pr/8))
win_credit_sam.selected_lbox$=slist$
win_credit_sam.rejected_lbox$=rlist$
win_credit_sam$=fngb__put_fields$(win_id_credit_sam$,win_credit_sam$,"selected_lbox,rejected_lbox")
return
rem ' -----------------------------------------------------------------
rem ' credit_sam
rem ' -----------------------------------------------------------------

credit_sam:
win_id_credit_sam$=fngb__win_id$(gb__win.credit_sam)
dim win_credit_sam$:fngb__template$(win_id_credit_sam$)
selected_list_id=num(fattr(win_credit_sam$,"selected_lbox","ID"))
rejected_list_id=num(fattr(win_credit_sam$,"rejected_lbox","ID"))
call "ec_open::ART03"; chan$=str(ART03:"000")
call "ec_open::ART13"; chan$=chan$+str(ART13:"000")
call "ec_open::ART73"; chan$=chan$+str(ART73:"000")
call "ec_open::ART83"; chan$=chan$+str(ART83:"000")
tmpfile$=stbl("DATA_SERVER")+stbl("TEMP")+"credit_sam.dat"
print (gb__sysgui)'context'(gb__win.credit_sam),'move'(0,x,y),'enable'(0),'show'(0),'focus'(0),'raise'
tmpsam=unt
ok=0
open(tmpsam,err=no_invoices)tmpfile$
chan$=chan$+str(tmpsam:"000")
dim samrec$:"firm:c(2),cust:c(6),invoice:c(7),credit:c(1),avail:c(80*)"
invoice$=fill(7)
gosub build_lists
if rlist$="" and slist$="" then goto no_invoices
invoice$=ctrl(gb__sysgui,selected_list_id,1)
invoice_dt_id=num(fattr(win_credit_sam$,"date","ID"))
newWindow!=sysgui!.getWindow(gb__win.credit_sam)
invoice_dt!=newWindow!.getControl(invoice_dt_id)
gosub show_invoice
return
no_invoices:
i=msgbox("No invoices selected to credit",0,"")
return
rem ' -----------------------------------------------------------------
rem ' fnaonjul
rem ' ----------------------------------------------------------------

def fnaonjul(ymd$)
  y=1900+asc(ymd$(1))-32,m=asc(ymd$(2))-32,d=asc(ymd$(3))-32
  IF m<1 OR d<1 THEN LET jd=0 ELSE LET jd=JUL(y,m,d)
  return jd
fnend
rem ' -----------------------------------------------------------------
rem ' prep_routine
rem ' -----------------------------------------------------------------

prep_routine:
rem 'exist only to prevent compile error
return
rem ' -----------------------------------------------------------------
rem ' show_invoice
rem ' -----------------------------------------------------------------

show_invoice:
if len(invoice$)<>7 then return
readrecord(tmpsam,knum=1,key=invoice$)samrec$
k$=samrec.firm$+"  "+samrec.cust$+invoice$+"000"
readrecord(art03,key=k$)art03$
rec$="Order: "+art03.order_number$+fill(17)+"Ship via: "+cvs(art03.ar_ship_via$,3)+$0a$
dim x$(26)
read(arm10,key=art03.firm_id$+"F"+art03.slspsn_code$,dom=*next)x$(1)
rec$=rec$+"Sales: "+x$(4)+" Taken by: "+art03.ord_taken_by$+$0a$
dim x$(25)
read(arm10,key=art03.firm_id$+"A"+art03.terms_code$,dom=*next)x$(1)
dim x1$(25)
read(arm10,key=art03.firm_id$+"I"+art03.disc_code$,dom=*next)x1$(1)
rec$=rec$+"Terms: "+x$(6)+fill(4)+"Discount: "+cvs(x1$(6),3)+$0a$
rec$=rec$+fill(51,"_")+$0a$+$0a$
rec$=rec$+"Line  Description         Qty Unit Price  Extension"+$0a$
rec$=rec$+fill(51,"_")+$0a$+$0a$
m$="###,###.00-"
if art03.invoice_type$="V" then rec$=rec$+fill(6)+"* * * V O I D * *"+$0a$;goto show_invoice_end
read(art13,key=art03$(1,17),dom=*next)
while 1
  readrecord(art13,end=*break)art13$
  if pos(art03$(1,17)=art13$)=0 then break
  rec$=rec$+art13.line_number$+" "+art13.line_code$+" "+pad(art13.item_number$,20)
  rec$=rec$+str(art13.qty_ordered:"###")+str(art13.unit_price:m$)+str(art13.ext_price:m$)+$0a$
  if cvs(art13.order_memo$,3)<>"" then rec$=rec$+fill(6)+art13.order_memo$+$0a$
  readrecord(art73,key=art13$(1,20),dom=*continue)art73$
  rec$=rec$+fill(6)+"Type: "+art73.type_of_sale$+"  Users:"+str(art73.users:"#####")
  rec$=rec$+cvs(art73.lic_property1$,3)+str(art73.users2:"#####")+art73.lic_property2$+$0a$
  read(art83,key=art73$(1,20),dom=*next)
  while 2
    readrecord(art83,end=*break)art83$
    if pos(art73$(1,20)=art83$)<>1 then break
    temp$=" Activated"
    if art83.action$="D" then temp$=" Deactivated"
    if art83.action$="M" then temp$=" Modified"
    rec$=rec$+fill(6)+art83.serial_nbr$+temp$+$0a$
  wend
wend
rec$=rec$+$0a$+fill(31)+"Subtotal:"+str(art03.total_sales:m$)+$0a$
rec$=rec$+fill(31)+" Freight:"+str(art03.freight_amt:m$)+$0a$
rec$=rec$+fill(31)+"     Tax:"+str(art03.tax_amount:m$)+$0a$
rec$=rec$+fill(31)+"   Total:"+str(art03.total_sales+art03.freight_amt+art03.tax_amount:m$)+$0a$
show_invoice_end:
readrecord(tmm01,key=samrec.firm$+samrec.cust$+"000000",dom=*next)tmm01$
win_credit_sam.cust_num$=samrec.cust$
win_credit_sam.cust_name$=tmm01.cont_firm$
win_credit_sam.invoice_nbr$=art03.ar_inv_nbr$
win_credit_sam.po$=art03.ar_po_number$
win_credit_sam.invoice$=rec$
win_credit_sam$=fngb__put_fields$(win_id_credit_sam$,win_credit_sam$,"invoice,invoice_nbr,po,cust_num,cust_name")
invoice_dt!.setValue(fnaonjul(art03.invoice_date$))
print(gb__sysgui)'focus'(selected_list_id)

return

rem ' ---------------------------------------------------------------
rem ' Win=101 credit_sam (Window) WIN_CLOSE (X)
rem ' ---------------------------------------------------------------

W101_C0_WIN_CLOSE:
rem ' Window Closed
rem ' gb__event! = cast(BBjCloseEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__window! = gb__event!.getControl()
goto pgm_exit
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 credit_sam Ctl=1 ok_btn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C1_PUSH_BUTTON:
rem ' Push button operated

i=msgbox("Create and invoice credit memos now?",4+32,"Confirm")
if i<>6 then return

print (gb__sysgui)'setcursor'(3)
read(tmpsam,key="",knum=0,err=*next)
while 1
  k$=key(tmpsam,end=*break)
  readrecord(tmpsam,key=k$)samrec$
  if samrec.credit$="Y" then 
    msg$="INVOICE"  
    call "BCS.02",samrec.firm$,samrec.cust$,samrec.invoice$,msg$
    remove(tmpsam,key=k$)
  fi
wend
print (gb__sysgui)'setcursor'(0)
i=msgbox("Create memos done",0,"")

goto pgm_exit
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 credit_sam Ctl=101 selected_lbox (List Box) LIST_CLICK (l0)
rem ' ---------------------------------------------------------------

W101_C101_LIST_CLICK:
rem ' Click in list box
invoice$=ctrl(gb__sysgui,selected_list_id,1)
gosub show_invoice
gosub build_lists
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 credit_sam Ctl=105 rejected_lbox (List Box) LIST_CLICK (l0)
rem ' ---------------------------------------------------------------

W101_C105_LIST_CLICK:
rem ' Click in list box
invoice$=ctrl(gb__sysgui,rejected_list_id,1)
gosub show_invoice
gosub build_lists
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 credit_sam Ctl=2 cancel_btn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C2_PUSH_BUTTON:
rem ' Push button operated
goto pgm_exit
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 credit_sam Ctl=7 add_btn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C7_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

invoice$=ctrl(gb__sysgui,rejected_list_id,1)
samrec$=fattr(samrec$)
readrecord(tmpsam,knum=1,key=invoice$,dom=*next)samrec$
if samrec.invoice$<>invoice$ then return
samrec.credit$="Y"
writerecord(tmpsam)samrec$
gosub build_lists
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 credit_sam Ctl=8 remove_btn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C8_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

invoice$=ctrl(gb__sysgui,selected_list_id,1)
samrec$=fattr(samrec$)
readrecord(tmpsam,knum=1,key=invoice$,dom=*next)samrec$

rem ' xresp = msgbox(invoice$,0,"debug")
if samrec.invoice$<>invoice$ then return

rem ' xresp = msgbox(invoice$ + " equal" ,0,"debug")
samrec.credit$="N"
writerecord(tmpsam)samrec$

rem ' xresp = msgbox("written ",0,"debug")
gosub build_lists
RETURN


rem gb_std.cod - Put your standard subroutines/functions/etc. here.

END
