[Program]
Creation Date=2020-01-15
Creation Time=14:44:32
Event Set=LEGACY
Generator Program=gb_func
Last Build Date=2020-01-29
Last Build Time=17:21:57
Precision=99
Program Name=buyServices
Remarks=Yes
Resource File=buyServices.arc
Show Forms=All

[EOJ]
rem ' -----------------------------------------------------------------
rem ' EOJ
rem ' -----------------------------------------------------------------

err_exit:

rem ' send err email
from$ = "customer-service@basis.cloud"
to$ = "kw5121151@gmail.com, kurt.e.williams@comcast.net"
cc$ = ""
bcc$ = ""
subject$ = "Error in BSG Purchase Professional Services/Support Purchase "
msgtxt$ = "An erorr " + str(err) + " occurred at line number " + str(tcb(5)) + " Message: " + errmes(-1) + $0a$ + $0a$
msgtxt$ = msgtxt$ + firmId! + $0a$ +customerNbr! +$0a$ + userCode! + $0a$ + email! + $0a$ + "Timestamp: " + date(0:"%Y%Mz%Dz %Hz%mz%sz") + $0A$
call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msgtxt$, ""

pgm_exit:

close(ARM01, err=*next)
close(ARM02, err=*next)
close(ARM10E, err=*next)
close(ARM10B, err=*next)
close(ARS10N, err=*next)

close(IVM01, err=*next)
close(IVM02, err=*next)
close(IVS01, err=*next)

close(ARE03, err=*next)
close(ARE04, err=*next)
close(ARE43, err=*next)
close(ARE13, err=*next)
close(ARE07, err=*next)

close(shoppingCart, err=*next)

if buyServices! <> NULL() then
    buyServices!.destroy()
fi

exit

[Init]
rem ' -----------------------------------------------------------------
rem ' Init
rem ' -----------------------------------------------------------------

seterr err_exit
setesc err_exit

gosub buildObjectReferences

firmId! = gb__arg.firm_id$
customerNbr! = gb__arg.customer_nbr$
userCode! = gb__arg.user_code$
email! = gb__arg.email$

rem ' send tracking email
from$ = "customer-service@basis.cloud"
to$ = "kw5121151@gmail.com"
cc$ = ""
bcc$ = ""
subject$ = "BSG Purchase Professional Services has been accessed"
msgtxt$ = firmId! + $0a$ +customerNbr! +$0a$ + userCode! + $0a$ + email! + $0a$ + "Timestamp: " + date(0:"%Y%Mz%Dz %Hz%mz%sz") + $0A$
call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msgtxt$, ""

gosub openFiles
gosub readInventoryItems
gosub setLineLabels

buyServices!.setVisible(1)

rem ' is there a shopping cart order
found=0
read record(shoppingCart, key=firmId! + customerNbr! + userCode!, dom=*next)shoppingCart$; found=1
if found then
    oneHourQty!.setText(str(shoppingCart.onehourqty))
    oneDayQty!.setText(str(shoppingCart.onedayqty))
    poNumber!.setText(shoppingCart.ponumber$)
    invoiceMemo!.setText(shoppingCart.invoice_memo$)
    note!.setText(shoppingCart.note$)
    gosub calcTheOrderTotal 
else
    oneHourQty!.setText("0")
    oneDayQty!.setText("0")
    poNumber!.setText("")
    invoiceMemo!.setText("")
    note!.setText("")
    gosub calcTheOrderTotal 
    oneHourQty!.focus()
fi


[Event Win=101 ID=1 Code=B <PUSH_BUTTON> (W101_C1_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' submit order

rem ' is there an order here
totalOrder$ = totalOrder!.getText()
totalOrder$ = fnCommaPeriodUS$(totalOrder$)
totalOrder = num(totalOrder$)
if totalOrder <= 0 then
    xresp = msgbox("The order cannot be submitted in its current state.",0,"Cannot Submit Order")
    return
fi

rem ' po number must be entered
poNumber$ = poNumber!.getText()
if cvs(poNumber$,3) = "" then
    xresp = msgbox("When submitting this order you must include a Purchase Order Number.", 0, "PO Number Required")
    return
fi

rem ' confirm the order submission
xresp = msgbox("Please confirm that you wish to submit this order.", 4, "Confirm Order")
if xresp = 7 then return

gosub createOrder

rem ' send tracking email
from$ = "customer-service@basis.cloud"
to$ = "kw5121151@gmail.com"
cc$ = ""
bcc$ = ""
subject$ = "BSG Purchase Professional Services order submitted"
msgtxt$ = firmId! + $0a$ +customerNbr! +$0a$ + userCode! + $0a$ + email! + $0a$ + order_number$ + $0a$ + "Timestamp: " + date(0:"%Y%Mz%Dz %Hz%mz%sz") + $0A$
call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msgtxt$, ""

gosub sendEmails

xresp = msgbox("Order Number " + order_number$ + " has been created. An email has been sent to you confirming the order and an email has been sent to the BASIS Europe Professional Services Team.", 0, "Order Placed")

gosub clearForm
remove(shoppingCart, key = firmId! + CustomerNbr! + userCode!, dom=*next)

goto pgm_exit

[Event Win=101 ID=104 Code=f0 <LOST_FOCUS> (W101_C104_LOST_FOCUS)]
rem ' Control lost focus
rem ' gb__event! = cast(BBjLostFocusEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

oneHourExtended = 0
oneHourExtended$ = "0,00"

qty$ = oneHourQty!.getText()

valid = 0
qty = int(num(qty$,err=*next)); valid = 1

if !valid or qty <= 0 then oneHourQty!.setText("0")

gosub calcTheOrderTotal

[Event Win=101 ID=105 Code=f0 <LOST_FOCUS> (W101_C105_LOST_FOCUS)]
rem ' Control lost focus
rem ' gb__event! = cast(BBjLostFocusEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

oneDayExtended = 0
oneDayExtended$ = "0,00"

qty$ = oneDayQty!.getText()

valid = 0
qty = int(num(qty$,err=*next)); valid = 1

if !valid or qty <= 0 then oneDayQty!.setText("0")

gosub calcTheOrderTotal

[Event Win=101 ID=122 Code=B <PUSH_BUTTON> (W101_C122_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub clearForm

[Event Win=101 ID=2 Code=B <PUSH_BUTTON> (W101_C2_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

if oneHourQty <> 0 or oneDayQty <> 0 then
    xresp = msgbox("You are exiting the Purchase Professional Services/Support Time form. If you have not saved the order to the cart it will be lost. Do you want to continue with the Exit?",4,"Confirm Exit")
    if xresp <> 6 then return
fi

goto pgm_exit

[Event Win=101 ID=3 Code=B <PUSH_BUTTON> (W101_C3_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' save to cart

rem ' po number is not required for cart save

rem ' is there an order here
totalOrder$ = totalOrder!.getText()
totalOrder$ = fnCommaPeriodUS$(totalOrder$)
totalOrder = num(totalOrder$)

if totalOrder > 0 then
    dim shoppingCart$:cardDef$
    shoppingCart.firm_id$ = firmId!
    shoppingCart.customer_nbr$ = customerNbr!
    shoppingCart.user_code$ = userCode!
    shoppingCart.ponumber$ = poNumber!.getText()
    shoppingCart.invoice_memo$ = invoiceMemo!.getText()
    shoppingCart.note$ = note!.getText()
    shoppingCart.onehourqty = num(oneHourQty!.getText())
    shoppingCart.onedayqty = num(oneDayQty!.getText())
    write record(shoppingCart, key = shoppingCart.firm_id$ + shoppingCart.customer_nbr$ + shoppingCart.user_code$)shoppingCart$
    xresp = msgbox("Your order has been saved for later recall.",0,"Order Saved")
    
    rem ' send tracking email
    from$ = "customer-service@basis.cloud"
    to$ = "kw5121151@gmail.com"
    cc$ = ""
    bcc$ = ""
    subject$ = "BSG Purchase Professional Services order saved to the cart"
    msgtxt$ = firmId! + $0a$ +customerNbr! +$0a$ + userCode! + $0a$ + email! + $0a$ + "Timestamp: " + date(0:"%Y%Mz%Dz %Hz%mz%sz") + $0A$
    call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msgtxt$, ""
    
    goto pgm_exit
else
    xresp = msgbox("The order cannot be saved in its current state.",0,"Cannot Save Order")
fi


[Function (buildObjectReferences)]
rem ' -----------------------------------------------------------------
rem ' buildObjectReferences
rem ' -----------------------------------------------------------------

buildObjectReferences:

declare BBjAPI bbjapi!
declare BBjSysGui sysgui!

declare BBjString firmId!
declare BBjString customerNbr!
declare BBjString userCode!
declare BBjString email!

declare BBjTopLevelWindow buyServices!
declare BBjButton exitButton!
declare BBjButton buyNow!
declare BBjButton cartButton!
declare BBjButton clearFormButton!

declare BBjEditBox oneHourQty!
declare BBjEditBox oneDayQty!
declare BBjEditBox oneHourExtended!
declare BBjEditBox oneDayExtended!
declare BBjEditBox totalOrder!
declare BBjEditBox poNumber!
declare BBjEditBox invoiceMemo!
declare BBjCEdit note!
declare BBjStaticText oneHourLabel!
declare BBjStaticText oneDayLabel!

bbjapi! = BBjAPI()
sysgui! = bbjapi!.getSysGui()

rem ' buyServices window
buyServices! = cast(BBjTopLevelWindow, sysgui!.getWindow("buyServices"))
exitButton! = cast(BBjButton, buyServices!.getControl("exit"))
buyNow! = cast(BBjButton, buyServices!.getControl("buyNow"))
cartButton! = cast(BBjButton, buyServices!.getControl("cartButton"))
clearFormButton! = cast(BBjButton, buyServices!.getControl("clearFormButton"))
oneHourQty! = cast(BBjEditBox, buyServices!.getControl("oneHourQty"))
oneDayQty! = cast(BBjEditBox, buyServices!.getControl("oneDayQty"))
oneHourExtended! = cast(BBjEditBox, buyServices!.getControl("oneHourExtended"))
oneDayExtended! = cast(BBjEditBox, buyServices!.getControl("oneDayExtended"))
totalOrder! = cast(BBjEditBox, buyServices!.getControl("totalOrder"))
poNumber! = cast(BBjEditBox, buyServices!.getControl("poNumber"))
invoiceMemo! = cast(BBjEditBox, buyServices!.getControl("invoiceMemo"))
note! = cast(BBjCEdit, buyServices!.getControl("note"))
oneHourLabel! = cast(BBjStaticText, buyServices!.getControl("oneHourLabel"))
oneDayLabel! = cast(BBjStaticText, buyServices!.getControl("oneDayLabel"))


return

[Function (calcTheOrderTotal)]
rem ' -----------------------------------------------------------------
rem ' calcTheOrderTotal
rem ' -----------------------------------------------------------------

calcTheOrderTotal:

rem ' one hour line
    onehourqty = num(oneHourQty!.getText())
    oneHourExtended = onehourqty * hourlyRate
    oneHourExtended$ = str(oneHourExtended:"##,##0.00")
    oneHourExtended$ = fnCommaPeriodSwap$(oneHourExtended$)
    oneHourExtended!.setText(oneHourExtended$)

rem ' one day line
  onedayqty = num(oneDayQty!.getText())
  oneDayExtended = onedayqty * dailyRate
  oneDayExtended$ = str(oneDayExtended:"##,##0.00")
  oneDayExtended$ = fnCommaPeriodSwap$(oneDayExtended$)
  oneDayExtended!.setText(oneDayExtended$)

totalOrder = oneHourExtended + oneDayExtended
totalOrder$ = str(totalOrder:"##,##0.00")
totalOrder$ = fnCommaPeriodSwap$(totalOrder$)
totalOrder!.setText(totalOrder$)

if totalOrder = 0 then
    buyNow!.setEnabled(0)
    cartButton!.setEnabled(0)
else
    buyNow!.setEnabled(1)
    cartButton!.setEnabled(1)
fi

return

[Function (clearForm)]
rem ' -----------------------------------------------------------------
rem ' clearForm
rem ' -----------------------------------------------------------------

clearForm:

oneHourQty!.setText("0")
oneDayQty!.setText("0")
poNumber!.setText("")
invoiceMemo!.setText("")
note!.setText("")

gosub calcTheOrderTotal

return

[Function (createOrder)]
rem ' -----------------------------------------------------------------
rem ' createOrder
rem ' -----------------------------------------------------------------

createOrder:

taxable = 0,tax = 0,subtotal = 0,total = 0

gosub getOrderNumber

rem ' write the order header

are03.firm_id$ = firmId!
are03.ar_type$ = "  "
are03.customer_nbr$ = customerNbr!
are03.order_number$ = order_number$
are03.sequence_000$ = "000"
are03.invoice_type$ = "S"
are03.ord_inv_flag$ = "O"
are03.backord_flag$ = " "
are03.invoice_date$ = fndate$(jul(0,0,0))
are03.ar_ship_date$ = fndate$(jul(0,0,0)+1)
are03.ar_ship_via$ = fill(10)
are03.ar_inv_nbr$ = fill(7)

are03.ar_po_number$ = cvs(poNumber!.getText(),3)

are03.slspsn_code$ = arm02.slspsn_code$

terms$ = arm02.terms_code$
are03.terms_code$ = terms$

are03.rel_to_ship$ = "Y"
are03.reserved_str_2$ = fill(9)

are03.disc_code$ = fill(2)

are03.dist_code$ = hourItemData.dist_code$
are03.ord_prt_flag$ = "N"
are03.ord_lock$ = "Y"; rem ' lock until all related records are updated
are03.message_code$ = arm02.message_code$
are03.territory$ = arm02.territory$
are03.list_prc_cde$ = "  "
are03.date_ordered$ = are03.invoice_date$
are03.tax_code$ = arm02.tax_code$
are03.pricing_code$ = arm02.pricing_code$
are03.ar_job_nbr$ = fill(10)
are03.ord_taken_by$ = userCode!
are03.cash_sale$ = "N"
are03.reprint_flag$ = " "
are03.ord_cred_flg$ = " "
are03.shipto_nbr$ = fill(6)

are03.tax_amount = tax
are03.freight_amt = 0
are03.discount_amt = 0
are03.comm_percent = 0
are03.taxable_amt = taxable
are03.comm_amt = 0
are03.total_sales = totalOrder
are03.total_cost = 0

are03_key$ = are03.firm_id$ + are03.ar_type$ + are03.customer_nbr$ + are03.order_number$ + are03.sequence_000$
are03$ = field(are03$)
write record (are03, key = are03_key$)are03$

rem ' write the order/invoice print file

are04.firm_id$ = are03.firm_id$
are04.ord_inv_flag$ = are03.ord_inv_flag$
are04.ar_type$ = are03.ar_type$
are04.customer_nbr$ = are03.customer_nbr$
are04.order_number$ = are03.order_number$

are04_key$ = are04.firm_id$ + are04.ord_inv_flag$ + are04.ar_type$ + are04.customer_nbr$ + are04.order_number$
are04$ = field(are04$)
write record (are04, key = are04_key$)are04$

rem ' write the open order sort file 

are43.firm_id$ = are03.firm_id$
are43.ar_type$ = are03.ar_type$
are43.customer_nbr$ = are03.customer_nbr$
are43.order_number$ = are03.order_number$

are43_key$ = are43.firm_id$ + are43.ar_type$ + are43.order_number$ + are43.customer_nbr$
are43$ = field(are43$)
write record (are43,key=are43_key$)are43$

rem ' get the warehouse
read record (ivs01, key = firmId! + "IV00")ivs01$

rem 'get line codes record
read record (arm10e, key = firmId! + "ES")arm10e$

rem ' get the tax rate
read record (arm10b, key = firmId! + "B" + arm02.tax_code$)arm10b$

rem ' Now loop through the detail lines (ARE13) 

for item = 1 to 4 

    dim are13$:fattr(are13$)
    
    rem ' item = 1 - hourly
    rem ' item = 2 - daily
    rem ' item = 3 - memo line - blank
    rem ' item = 4 - memo line
    
    line_nbr$ = str(item * 5:"000")
    
    if item = 1 and onehourqty = 0 then continue
    if item = 2 and onedayqty = 0 then continue 
 
    if item = 3 and cvs(invoiceMemo!.getText(),3) = "" then break
    
    set_line_detail:
    are13.firm_id$ = are03.firm_id$
    are13.ar_type$ = are03.ar_type$
    are13.customer_nbr$ = are03.customer_nbr$
    are13.order_number$ = are03.order_number$
    are13.line_number$ = line_nbr$
    
    if item = 1 or item = 2 then
        are13.line_code$ = "S"
    else
        are13.line_code$ = "M"
    fi
    
    are13.man_price$ = "N"
    are13.product_type$ = fill(3)
    are13.pull_assmble$ = "P"
    are13.warehouse_id$ = ivs01.warehouse_id$

    if item = 1 then
        are13.item_number$ = hourItemData.item_number$
        are13.dist_code$ = hourItemData.dist_code$
    else
        if item = 2 then
            are13.item_number$ = dayItemData.item_number$
            are13.dist_code$ = dayItemData.dist_code$
        fi
    fi

    if item = 3 then
        are13.order_memo$ = fill(40)
    else
        if item = 4 then 
            are13.order_memo$ = invoiceMemo!.getText()
        else
            are13.order_memo$ = fill(40)
        fi
    fi
    are13.est_shp_date$ = are03.ar_ship_date$
    are13.commit_flag$ = "Y"
    are13.pick_flag$ = " "
    are13.reserved_str_2$ = fill(19)
    are13.unit_cost = 0

    if item = 1 then
        are13.unit_price = hourlyrate
        are13.qty_ordered = onehourqty
        are13.qty_shipped = onehourqty
        are13.ext_price = onehourqty * hourlyrate
    else
        if item = 2 then
          are13.unit_price = dailyrate
          are13.qty_ordered = onedayqty
          are13.qty_shipped = onedayqty
          are13.ext_price = onedayqty * dailyrate
        else
            if item = 3 or item = 4 then
              are13.unit_price = 0
              are13.qty_ordered = 0
              are13.qty_shipped = 0
              are13.ext_price = 0
            fi
        fi
            
    fi
   
    are13.qty_backord = 0
    are13.std_list_prc = 0

    are13.taxable_amt = 0
    if arm10e.taxable_flag$ = "Y" and ivm01.taxable_flag$ = "Y" then are13.taxable_amt = are13.ext_price
    rem ' these sales are taxable - only 02 tax codes are NT no tax or VA value added - which means taxable is controlled by the customers tax code  
    if item = 3 then are13.taxable_amt = 0
      
    are13.disc_percent = 0
    are13.comm_percent = 0
    are13.comm_amt = 0
    are13.spl_comm_pct = 0
    are13.disc_cust = 0
    are13_key$ = are13.firm_id$ + are13.ar_type$ + are13.customer_nbr$ + are13.order_number$ + are13.line_number$

    are13$ = field(are13$)
    write record (are13, key = are13_key$)are13$
    
    rem ' write open orders by item
    if item = 1 or item = 2 then
      dim are07$:fattr(are07$)
        are07.firm_id$ = are13.firm_id$
        are07.warehouse_id$ = are13.warehouse_id$
        are07.item_number$ = are13.item_number$
        are07.ar_type$ = are13.ar_type$
        are07.order_number$ = are13.order_number$
        are07.line_number$ = are13.line_number$
        are07.customer_nbr$ = are13.customer_nbr$
        are07_key$ = are07.firm_id$ + are07.warehouse_id$ + are07.item_number$ + are07.ar_type$ + are07.order_number$ + are07.line_number$ + are07.customer_nbr$

        are07$ = field(are07$)
        write record (are07, key = are07_key$)are07$
    fi
    
next item

rem ' finalize the order
taxable = are03.total_sales
precision 6
tax = taxable * arm10b.tax_rate/100
precision 2
are03.tax_amount = tax
are03.taxable_amt = taxable
are03.total_sales = total
are03.ord_lock$ = "N"; rem ' unlock the order header
are03$ = field(are03$)
write record (are03, key = are03_key$)are03$

rem ' not going to invoice these orders leaving it up to customer servicce

return

[Function (getOrderNumber)]
rem ' -----------------------------------------------------------------
rem ' getOrderNumber
rem ' -----------------------------------------------------------------

getOrderNumber:

rem ' get the last used order number
extract record (ars10n, key = firmId! + "N", tim=5, err = ars10n_locked)ars10n$

rem ' bump it by one
order_number = ars10n.nxt_ord_nbr
ars10n.nxt_ord_nbr = ars10n.nxt_ord_nbr + 1

rem ' write it back to the parameter table
ars10n$ = field(ars10n$)
write record (ars10n, key = firmId! + "N")ars10n$

order_number$ = str(order_number:"0000000")

return

ars10n_locked:

rem ' the record should only be locked for a small sliver of time
if err=0 then 
  wait 1 
  retry 
else 
  goto gb__err
fi

return

[Function (openFiles)]
rem ' -----------------------------------------------------------------
rem ' openFiles
rem ' -----------------------------------------------------------------

openFiles:

call "ec_open::ARM01"
read record(arm01, key = firmId! + customerNbr!)arm01$

call "ec_open::ARM02"
read record(arm02, key = firmId! + customerNbr! + "  ")arm02$

call "ec_open::ARM10E"
call "ec_open::ARM10B"

call "ec_open::ARS10N"

call "ec_open::IVM01"
call "ec_open::IVM02"
call "ec_open::IVS01"

call "ec_open::ARE03"
call "ec_open::ARE04"
call "ec_open::ARE43"
call "ec_open::ARE13"
call "ec_open::ARE07"

cardDef$ = "FIRM_ID:C(2),CUSTOMER_NBR:C(6),USER_CODE:C(2),PONUMBER:C(10),INVOICE_MEMO:C(40),NOTE:C(1024*=10),ONEHOURQTY:N(7*=10),ONEDAYQTY:N(7*=10)"
dim shoppingCart$:cardDef$
shoppingCart = unt
open(shoppingCart)"ecShpCart_PrfSrv.dat"

return

[Function (readInventoryItems)]
rem ' -----------------------------------------------------------------
rem ' readInventoryItems
rem ' -----------------------------------------------------------------

readInventoryItems:

hourItem$ = "PROFSERVHRSC" + fill(20); hourItem$ = hourItem$(1,20)
dim hourItemData$:fattr(ivm02$)
read record(ivm02, key = "0201" + hourItem$)hourItemData$

dayItem$ = "PROFSERVDRSC" + fill(20); dayItem$ = dayItem$(1,20)
dim dayItemData$:fattr(ivm02$)
read record(ivm02, key = "0201" + dayItem$)dayItemData$

return

[Function (sendEmails)]
rem ' -----------------------------------------------------------------
rem ' sendEmails
rem ' -----------------------------------------------------------------

sendEmails:

rem ' send confirmation email
from$ = "customer-service@basis.cloud"
to$ = email!
cc$ = "eu.sales@basis.cloud, customer-service@basis.cloud"
rem ' debug/testing
rem ' to$ = "kurt.e.williams@comcast.net"
rem ' cc$ = "williams.kurt@comcast.net"

bcc$ = "kw5121151@gmail.com"
subject$ = "Professional Services/Support Purchase Confirmation"

msgtxt$ = "<table><tr><td colspan=" + chr(34) + "2" + chr(34) + " align=" + chr(34) + "left" + chr(34) + ">Professional Services/Support Time Purchase Confirmation</td></tr>" 
msgtxt$ = msgtxt$ + "<tr><td>Placed by:</td><td>" + email! + " " + firmId! + customerNbr! + userCode! + "</td></tr>"
msgtxt$ = msgtxt$ + "<tr><td>Firm Name:</td><td>" + arm01.cust_name$ + "</td></tr>"
msgtxt$ = msgtxt$ + "<tr><td>Purchase Order:</td><td>" + poNumber!.getText() + "</td></tr>"
if cvs(invoiceMemo!.getText(),3) <> "" then msgtxt$ = msgtxt$ + "<tr><td>Purchase Description:</td><td>" + invoiceMemo!.getText() + "</td></tr>"
if cvs(note!.getText(),3) <> "" then msgtxt$ = msgtxt$ + "<tr><td>Note to Professional Services Staff:</td><td>" + note!.getText() + "</td></tr>"
msgtxt$ = msgtxt$ + "</table>"

msgtxt$ = msgtxt$ + "<table>"
msgtxt$ = msgtxt$ + "<tr><th>Quantity</th><th align=" + chr(34) + "left" + chr(34) + ">Desription</th><th align=" + chr(34) + "right" + chr(34) + ">Extended Price</th></tr>"
if onehourqty <> 0 then msgtxt$ = msgtxt$ + "<tr><td>" + str(onehourqty) + "</td><td>" + oneHourLabel!.getText() + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + cvs(oneHourExtended!.getText(),3) + "</td></tr>"
if onedayqty <> 0 then msgtxt$ = msgtxt$ + "<tr><td>" + str(onedayqty) + "</td><td>" + oneDayLabel!.getText() + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + cvs(oneDayExtended!.getText(),3) + "</td></tr>"
msgtxt$ = msgtxt$ + "<tr><td></td><td>Order Total" + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + cvs(totalOrder!.getText(),3) + "</td></tr>"
if tax <> 0 then
    msgtxt$ = msgtxt$ + "<tr><td></td><td>Tax" + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + fnCommaPeriodSwap$(str(tax:"###,##0.00")) + "</td></tr>"
    msgtxt$ = msgtxt$ + "<tr><td></td><td>Order Total with Tax" + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + fnCommaPeriodSwap$(str((tax + totalOrder):"###,##0.00")) + "</td></tr>"
fi
msgtxt$ = msgtxt$ + "</table>"

rem ' debug/testing
rem ' xresp = msgbox(to$ + " " + cc$ + " " +bcc$,0,"Debug")
call "sendEmailHtml.src", from$, to$, cc$, bcc$, subject$, msgtxt$, ""

rem ' send internal notice email
from$ = "customer-service@basis.cloud"
to$ = "eu.support@basis.cloud, eu@basis.cloud"
cc$ = ""
rem ' debug/testing
rem ' to$ = "kurt.e.williams@comcast.net"
rem ' cc$ = "williams.kurt@comcast.net"

bcc$ = "kw5121151@gmail.com"
subject$ = "Professional Services/Support Purchase Notice"

msgtxt$ = email! + " has ordered a block of Professional Services/Support time wth the following details."

msgtxt$ = msgtxt$ + "<table><tr><td colspan=" + chr(34) + "2" + chr(34) + " align=" + chr(34) + "left" + chr(34) + ">Professional Services/Support Time Purchase Confirmation</td></tr>" 
msgtxt$ = msgtxt$ + "<tr><td>Placed by:</td><td>" + email! + " " + firmId! + customerNbr! + userCode! + "</td></tr>"
msgtxt$ = msgtxt$ + "<tr><td>Firm Name:</td><td>" + arm01.cust_name$ + "</td></tr>"
msgtxt$ = msgtxt$ + "<tr><td>Purchase Order:</td><td>" + poNumber!.getText() + "</td></tr>"
if cvs(invoiceMemo!.getText(),3) <> "" then msgtxt$ = msgtxt$ + "<tr><td>Purchase Description:</td><td>" + invoiceMemo!.getText() + "</td></tr>"
if cvs(note!.getText(),3) <> "" then msgtxt$ = msgtxt$ + "<tr><td>Note to Professional Services Staff:</td><td>" + note!.getText() + "</td></tr>"
msgtxt$ = msgtxt$ + "</table>"

msgtxt$ = msgtxt$ + "<table>"
msgtxt$ = msgtxt$ + "<tr><th>Quantity</th><th align=" + chr(34) + "left" + chr(34) + ">Desription</th><th align=" + chr(34) + "right" + chr(34) + ">Extended Price</th></tr>"
if onehourqty <> 0 then msgtxt$ = msgtxt$ + "<tr><td>" + str(onehourqty) + "</td><td>" + oneHourLabel!.getText() + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + cvs(oneHourExtended!.getText(),3) + "</td></tr>"
if onedayqty <> 0 then msgtxt$ = msgtxt$ + "<tr><td>" + str(onedayqty) + "</td><td>" + oneDayLabel!.getText() + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + cvs(oneDayExtended!.getText(),3) + "</td></tr>"
msgtxt$ = msgtxt$ + "<tr><td></td><td>Order Total" + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + cvs(totalOrder!.getText(),3) + "</td></tr>"
if tax <> 0 then
    msgtxt$ = msgtxt$ + "<tr><td></td><td>Tax" + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + fnCommaPeriodSwap$(str(tax:"###,##0.00")) + "</td></tr>"
    msgtxt$ = msgtxt$ + "<tr><td></td><td>Order Total with Tax" + "</td><td align=" + chr(34) + "right" + chr(34) + ">" + fnCommaPeriodSwap$(str((tax + totalOrder):"###,##0.00")) + "</td></tr>"
fi
msgtxt$ = msgtxt$ + "</table>"

rem 'debug/testing
rem ' xresp = msgbox(to$ + " " + cc$ + " " +bcc$,0,"Debug")
call "sendEmailHtml.src", from$, to$, cc$, bcc$, subject$, msgtxt$, ""

return

[Function (setLineLabels)]
rem ' -----------------------------------------------------------------
rem ' setLineLabels
rem ' -----------------------------------------------------------------

setLineLabels:

rem ' set the line labels
oneHourLabel$ = oneHourLabel!.getText()
oneDayLabel$ = oneDayLabel!.getText()

dailyRate = dayItemData.cur_price
hourlyRate = hourItemData.cur_price

dailyRate$ = str(dailyRate:"##,##0.00")
hourlyRate$ = str(hourlyRate:"##,##0.00")

dailyRate$ = fnCommaPeriodSwap$(dailyRate$)
hourlyRate$ = fnCommaPeriodSwap$(hourlyRate$)

p = pos("<price>" = oneHourLabel$)
oneHourLabel$ = oneHourLabel$(1, p - 1) + hourlyRate$ + oneHourLabel$(p + 7)
p = pos("<price>" = oneDayLabel$)
oneDayLabel$ = oneDayLabel$(1, p - 1) + dailyRate$ + oneDayLabel$(p + 7)

oneHourLabel!.setText(oneHourLabel$)
oneDayLabel!.setText(oneDayLabel$)

return

[Function (userDefinedFunctions)]
rem ' -----------------------------------------------------------------
rem ' userDefinedFunctions
rem ' -----------------------------------------------------------------

userDefinedFunctions:

rem ' -----------------------------------------------------------------
rem ' fndate
rem ' -----------------------------------------------------------------

def fndate$(julian)
  d$=chr(asc(date(julian:"%Yp"))+32)+chr(asc(date(julian:"%Mp"))+32)+
: chr(asc(date(julian:"%Dp"))+32)
  return d$
fnend

def fnCommaPeriodSwap$(in$)
    while 1
        p = pos("," = in$)
        if p = 0 then break
        in$ = in$(1,p-1) + "." + in$(p+1)
    wend
    in$ = in$(1,len(in$)-3) + "," + in$(len(in$) - 1, 2)
    return in$
fnend

def fnCommaPeriodUS$(in$)
    while 1
        p = pos("." = in$)
        if p = 0 then break
        in$ = in$(1,p-1) + in$(p+1)
    wend
    in$ = in$(1,len(in$)-3) + "." + in$(len(in$) - 1, 2)
    return in$
fnend



return

