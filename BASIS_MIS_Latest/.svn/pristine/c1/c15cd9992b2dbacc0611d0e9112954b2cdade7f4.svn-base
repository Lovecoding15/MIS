[Program]
Creation Date=2007-02-28
Creation Time=14:27:58
Event Set=LEGACY
Generator Program=gb_func
Last Build Date=2019-07-20
Last Build Time=13:48:34
Precision=99
Program Name=ec_man_eu
Remarks=Yes
Resource File=ec_man_eu.arc
Show Forms=All

[EOJ]
gosub show_callersWindow

[Init]
ourAPI!=BBjAPI()
ourSysGui!=ourAPI!.getSysGui()
ourSystemMetrics!=ourSysGui!.getSystemMetrics()
scrDimension!=ourSystemMetrics!.getScreenSize()
ourContext=ourSysGui!.getContext()
ourWindow!=ourSysGui!.getWindow(ourContext)
topLevelWindow!=cast(BBjTopLevelWindow, ourSysGui!.getWindow(ourContext))

rem ' the caller now manages it's own window
rem ' callersWindow!=ourSysGui!.getWindow(gb__arg.callersContext)

ec__ChannelList! = ourAPI!.makeVector()
ec__ChannelList=1

firm_id$=gb__arg.firm_id$,firmId!=firm_id$
customer_nbr$=gb__arg.customer_nbr$,customerNbr!=customer_nbr$
lang!=gb__arg.lang$

gosub open_files

translator!.translateWindow(ourWindow!)

ourWindow!.setText(ourWindow!.getText() + " - " + gb__arg.customer_nbr$)
gosub center_window
ourWindow!.setVisible(1)

gosub assemble_dburl
logger! = new EndUserLogger(our_dburl$)
marCommUpdater! = new EuMarCommUpdater(our_dburl$)

rem ' hide the caller's Window
rem ' the caller now manages it's own window
rem ' callersWindow!.setVisible(0)

rem ' set cursor to hour glass
ourWindow!.setCursor(3)

rem ' init the window
gosub get_control_ids
rem ' set the selection status of the radio buttons
templateText!.setSelected(0)
templateVkeyed!.setSelected(0)
templateVkeyedwApp!.setSelected(1)
rem ' euText!.setSelected(0)
rem ' euVkeyed!.setSelected(1)

gosub assemble_dburl

LET temp_dir$=STBL("TEMP",ERR=*NEXT)

rem ' set cursor to pointer
ourWindow!.setCursor(0)

rem ' -------------------<user defined functions>-----------------------

def FNinsertSQLParameters!(udfSql!, firmId!, customerNbr!)
    firmIdTarget!="\|FIRMID\|"
    customerNbrTarget!="\|CUSTOMERNBR\|"
    udfSql!=udfSql!.replaceAll(firmIdTarget!,firmId!)
    udfSql!=udfSql!.replaceAll(customerNbrTarget!,customerNbr!)
    return udfSql!
fnend

def FNgetStatesQuery!(props!)
    sqlBuilder! = new StringBuffer(props!.getProperty("statesList.select")+" ")
    sqlBuilder!.append(props!.getProperty("statesList.from")+" ")
    sqlBuilder!.append(props!.getProperty("statesList.orderby"))
    sql!=sqlBuilder!.toString()
    return sql!
fnend

def FNgetCountriesQuery!(props!)
    sqlBuilder! = new StringBuffer(props!.getProperty("countryList.select")+" ")
    sqlBuilder!.append(props!.getProperty("countryList.from")+" ")
    sqlBuilder!.append(props!.getProperty("countryList.orderby"))
    sql!=sqlBuilder!.toString()
    return sql!
fnend

def FNgetBasisProdListQuery!(props!)
    sqlBuilder! = new StringBuffer(props!.getProperty("basisProdList.select")+" ")
    sqlBuilder!.append(props!.getProperty("basisProdList.from")+" ")
    sqlBuilder!.append(props!.getProperty("basisProdList.where"))
    sql!=sqlBuilder!.toString()    
    sql!=FNinsertSQLParameters!(sql!, firmId!, customerNbr!)
    return sql!
fnend

def FNgetIndustryQuery!(props!)
    sqlBuilder! = new StringBuffer(props!.getProperty("industryList.select")+" ")
    sqlBuilder!.append(props!.getProperty("industryList.from")+" ")
    sqlBuilder!.append(props!.getProperty("industryList.orderby"))
    sql!=sqlBuilder!.toString()    
    return sql!
fnend

def FNgetNextSequence$(xProps!,xOur_dburl$)
    udfChan=sqlunt
    sqlopen(udfChan)XOur_dburl$
    thisSQL$=props!.getProperty("snmeu.get.next.sequence")
    sqlprep(udfChan)thisSQL$
    nextKey$=sqlfetch(udfChan)
    sqlclose(udfChan)
    retKey$=str(num(cvs(nextKey$,3)):"0000000000")
    return retKey$
fnend

def FNgetExistingEndUsersQuery!(props!)
    sqlBuilder! = new StringBuffer(props!.getProperty("standaloneExisting.select")+" ")
    sqlBuilder!.append(props!.getProperty("standaloneExisting.from")+" ")
    sqlBuilder!.append(props!.getProperty("standaloneExisting.where"))
    sql2!=sqlBuilder!.toString()
    return sql2!
fnend

def FNgetExitingEndUsersSNQuery!(props!)
    sqlBuilder! = new StringBuffer(props!.getProperty("standaloneExistingSN.select")+" ")
    sqlBuilder!.append(props!.getProperty("standaloneExistingSN.from")+" ")
    sqlBuilder!.append(props!.getProperty("standaloneExistingSN.innerJoin")+" ")
    sqlBuilder!.append(props!.getProperty("standaloneExistingSN.innerJoin2")+" ")
    sqlBuilder!.append(props!.getProperty("standaloneExistingSN.where"))
    sql2!=sqlBuilder!.toString()
    return sql2!
fnend

def FNaddChannelToList(channelNbr)
    channelNbr! = channelNbr
    ec__ChannelList!.addItem(channelNbr!)
    return channelNbr
fnend

def FNescapeQuotes$(xValue$)
    retStr$=""
    for xpos = 1 to len(xValue$)
        if xValue$(xpos,1)="'" then
            retStr$=retStr$+"'"
        fi
        retStr$=retStr$+xValue$(xpos,1)
    next xpos
    return retStr$
fnend


[Event Win=101 ID=0 Code=X <WIN_CLOSE> (W101_C0_WIN_CLOSE)]
rem ' Window Closed
rem ' gb__event! = cast(BBjCloseEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__window! = gb__event!.getControl()

gosub clean_up
gosub show_callersWindow
goto gb__eoj

[Event Win=101 ID=101 Code=B <PUSH_BUTTON> (W101_C101_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem download not available when running in a browser

if info(3,6)="2" then
    msg$=translator!.getMessage("not.available.inBrowser.msg")
    title$=translator!.getMessage("not.available.inBrowser.title")
    resp=msgbox(msg$, 64, title$)
else
    gosub generate_file
fi

[Event Win=101 ID=105 Code=B <PUSH_BUTTON> (W101_C105_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

if info(3,6)="2" then
    msg$=translator!.getMessage("not.available.inBrowser.msg")
    title$=translator!.getMessage("not.available.inBrowser.title")
    resp=msgbox(msg$, 64, title$)
else
    gosub write_upload_data
fi

[Event Win=101 ID=110 Code=B <PUSH_BUTTON> (W101_C110_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub clean_up
gosub show_callersWindow
goto gb__eoj

[Event Win=101 ID=112 Code=c0 <CHECK_OFF> (W101_C112_CHECK_OFF)]
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

templateVkeyedwApp!.setSelected(1)
templateText!.setSelected(0)
templateVkeyed!.setSelected(0)

[Event Win=101 ID=112 Code=c1 <CHECK_ON> (W101_C112_CHECK_ON)]
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

templateText!.setSelected(0)
templateVkeyed!.setSelected(0)

[Event Win=101 ID=113 Code=c0 <CHECK_OFF> (W101_C113_CHECK_OFF)]
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

templateVkeyed!.setSelected(1)
templateText!.setSelected(0)
templateVkeyedwApp!.setSelected(0)

[Event Win=101 ID=113 Code=c1 <CHECK_ON> (W101_C113_CHECK_ON)]
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

templateText!.setSelected(0)
templateVkeyedwApp!.setSelected(0)

[Event Win=101 ID=117 Code=c0 <CHECK_OFF> (W101_C117_CHECK_OFF)]
rem ' Control unchecked (OFF)
rem ' gb__event! = cast(BBjCheckOffEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

templateText!.setSelected(1)
templateVkeyed!.setSelected(0)
templateVkeyedwApp!.setSelected(0)

[Event Win=101 ID=117 Code=c1 <CHECK_ON> (W101_C117_CHECK_ON)]
rem ' Control checked (ON)
rem ' gb__event! = cast(BBjCheckOnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

templateVkeyed!.setSelected(0)
templateVkeyedwApp!.setSelected(0)


[Function (Declarations)]
rem ' -----------------------------------------------------------------rem ' Declarationsrem ' -----------------------------------------------------------------

Declarations:

USE java.io.File
USE java.io.FileInputStream
USE java.io.BufferedInputStream
USE java.io.FileOutputStream
USE java.util.Properties
USE java.nio.channels.FileChannel
USE ::LanguageTranslator.src::LanguageTranslator
USE ::ClientServerFileMover.src::ClientServerFileMover
USE ::EndUserLogger.src::EndUserLogger
USE ::EuMarCommUpdater.src::EuMarCommUpdater


USE java.lang.StringBuffer

DECLARE BBjAPI ourAPI!
DECLARE BBjSysGui ourSysGui!
DECLARE BBjWindow ourWindow!
DECLARE BBjTopLevelWindow topLevelWindow!
rem ' the caller now manages it's own window
rem ' DECLARE BBjWindow callersWindow!
DECLARE BBjAppletProxy applet!
DECLARE BBjMenuBar menuBar!
DECLARE BBjFileInfo ourFileInfo!
DECLARE BBjFileInfo expFileInfo!
DECLARE BBjFileInfo upFileInfo!
DECLARE BBjFileInfo serFileInfo!
DECLARE BBjFileInfo copyFile!
DECLARE BBjString lang!
DECLARE BBjString sql!
DECLARE BBjString sql2!
DECLARE BBjString udfSql!
DECLARE BBjString firmId!
DECLARE BBjString customerNbr!
DECLARE BBjString firmIdTarget!
DECLARE BBjString customerNbrTarget!
DECLARE BBjRecordSet ourRecordSet!
DECLARE BBjRecordSet dupeRecordSet!
DECLARE BBjRecordSet thisRecordSet!
DECLARE BBjRecordData thisRecord!
DECLARE BBjRecordData dupeRecord!
DECLARE BBjVector ec__ChannelList!
DECLARE BBjNumber channelNbr!
DECLARE BBjProgressBar progress!

DECLARE File file!
DECLARE FileInputStream fis!
DECLARE BufferedInputStream bis!
DECLARE Properties props!
DECLARE StringBuffer sqlBuilder!
DECLARE StringBuffer wrkBuilder!
DECLARE StringBuffer wkrBuilder2!
DECLARE FileChannel fileMasterChannel!
DECLARE FileChannel fileDestinationChannel! 
DECLARE LanguageTranslator translator!
DECLARE BBjVector params!
DECLARE ClientServerFileMover clientServerFileMover!
DECLARE EndUserLogger logger!
DECLARE EuMarCommUpdater marCommUpdater!

return

[Function (add_standalone_app)]
rem ' -----------------------------------------------------------------rem ' add_standalone_apprem ' -----------------------------------------------------------------

add_standalone_app:

filelist$="editEndUserData.bbj"+$0A$+"editEndUserData.arc"+$0A$
filelist$=filelist$+"editEndUserData.EN.properties"+$0A$
filelist$=filelist$+"editEndUserData.DE.properties"+$0A$
filelist$=filelist$+"editEndUserData.FR.properties"+$0A$
filelist$=filelist$+"LanguageTranslator.src"+$0A$

while len(filelist$)
    
    rpos=pos($0A$=filelist$)
    filename$=filelist$(1,rpos-1)
    filelist$=filelist$(rpos+1)

    tempChan=unt
    open(tempChan)filename$
    trash = FNaddChannelToList(tmpChan)
    copyFile!=ourAPI!.getFileSystem().getFileInfo(tempChan)
    sourceFile$=copyFile!.getFilename()
    close(tempChan)

    gosub copy_file

    downloadFilelist$=downloadFilelist$+filename$+" "

wend


rem ' write the config
configFile$="ECconfig"
string wrkDirectory$+configFile$
tempChan=unt
open(tempChan)configFile$
trash = FNaddChannelToList(tmpChan)
write record (tempChan)firm_id$+customer_nbr$+$0A$
write record (tempChan)lang!+$0A$
close(tempChan)

downloadFilelist$=downloadFilelist$+configFile$+" "

return

[Function (assemble_dburl)]
rem ' -----------------------------------------------------------------rem ' assemble_dburlrem ' -----------------------------------------------------------------

assemble_dburl:

our_dburl$=props!.getProperty("sqlURL.urlprefix") + props!.getProperty("sqlURL.server")+":"
our_dburl$=our_dburl$+props!.getProperty("sqlURL.port")+"?database="
our_dburl$=our_dburl$+props!.getProperty("sqlURL.database")+"&user="+props!.getProperty("sqlURL.user")+"&password="
our_dburl$=our_dburl$+props!.getProperty("sqlURL.password")

return

[Function (assemble_duplicate_check_sql)]
rem ' -----------------------------------------------------------------
rem ' assemble_duplicate_check_sql
rem ' -----------------------------------------------------------------

assemble_duplicate_check_sql:

sql$=props!.getProperty("checkForExistingEndUser.refNum")

gosub insert_parameters

dupeRefCheckSQL$=sql$

sql$=props!.getProperty("checkForExistingEndUser.compName")

gosub insert_parameters

dupeCompNameCheckSQL$=sql$

sql$=props!.getProperty("checkForExistingEndUser.refNumCompName")

gosub insert_parameters

dupeCompbinedCheckSQL$=sql$

return

[Function (assemble_eu_sql)]
rem ' -----------------------------------------------------------------rem ' assemble_eu_sqlrem ' -----------------------------------------------------------------

assemble_eu_sql:

dim queries$[1:2]

sql$=props!.getProperty("endUserDataOne.select")+" "
sql$=sql$+props!.getProperty("endUserDataOne.from")+" "
sql$=sql$+props!.getProperty("endUserDataOne.outerJoin1")+" "
sql$=sql$+props!.getProperty("endUserDataOne.outerJoin2")+" "
sql$=sql$+props!.getProperty("endUserDataOne.where")

gosub insert_parameters

queries$[1]=sql$

sql$=props!.getProperty("endUserDataTwo.select")+" "
sql$=sql$+props!.getProperty("endUserDataTwo.from")+" "
sql$=sql$+props!.getProperty("endUserDataTwo.innerJoin1")+" "
sql$=sql$+props!.getProperty("endUserDataTwo.innerJoin2")+" "
sql$=sql$+props!.getProperty("endUserDataTwo.outerJoin1")+" "
sql$=sql$+props!.getProperty("endUserDataTwo.where")+" "
sql$=sql$+props!.getProperty("endUserDataTwo.orderby")+" "

gosub insert_parameters

queries$[2]=sql$

return

[Function (assemble_template_sql)]
rem ' -----------------------------------------------------------------rem ' assemble_template_sqlrem ' -----------------------------------------------------------------

assemble_template_sql:

sql$=props!.getProperty("endUserTemplate.select")+" "
sql$=sql$+props!.getProperty("endUserTemplate.from")+" "
sql$=sql$+props!.getProperty("endUserTemplate.leftOuterJoin")+" "
sql$=sql$+props!.getProperty("endUserTemplate.where")+" "
sql$=sql$+props!.getProperty("endUserTemplate.orderby")

gosub insert_parameters

return

[Function (build_col_headers)]
rem ' -----------------------------------------------------------------rem ' build_col_headersrem ' -----------------------------------------------------------------

build_col_headers:

fieldlist$=fattr(outdata$,"")
fieldline$=""

while len(fieldlist$)
    let lpos=pos($0a$=fieldlist$)
    fieldline$=fieldline$+fieldlist$(1,lpos-1)+$09$
    if lpos=len(fieldlist$) then 
        fieldlist$=""
    else
        fieldlist$=fieldlist$(lpos+1)
    fi
wend

return

[Function (build_validation_bundle)]
rem ' -----------------------------------------------------------------rem ' build_validation_bundlerem ' -----------------------------------------------------------------

build_validation_bundle:

gosub build_validation_lists

outfilePFX$="EC"+firm_id$+customer_nbr$

if templateText!.isSelected() then 
    fileExt$=".tab"
    isText=1
else 
    fileExt$=".vky"
    isText=0
fi

rem ' build the states file
outfile$=outfilePFX$+"VALIDSTATES"+fileExt$
downloadFilelist$=downloadFilelist$+outfile$+" "
ERASE outdir$+outfile$,ERR=*next
stateTemp$="STATE:C(2*=10)"
if isText then
    string outdir$+outfile$
    outfile=unt
    open(outfile)outdir$+outfile$
    trash = FNaddChannelToList(outfile)
    write record(outfile)stateTemp$+$0A$
else
    vkeyed outdir$+outfile$,[1:1:2],0,8
    outfile=unt
    open(outfile)outdir$+outfile$
    trash = FNaddChannelToList(outfile)
    outFileInfo!=ourAPI!.getFileSystem().getFileInfo(outfile)
    outFileInfo!.lock()
    outFileInfo!.setText(stateTemp$)
fi
wrk$=stateList$
dim state$:stateTemp$
while len(wrk$)
    rpos=pos($0A$=wrk$)
    state.state$=wrk$(1,rpos-1)
    wrk$=wrk$(rpos+1)
    write record(outfile)state$
wend
close(outfile)

rem ' build the country file
outfile$=outfilePFX$+"VALIDCOUNTRIES"+fileExt$
downloadFilelist$=downloadFilelist$+outfile$+" "
ERASE outdir$+outfile$,ERR=*next
countryTemp$="COUNTRY:C(30*=10)"
if isText then
    string outdir$+outfile$
    outfile=unt
    open(outfile)outdir$+outfile$
    trash = FNaddChannelToList(outfile)
    write record(outfile)countryTemp$+$0A$
else
    vkeyed outdir$+outfile$,[1:1:30],0,32
    outfile=unt
    open(outfile)outdir$+outfile$
    trash = FNaddChannelToList(outfile)
    outFileInfo!=ourAPI!.getFileSystem().getFileInfo(outfile)
    outFileInfo!.lock()
    outFileInfo!.setText(countryTemp$)
fi
wrk$=countryList$
dim country$:countryTemp$
while len(wrk$)
    rpos=pos($0A$=wrk$)
    country.country$=wrk$(1,rpos-1)
    wrk$=wrk$(rpos+1)
    write record(outfile)country$
wend
close(outfile)

rem ' build the industry file
outfile$=outfilePFX$+"VALIDINDUSTRIES"+fileExt$
downloadFilelist$=downloadFilelist$+outfile$+" "
ERASE outdir$+outfile$,ERR=*next
industryTemp$="INDUSTRY_ID:C(5*=10),INDUSTRY:C(100*=10)"
if isText then
    string outdir$+outfile$
    outfile=unt
    open(outfile)outdir$+outfile$
    trash = FNaddChannelToList(outfile)
    write record(outfile)industryTemp$+$0A$
else
    vkeyed outdir$+outfile$,[1:1:5],[2:1:30],0,100
    outfile=unt
    open(outfile)outdir$+outfile$
    trash = FNaddChannelToList(outfile)    
    outFileInfo!=ourAPI!.getFileSystem().getFileInfo(outfile)   
    outFileInfo!.lock()
    outFileInfo!.setText(industryTemp$)
fi
wrk$=industryList$
wrk2$=industryIdList$
dim industry$:industryTemp$
while len(wrk$)
    rpos=pos($0A$=wrk$)
    industry.industry$=wrk$(1,rpos-1)
    wrk$=wrk$(rpos+1)
    rpos=pos($0A$=wrk2$)
    industry.industry_id$=wrk2$(1,rpos-1)
    wrk2$=wrk2$(rpos+1)
    write record(outfile)industry$
wend
close(outfile)

rem ' build the basis product used list
outfile$=outfilePFX$+"VALIDPRODUCTS"+fileExt$
downloadFilelist$=downloadFilelist$+outfile$+" "
ERASE outdir$+outfile$,ERR=*next
productTemp$="PRODUCT:C(100*=10)"
if isText then
    string outdir$+outfile$
    outfile=unt
    open(outfile)outdir$+outfile$
    trash = FNaddChannelToList(outfile)
    write record(outfile)productTemp$+$0A$
else
    vkeyed outdir$+outfile$,[1:1:30],0,32
    outfile=unt
    open(outfile)outdir$+outfile$
    trash = FNaddChannelToList(outfile)
    outFileInfo!=ourAPI!.getFileSystem().getFileInfo(outfile)
    outFileInfo!.lock()
    outFileInfo!.setText(productTemp$)
fi
wrk$=basisProdList$
dim product$:productTemp$
while len(wrk$)
    rpos=pos($0A$=wrk$)
    product.product$=wrk$(1,rpos-1)
    wrk$=wrk$(rpos+1)
    write record(outfile)product$
wend
close(outfile)

return

[Function (build_validation_lists)]
rem ' -----------------------------------------------------------------rem ' build_validation_listsrem ' -----------------------------------------------------------------

build_validation_lists:

rem ' build the state list if needed
if stateList$="" then
    sql!=FNgetStatesQuery!(props!)
    ourRecordSet!=ourAPI!.createSQLRecordSet(our_dbUrl$,"",sql!)
    if !(ourRecordSet!.isEmpty()) then
        ourRecordSet!.first()
        wrkBuilder! = new StringBuffer()
        while 1
            thisRecord!=ourRecordSet!.getCurrentRecordData()
            wrkBuilder!.append(cvs(thisRecord!.getFieldValue("STATE_CODE"),3)+$0a$)
            ourRecordSet!.next(err=*break)
        wend
        stateList$=wrkBuilder!.toString()
    fi
    ourRecordSet!.close()
fi

rem ' build the country list if needed
if countryList$="" then
    sql!=FNgetCountriesQuery!(props!)
    ourRecordSet!=ourAPI!.createSQLRecordSet(our_dburl$,"",sql!)
    if !(ourRecordSet!.isEmpty()) then
        ourRecordSet!.first()
        wrkBuilder! = new StringBuffer()
        while 1
            thisRecord!=ourRecordSet!.getCurrentRecordData()
            wrkBuilder!.append(cvs(thisRecord!.getFieldValue("COUNTRY_NAME"),3)+$0a$)
            ourRecordSet!.next(err=*break)
        wend
        countryList$=wrkBuilder!.toString()
    fi
    ourRecordSet!.close()
fi

rem ' build the industry list if needed
if industrylist$="" then 
    sql!=FNgetIndustryQuery!(props!)

    ourRecordSet!=ourAPI!.createSQLRecordSet(our_dburl$,"",sql!)
    if !(ourRecordSet!.isEmpty()) then
        ourRecordSet!.first()
        wrkBuilder! = new StringBuffer()
        wrkBuilder2! = new StringBuffer()
        otherIndustryID$=""
        while 1
            thisRecord!=ourRecordSet!.getCurrentRecordData()
            wrkStr$=cvs(thisRecord!.getFieldValue("INDUSTRY_NAME"),3)
            wrkStr2$=cvs(thisRecord!.getFieldValue("INDUSTRY_ID"),3)
            wrkBuilder!.append(wrkStr$+$0a$)
            wrkBuilder2!.append(wrkStr2$+$0a$)
            if wrkStr$="Other" then otherIndustryID$=wrkStr2$
            ourRecordSet!.next(err=*break)
        wend
        industryList$=wrkBuilder!.toString()
        industryIdList$=wrkBuilder2!.toString()
    fi
    ourRecordSet!.close()
fi

rem ' build the basis product list if needed
if basisProdList$="" then
    sql!=FNgetBasisProdListQuery!(props!)

    ourRecordSet!=ourAPI!.createSQLRecordSet(our_dburl$,"",sql!)
    if !(ourRecordSet!.isEmpty()) then
        ourRecordSet!.first()
        
        wrkBuilder! = new StringBuffer()
        while 1
            thisRecord!=ourRecordSet!.getCurrentRecordData()
            
            wrkBuilder!.append(cvs(thisRecord!.getFieldValue("DESCRIPTION"),3)+$0a$)

            ourRecordSet!.next(err=*break)
        wend
        basisProdList$=wrkBuilder!.toString()
    fi
    ourRecordSet!.close()
    basisProdList$=basisProdList$+"Uses several products"+$0a$
fi

return

[Function (center_window)]
rem ' -----------------------------------------------------------------rem ' center_windowrem ' -----------------------------------------------------------------

center_window:

rem ' with the CSS version we no logner need to do this
return

rem if we are running in an applet
if info(3,6)="2" then
    topLevelWindow!.setTitleBarVisible(0)
    applet!=ourAPI!.getAppletProxy()
    applet!.setBounds(0,0,520,600)
else
    width = scrDimension!.width
    height = scrDimension!.height
    winWidth = ourWindow!.getWidth()
    winHeight = ourWindow!.getHeight()

    x = int((width-winWidth)/2)
    y = int((height-winHeight)/2)

    ourWindow!.setLocation(x,y)
fi

return

[Function (check_for_duplicate_end_user)]
rem ' -----------------------------------------------------------------
rem ' check_for_duplicate_end_user
rem ' -----------------------------------------------------------------

check_for_duplicate_end_user:

tag$="?"

dupeFound=0
dupeEndUserNbr$=""

while len(cvs(rec.reference_nbr$,3)) or len(cvs(rec.company_name$,3))

    dupeQuery1$=dupeCompbinedCheckSQL$
    dupeQuery2$=dupeRefCheckSQL$
    dupeQuery3$=dupeCompNameCheckSQL$

    bothValues=0
    refNumValue=0
    refCompNameValue=0

    if cvs(rec.reference_nbr$,3)<>"" and cvs(rec.company_name$,3)<>"" then
        bothValues=1
    else
        if cvs(rec.reference_nbr$,3)<>"" then
            refNumValue=1
        else
            compNameValue=1
        fi
    fi

    if refNumValue then
        rem ' ref number only provided (no company name)

        rem ' fix any single quotes
        refNum$=FNescapeQuotes$(cvs(rec.reference_nbr$,3))

        rem ' insert the reference nbr in the query
        fpos=pos(tag$=dupeQuery2$)
        wrk$=dupeQuery2$(1,fpos-1)+"'"+refNum$+"'"
        dupeQuery2$=wrk$+dupeQuery2$(fpos+len(tag$))

        dupeRecordSet!=ourAPI!.createSQLRecordSet(our_dburl$,"",dupeQuery2$)

        if dupeRecordSet!.isEmpty()
            dupeFound=0
            dupeEndUserNbr$=""
        else    
            dupeRecordSet!.first()
            dupeRecord!=dupeRecordSet!.getCurrentRecordData()
            dupeEndUserNbr$=dupeRecord!.getFieldValue("END_USER_NBR")
            dupeFound=1
        fi
        dupeRecordSet!.close()
        break
    fi

    if compNameValue then
        rem ' company name only provided (no reference number)

        rem ' fix any single quotes
        compName$=FNescapeQuotes$(cvs(rec.company_name$,3))

        rem ' insert the company name in the query
        fpos=pos(tag$=dupeQuery3$)
        wrk$=dupeQuery3$(1,fpos-1)+"'"+compName$+"'"
        dupeQuery3$=wrk$+dupeQuery3$(fpos+len(tag$))

        dupeRecordSet!=ourAPI!.createSQLRecordSet(our_dburl$,"",dupeQuery3$)

        if dupeRecordSet!.isEmpty()
            dupeFound=0
            dupeEndUserNbr$=""
        else    
            dupeRecordSet!.first()
            dupeRecord!=dupeRecordSet!.getCurrentRecordData()
            dupeEndUserNbr$=dupeRecord!.getFieldValue("END_USER_NBR")
            dupeFound=1
        fi
        dupeRecordSet!.close()
        break
    fi

    if bothValues
        rem ' company name and reference number provided

        rem ' fix any single quotes
        refNum$=FNescapeQuotes$(cvs(rec.reference_nbr$,3))
        compName$=FNescapeQuotes$(cvs(rec.company_name$,3))

        rem ' insert the reference nbr in the query
        fpos=pos(tag$=dupeQuery1$)
        wrk$=dupeQuery1$(1,fpos-1)+"'"+refNum$+"'"
        dupeQuery1$=wrk$+dupeQuery1$(fpos+len(tag$))

        rem ' insert the company name in the query
        fpos=pos(tag$=dupeQuery1$)
        wrk$=dupeQuery1$(1,fpos-1)+"'"+compName$+"'"
        dupeQuery1$=wrk$+dupeQuery1$(fpos+len(tag$))

        dupeRecordSet!=ourAPI!.createSQLRecordSet(our_dburl$,"",dupeQuery1$)

        if dupeRecordSet!.isEmpty()
            dupeFound=0
            dupeEndUserNbr$=""
        else    
            dupeRecordSet!.first()
            dupeRecord!=dupeRecordSet!.getCurrentRecordData()
            dupeEndUserNbr$=dupeRecord!.getFieldValue("END_USER_NBR")
            dupeFound=1
        fi
        dupeRecordSet!.close()
        break
    fi
    break
wend

return

[Function (clean_up)]
rem ' -----------------------------------------------------------------rem ' clean_uprem ' -----------------------------------------------------------------

clean_up:

rem ' do what we can to clean up the work directory

gosub close_files

while 1
    rem ' is there a work directory
    tempchn=unt
    wrkdir$=temp_dir$+"EC"+firm_id$+customer_nbr$
    open(tempchn,err=*break)wrkdir$

    rem ' remove any files
    while 1
        read record(tempchn,end=*break)cu_filename$
        erase wrkdir$+"/"+cu_filename$,err=*next
    wend
    close(tempchn)
    rmdir wrkdir$, err=*next
    break
wend

return

[Function (cleanup_exception_reporting_file)]
rem ' -----------------------------------------------------------------rem ' cleanup_exception_reporting_filerem ' -----------------------------------------------------------------

cleanup_exception_reporting_file:

expFileInfo!=ourAPI!.getFileSystem().getFileInfo(expfile)
exceptionFileName$=expFileInfo!.getFilename()
close(expfile)

gosub make_exception_jar_file

gosub clean_up

return

[Function (close_files)]
rem ' -----------------------------------------------------------------rem ' close_filesrem ' -----------------------------------------------------------------

close_files:

while ec__ChannelList!.size() 
    chan = cast(BBjNumber, ec__ChannelList!.getItem(0))
    close(chan,err=*next)
    ec__ChannelList!.removeItem(0)
wend

return

[Function (copy_file)]
rem ' -----------------------------------------------------------------rem ' copy_filerem ' -----------------------------------------------------------------

copy_file:

fileMasterChannel! = new FileInputStream(sourceFile$).getChannel()
fileDestinationChannel! = new FileOutputStream(wrkDirectory$+fileName$).getChannel()
fileDestinationChannel!.transferFrom(fileMasterChannel!, 0, fileMasterChannel!.size())
fileMasterChannel!.close()
fileDestinationChannel!.close()

return

[Function (create_input_template)]
rem ' -----------------------------------------------------------------rem ' create_input_templaterem ' -----------------------------------------------------------------

create_input_template:

gosub create_output_template
intemp$=outtemp$
outtemp$=""

return

[Function (create_output_template)]
rem ' -----------------------------------------------------------------rem ' create_output_templaterem ' -----------------------------------------------------------------

create_output_template:

if isText then
    outtemp$="SERIAL_NBR:C(20*=9),ACTIVE:C(1*=9),REFERENCE_NBR:C(25*=9),COMPANY_NAME:C(40*=9),CONTACT:C(40*=9),"
    outtemp$=outtemp$+"ADDR_1:C(40*=9),ADDR_2:C(40*=9),ADDR_3:C(40*=9),CITY:C(30*=9),"
    outtemp$=outtemp$+"STATE:C(30*=9),POSTAL_CODE:C(15*=9),COUNTRY:C(30*=9),"
    outtemp$=outtemp$+"EMAIL_ADDRESS:C(40*=9),PHONE_NUMBER:C(15*=9),INDUSTRY:C(100*=9),"
    outtemp$=outtemp$+"OTHER_INDUSTRY:C(30*=9),BASIS_PROD:C(20*=9),ADVANTAGE:C(1*=9),"
    outtemp$=outtemp$+"ANNOUNCEMENTS:C(1*=9),APP_MODULES_USED:C(255*=9)"
else
    outtemp$="SERIAL_NBR:C(20*=10),ACTIVE:C(1*=10),REFERENCE_NBR:C(25*=10),COMPANY_NAME:C(40*=10),CONTACT:C(40*=10),"
    outtemp$=outtemp$+"ADDR_1:C(40*=10),ADDR_2:C(40*=10),ADDR_3:C(40*=10),CITY:C(30*=10),"
    outtemp$=outtemp$+"STATE:C(30*=10),POSTAL_CODE:C(15*=10),COUNTRY:C(30*=10),"
    outtemp$=outtemp$+"EMAIL_ADDRESS:C(40*=10),PHONE_NUMBER:C(15*=10),INDUSTRY:C(100*=10),"
    outtemp$=outtemp$+"OTHER_INDUSTRY:C(30*=10),BASIS_PROD:C(20*=10),ADVANTAGE:C(1*=10),"
    outtemp$=outtemp$+"ANNOUNCEMENTS:C(1*=10),APP_MODULES_USED:C(255*=10)"
fi

return

[Function (create_standalone_app_template)]
rem ' -----------------------------------------------------------------rem ' create_standalone_app_templaterem ' -----------------------------------------------------------------

create_standalone_app_template:


outtemp$="SERIAL_NBR:C(20),ACTIVE:C(1),END_USER_NBR:C(10)"

eutemp$="END_USER_NBR:C(10),REFERENCE_NBR:C(25),COMPANY_NAME:C(40*=10),CONTACT:C(40*=10),"
eutemp$=eutemp$+"ADDR_1:C(40*=10),ADDR_2:C(40*=10),ADDR_3:C(40*=10),CITY:C(30*=10),"
eutemp$=eutemp$+"STATE:C(30*=10),POSTAL_CODE:C(15*=10),COUNTRY:C(30*=10),"
eutemp$=eutemp$+"EMAIL_ADDRESS:C(40*=10),PHONE_NUMBER:C(15*=10),INDUSTRY:C(100*=10),"
eutemp$=eutemp$+"OTHER_INDUSTRY:C(30*=10),BASIS_PROD:C(20*=10),ADVANTAGE:C(1*=10),"
eutemp$=eutemp$+"ANNOUNCEMENTS:C(1*=10),APP_MODULES_USED:C(255*=10)"


return

[Function (generate_eu_file)]
rem ' -----------------------------------------------------------------rem ' generate_eu_filerem ' -----------------------------------------------------------------

rem ' generate the file with customer's end user data

generate_eu_file:

ourWindow!.setCursor(3)

gosub clean_up

doingEndUserTemplate = 0

rem ' create the output directory
outfilePFX$="EC"+firm_id$+customer_nbr$
outdir$=temp_dir$+outfilePFX$
mkdir outdir$
outdir$=outdir$+"/"
downloadFilelist$=""

REM ' Attempt to create and open output file
if euText!.isSelected() then 
    fileExt$=".tab"
    isText=1
else 
    fileExt$=".vky"
    isText=0
fi
LET outfile$="EC"+firm_id$+customer_nbr$+"ENDUSERDATA"+fileExt$
downloadFilelist$=downloadFilelist$+outfile$+" "
ERASE outdir$+outfile$,ERR=*next

gosub create_output_template
dim outdata$:outtemp$

if isText then
    string outdir$+outfile$
    outfile=unt
    open(outfile)outdir$+outfile$
    trash = FNaddChannelToList(outfile)
    write record(outfile)outtemp$+$0A$
    gosub build_col_headers
    write record(outfile)fieldline$+$0A$
else
    vkeyed outdir$+outfile$,[1:1:20],0,512
    outfile=unt
    open(outfile)outdir$+outfile$
    trash = FNaddChannelToList(outfile)
    outFileInfo!=ourAPI!.getFileSystem().getFileInfo(outfile)
    outFileInfo!.lock()
    outFileInfo!.setText(outTemp$)
fi

gosub assemble_eu_sql

geneufile_count=0, geneufiletot= 0, notLinked=0
buffer_size=1024
buffer$=""
progress!.setValue(0)
progress!.setMaximum(1)
progress!.setVisible(1)
progressLabel!.setVisible(1)

for query = 1 to 2

    ourRecordSet!=ourAPI!.createSQLRecordSet(our_dburl$,"",queries$[query])
   
    geneufiletot = geneufiletot + ourRecordSet!.getRecordCount()
    progress!.setMaximum(genufiletot)

    if !(ourRecordSet!.isEmpty()) then

        ourRecordSet!.first()
        while 1

            rowData!=ourRecordSet!.getCurrentRecordData()
            
            dim outdata$:outtemp$

            if query = 1 then
                notLinked=notLinked+1
                wrk$="Not Linked "+str(notLinked:"000000")+fill(20," ")
                outdata.serial_nbr$=wrk$(1,20)
                outdata.active$=""
            else
                outdata.serial_nbr$=rowData!.getFieldValue("SERIAL_NBR")
                outdata.active$="Y"
            fi

            outdata.reference_nbr$=rowData!.getFieldValue("REFERENCE_NBR")
            outdata.COMPANY_NAME$=rowData!.getFieldValue("COMPANY_NAME")
            outdata.CONTACT$=rowData!.getFieldValue("CONTACT")
            outdata.ADDR_1$=rowData!.getFieldValue("ADDR_1")
            outdata.ADDR_2$=rowData!.getFieldValue("ADDR_2")
            outdata.ADDR_3$=rowData!.getFieldValue("ADDR_3")
            outdata.CITY$=rowData!.getFieldValue("CITY")
            outdata.STATE$=rowData!.getFieldValue("STATE")
            outdata.POSTAL_CODE$=rowData!.getFieldValue("POSTAL_CODE")
            outdata.COUNTRY$=rowData!.getFieldValue("COUNTRY")
            outdata.EMAIL_ADDRESS$=rowData!.getFieldValue("EMAIL_ADDRESS")
            outdata.PHONE_NUMBER$=rowData!.getFieldValue("PHONE_NUMBER")
            outdata.INDUSTRY$=rowData!.getFieldValue("INDUSTRY_NAME",err=*next)
            outdata.OTHER_INDUSTRY$=rowData!.getFieldValue("OTHER_INDUSTRY")
            outdata.BASIS_PROD$=rowData!.getFieldValue("BASIS_PROD")
            outdata.ADVANTAGE$=rowData!.getFieldValue("ADVANTAGE")
            outdata.ANNOUNCEMENTS$=rowData!.getFieldValue("ANNOUNCEMENTS")
            outdata.APP_MODULES_USED$=rowData!.getFieldValue("APP_MODULES_USED")

            if isText then
                buffer$=buffer$+outdata$+$0a$
                if len(buffer$)>=buffer_size then 
                    write record(outfile)buffer$
                    buffer$=""
                fi
            else
                write record(outfile)outdata$
            fi
            geneufile_count=geneufile_count+1

            ourRecordSet!.next(err=geneu_next_err)
            goto geneu_wend

            geneu_next_err:
                rem ' bug in BBj7.0 sometimes generates an error 13 at EOF
                if err<>2 and err<>13 then goto gb__err
                break

            geneu_wend:
            if mod(geneufile_count,5)=0 then
                progress!.setValue(geneufile_count)
            fi

        wend
    fi
    ourRecordSet!.close()

next query

if isText and len(buffer$) then write record(outfile)buffer$; buffer$=""
close(outfile)

progress!.setValue(geneufiletot)

gosub make_jar_file

rem ' inform the user
if geneufile_count=0 then
    msg$=translator!.getMessage("no.eu.message")
    title$=translator!.getMessage("no.eu.title")
    resp=msgbox(msg$, 0+64, title$)
else
    filter$= "zip" + $0a$ + "*.zip" + $0a$ + "jar" + $0a$ + "*.jar" + $0a$
    success$ = clientServerFileMover!.downloadToClient("download.prompt","","EC"+firm_id$+customer_nbr$+".zip","zip",filter$,temp_dir$)
    if pos("::GOOD::" = success$) then
        params! = ourAPI!.makeVector()
        params!.add(str(geneufile_count))
        rem ' params!.add("EC"+firm_id$+customer_nbr$+".zip")
        params!.add(success$(9))
        msg$=translator!.getMessage("file.ready.msg", params!)
        title$=translator!.getMessage("file.ready.title")
        resp=msgbox(msg$, 64, title$)
     else 
        if success$="::BAD::" then
            msg$=translator!.getMessage("file.transfer.abort")
            title$=translator!.getMessage("file.transfer.abort.title")
            resp=msgbox(msg$, 16, title$)
        fi
    fi
fi

rem ' final clean up
gosub clean_up
erase temp_dir$+"EC"+firm_id$+customer_nbr$+".jar", err=*next
erase temp_dir$+"EC"+firm_id$+customer_nbr$+".zip", err=*next

progress!.setVisible(0)
progress!.setValue(0)
progressLabel!.setVisible(0)

ourWindow!.setCursor(0)

return

[Function (generate_file)]
rem ' -----------------------------------------------------------------rem ' generate_filerem ' -----------------------------------------------------------------

generate_file:

rem ' generate the template file for use by the customer in uploading their end user data

ourWindow!.setCursor(3)

gosub clean_up

doingEndUserTemplate = 1

rem ' create the output directory
outfilePFX$="EC"+firm_id$+customer_nbr$
outdir$=temp_dir$+outfilePFX$
mkdir outdir$
outdir$=outdir$+"/"
downloadFilelist$=""

gosub build_validation_bundle

gosub assemble_template_sql

ourRecordSet!=ourAPI!.createSQLRecordSet(our_dburl$,"",sql$)
genfile_count=0
buffer_size=1024
buffer$=""

progress!.setValue(0)
progress!.setMaximum(1)
progress!.setVisible(1)
progressLabel!.setVisible(1)

rem ' used to preposition the standalone app download to c:\program files\basis
rem ' clientPath$="C:\Program Files\basis\demos\ecommerce\"
clientPath$="/"

rem ' the down load of the vkeyed files will now be a refresh of the files
rem ' for the standalone app
if templateVkeyedwApp!.isSelected() or templateVkeyed!.isSelected() then
    rem ' doing the standalone handle separately
    gosub generate_standalone_app
else
    rem ' doing a file download only
    rem ' in this section we will only be doing text

    REM ' Attempt to create and open work file
    if templateText!.isSelected() then 
        fileExt$=".tab"
        isText=1
    else 
        fileExt$=".vky"
        isText=0
    fi
    LET outfile$="EC"+firm_id$+customer_nbr$+"ENDUSERTEMPLATE"+fileExt$
    downloadFilelist$=downloadFilelist$+outfile$+" "
    ERASE outdir$+outfile$,ERR=*next

    gosub create_output_template
    dim outdata$:outtemp$

    if isText then
        string outdir$+outfile$
        outfile=unt
        open(outfile)outdir$+outfile$
        trash = FNaddChannelToList(outfile)
        write record(outfile)outtemp$+$0A$
        msg$=translator!.getMessage("singlefile.download.warning")
        write record(outfile)msg$+$0A$
        gosub build_col_headers
        write record(outfile)fieldline$+$0A$
    else
        vkeyed outdir$+outfile$,[1:1:20],0,512
        outfile=unt
        open(outfile)outdir$+outfile$
        trash = FNaddChannelToList(outfile)        
        outFileInfo!=ourAPI!.getFileSystem().getFileInfo(outfile)
        outFileInfo!.lock()
        outFileInfo!.setText(outtemp$)
    fi

    geneufiletot = ourRecordSet!.getRecordCount()
    progress!.setMaximum(geneufiletot)

    if !(ourRecordSet!.isEmpty()) then

        ourRecordSet!.first()

        while 1
            rowData!=ourRecordSet!.getCurrentRecordData()

            outdata.serial_nbr$=rowData!.getFieldValue("SERIAL_NBR")
            outdata.active$=rowData!.getFieldValue("ACTIVE_FLAG")

            if isText then
                buffer$=buffer$+outdata$+$0a$
                if len(buffer$)>=buffer_size then 
                    write record(outfile)buffer$
                    buffer$=""
                fi
            else
                write record(outfile)outdata$
            fi
            genfile_count=genfile_count+1

            ourRecordSet!.next(err=genfile_next_error)
            goto genfile_wend

            genfile_next_error:
                if err<>2 then goto gb__err
                break

            genfile_wend:
            if mod(genfile_count,10)=0 then
                progress!.setValue(genfile_count)
            fi
        wend
    fi

    if isText and len(buffer$) then write record(outfile)buffer$; buffer$=""
    close(outfile)
    ourRecordSet!.close()
    progress!.setValue(geneufiletot)

fi

gosub make_jar_file

if genfile_count=0 then
    msg$=translator!.getMessage("no.ser.nbr.msg")
    title$=translator!.getMessage("no.ser.nbr.title")
    resp=msgbox(msg$, 0+64,title$)
else
    filter$= "zip" + $0a$ + "*.zip" + $0a$ + "jar" + $0a$ + "*.jar" + $0a$
    success$ = clientServerFileMover!.downloadToClient("download.prompt",clientPath$,"EC"+firm_id$+customer_nbr$+".zip","zip",filter$,temp_dir$)
    if pos("::GOOD::" =  success$) then
        params! = ourAPI!.makeVector()
        params!.add(str(genfile_count))
        rem ' params!.add("EC"+firm_id$+customer_nbr$+".zip")
        params!.add(success$(9))
        msg$=translator!.getMessage("ser.nbr.ready.msg", params!)
        title$=translator!.getMessage("file.ready.title")
        resp=msgbox(msg$, 64, title$)

        if !templateVkeyedwApp!.isSelected() and !templateVkeyed!.isSelected() then
            msg$=translator!.getMessage("singlefile.download.warning")
            title$=translator!.getMessage("singlefile.download.title")
            resp=msgbox(msg$, 64, title$)
        fi
    else 
        if success$="::BAD::" then
            msg$=translator!.getMessage("file.transfer.abort")
            title$=translator!.getMessage("file.transfer.abort.title")
            resp=msgbox(msg$, 16, title$)
        fi
    fi
fi

rem ' final clean up
erase temp_dir$+"EC"+firm_id$+customer_nbr$+".jar", err=*next
erase temp_dir$+"EC"+firm_id$+customer_nbr$+".zip", err=*next
gosub clean_up

progress!.setVisible(0)
progress!.setValue(0)
progressLabel!.setVisible(0)

ourWindow!.setCursor(0)

return

[Function (generate_standalone_app)]
rem ' -----------------------------------------------------------------rem ' generate_standalone_apprem ' -----------------------------------------------------------------

generate_standalone_app:

gosub create_standalone_app_template
dim outdata$:outtemp$

REM ' create the template file
fileExt$=".vky"
LET outfile$="EC"+firm_id$+customer_nbr$+"ENDUSERS"+fileExt$
downloadFilelist$=downloadFilelist$+outfile$+" "
ERASE outdir$+outfile$,ERR=*next
vkeyed outdir$+outfile$,[1:1:10],[1:11:25]+[1:1:10],[1:36:40]+[1:1:10],0,512
outfile=unt
open(outfile)outdir$+outfile$
trash = FNaddChannelToList(outfile)
outFileInfo!=ourAPI!.getFileSystem().getFileInfo(outfile)
outFileInfo!.lock()
outFileInfo!.setText(eutemp$)

gosub populate_standalone_files_with_existing

close(outfile)


REM ' create the serial number file
LET outfile$="EC"+firm_id$+customer_nbr$+"SERIALNUMBERS"+fileExt$
downloadFilelist$=downloadFilelist$+outfile$+" "
ERASE outdir$+outfile$,ERR=*next
vkeyed outdir$+outfile$,[1:1:20],[1:22:10]+[1:1:20],0,32
outfile=unt
open(outfile)outdir$+outfile$
trash = FNaddChannelToList(outfile)
outFileInfo!=ourAPI!.getFileSystem().getFileInfo(outfile)
outFileInfo!.lock()
outFileInfo!.setText(outtemp$)

gosub populate_standalone_with_existing_serial_nbrs

geneufiletot = ourRecordSet!.getRecordCount()
progress!.setValue(0)
progress!.setMaximum(geneufiletot)

if !(ourRecordSet!.isEmpty()) then

    ourRecordSet!.first()

    while 1
        rowData!=ourRecordSet!.getCurrentRecordData()

        outdata.serial_nbr$=rowData!.getFieldValue("SERIAL_NBR")
        outdata.active$=rowData!.getFieldValue("ACTIVE_FLAG")
        outdata.end_user_nbr$=fill(10," ")

        write record(outfile)outdata$

        genfile_count=genfile_count+1

        ourRecordSet!.next(err=standfile_next_error)
        goto standfile_wend

        standfile_next_error:
            if err<>2 then goto gb__err
            break

        standfile_wend:
        if mod(genfile_count,10)=0 then
            progress!.setValue(genfile_count)
        fi
    wend
fi

close(outfile)
ourRecordSet!.close()
progress!.setValue(geneufiletot)

return

[Function (get_control_ids)]
rem ' -----------------------------------------------------------------rem ' get_control_idsrem ' -----------------------------------------------------------------

get_control_ids:

ourControlVector! = ourWindow!.getAllControls()

for i=0 to ourControlVector!.size() - 1
    control!= cast(BBjControl, ourControlVector!.getItem(i))
    if control!.getName().equals("templateText") then templateText!=cast(BBjRadioButton, control!)
    if control!.getName().equals("templateVkeyed") then templateVkeyed!=cast(BBjRadioButton, control!)
    if control!.getName().equals("templateVkeyedwApp") then templateVkeyedwApp!=cast(BBjRadioButton, control!)
    rem ' if control!.getName().equals("euText") then euText!=cast(BBjRadioButton, control!)
    rem ' if control!.getName().equals("euVkeyed") then euVkeyed!=cast(BBjRadioButton, control!)
    if control!.getName().equals("uploadStatus") then uploadStatus!=cast(BBjEditBox, control!)
    if control!.getName().equals("progressLabel") then progressLabel!=cast(BBjStaticText, control!)
    if control!.getName().equals("progress") then progress!=cast(BBjProgressBar, control!)
next i

return

[Function (init_exception_reporting_file)]
rem ' -----------------------------------------------------------------rem ' init_exception_reporting_filerem ' -----------------------------------------------------------------

init_exception_reporting_file:

expfilename$=infilePFX$+"EXCEPTION.tab"
expfile$=indir$+expfilename$
ERASE expfile$,ERR=*next
string expfile$
expfile=unt
open(expfile)expfile$
trash = FNaddChannelToList(expfile)

if !twofile then
    rem ' problems in the template upload
    write record(expfile)"SERIAL_NBR"+$09$+"REASON/NOTE"+$0A$
else
    rem ' problems in the standalone app upload
    write record(expfile)"REF_NBR/COMP_NAME/SERIAL_NBR"+$09$+"REASON/NOTE"+$0A$
fi

return

[Function (insert_parameters)]
rem ' -----------------------------------------------------------------rem ' insert_parametersrem ' -----------------------------------------------------------------

insert_parameters:

tag$="?"

rem ' firm id
fpos=pos(tag$=sql$)
wrk$=sql$(1,fpos-1)+"'"+firm_id$+"'"
sql$=sql$(fpos+len(tag$))

rem ' customer nbr
fpos=pos(tag$=sql$)
wrk$=wrk$+sql$(1,fpos-1)+"'"+customer_nbr$+"'"
wrk$=wrk$+sql$(fpos+len(tag$))

sql$=wrk$

return

[Function (make_exception_jar_file)]
rem ' -----------------------------------------------------------------rem ' make_exception_jar_filerem ' -----------------------------------------------------------------

make_exception_jar_file:


rem ' bundle up exception file

dir$=dir("")
chdir temp_dir$+infilePFX$+"/"

jarFileName$="../"+infilePfx$+".zip"
erase jarfileName$,err=*next

cmdLine$="/mnt/data/java/bin/jar -cMf "
cmdLine$=cmdLine$+jarFileName$+" "
cmdLine$=cmdLine$+expfilename$
a=scall(cmdLine$)

chdir dir$

return

[Function (make_jar_file)]
rem ' -----------------------------------------------------------------rem ' make_jar_filerem ' -----------------------------------------------------------------

make_jar_file:

rem ' bundle it up in a jar, but a zip extension on it
dir$=dir("")

wrkDirectory$=temp_dir$+outfilePFX$+"/"

chdir wrkDirectory$

if templateVkeyedwApp!.isSelected() and doingEndUserTemplate then
    gosub add_standalone_app
fi

rem ' remove any old jar file that might be there
erase temp_dir$+"EC"+firm_id$+customer_nbr$+".jar", err=*next
erase temp_dir$+"EC"+firm_id$+customer_nbr$+".zip", err=*next

cmdLine$="/mnt/data/java/bin/jar -cMf "
cmdLine$=cmdLine$+"../EC"+firm_id$+customer_nbr$+".zip"
cmdLine$=cmdLine$+" ."

a=scall(cmdLine$)

while len(downloadFilelist$)
    rpos=pos(" "=downloadFilelist$)
    target$=downloadFilelist$(1,rpos-1)
    downloadFilelist$=downloadFilelist$(rpos+1)
    erase target$, err=*next
wend
chdir dir$
rmdir outdir$

return

[Function (open_files)]
rem ' -----------------------------------------------------------------rem ' open_filesrem ' -----------------------------------------------------------------

open_files:

snmeu=gb__arg.snmeu
CALL "templates.pgm::SNMEU"

snmel=gb__arg.snmel
CALL "templates.pgm::SNMEL"

snm01=gb__arg.snm01
CALL "templates.pgm::SNM01"

rem ' get a translator
translator! = new LanguageTranslator("ec_man_eu."+lang!+".properties")
rem ' get a file mover
clientServerFileMover! = new ClientServerFileMover(translator!)

props=unt
open(props)"ec_sql.properties"
ourFileInfo! = ourAPI!.getFileSystem().getFileInfo(props)
file!= new File(ourFileInfo!.getFilename())
fis!=new FileInputStream(file!)
bis!=new BufferedInputStream(fis!)
props!=new Properties()
props!.load(bis!)
close(props)

return

[Function (populate_standalone_files_with_existing)]
rem ' -----------------------------------------------------------------
rem ' populate_standalone_files_with_existing
rem ' -----------------------------------------------------------------

populate_standalone_files_with_existing:

sql2!=FNgetExistingEndUsersQuery!(props!)
sql$=sql2!
gosub insert_parameters

genfile_ex_count = 0

thisRecordSet!=ourAPI!.createSQLRecordSet(our_dbUrl$,"",sql$)

if !(thisRecordSet!.isEmpty()) then
    thisRecordSet!.first()
    while 1
        thisRecord!=thisRecordSet!.getCurrentRecordData()

        dim thisRec$:eutemp$

        thisRec.END_USER_NBR$=cvs(thisRecord!.getFieldValue("END_USER_NBR"),3)
        thisRec.REFERENCE_NBR$=cvs(thisRecord!.getFieldValue("REFERENCE_NBR"),3)
        thisRec.COMPANY_NAME$=cvs(thisRecord!.getFieldValue("COMPANY_NAME"),3)
        thisRec.CONTACT$=cvs(thisRecord!.getFieldValue("CONTACT"),3)
        thisRec.ADDR_1$=cvs(thisRecord!.getFieldValue("ADDR_1"),3)
        thisRec.ADDR_2$=cvs(thisRecord!.getFieldValue("ADDR_2"),3)
        thisRec.ADDR_3$=cvs(thisRecord!.getFieldValue("ADDR_3"),3)
        thisRec.CITY$=cvs(thisRecord!.getFieldValue("CITY"),3)
        thisRec.STATE$=cvs(thisRecord!.getFieldValue("STATE"),3)
        thisRec.POSTAL_CODE$=cvs(thisRecord!.getFieldValue("POSTAL_CODE"),3)

        cntry$=cvs(thisRecord!.getFieldValue("COUNTRY"),3)
        if cntry$="US" or cntry$="USA" then cntry$="U.S.A."
        thisRec.COUNTRY$=cntry$

        thisRec.EMAIL_ADDRESS$=cvs(thisRecord!.getFieldValue("EMAIL_ADDRESS"),3)
        thisRec.PHONE_NUMBER$=cvs(thisRecord!.getFieldValue("PHONE_NUMBER"),3)
        thisRec.INDUSTRY$=cvs(thisRecord!.getFieldValue("INDUSTRY"),3)
        thisRec.OTHER_INDUSTRY$=cvs(thisRecord!.getFieldValue("OTHER_INDUSTRY"),3)
        thisRec.BASIS_PROD$=cvs(thisRecord!.getFieldValue("BASIS_PROD"),3)
        thisRec.ADVANTAGE$=cvs(thisRecord!.getFieldValue("ADVANTAGE"),3)
        thisRec.ANNOUNCEMENTS$=cvs(thisRecord!.getFieldValue("ANNOUNCEMENTS"),3)
        thisRec.APP_MODULES_USED$=cvs(thisRecord!.getFieldValue("APP_MODULES_USED"),3)

        write record(outfile)thisRec$

        thisRecordSet!.next(err=*break)
    wend
fi
thisRecordSet!.close()

return

[Function (populate_standalone_with_existing_serial_nbrs)]
rem ' -----------------------------------------------------------------
rem ' populate_standalone_with_existing_serial_nbrs
rem ' -----------------------------------------------------------------

populate_standalone_with_existing_serial_nbrs:

sql2!=FNgetExitingEndUsersSNQuery!(props!)
sql$=sql2!
gosub insert_parameters

thisRecordSet!=ourAPI!.createSQLRecordSet(our_dbUrl$,"",sql$)

if !(thisRecordSet!.isEmpty()) then
    thisRecordSet!.first()
    while 1
        thisRecord!=thisRecordSet!.getCurrentRecordData()

        dim outdata$:outtemp$

        outdata.END_USER_NBR$=cvs(thisRecord!.getFieldValue("END_USER_NBR"),3)
        outdata.SERIAL_NBR$=cvs(thisRecord!.getFieldValue("SERIAL_NBR"),3)
        outdata.ACTIVE$="Y"

        write record(outfile)outdata$

        genfile_count=genfile_count+1
        
        thisRecordSet!.next(err=*break)
    wend
fi
thisRecordSet!.close()
dim outdata$:outtemp$

return

[Function (show_callersWindow)]
rem ' -----------------------------------------------------------------
rem ' show_callersWindow
rem ' -----------------------------------------------------------------

show_callersWindow:

rem ' the caller now manages it's own window
return

if callersWindow! <> NULL() then
    if info(3,6)="2" then
        applet!=ourAPI!.getAppletProxy()
        applet!.setBounds(0,0,520,600)
    fi
   callersWindow!.setVisible(1)
fi

return

[Function (unpack_jar_file)]
rem ' -----------------------------------------------------------------rem ' unpack_jar_filerem ' -----------------------------------------------------------------

unpack_jar_file:

rem ' see if jar or zip is there and unpack if so

dir$=dir("")
chdir temp_dir$+infilePFX$+"/"

tempdir=unt
open(tempdir)temp_dir$+infilePFX$+"/"
trash = FNaddChannelToList(tempdir)

while 1
    read record(tempdir,end=*break)upj_fileName$
    ppos=pos("."=upj_fileName$)
    if ppos then
        if upj_fileName$(ppos+1)="jar" or upj_fileName$(ppos+1)="zip" then

            cmdLine$="jar -xf "
            cmdLine$=cmdLine$+upj_fileName$
            a=scall(cmdLine$)
        fi
    fi
wend

close(tempdir)

chdir dir$

return

[Function (update_twofile_upload)]
rem ' -----------------------------------------------------------------
rem ' update_twofile_upload
rem ' -----------------------------------------------------------------

update_twofile_upload:

while 1
    gosub write_upload_data_read_record
    if wudrr_endflag then 
        break
    fi
    wup_count=wup_count+1

    gosub validate_upload_datarec

    if isValid then

        rem ' write the end user record 
        
        rem ' we could have an update to an existing record
        if rec.end_user_nbr$(1,1)<>"N" then
            read record(snmeu,key=rec.end_user_nbr$,dom=utu_missing)snmeu$
            snmeu$=field(snmeu$)
            existingSNMEU=1
            goto utu_exitpoint
            utu_missing:
                rem this code handles the unlikely case of an uploaded end user nbr that has vanished from the file
                dim snmeu$:fattr(snmeu$)
                snmeu.end_user_nbr$=rec.end_user_nbr$
                existingSNMEU=1
            utu_exitpoint:
        else
            dim snmeu$:fattr(snmeu$)
            existingSNMEU=0
        fi

        snmeu.reference_nbr$=cvs(rec.reference_nbr$,3)
        snmeu.company_name$=rec.company_name$
        snmeu.contact$=rec.contact$
        snmeu.addr_1$=rec.addr_1$
        snmeu.addr_2$=rec.addr_2$
        snmeu.addr_3$=rec.addr_3$
        snmeu.city$=rec.city$
        snmeu.state$=rec.state$
        snmeu.postal_code$=rec.postal_code$
        snmeu.country$=rec.country$
        snmeu.email_address$=rec.email_address$
        snmeu.phone_number$=rec.phone_number$
        snmeu.industry$=rec.industry$
        snmeu.other_industry$=rec.other_industry$
        snmeu.basis_prod$=rec.basis_prod$
        snmeu.advantage$=rec.advantage$
        snmeu.announcements$=rec.announcements$
        snmeu.app_modules_used$=rec.app_modules_used$
        snmeu.firm_id$=firm_id$
        snmeu.customer_nbr$=customer_nbr$


        if !existingSNMEU then
            rem ' get an end user number from the sequence
            gosub assemble_dburl
            hkey$=FNgetNextSequence$(props!,our_dburl$)
            snmeu.end_user_nbr$=hkey$
        fi
        write record(snmeu)snmeu$

        rem update TMM03
        snmeu! = ourAPI!.makeTemplatedString(fattr(snmeu$))
        snmeu!.setString(snmeu$)
        marCommUpdater!.updateMarComm(snmeu!)

        wup_write_count=wup_write_count+1

        gosub write_twofile_serial_nbrs

    else
        wup_invalid_data_count=wup_invalid_data_count+1
    fi

    if mod(wup_count,10)=0 then
        progress!.setValue(wup_count)
    fi

wend

return

[Function (validate_upload_datarec)]
rem ' -----------------------------------------------------------------rem ' validate_upload_datarecrem ' -----------------------------------------------------------------

validate_upload_datarec:

isValid=1

if twofile then
    xIdentifier$=cvs(rec.reference_nbr$,3)+"/"+cvs(rec.company_name$,3)
else
    xIdentifier$=cvs(rec.serial_nbr$,3)
fi

while 1

    rem ' company name required
    if cvs(rec.company_name$,3)="" then
        xReason$=translator!.getMessage("no.company.name")
        gosub write_exception_file
        isValid=0
        break
    fi

    rem ' a country is required
    if cvs(rec.country$,3)="" or pos(rec.country$+$0A$=countryList$)=0 then
        if cvs(rec.country$,3)="" then
            param$="null"
        else
            param$=rec.country$
        fi
        params!=ourAPI!.makeVector()
        params!.add(param$)
        xReason$=translator!.getMessage("no.country", params!)
        gosub write_exception_file
        isValid=0
        break
    fi

    rem ' -----<warings>------------------

    rem ' state must be in the list or will be set to null
    if cvs(rec.state$,3)<>"" and pos(rec.state$+$0A$=stateList$)=0 then
        params!=ourAPI!.makeVector()
        params!.add(cvs(rec.state$,3))
        xReason$=translator!.getMessage("no.state",params!)
        gosub write_exception_file
        rec.state$=""
    fi

    rem ' basis prod must be in the list or will be set to null
    if cvs(rec.basis_prod$,3)<>"" and pos(rec.basis_prod$+$0A$=basisProdList$)=0 then
        params!=ourAPI!.makeVector()
        params!.add(cvs(rec.basis_prod$,3))
        xReason$=translator!.getMessage("no.basis.prod",params!)
        gosub write_exception_file
        rec.basis_prod$=""
    fi

    rem ' if advantage or announcements is yes then we must have an email address

    rem ' if no email then set advatage and announcements to N and warn

    if (rec.advantage$="Y" or rec.announcements$="Y") and cvs(rec.email_address$,3)="" then
        params!=ourAPI!.makeVector()
        params!.add(cvs(rec.company_name$,3))
        xReason$=translator!.getMessage("no.email.address",params!)
        gosub write_exception_file
        rec.advantage$="N"
        rec.announcements$="N"
    fi


    rem ' --------<invalid industry handle as other>------------

    rem ' the industry could come back as an id or the actual industry description, need to handle both
    rem ' industry must be in the list or will be set to other and supplied text placed in other_desc
    rem ' also here we convert the industry name to an Id for storage in the file

    if cvs(rec.industry$,3)<>"" and pos(rec.industry$+$0A$=industryList$)=0 and pos(rec.industry$+$0A$=industryIdList$)=0 then
        params!=ourAPI!.makeVector()
        params!.add(cvs(rec.industry$,3))
        xReason$=translator!.getMessage("no.industry",params!)
        gosub write_exception_file
        if cvs(rec.other_industry$,3)="" then
            rec.other_industry$=rec.industry$
        fi
        rec.industry$=otherIndustryID$
    else
        rem ' we know it is in the list becuase of the above test, now find the id
        if cvs(rec.industry$,3)<>"" then
            descpos = pos(rec.industry$+$0A$=industryList$)
            idpos = pos(rec.industry$+$0A$=industryIdList$)

            if (descpos)
                wrk$=industryList$,wrkId$=industryIdList$,id$=""
                while len(wrk$)
                    rpos=pos($0a$=wrk$),dpos=pos($0a$=wrkId$)
                    target$=wrk$(1,rpos-1)
                    targetId$=wrkId$(1,dpos-1)
                    wrk$=wrk$(rpos+1)
                    wrkId$=wrkId$(dpos+1)
                    if target$=cvs(rec.industry$,3) then
                        id$=targetId$
                        break
                    fi
                wend
                rec.industry$=id$
            else 
                if (idpos)
                    wrk$=industryIdList$(idpos),id$=""
                    while len(wrk$)
                        dpos=pos($0a$=wrk$)
                        targetId$=wrk$(1,dpos-1)
                        wrk$=wrk$(dpos+1)
                        if targetId$=cvs(rec.industry$,3) then
                            id$=targetId$
                            break
                        fi
                    wend
                    rec.industry$=id$
                fi
            fi
        fi
    fi

    break
wend

return

[Function (write_exception_file)]
rem ' -----------------------------------------------------------------rem ' write_exception_filerem ' -----------------------------------------------------------------

write_exception_file:

write record(expfile)xIdentifier$+$09$+xReason$+$0A$

return

[Function (write_serial_nbr_link)]
rem ' -----------------------------------------------------------------rem ' write_serial_nbr_linkrem ' -----------------------------------------------------------------

write_serial_nbr_link:

rem ' wSerialNbr$ is the serial number
rem ' wEndUserNbr$ is the end user number

rem ' is the serial number already linked?
read record(snmel,key=wSerialNbr$,dom=*next)snmel$
snmelKey$="",snmelKey$=key(snmel,end=wup_serial_nbr_nolink)
read record(snmel,key=snmelKey$)snmel$
if snmel.serial_nbr$=wSerialNbr$ then
    rem ' serial number already linked - remove the link
    remove (snmel,key=snmelKey$)
    logger!.makeUnlinkEntry(snmel.serial_nbr$, snmel.end_user_nbr$, firm_id$, customer_nbr$)
fi
wup_serial_nbr_nolink:

rem ' write the link
dim snmel$:fattr(snmel$)
snmel.serial_nbr$=wSerialNbr$
snmel.end_user_nbr$=wEndUserNbr$
write record(snmel)snmel$
logger!.makeLinkEntry(snmel.serial_nbr$, snmel.end_user_nbr$, firm_id$, customer_nbr$)

return

[Function (write_twofile_serial_nbrs)]
rem ' -----------------------------------------------------------------rem ' write_twofile_serial_nbrsrem ' -----------------------------------------------------------------

write_twofile_serial_nbrs:

tmpEndUserNbr$=rec.end_user_nbr$
wEndUserNbr$=snmeu.end_user_nbr$

read(serfile,key=tmpEndUserNbr$,knum=1,err=*next)

while 1
    serkey$=key(serfile,end=*break)
    read record(serfile,key=serkey$)serrec$
    if serrec.end_user_nbr$<>tmpEndUserNbr$ then break

    rem ' validate the serial number
    read record(snm01,key=serrec.serial_nbr$,dom=wtsn_no_serial_nbr)snm01$
    if snm01.firm_id$<>firm_id$ or snm01.customer_nbr$<>customer_nbr$ then
        wup_wrong_cust_count=wup_wrong_cust_count+1
        xReason$=translator!.getMessage("wrong.serial.nbr")
        xIdentifier$=cvs(serrec.serial_nbr$,3)
        gosub write_exception_file
        goto wtsn_skip_write
    else
        goto wtsn_serial_nbr_valid
    fi
        
    wtsn_no_serial_nbr:
    wup_bad_serial_nbr_count=wup_bad_serial_nbr_count+1
    xReason$=translator!.getMessage("serial.nbr.not.there")
    xIdentifier$=cvs(serrec.serial_nbr$,3)
    gosub write_exception_file
    goto wtsn_skip_write
    
    wtsn_serial_nbr_valid:

    wSerialNbr$=serrec.serial_nbr$
    gosub write_serial_nbr_link
    
    wtsn_skip_write:

wend

return

[Function (write_upload_data)]
rem ' -----------------------------------------------------------------rem ' write_upload_datarem ' -----------------------------------------------------------------

write_upload_data:

ourWindow!.setCursor(3)

gosub clean_up

rem ' used to preposition the standalone app download to c:\program files\basis
clientPath$="C:\Program Files\basis\demos\ecommerce\"

gosub write_upload_get_files
rem ' did we get any files?
if !gotFiles then
    gosub clean_up
    ourWindow!.setCursor(0)
    return
fi

gosub build_validation_lists

gosub write_upload_data_get_filetype

if upload_go then

    gosub init_exception_reporting_file
    
    uploadStatus!.setText(uploadstatus$)
    uploadStatus!.setVisible(1)
    uploadStatus!.setEnabled(1)


    if upFileInfo!.getFileType()=13 then
        rem vkeyed
        intemp$=upFileInfo!.getText()
        dim rec$:intemp$
        infileType$="vkeyed"
        if twofile then
            serFileInfo!=ourAPI!.getFileSystem().getFileInfo(serfile)
            finalSerFileUploadFilename$=serFileInfo!.getFilename()
            sertemp$=serFileInfo!.getText()
            dim serrec$:sertemp$
        fi
    else
        rem string
        gosub create_input_template
        dim rec$:intemp$
        infileType$="string"
        gosub write_upload_data_skip_header_records
    fi

    wup_count=0,wup_wrong_cust_count=0,wup_bad_serial_nbr_count=0,wup_write_count=0,wup_invalid_data_count=0
    progress!.setValue(0)
    progress!.setMaximum(uploadtotrecs)
    progress!.setVisible(1)
    progressLabel!.setVisible(1)

    if twoFile then
        gosub update_twofile_upload
    else

        gosub assemble_duplicate_check_sql

        while 1
            gosub write_upload_data_read_record
            if wudrr_endflag then 
                break
            fi
            wup_count=wup_count+1

            rem ' does the serial nbr exist for this customer
            rem ' serial nbr is padded to 20 with spaces
            wrk$=rec.serial_nbr$+fill(20," "),rec.serial_nbr$=wrk$(1,20)
            read record(snm01,key=rec.serial_nbr$,dom=wup_no_serial_nbr)snm01$
            if snm01.firm_id$<>firm_id$ or snm01.customer_nbr$<>customer_nbr$ then
                wup_wrong_cust_count=wup_wrong_cust_count+1
                xReason$=translator!.getMessage("wrong.serial.nbr")
                xIdentifier$=cvs(rec.serial_nbr$,3)
                gosub write_exception_file
                goto wup_bottom
            fi
            goto wup_serial_nbr_exists
            wup_no_serial_nbr:
                wup_bad_serial_nbr_count=wup_bad_serial_nbr_count+1
                xReason$=translator!.getMessage("serial.nbr.not.there")
                xIdentifier$=cvs(rec.serial_nbr$,3)
                gosub write_exception_file
                goto wup_bottom
            wup_serial_nbr_exists:


            rem ' check for duplicates here
            gosub check_for_duplicate_end_user

            if dupeFound then

                rem ' write the serial number link and be done
                wSerialNbr$=rec.serial_nbr$
                wEndUserNbr$=dupeEndUserNbr$
                gosub write_serial_nbr_link
                wup_write_count=wup_write_count+1
            
            else

                rem ' new record

                rem ' validate the data here
                gosub validate_upload_datarec

                if isValid then

                    rem ' write the end user record then the link
                    dim snmeu$:fattr(snmeu$)

                    snmeu.reference_nbr$=cvs(rec.reference_nbr$,3)
                    snmeu.company_name$=rec.company_name$
                    snmeu.contact$=rec.contact$
                    snmeu.addr_1$=rec.addr_1$
                    snmeu.addr_2$=rec.addr_2$
                    snmeu.addr_3$=rec.addr_3$
                    snmeu.city$=rec.city$
                    snmeu.state$=rec.state$
                    snmeu.postal_code$=rec.postal_code$
                    snmeu.country$=rec.country$
                    snmeu.email_address$=rec.email_address$
                    snmeu.phone_number$=rec.phone_number$
                    snmeu.industry$=rec.industry$
                    snmeu.other_industry$=rec.other_industry$
                    snmeu.basis_prod$=rec.basis_prod$
                    snmeu.advantage$=rec.advantage$
                    snmeu.announcements$=rec.announcements$
                    snmeu.app_modules_used$=rec.app_modules_used$
                    snmeu.firm_id$=firm_id$
                    snmeu.customer_nbr$=customer_nbr$

                    rem ' get an end user number from the sequence
                    gosub assemble_dburl
                    hkey$=FNgetNextSequence$(props!,our_dburl$)
                    snmeu.end_user_nbr$=hkey$
                    write record(snmeu)snmeu$

                    rem update TMM03
                    snmeu! = ourAPI!.makeTemplatedString(fattr(snmeu$))
                    snmeu!.setString(snmeu$)
                    marCommUpdater!.updateMarComm(snmeu!)

                    wup_write_count=wup_write_count+1

                    rem ' now the serial number links
                    if twofile then
                        gosub write_twofile_serial_nbrs
                    else
                        rem ' only one serial number to write here already validated
                        wSerialNbr$=rec.serial_nbr$
                        wEndUserNbr$=snmeu.end_user_nbr$
                        gosub write_serial_nbr_link
                    fi
                else
                    wup_invalid_data_count=wup_invalid_data_count+1
                fi
            fi

            wup_bottom:
            if mod(wup_count,10)=0 then
                progress!.setValue(wup_count)
            fi
        wend
    fi

    wup_read_done:
        progress!.setValue(uploadtotrecs)

        gosub write_upload_data_close_files

        if twofile then
            xIdentifier$=""
        else
            xIdentifier$=fill(9)
        fi

        params!=ourAPI!.makeVector()
        params!.add(str(wup_count))
        msg$=translator!.getMessage("upl.comp.count",params!)
        title$=translator!.getMessage("upl.comp.title")
        xReason$=msg$
        gosub write_exception_file
        msg$=msg$ + $0A$

        if wup_wrong_cust_count then
            params!=ourAPI!.makeVector()
            params!.add(str(wup_wrong_cust_count))
            wMsg$=translator!.getMessage("invalid.cust.count",params!)
            xReason$=wMsg$
            gosub write_exception_file
            msg$=msg$+wMsg$+$0A$
        fi

        if wup_bad_serial_nbr_count then
            params!=ourAPI!.makeVector()
            params!.add(str(wup_bad_serial_nbr_count))
            wMsg$=translator!.getMessage("invalid.serial.nbr.count",params!)
            xReason$=wMsg$
            gosub write_exception_file
            msg$=msg$+wMsg$+$0A$
        fi

        if wup_invalid_data_count then
            params!=ourAPI!.makeVector()
            params!.add(str(wup_invalid_data_count))
            wMsg$=translator!.getMessage("data.validation.count",params!)
            xReason$=wMsg$
            gosub write_exception_file
            msg$=msg$+wMsg$+$0A$
        fi

        params!=ourAPI!.makeVector()
        params!.add(str(wup_write_count))
        wMsg$=translator!.getMessage("updated.count", params!)

        xReason$=wMsg$
        gosub write_exception_file
        msg$=msg$+wMsg$+$0A$

        wMsg$=translator!.getMessage("exception.file.notice")
        msg$=msg$+wMsg$+$0A$
        
        resp=msgbox(msg$, 0+64, title$)

        gosub cleanup_exception_reporting_file
        
        rem ' download the jar file with the exception logging file
        filter$= "zip" + $0a$ + "*.zip" + $0a$ + "jar" + $0a$ + "*.jar" + $0a$
        success$ = clientServerFileMover!.downloadToClient("download.prompt",clientPath$,"EC"+firm_id$+customer_nbr$+".zip","zip",filter$,temp_dir$)

        rem ' clean up the jar file
        gosub clean_up
        erase temp_dir$+"EC"+firm_id$+customer_nbr$+".jar", err=*next
        erase temp_dir$+"EC"+firm_id$+customer_nbr$+".zip", err=*next

        progress!.setVisible(0)
        progress!.setValue(0)
        progress!.setMaximum(1)
        progressLabel!.setVisible(0)
        uploadStatus!.setVisible(0)
        uploadStatus!.setEnabled(0)
fi

ourWindow!.setCursor(0)

return

[Function (write_upload_data_close_files)]
rem ' -----------------------------------------------------------------rem ' write_upload_data_close_filesrem ' -----------------------------------------------------------------

write_upload_data_close_files:

close(infile)
if infileType$="string" then
    bufferedReader!.close()
fi

erase finalUploadFileName$,err=*next

if twofile then
    close(serfile)
    erase finalSerFileUploadFilename$,err=*next
fi

return

[Function (write_upload_data_get_filetype)]
rem ' -----------------------------------------------------------------rem ' write_upload_data_get_filetyperem ' -----------------------------------------------------------------

write_upload_data_get_filetype:

rem ' what is the file ype
uploadstatus$="",upload_go=0
upl_filename$=infilePFX$+"ENDUSERTEMPLATE"
uploadfile$=indir$+upl_filename$

gosub unpack_jar_file

infile=unt
twofile=0; rem ' if twofile is true we are working with an upload from the standalone app

open(infile,err=type_step2)uploadfile$
trash = FNaddChannelToList(infile)
goto type_fileopen

type_step2:
open(infile,err=type_step3)uploadfile$+".tab"
trash = FNaddChannelToList(infile)
goto type_fileopen

type_step3:
open(infile,err=type_step4)uploadfile$+".vky"
trash = FNaddChannelToList(infile)
goto type_fileopen

type_step4:
upl_filename$=infilePFX$+"ENDUSERS.vky"
uploadfile$=indir$+upl_filename$
open(infile,err=type_bad_file)uploadfile$
trash = FNaddChannelToList(infile)
twofile=1; rem ' twofile - true indicates an upload from the standalone app
serfile$=infilePFX$+"SERIALNUMBERS.vky"
serUploadfile$=indir$+serfile$
serfile=unt
open(serfile,err=type_step4_fail)serUploadfile$
trash = FNaddChannelToList(serfile)
goto type_fileopen
type_step4_fail:
close(infile)
goto type_bad_file

type_bad_file:
params!=ourAPI!.makeVector()
params!.add("EC"+firm_id$+customer_nbr$+"ENDUSERTEMPLATE")
params!.add("EC"+firm_id$+customer_nbr$+"ENDUSERS.vky")
params!.add("EC"+firm_id$+customer_nbr$+"SERIALNUMBERS.vky")
msg$=translator!.getMessage("file.not.found.msg",params!)
title$=translator!.getMessage("file.not.found.title")
resp=msgbox(msg$ ,0+16,title$)
goto fupdata_done

type_fileopen:
upFileInfo!=ourAPI!.getFileSystem().getFileInfo(infile)
finalUploadFileName$=upFileInfo!.getFilename()
if upFileInfo!.getFileType() = 3 then
    params!=ourAPI!.makeVector()
    params!.add(upl_filename$)
    msg$=translator!.getMessage("string.file.proc.msg",params!)
    uploadstatus$=msg$
    uploadtotrecs = int(upFileInfo!.getFileSize()/65) 
    isText=1
    upload_go=1
    inFile! = new java.io.File(upFileInfo!.getFilename())
    fileReader! = new java.io.FileReader(inFile!)
    bufferedReader! = new java.io.BufferedReader(fileReader!)
else
    if upFileInfo!.getFileType() = 13 then
        params!=ourAPI!.makeVector()
        params!.add(0,upl_filename$)
        params!.add(1,str(upFileInfo!.getCurrentRecords()))
        msg$=translator!.getMessage("vkeyed.file.proc.msg", params!)
        uploadstatus$=msg$
        uploadtotrecs = upFileInfo!.getCurrentRecords()        
        upload_go=1
        isText=0
    fi
fi


if !upload_go then
    msg$=translator!.getMessage("bad.filetype.msg")
    title$=translator!.getMessage("bad.filetype.title")
    resp=msgbox(msg$, 0+16,title$)
fi

fupdata_done:
return

[Function (write_upload_data_read_record)]
rem ' -----------------------------------------------------------------rem ' write_upload_data_read_recordrem ' -----------------------------------------------------------------

write_upload_data_read_record:

wudrr_endflag=1

if infileType$="vkeyed" then
    read record(infile,end=wudrr_end_reached)rec$
    wudrr_endflag=0
else
    line!=bufferedReader!.readLine()
    if line! <> null()  and line! <> "" then
        rec$=line!
        rec$=rec$+fill(25,$09$); rem 'add an extra tabs since excel seems to strip some randomly
        wudrr_endflag=0
    fi
fi

wudrr_end_reached:
return

[Function (write_upload_data_skip_header_records)]
rem ' -----------------------------------------------------------------rem ' write_upload_data_skip_header_recordsrem ' -----------------------------------------------------------------

write_upload_data_skip_header_records:

rem ' first two lines in the string file may be the template and the col header reocrd

wudshr_count=-1
while 1
    line!=bufferedReader!.readLine()
    if line! = null() then break
    rec$=line!+$0909$
    rem ' if it is a real record active will be Y or N
    if rec.active$<>"Y" and rec.active$<>"N" then
        wudshr_count=wudshr_count+1
    else
        break
    fi
wend
rem ' reset the reader
bufferedReader!.close()
fileReader!=new java.io.FileReader(inFile!)
bufferedReader!=new java.io.BufferedReader(fileReader!)

if wudshr_count>-1 then
    for rcount=0 to wudshr_count
        line!=bufferedReader!.readLine()
    next rcount
fi

return

[Function (write_upload_get_files)]
rem ' -----------------------------------------------------------------rem ' write_upload_get_filesrem ' -----------------------------------------------------------------

write_upload_get_files:

rem ' make the temporary working directory
infilePFX$="EC"+firm_id$+customer_nbr$
indir$=temp_dir$+infilePFX$+"/"
mkdir indir$

gotFiles=0

filter$="all types" + $0a$ + "*.*" + $0A$ + "vkeyed" + $0a$ + "*.vky" + $0a$ + "jar" + $0a$ + "*.jar" + $0a$
filter$=filter$ + "zip" + $0a$ + "*.zip" + $0a$ + "text" + $0A$+ "*.tab" + $0a$
while 1
    success$ = clientServerFileMover!.uploadToServer("upload.file.prompt",clientPath$,"EC"+firm_id$+customer_nbr$,"",filter$,indir$)
    if success$="::GOOD::" then
        gotFiles=1
        msg$=translator!.getMessage("upload.another.file")
        title$=translator!.getMessage("upload.another.file.title")
        response = msgbox(msg$,4+32,title$)
        if response <> 6 then
            break
        fi
    else
        break
    fi
wend

return

