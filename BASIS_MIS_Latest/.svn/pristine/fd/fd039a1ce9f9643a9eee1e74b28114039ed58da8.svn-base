   rem ' Program Name: invoice.src
   rem ' Resource File: invoice.arc
   rem ' Generated by GUIBuilder 4.0 (May 23, 2023 at 17:34:12)
   rem ' Portions Copyright (C) 1997-2023 BASIS International Ltd.  All rights reserved.

   seterr gb__no_arg
   enter gb__arg$; gb__args=-1,gb__args=pos($0a$=fattr(gb__arg$,$$),1,0)
gb__no_arg:
   seterr 0

   precision 2
   gb__show_forms=2; rem ' Create all forms at the beginning

   rem ' gb_ini.cod - GUIBuilder generated programs: Initialization
   rem ' Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
   rem
   rem ' ***** I N I T I A L I Z A T I O N *****
   rem ' The first part of the initialization section ensures that the
   rem ' environment will support the requirements of the generated 
   rem ' program.  These requirements are:
   rem '     1.  The interpreter supports GUI
   rem '     2.  The interpreter is Visual PRO/5 2.0 or above
   rem '     3.  A SYSGUI device is defined in config.bbx
   rem

   rem ' 1. Make sure the interpreter in use supports GUI
   if info(6,0)="" then
:     print 'cs',;
:     print "This interpreter does not support GUI.";
:     print "Press any key to continue.",;
:     read record(0,siz=1);
:     stop
   rem

   rem ' 2. Make sure the interpreter in use is Visual PRO/5 2.0 or above
   if sys<"LEVEL 5" or (cvs(sys,3)="LEVEL 5" and cvs(rev,3)<"REV 2.0") then
:     input(0,err=gb__eoj)
:      	'ask'("",4,"Requires at least Visual PRO/5 Rev. 2.0.  "+
:      	"This program will now terminate.","&Terminate:Y"+$0a$),
:      	'ee',gb__temp$,'be',;
:     goto gb__eoj
   rem

   seterr gb__err; setesc gb__esc

   rem ' 3. Check config.bbx for SYSGUI and SYSPRINT devices
   gb__alias=0,gb__sysgui$="",gb__sysprint$=""
   dim gb__tsk$:"type:u(1),opens:u(1),name:c(1*=0),dname:c(1*=0),pname:c(1*=0),modes:c(1*=0)"

gb__check_tsk:
   gb__tsk$=tsk(gb__alias,err=gb__done_with_tsk)

   if gb__sysgui$="" and cvs(gb__tsk.pname$,7)="SYSGUI" then
:     gb__sysgui$=gb__tsk.name$

   if gb__sysprint$="" and cvs(gb__tsk.pname$,7)="SYSPRINT" then
:     gb__sysprint$=gb__tsk.name$

   if gb__sysgui$="" or gb__sysprint$="" then
:     gb__alias=gb__alias+1;
:     goto gb__check_tsk

gb__done_with_tsk:
   if gb__sysgui$="" then
:     gb__sysgui$="not defined in config.bbx";
:     goto gb__cannot_open_sysgui

   rem ' Open SYSGUI device
   gb__sysgui=unt; open (gb__sysgui,err=gb__cannot_open_sysgui)gb__sysgui$
   goto gb__opened_sysgui

gb__cannot_open_sysgui:
   gb__err$="Unable to open the SYSGUI device (alias "+gb__sysgui$+
:    ") in program "+pgm(-2)+".  Visual PRO/5 cannot maintain a graphical "+
:    "user interface without this device.  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"SYSGUI error")
   goto gb__eoj

gb__opened_sysgui:
   dim gb__sysgui_fin$:tmpl(gb__sysgui,ind=0)
   gb__sysgui_fin$=fin(gb__sysgui)

   rem ' splash screen, if any, can go here
   rem ' splash=gb__sysgui_fin.available_context
   rem ' print (gb__sysgui)'context'(splash),'window'(0,0,500,400,$$,$01000000$),'image'(0,0,500,400,"mysplash.gif")

   dim gb__event$:tmpl(gb__sysgui)
   gb__event=len(gb__event$)

   rem ' Open the resource file (try both .arc and .brc if necessary)
   gb__resource$="invoice.arc"
   if pos("ec.bbj"= pgm(-2)) then gosub prep_routine
   gb__handle=resopen(gb__resource$,err=gb__resource_fallback);
:  goto gb__opened_resource

gb__resource_fallback:
   gb__temp=pos(".brc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"arc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

   gb__temp=pos(".arc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"brc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

gb__cannot_open_resource:
   gb__err$="Unable to open resource file invoice.arc"+
:    " in program "+pgm(-2)+".  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"Resource file error")
   goto gb__eoj

   rem ' ------------------------------------------------------------------------
   rem ' Functions to manipulate screens and data
   rem ' ------------------------------------------------------------------------

   rem ' Get data from screen into template record
   def fngb__get_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put data from template record to screen
   def fngb__put_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Get fields from screen into template record
   def fngb__get_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put fields from template record to screen
   def fngb__put_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Set focus to specified Window ID
   def fngb__focus_win_id(xx__win_id$)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui,err=gb__focus_win_id)'context'(xx__context),'focus'(0),'raise',
      return xx__context
   gb__focus_win_id:
      xx__form=fngb__form(xx__win_id$)
      print (gb__sysgui)'context'(xx__context),
:                       'resource'(len(gb__resource$[xx__form])),gb__resource$[xx__form],
      return xx__context
   fnend


   rem ' Get form number given Window ID
   def fngb__form(xx__win_id$)
       gb__form=-1,xx__form_id$=xx__win_id$
       xx__form=pos("."=xx__form_id$)
       if xx__form then
:         xx__form_id$=xx__form_id$(1,xx__form-1)
       for xx__form=1 to gb__forms
           if gb__form.id$[xx__form]=xx__form_id$ then
:             gb__form=xx__form;
:             break
       next xx__form
       return gb__form
   fnend


   rem ' Set focus to specified Window ID + Control ID
   def fngb__focus_ctl_id(xx__win_id$,xx__ctl_id)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Set focus to specified Window ID + Control Name
   def fngb__focus_ctl_name(xx__win_id$,xx__ctl_name$)
      dim xx__rec$:fngb__template$(xx__win_id$)
      xx__ctl_id=num(fattr(xx__rec$,xx__ctl_name$,"ID"))
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Get Window ID given Context
   def fngb__win_id$(xx__context)
       xx__win_id$=""
       for xx__window=1 to gb__windows
           if gb__window.context[xx__window]=xx__context then
:             xx__win_id$=gb__window.win_id$[xx__window];
:             break
       next xx__window
       return xx__win_id$
   fnend


   rem ' Get Context given Window ID
   def fngb__context(xx__win_id$)
      gb__window=-1,gb__context=-1
      for xx__window=1 to gb__windows
          if gb__window.win_id$[xx__window]=xx__win_id$ then
:            gb__window=xx__window,gb__context=gb__window.context[gb__window];
:            break
      next xx__window
      if gb__context>=0 or gb__window<0 then
:        return gb__context
      return fngb__window(xx__win_id$)
   fnend


   rem ' Get Window Information given Window ID
   def fngb__win_info$(xx__win_id$)
      dim gb__win_info$(0)
      xx__context=fngb__context(xx__win_id$)
      if xx__context<0 then
:        return gb__win_info$
      dim gb__win_info$:"class:u(1),type:u(1),hidden:u(1),disabled:u(1),"
:                      +"context:u(2),eventmask:u(4),flags:u(4),focus:u(2),"
:                      +"x:i(2),y:i(2),w:u(2),h:u(2),title:c(16*=)"
      gb__win_info$=ctrl(gb__sysgui,0,4,xx__context)
:                  +ctrl(gb__sysgui,0,8,xx__context)
:                  +bin(xx__context,2)
:                  +sendmsg(gb__sysgui,0,21,0,"",xx__context)
:                  +sendmsg(gb__sysgui,0,22,0,"",xx__context)
:                  +ctrl(gb__sysgui,0,2,xx__context)
:                  +ctrl(gb__sysgui,0,0,xx__context)
:                  +ctrl(gb__sysgui,0,1,xx__context)
      return gb__win_info$
   fnend

gb__opened_resource:

   rem ==================== End of gb_ini.cod ====================

rem ' Instantiate form(s)

gb__forms = 2
dim gb__form_context[gb__forms],gb__resource$[gb__forms],gb__form$:"id[2]:c(4*=10)"

gb__windows=2; rem ' includes child windows, if any
gb__win_id$ = "101"

dim gb__win$:"INVOICES:I(2),SAMREBATE:I(2)"

gb__win.INVOICES=-1
gb__win.SAMREBATE=-1

dim gb__window$:"win_id[2]:c(8*=10),win_name[2]:c(16*=10),context[2]:n(4*=10)"
gb__window.win_id$[1]="101",gb__window.win_name$[1]="INVOICES",gb__window.context[1]=-1,gb__form.id$[1]="101"
gb__window.win_id$[2]="102",gb__window.win_name$[2]="SAMREBATE",gb__window.context[2]=-1,gb__form.id$[2]="102"

gb__context = fngb__window("101"); rem ' invoices
gb__context = fngb__window("102"); rem ' samRebate

rem ' Instantiate the form corresponding to a given window

   def fngb__window(xx__win_id$)
      gb__window = 0
      for xx__window=1 to gb__windows
         if gb__window.win_id$[xx__window]=xx__win_id$ then
:           gb__window = xx__window;
:           break
      next xx__window
      if gb__window = 0 then 
:        return -1
      if gb__window.context[gb__window] >= 0 then
:        return gb__window.context[gb__window]

      switch fngb__form(xx__win_id$)

         case 1; rem ' Load Form ID 101 (INVOICES)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[1]=gb__sysgui_fin.available_context
         gb__resource$[1]=resget(gb__handle,1,101)
         print (gb__sysgui)'context'(gb__form_context[1]),'resource'(len(gb__resource$[1])),gb__resource$[1]
         gb__win.INVOICES=gb__form_context[1]
         gb__window.context[1]=gb__win.INVOICES
         break

         case 2; rem ' Load Form ID 102 (SAMREBATE)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[2]=gb__sysgui_fin.available_context
         gb__resource$[2]=resget(gb__handle,1,102)
         print (gb__sysgui)'context'(gb__form_context[2]),'resource'(len(gb__resource$[2])),gb__resource$[2]
         gb__win.SAMREBATE=gb__form_context[2]
         gb__window.context[2]=gb__win.SAMREBATE
         break
      swend

      return gb__window.context[gb__window]
   fnend

rem ' Get template for controls on a given window

   def fngb__template$(xx__win_id$)
      if xx__win_id$="101" then return "PMT_DUE_LBL:C(64*=0):ID=125 TYPE=17 X=300 Y=175 W=70 H=25:,PMT_DUE_DT:C(64*=0):ID=130 TYPE=16 X=375 Y=170 W=95 H=25:,INVOICE:C(64*=0):ID=140 TYPE=22 X=35 Y=250 W=435 H=180:,INVOICE_LIST:C(255*=0):ID=150 TYPE=18 X=272 Y=65 W=100 H=82:,PRINT_BTN:C(1*=0):ID=300 TYPE=11 X=380 Y=460 W=90 H=25:,EXIT_BTN:C(1*=0):ID=250 TYPE=11 X=685 Y=460 W=90 H=25:,EMAIL_ADDR:C(64*=0):ID=170 TYPE=16 X=35 Y=460 W=340 H=25:,INVOICE_LIST_LBL:C(64*=0):ID=550 TYPE=17 X=272 Y=40 W=100 H=20:,PAY_LIST:C(255*=0):ID=580 TYPE=18 X=532 Y=65 W=100 H=82:,PMT_LIST_LBL:C(64*=0):ID=585 TYPE=17 X=532 Y=40 W=100 H=20:,ADD:C(1*=0):ID=200 TYPE=11 X=407 Y=65 W=90 H=25:,REMOVE:C(1*=0):ID=220 TYPE=11 X=407 Y=110 W=90 H=25:,BAL_DUE_LBL:C(64*=0):ID=115 TYPE=17 X=25 Y=225 W=110 H=20:,PMTS_LBL:C(64*=0):ID=105 TYPE=17 X=25 Y=200 W=110 H=20:,PMTS:C(255*=0):ID=586 TYPE=19 X=140 Y=195 W=330 H=90:,EMAIL_TXT:C(64*=0):ID=587 TYPE=17 X=40 Y=440 W=250 H=20:,NEXT:C(1*=0):ID=240 TYPE=11 X=590 Y=460 W=90 H=25:,CREDIT_CARD_GRP:C(1*=0):ID=588 TYPE=21 X=590 Y=155 W=180 H=300:,CREDIT_CARD_LIST:C(255*=0):ID=589 TYPE=19 X=505 Y=465 W=150 H=150:,NUMBER:C(64*=0):ID=590 TYPE=104 X=600 Y=205 W=160 H=25:,NAME:C(64*=0):ID=591 TYPE=104 X=600 Y=260 W=160 H=25:,EXPIRY_MONTH:C(255*=0):ID=593 TYPE=19 X=600 Y=370 W=100 H=120:,EXPIRY_YEAR:C(255*=0):ID=594 TYPE=19 X=700 Y=370 W=60 H=120:,CC_TYPE:C(255*=0):ID=592 TYPE=19 X=600 Y=315 W=160 H=90:,CC_NUMBER_LBL:C(64*=0):ID=595 TYPE=17 X=600 Y=185 W=100 H=20:,CC_NAME_LBL:C(64*=0):ID=596 TYPE=17 X=600 Y=240 W=120 H=20:,TOTAL:C(64*=0):ID=597 TYPE=16 X=652 Y=65 W=118 H=25:,STATIC_TEXT:C(64*=0):ID=598 TYPE=17 X=680 Y=40 W=85 H=20:,FILE_LBL:C(64*=0):ID=599 TYPE=17 X=550 Y=465 W=40 H=15:,TYPE_LBL:C(64*=0):ID=601 TYPE=17 X=600 Y=295 W=70 H=20:,EXPIRE_LBL:C(64*=0):ID=602 TYPE=17 X=600 Y=350 W=100 H=20:,INV_GRP:C(1*=0):ID=603 TYPE=21 X=20 Y=155 W=470 H=335:,INV_TOT_LBL:C(64*=0):ID=604 TYPE=17 X=25 Y=175 W=110 H=20:,BAL_DUE:C(64*=0):ID=120 TYPE=16 X=140 Y=220 W=120 H=25:,INV_TOT:C(64*=0):ID=605 TYPE=16 X=140 Y=170 W=120 H=25:,START_INV_LBL:C(64*=0):ID=606 TYPE=17 X=20 Y=66 W=95 H=20:,START_INVOICE:C(64*=0):ID=607 TYPE=104 X=142 Y=65 W=90 H=25:,INV_TYPE:C(255*=0):ID=608 TYPE=19 X=20 Y=110 W=95 H=120:,DISPLAY:C(1*=0):ID=609 TYPE=11 X=142 Y=110 W=90 H=25:,CREDIT_BTN:C(1*=0):ID=610 TYPE=11 X=330 Y=220 W=140 H=25:,APPLY_SAM_BTN:C(1*=0):ID=100 TYPE=11 X=652 Y=110 W=118 H=25:,HEADERTEXT2:C(64*=0):ID=101 TYPE=17 X=0 Y=0 W=790 H=25:,GROUP_CONTROL:C(1*=0):ID=102 TYPE=21 X=260 Y=28 W=385 H=125:,SPLITCCBTN:C(1*=0):ID=612 TYPE=11 X=495 Y=460 W=90 H=25:,CREDIT_CARD_GRP_2:C(1*=0):ID=613 TYPE=21 X=400 Y=155 W=180 H=255:,NUMBER2:C(64*=0):ID=103 TYPE=104 X=410 Y=205 W=160 H=25:,NAME2:C(64*=0):ID=104 TYPE=104 X=410 Y=260 W=160 H=25:,CC_NUMBER_LBL_2:C(64*=0):ID=106 TYPE=17 X=410 Y=185 W=100 H=20:,CC_NAME_LBL_2:C(64*=0):ID=107 TYPE=17 X=410 Y=240 W=120 H=20:,EXPIRY_MONTH_2:C(255*=0):ID=108 TYPE=19 X=410 Y=370 W=100 H=120:,EXPIRY_YEAR_2:C(255*=0):ID=109 TYPE=19 X=510 Y=370 W=60 H=120:,CC_TYPE_2:C(255*=0):ID=110 TYPE=19 X=410 Y=315 W=160 H=90:,TYPE_LBL_2:C(64*=0):ID=111 TYPE=17 X=410 Y=290 W=70 H=20:,EXPIRE_LBL_2:C(64*=0):ID=112 TYPE=17 X=410 Y=350 W=100 H=20:,AMOUNT_LBL_2:C(64*=0):ID=113 TYPE=17 X=410 Y=405 W=90 H=20:,AMOUNT2:C(64*=0):ID=114 TYPE=16 X=410 Y=425 W=160 H=25:,AMOUNT:C(64*=0):ID=116 TYPE=16 X=600 Y=425 W=160 H=25:,AMOUNT_LBL:C(64*=0):ID=117 TYPE=17 X=600 Y=405 W=90 H=20:,BLANK:C(64*=0):ID=611 TYPE=17 X=590 Y=155 W=180 H=300:"
      if xx__win_id$="102" then return "SAMREBATECRDMEMO:C(64*=0):ID=100 TYPE=16 X=150 Y=20 W=120 H=25:,SAMREBATECRDAMT:C(64*=0):ID=101 TYPE=16 X=410 Y=20 W=120 H=25:,SAMREBATELABEL:C(64*=0):ID=102 TYPE=17 X=20 Y=20 W=120 H=25:,SRCANCELBTN:C(1*=0):ID=103 TYPE=11 X=540 Y=320 W=90 H=25:,CALCREBATEPROGRESS:C(1*=0):ID=104 TYPE=112 X=450 Y=360 W=180 H=30:,CALCREBATELABEL:C(64*=0):ID=105 TYPE=17 X=240 Y=360 W=200 H=25:,INVOICEGRID:C(1*=0):ID=106 TYPE=107 X=29 Y=68 W=600 H=210:,AMTAPPLIED:C(64*=0):ID=107 TYPE=16 X=410 Y=290 W=120 H=25:,REMAININGCREDIT:C(64*=0):ID=109 TYPE=16 X=410 Y=320 W=120 H=25:,STATIC_TEXT:C(64*=0):ID=110 TYPE=17 X=250 Y=290 W=150 H=25:,STATIC_TEXT_111:C(64*=0):ID=111 TYPE=17 X=250 Y=320 W=150 H=25:,APPLYBTN:C(1*=0):ID=112 TYPE=11 X=540 Y=290 W=90 H=25:,STATIC_TEXT_113:C(64*=0):ID=113 TYPE=17 X=340 Y=20 W=60 H=25:"
      return ""
   fnend

rem ' -----------------------------------------------------------------
rem ' Init
rem ' -----------------------------------------------------------------
rem ' (1) Don't show borders on button controls
rem ' (2) Force XP borders on list and edit controls
seterr err_exit
setesc err_exit


use ::OpenInvoice.src::OpenInvoice

declare BBjSysGui sysgui!
declare BBjWindow window!
declare BBjWindow windowSAM!
declare BBjListBox payList!
declare BBjListBox invoiceList!
declare BBjVector invoices!
declare BBjVector invoicesExpanded!
declare OpenInvoice openInvoice!
declare BBjStaticText calcRebateLabel!
declare BBjProgressBar calcRebateProgress!
declare BBjEditBox samRebateCrdMemo!
declare BBjEditBox samRebateCrdAmt!
declare BBjStandardGrid invoiceGrid!
declare BBjEditBox amtApplied!
declare BBjEditBox remainingCredit!
declare BBjButton applyBtn!
declare BBjEditBox total!
declare BBjGridCellEvent gridCellEvent!

sysgui!=bbjapi().getSysGui()
rem ' if (info(3,6)="0" and info(0,0)="Windows XP" and info(1,1)>="1.4.2")
rem ' :  or (info(3,6)<>"0" and
rem ' :  bbjapi().getThinClient(err=*next).getClientOSName(err=*next)="Windows XP" and
rem ' :  bbjapi().getThinClient(err=*next).getClientJavaVersion(err=*next)>="1.4.2")
rem ' :  then bbjapi().getSysGui().setLookAndFeel("WindowsXPLookAndFeel")
DIM DATE$:"default:c(32*=0),sm[12]:c(3*=0),m[12]:c(32*=0),sd[7]:c(3*=0),d[7]:c(32*=0)"
date$=stbl("!DATE")
date.default$="%Mz/%Dz/%Y"
dummy$=stbl("!DATE",date$)
init:
old_context=-1
x0=-1
y0=-1
chan$=""
firm$=""
cust$=""
user_code$=""
lang$=""
while 1
  p=pos($0a$=gb__arg$)
  if p=0 then break
  tmp$=gb__arg$(1,p-1)
  gb__arg$=gb__arg$(p+1)
  if old_context<0 then old_context=num(tmp$);continue
  if x0<0 then x0=num(tmp$);continue
  if y0<0 then y0=num(tmp$);continue
  if firm$="" then firm$=tmp$;continue
  if cust$="" then cust$=tmp$;continue
  if user_code$="" then user_code$=tmp$;continue
  if lang$="" then lang$=tmp$;continue
wend

while lang$<>"EN" 
  lang__resource$="invoice_"+cvs(lang$,8)+".arc"
  reschan=unt
  resok=0
  open(reschan,err=*next)lang__resource$;resok=1
  close(reschan,err=*next)
  if resok=0 then break
  resclose(gb__handle,err=*next)
  print (gb__sysgui)'context'(gb__form_context[1]),'destroy'(0)
  gb__handle=resopen(lang__resource$)
  gb__resource$[1]=resget(gb__handle,1,101)
  print (gb__sysgui)'context'(gb__form_context[1]),'resource'(len(gb__resource$[1])),gb__resource$[1]
  break
wend
call "ec_open::ARM01";chan$=chan$+str(ARM01:"000")
call "ec_open::ART01";chan$=chan$+str(ART01:"000")
call "ec_open::ART11";chan$=chan$+str(ART11:"000")
call "ec_open::art03";chan$=chan$+str(art03:"000") 
call "ec_open::ART13";chan$=chan$+str(ART13:"000")
call "ec_open::are03";chan$=chan$+str(are03:"000") 
call "ec_open::are13";chan$=chan$+str(are13:"000")
call "ec_open::ART73";chan$=chan$+str(ART73:"000")
call "ec_open::ART83";chan$=chan$+str(ART83:"000")
call "ec_open::ECM01";chan$=chan$+str(ECM01:"000")
call "ec_open::ECM02";chan$=chan$+str(ECM02:"000")
call "ec_open::ARM10F";chan$=chan$+str(ARM10F:"000")
call "ec_open::TMM03";chan$=chan$+str(TMM03:"000")
call "ec_open::TMM01";chan$=chan$+str(TMM01:"000")

arm10=arm10f
fpath$=fid(art01),fpath$=fpath$(9)
fpath$=fpath$(1,len(fpath$)-6)
call "templates.pgm::are01"
call "templates.pgm::are11"
call "templates.pgm::arm01"
are01=0
are11=0

CALL "ec_open::ARM02"
CALL "ec_open::ARM02_CANADA"
call "ec_open::ART03_CANADA"
call "templates.pgm::CANADIAN_EXCH"

rem ' get master records
read record(arm01,key=firm$+cust$)arm01$
read record(arm02,key=firm$+cust$+"  ")arm02$

rem ' is this a Canadian Customer (distributor) - used for Descore only
canadian_customer = 0
read record(ARM02_CANADA, key = firm$ + cust$, dom=*next)ARM02_CANADA$; canadian_customer = 1

rem ' is this a Canadian reseller
found = 0, canadian_reseller = 0
read record(tmm01, key = firm$ + cust$ + "000000", dom=*next)TMM01$; found = 1
if found then
    if tmm01.country_code$ = "CA" then 
        canadian_reseller = 1
   fi
fi

cc_cmd$=STBL("CC_CMD",ERR=*NEXT)
cc_dir$=STBL("CC_DIR",ERR=*NEXT)
today_jul=jul(0,0,0)

win_id_invoice$ = fngb__win_id$(gb__win.invoices)
dim win_invoice$:fngb__template$(win_id_invoice$)
win_id_samRebate$ = fngb__win_id$(gb__win.samRebate)
dim win_samRebate$:fngb__template$(win_id_samRebate$)

REM Determine if running in an Applet or BUI
rem ' if info(3,6) = "2" or info(3,6) = "5" then
rem '   REM Get the current window and remove it's border
rem '   window! = sysgui!.getWindow(gb__win.invoices)
rem '   if (window! <> NULL()) then
rem '     window!.setTitleBarVisible(0)
rem '   endif
rem ' endif

win_invoice$=fngb__get_screen$(win_id_invoice$,win_invoice$)

rem ' hide the calling window
rem ' print(gb__sysgui)'context'(old_context),'hide'(0),

print (gb__sysgui)'context'(gb__win.invoices),'move'(0,x0,y0),'enable'(0),'show'(0),'focus'(0),'raise'
PRINT (gb__sysgui)'SETCURSOR'(3)
gosub build_xref
chan$=chan$+str(xref:"000")
mask$="#,###,##0.00-"
blank_id=num(fattr(win_invoice$,"blank","ID"))
rem 'Credit cards can only be used in firm 01 right now
if firm$="01" and !canadian_reseller then 
  print (gb__sysgui)'context'(gb__win.invoices),'hide'(blank_id)
  BBjAPI().getSysGui().getWindow("invoices").getControl("splitCCBtn").setVisible(1)
  BBjAPI().getSysGui().getWindow("invoices").getControl("next").setVisible(1)
else
  print (gb__sysgui)'context'(gb__win.invoices),'show'(blank_id)
  BBjAPI().getSysGui().getWindow("invoices").getControl("splitCCBtn").setVisible(0)
  BBjAPI().getSysGui().getWindow("invoices").getControl("next").setVisible(0)
fi
invoice_list_id=num(fattr(win_invoice$,"invoice_list","ID"))
pay_list_id=num(fattr(win_invoice$,"pay_list","ID"))
type_list_id=num(fattr(win_invoice$,"inv_type","ID"))
credit_btn_id=num(fattr(win_invoice$,"credit_btn","ID"))

rem ' hide away the Apply SAM rebate button
apply_SAM_Rebate_id = num(fattr(win_invoice$,"apply_sam_btn","ID"))
window! = sysgui!.getWindow(gb__win.invoices)
window!.getControl(apply_SAM_Rebate_id).setVisible(0)

rem ' get a reference to the SAM Rebate window
windowSAM! = sysgui!.getWindow(gb__win.samRebate)
rem ' get a reference to the invoice grid on the SAM Rebate window
invoiceGrid! = windowSAM!.getStandardGrid("invoiceGrid")

win_invoice.inv_type$="Unpaid"+$0a$+"Paid"+$0a$+"Both"+$0a$+$ff$+"0"
win_invoice$=fngb__put_fields$(win_id_invoice$,win_invoice$,"inv_type")
readdir=-1
invoice$=""
stayopen=0
gosub read_art01
if invlist$<>"" then invlist$=invlist$+$ff$+"0"
win_invoice.invoice_list$=invlist$
if firm$="01" then
  gosub read_ecm02
  temp$=""
  year=NUM(DATE(0:"%Yl"))
  FOR temp=year TO year+10
    temp$=temp$+STR(temp)+$0A$
  NEXT temp
  win_invoice.expiry_year$=temp$ + $ff$ + str(-1)
  win_invoice.expiry_year_2$=temp$ + $ff$ + str(-1)
  temp$=""
  FOR temp=1 TO 12
    temp$=temp$+DATE(JUL(year,temp,1):"%Ml")+$0A$
  NEXT temp
  win_invoice.expiry_month$=temp$ + $ff$ + str(-1)
  win_invoice.expiry_month_2$=temp$ + $ff$ + str(-1)
  win_invoice.cc_type$="Visa"+$0a$+"MasterCard"+$0a$+"AmericanExpress"+$0a$
  win_invoice.cc_type_2$="Visa"+$0a$+"MasterCard"+$0a$+"AmericanExpress"+$0a$
fi
win_invoice$=fngb__put_screen$(win_id_invoice$,win_invoice$)
list_id=invoice_list_id
gosub show_invoice
print(gb__sysgui)'focus'(invoice_list_id),'SETCURSOR'(0)

event_loop:
rem ' ---------------------------------------------------------------
rem ' Event Loop
rem ' ---------------------------------------------------------------

dim gb__closed[gb__windows]; rem ' track window status
dim gb__generic$:noticetpl(0,0); rem ' generic notice template
gb__eoj=0
goto gb__event

rem ' Load gb__notice$ string only if we're handling the event

gb__notice:
   gb__generic$=notice(gb__sysgui,gb__event.x%)
   dim gb__notice$:noticetpl(gb__generic.objtype%,gb__event.flags%)
   gb__notice$=gb__generic$
return

gb__event: repeat
   read record (gb__sysgui,siz=gb__event,err=gb__event_loop_end)gb__event$

   rem ' Get Window ID or Popup ID
   gb__win_id$=$$,gb__popup_id=gb__event.x*(gb__event.code$="P")
   if gb__popup_id=0 then gb__win_id$=fngb__win_id$(gb__event.context)

   rem ' Track whether event was handled
   gb__event_handled=0

   rem ' Handle events for Window ID 101 (invoices)
   while gb__win_id$="101"
      if gb__event.code$="X" then
:        gosub W101_C0_WIN_CLOSE;
:        gb__closed[1]=1;
:        gb__event_handled=1;
:        break
      if gb__event.id=100 and gb__event.code$="B" then
:        gosub W101_C100_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=114 and gb__event.code$="f" and gb__event.flags=0 then
:        gosub W101_C114_LOST_FOCUS;
:        gb__event_handled=1;
:        break
      if gb__event.id=116 and gb__event.code$="f" and gb__event.flags=0 then
:        gosub W101_C116_LOST_FOCUS;
:        gb__event_handled=1;
:        break
      if gb__event.id=150 and gb__event.code$="l" and gb__event.flags=0 then
:        gosub W101_C150_LIST_CLICK;
:        gb__event_handled=1;
:        break
      if gb__event.id=200 and gb__event.code$="B" then
:        gosub W101_C200_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=200 and gb__event.code$="f" and gb__event.flags=0 then
:        gosub W101_C200_LOST_FOCUS;
:        gb__event_handled=1;
:        break
      if gb__event.id=220 and gb__event.code$="B" then
:        gosub W101_C220_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=240 and gb__event.code$="B" then
:        gosub W101_C240_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=250 and gb__event.code$="B" then
:        gosub W101_C250_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=300 and gb__event.code$="B" then
:        gosub W101_C300_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=580 and gb__event.code$="l" and gb__event.flags=0 then
:        gosub W101_C580_LIST_CLICK;
:        gb__event_handled=1;
:        break
      if gb__event.id=589 and gb__event.code$="N" and gb__event.flags=2 then
:        gosub gb__notice;
:        gosub W101_C589_LIST_SELECT;
:        gb__event_handled=1;
:        break
      if gb__event.id=609 and gb__event.code$="B" then
:        gosub W101_C609_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=610 and gb__event.code$="B" then
:        gosub W101_C610_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=612 and gb__event.code$="B" then
:        gosub W101_C612_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      break; rem ' Catch unhandled events
   wend; rem ' End of Window ID 101


   rem ' Handle events for Window ID 102 (samRebate)
   while gb__win_id$="102"
      if gb__event.id=103 and gb__event.code$="B" then
:        gosub W102_C103_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=106 and gb__event.code$="N" and gb__event.flags=15 then
:        gosub gb__notice;
:        gosub W102_C106_GRID_CLICK_CURR;
:        gb__event_handled=1;
:        break
      if gb__event.id=112 and gb__event.code$="B" then
:        gosub W102_C112_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      break; rem ' Catch unhandled events
   wend; rem ' End of Window ID 102

   rem ' We're done when all windows have been closed.
   rem ' Developer can terminate event loop by setting
   rem ' gb__eoj=1 in any event handler.

   if !(gb__eoj) then
:     gb__eoj=1;
:     for gb__window=1 to gb__windows;
:        gb__eoj=(gb__eoj and gb__closed[gb__window]);
:     next gb__window

until gb__eoj

gb__event_loop_end: rem ' -------------------------------------

rem ' -----------------------------------------------------------------
rem ' EOJ
rem ' -----------------------------------------------------------------
err_exit:
if info(3,2)="thines" then escape
xresp = msgbox(str(err) + " " + errmes(-1) + " " + str(tcb(5)), 0 ,"debug")
pgm_exit:
while len(chan$)>2
  close(num(chan$(1,3)),err=*next)
  chan$=chan$(4)
wend
erase xref$,err=*next
gosub entry_close
if gb__forms and gb__sysgui then
  for gb__temp=1 to gb__forms
  print (gb__sysgui)'context'(gb__form_context[gb__temp]),'destroy'(0)
  next gb__temp
fi
rem ' print (gb__sysgui)'context'(old_context),'show'(0),'focus'(0),'flush',
close (gb__sysgui)
resclose(gb__handle,err=*next)
exit
rem gb_eoj.cod - GUIBuilder generated programs: End of Job
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** P R O G R A M   E X I T **************************************
rem
gb__eoj:
   if gb__forms and gb__sysgui then
:     for gb__temp=1 to gb__forms;
:        print (gb__sysgui)'context'(gb__form_context[gb__temp]),'destroy'(0);
:     next gb__temp

   if gb__sysgui then
:     close (gb__sysgui)

   resclose (gb__handle,err=gb__eoj_final)

gb__eoj_final:

   if tcb(13) then
:     exit
:  else
:     release

rem gb_err.cod - GUIBuilder generated programs: Error handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E R R O R   H A N D L E R ************************************
rem
gb__err:
   
   rem ' terminate on Network Lost Errors
   if err = 71 or err = 72 then goto gb__eoj

   gb__temp=msgbox(errmes(-1)+" ("+str(err)+")"+
:      " occurred at line "+str(tcb(5))+
:      " in program "+pgm(-2),5+48,"Error handler")

   if gb__temp=4 then
:     retry
:  else
:     goto gb__eoj

rem gb_esc.cod - GUIBuilder generated programs: Escape handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E S C A P E   H A N D L E R ***********************************
rem
gb__esc:
   
   rem ' terminate program when ESCAPE detected.
   goto gb__eoj
   
   gb__temp=msgbox("An ESCAPE has been detected.  Do you want to end this "+
:     "program?",4+32+256,"ESCAPE handler")
   if gb__temp=7 then
:     return
:  else
:     goto gb__eoj

rem ' -----------------------------------------------------------------
rem ' Is_Canadian_Invoice
rem ' -----------------------------------------------------------------

Is_Canadian_Invoice:

canadian_invoice = 0
read record(art03_canada, key = art03.firm_id$ + art03.customer_nbr$ + art03.invoice_date$ + art03.order_number$, dom = *next)art03_canada$; canadian_invoice = 1

if canadian_invoice then 
    currency$ = "CAD"
else
    currency$=""
fi

return
rem ' -----------------------------------------------------------------
rem ' apply_payment
rem ' -----------------------------------------------------------------

apply_payment:

applist$=""
totplus=0
totminus=0
memo$="CUST CR"

while 1
  rem ' paylist$ contains a list of invoices to be paid separated by linefeeds
  p=pos($0a$=paylist$)
  if p=0 then break
  invoice$=paylist$(1,p-1)
  paylist$=paylist$(p+1)
  stayopen=1
  
  rem ' get the balance on the invoice
  gosub read_art01
  rem ' balance is the balance still open on the invoice
  if balance=0 then continue
  
  if balance>0 then totplus = totplus + balance else totminus = totminus + balance
  
  rem ' is there a credit memo linked to the invoice, that has not been included
  invx.invoice2$=""
  readrecord(xref,key=invoice$,dom=*next)invx$
  if pos(invx.invoice2$=paylist$) and pos(invx.invoice2$=applist$)=0 then
    applist$=invoice$+":"+str(balance:mask$)+$0a$+applist$
    invoice$=invx.invoice2$
    stayopen=1
    gosub read_art01
    applist$=invoice$+":"+str(balance)+$0a$+applist$
    memo$="APPLY C"
  else
    if pos(invoice$=applist$)=0 then applist$=applist$+invoice$+":"+str(balance)+$0a$
  fi

wend


rem ' xresp = msgbox(applist$ + " totplus " + str(totplus) + " totminus " + str(totminus) + "  payment " + str(payment),0,"debug")


if partialPayment then PaymentAmount = PaymentAmount + totminus*(-1)

complete=0
if totplus=0 then return
if totminus=0 and firm$="02" then return

while 1
  rem ' applist$ contains a list of invoice to be paid along with the balance of the invoice, invoice # and balalce separated by a colon
  
  p=pos($0a$=applist$)
  if p=0 then break
  invoice$=applist$(1,p-1)
  applist$=applist$(p+1)
  
  p=pos(":"=invoice$)
  if p=0 then continue
  balance=fnnum(invoice$(p+1))
  invoice$=invoice$(1,p-1)  

  if balance<0 then
    x1=totplus+balance
    if x1<0 then balance=totplus*-1
    totplus=totplus+balance
  fi
    
  if balance>0 and payment<=0 then
    x1=totminus+balance
    if x1>0 then balance=totminus*-1
    totminus=totminus+balance
  fi
  
  gosub entry_open
  
  are01.firm_id$=firm$
  are01.customer_nbr$=cust$
  are01.receipt_date$=fndate$(today_jul)
  are01.cash_or_chk$="C"
  
  if firm$ = "01" then are01.cash_rec_cd$ = "WF " else are01.cash_rec_cd$ = "   "
  rem ' BSE cash_rec_cd is blank, BAS is WF for Wells Fargo
 
  are01.ar_check_nbr$="BC"+date(today_jul:"%M/%D")
  if payment<=0 or firm$="02" then are01.ar_check_nbr$=memo$
  are01.RESERVED_STR_3$=fill(4)
  are01.payment_amt=0
  
  readrecord(are01,key=are01$(1,25),dom=*next)are01$
  
  if partialPayment and balance > 0 then
      if PaymentAmount < balance then
          balance = PaymentAmount
          PaymentAmount = 0
      else
          if PaymentAmount = 0 then
              continue
          else
              rem ' PaymentAmount is greater than balance
              PaymentAmount = PaymentAmount - balance
          fi
      fi
  fi
  
  are01.payment_amt=are01.payment_amt+balance
  are01$=field(are01$)
  writerecord(are01,key=are01$(1,25))are01$
  
  dim are11$:fattr(are11$)
  are11.firm_id$=firm$
  are11.customer_nbr$=cust$
  are11.receipt_date$=are01.receipt_date$
  
  if firm$ = "01" then are11.cash_rec_cd$ = "WF " else are11.cash_rec_cd$ = "   "
  rem ' BSE cash_rec_cd is blank, BAS is WF for Wells Fargo
  
  are11.ar_check_nbr$=are01.ar_check_nbr$
  are11.ar_inv_nbr$=invoice$
  are11.apply_amt=0
  
  readrecord(are11,key=are11$(1,32),dom=*next)are11$
  
  are11.apply_amt=are11.apply_amt+balance
  are11.discount_amt = 0
  are11$=field(are11$)
  writerecord(are11,key=are11$(1,32))are11$
  
  complete=1
wend

return
rem ' -----------------------------------------------------------------
rem ' build_xref
rem ' -----------------------------------------------------------------

build_xref:
xref$=stbl("TEMP")+firm$+cust$+cvs(user_code$,3)+"INVXREF"
erase xref$,err=*next
mkeyed xref$,[1:1:7],0,20
dim invx$:"invoice:c(7),invoice2:c(7)"
xref=unt
open(xref)xref$
looping=1

art01k$=firm$+"  "+cust$
read (art01,key=art01k$+"9999999",dom=*next)
while looping
  read record(art01,dir=-1,end=*break)art01$
  if pos(art01k$=art01$)<>1 then if looping=1 then continue else break
  looping=2
  if art01.invoice_amt>0 then continue
  k$=firm$+"  "+cust$+art01.ar_inv_nbr$
  inv_jul=fnaonjul(art01.invoice_date$)
  i$=""
  read(art13,key=k$,dom=*next)
  while 2
    readrecord(art13,end=*break)art13$
    if pos(k$=art13$)<>1 then break
    if today_jul-inv_jul > 365 then looping=0
    x$=cvs(art13.order_memo$,7)
    if len(x$)>6 then  
      readrecord(art03,key=firm$+"  "+cust$+x$(1,7)+"000",dom=*endif)art03$
      i$=x$(1,7) 
      break
    fi
    if art13.line_code$<>"M" then continue
    p1=pos("CREDIT"=x$) 
    p2=pos("INVOICE"=x$) 
    if p1 * p2 = 0 then continue
    t$=""
    for i=p2+6 to len(x$)
      if pos(x$(i,1)="0123456789") then t$=t$+x$(i,1)
    next i
    j$=str(num(t$):"0000000")
    readrecord(art03,key=firm$+"  "+cust$+j$+"000",dom=*continue)art03$
    i$=j$
  wend
  if i$="" then continue
  invx.invoice$=art01.ar_inv_nbr$
  invx.invoice2$=i$
  invx$=field(invx$)
  writerecord(xref)invx$
  invx.invoice2$=art01.ar_inv_nbr$
  invx.invoice$=i$
  invx$=field(invx$)
  writerecord(xref)invx$
wend

return
rem ' -----------------------------------------------------------------
rem ' calcPaymentSplit
rem ' -----------------------------------------------------------------

calcPaymentSplit:

    paymentMax$ = BBjAPI().getSysGui().getWindow("invoices").getControl("total").getText() 
    paymentMax = num(fnStripNumFormat$(paymentMax$))
    ccAmount1! = Cast(BBjEditBox, BBjAPI().getSysGui().getWindow("invoices").getControl("Amount"))
    
if splitPaymentSet then

    ccAmount2! = Cast(BBjEditBox, BBjAPI().getSysGui().getWindow("invoices").getControl("Amount2"))
    
    ccAmt1$ = ccAmount1!.getText()
    ccAmt1$ = fnStripNumFormat$(ccAmt1$)
        
    isNumeric = 0
    ccAmt1 = round(num(ccAmt1$, err=*next)); isNumeric = 1
    
    rem ' validate ccAmt1
    if !isNumeric then
      ccAmount1!.focus()
      return
    fi

    ccAmt2$ = ccAmount2!.getText()
    ccAmt2$ = fnStripNumFormat$(ccAmt2$)

    isNumeric = 0
    ccAmt2 = round(num(ccAmt2$, err=*next)); isNumeric = 1
    
    rem ' validate ccAmt2
    if !isNumeric then
      ccAmount2!.focus()
      return
    fi
    
    if ccAmt1 + ccAmt2 > paymentMax then
        resp = msgbox("Amounts to charge to the credit cards are greater then the Total.",0,"Credit Payments more than Total")
        ccAmount2!.setText(str(paymentMax - ccAmt1))
        return
    fi
    
else

    ccAmt1$ = ccAmount1!.getText()
    ccAmt1$ = fnStripNumFormat$(ccAmt1$)

    isNumeric = 0
    ccAmt1 = round(num(ccAmt1$, err=*next)); isNumeric = 1
    
    rem ' validate ccAmt1
    if !isNumeric then
      ccAmount1!.focus()
      return
    fi

    if ccAmt1> paymentMax then
        resp = msgbox("Amount to charge to the credit card is greater then the Total.",0,"Credit Payment more than Total")
        ccAmount1!.setText(str(paymentMax))
        return
    fi

fi    

    
rem '     else
rem '       rem ' second card must be at least $50
rem '       if ccAmt1 > paymentToSplit - 50 then
rem '           ccAmt2 = 50
rem '           ccAmount2!.setText(CVS(STR(ccAmt2:mask$),3+64))
rem '           ccAmt1 = paymentToSplit - ccAmt2
rem '           ccAmount1!.setText(CVS(STR(ccAmt1:mask$),3+64))
rem '       else    
rem '           if ccAmt1 < 50 then ccAmt1 = 50
rem '           ccAmount1!.setText(CVS(STR(ccAmt1:mask$),3+64))
rem '           ccAmt2 = paymentToSplit - ccAmt1
rem '           ccAmount2!.setText(CVS(STR(ccAmt2:mask$),3+64))
rem '       fi
rem '     fi
rem ' fi    

return
rem ' -----------------------------------------------------------------
rem ' check_for_SAM_rebate
rem ' -----------------------------------------------------------------

check_for_SAM_rebate:

cfsr$ = firm$+"  "+cust$+invoice$+"000"
isSAMRebate = 0
cfsr_found = 0
read record (art03,key = cfsr$, dom=*next)art03$; cfsr_found = 1
if cfsr_found then
    if cvs(art03.ar_po_number$,3+4) = "INCENTIVE" then
        isSAMRebate = 1
    fi
fi

return
rem ' -----------------------------------------------------------------
rem ' clear_window
rem ' -----------------------------------------------------------------

clear_window:
win_invoice.number$=""
win_invoice.name$=""
win_invoice.amount$=""
win_invoice.pay_list$=""
win_invoice.invoice_list$=""
win_invoice.total$=""
win_invoice.start_invoice$=""
if splitPaymentSet then
    win_invoice.number2$=""
    win_invoice.name2$=""
    win_invoice.amount2$=""
fi
readdir=-1
invoice$=""
gosub read_art01
if invlist$<>"" then invlist$=invlist$+$ff$+"0"
win_invoice.invoice_list$=invlist$

if splitPaymentSet then
    win_invoice$=fngb__put_fields$(win_id_invoice$,win_invoice$,"total,invoice_list,pay_list,number,name,amount,number2,name2,amount2")

    splitCCBtn!.setText("Split CC Pymt")
    splitPaymentSet = 0

    BBjAPI().getSysGui().getWindow("invoices").getControl("credit_card_grp_2").setSize(180, 255)
    
    BBjAPI().getSysGui().getWindow("invoices").getControl("credit_card_grp_2").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("cc_number_lbl_2").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Number2").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("cc_name_lbl_2").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Name2").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("type_lbl_2").setVisible(0)  
    BBjAPI().getSysGui().getWindow("invoices").getControl("cc_type_2").setVisible(0)  
    BBjAPI().getSysGui().getWindow("invoices").getControl("expire_lbl_2").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Expiry Month 2").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Expiry Year 2").setVisible(0)
    
    rem ' cast(BBjEditBox, BBjAPI().getSysGui().getWindow("invoices").getControl("Amount")).setEditable(0)

    BBjAPI().getSysGui().getWindow("invoices").getControl("amount_lbl_2").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Amount2").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Amount2").setText("")

    BBjAPI().getSysGui().getWindow("invoices").getControl("print_btn").setVisible(1)    
    BBjAPI().getSysGui().getWindow("invoices").getControl("email_addr").setVisible(1)    
    BBjAPI().getSysGui().getWindow("invoices").getControl("email_txt").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("invoice").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("credit_btn").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("pmt_due_dt").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("pmt_due_lbl").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("bal_due").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("pmts").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("inv_tot").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("bal_due_lbl").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Pmts_lbl").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("inv_tot_lbl").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("inv_grp").setVisible(1)
    
else
    win_invoice$=fngb__put_fields$(win_id_invoice$,win_invoice$,"total,invoice_list,pay_list,number,name,amount")
fi
return
rem ' -----------------------------------------------------------------
rem ' convert_art03
rem ' -----------------------------------------------------------------

convert_art03:


rem converts number in art03 from US dollars to canadian dollars
if canadian_invoice = 0 return

dim canadian_exch$:fattr(canadian_exch$)
canadian_exch.ratedate$ = art03_canada.ratedate$
canadian_exch.sequence_nbr$ = art03_canada.sequence_nbr$
canadian_exch.to_us_doll = art03_canada.to_us_doll
canadian_exch.to_cana_doll = art03_canada.to_cana_doll

amountin = art03.taxable_amt; amountout = 0
call "canDollConversion", canadian_exch$, 0, amountin, amountout
art03.taxable_amt = amountout
		
amountin = art03.total_sales; amountout = 0
call "canDollConversion", canadian_exch$, 0, amountin, amountout
art03.total_sales = amountout


return
rem ' -----------------------------------------------------------------
rem ' convert_art13
rem ' -----------------------------------------------------------------

convert_art13:

rem converts numbers in art13 from US dollars to canadian dollars
if canadian_invoice = 0 return

dim canadian_exch$:fattr(canadian_exch$)
canadian_exch.ratedate$ = art03_canada.ratedate$
canadian_exch.sequence_nbr$ = art03_canada.sequence_nbr$
canadian_exch.to_us_doll = art03_canada.to_us_doll
canadian_exch.to_cana_doll = art03_canada.to_cana_doll

amountin = art13.unit_price; amountout = 0
call "canDollConversion", canadian_exch$, 0, amountin, amountout
art13.unit_price = amountout
		
amountin = art13.ext_price; amountout = 0
call "canDollConversion", canadian_exch$, 0, amountin, amountout
art13.ext_price = amountout

amountin = art13.taxable_amt; amountout = 0
call "canDollConversion", canadian_exch$, 0, amountin, amountout
art13.taxable_amt = amountout

return
rem ' -----------------------------------------------------------------
rem ' convert_balance_invTotal
rem ' -----------------------------------------------------------------

convert_balance_invTotal:

rem converts the balance and invoice total from US dollars to canadian dollars
if canadian_invoice = 0 return

dim canadian_exch$:fattr(canadian_exch$)
canadian_exch.ratedate$ = art03_canada.ratedate$
canadian_exch.sequence_nbr$ = art03_canada.sequence_nbr$
canadian_exch.to_us_doll = art03_canada.to_us_doll
canadian_exch.to_cana_doll = art03_canada.to_cana_doll

amountin = inv_tot; amountout = 0
call "canDollConversion", canadian_exch$, 0, amountin, amountout
inv_tot = amountout
		
amountin = balance; amountout = 0
call "canDollConversion", canadian_exch$, 0, amountin, amountout
balance = amountout

return
rem ' -----------------------------------------------------------------
rem ' convert_payments
rem ' -----------------------------------------------------------------

convert_payments:

rem converts the money applied to invoice from US dollars to canadian dollars
if canadian_invoice = 0 return

dim canadian_exch$:fattr(canadian_exch$)
canadian_exch.ratedate$ = art03_canada.ratedate$
canadian_exch.sequence_nbr$ = art03_canada.sequence_nbr$
canadian_exch.to_us_doll = art03_canada.to_us_doll
canadian_exch.to_cana_doll = art03_canada.to_cana_doll

amountin = payment_convert; amountout = 0
call "canDollConversion", canadian_exch$, 0, amountin, amountout
payment_convert = amountout
		
return
rem ' -----------------------------------------------------------------
rem ' credit_memo_check
rem ' -----------------------------------------------------------------

credit_memo_check:
k$=firm$+"  "+cust$
credit_invoice$=""
read(are03,key=k$,dom=*next)
while credit_invoice$=""
  readrecord(are03,end=*break)are03$
  if pos(k$=are03$)<>1 then break
  if are03.total_sales>=0 then continue
  read(are13,key=are03$(1,17),dom=*next)
  while 2
    readrecord(are13,end=*break)are13$
    if are13$(1,17)<>are03$(1,17) then break
    if are13.line_code$<>"M" then continue
    ctmp$=cvs(are13.order_memo$,7)
    if pos("CREDIT"=ctmp$)=0 or pos("INV"=ctmp$)=0 then continue
    credited_invoice$=ctmp$(len(ctmp$)-6,7)
    if fnnum(invoice$)=fnnum(credited_invoice$) then 
      credit_invoice$="E"+are03.ar_inv_nbr$
      break
    fi
  wend
wend
read(art03,key=k$+invoice$+"000",dom=*next)
while credit_invoice$=""
  readrecord(art03,end=*break)art03$
  if pos(k$=art03$)<>1 then break
  if art03.total_sales>=0 then continue
  read(art13,key=art03$(1,17),dom=*next)
  while 2
    readrecord(art13,end=*break)art13$
    if art13$(1,17)<>art03$(1,17) then break
    if art13.line_code$<>"M" then continue
    ctmp$=cvs(art13.order_memo$,7)
    if pos("CREDIT"=ctmp$)=0 or pos("INV"=ctmp$)=0 then continue
    credited_invoice$=ctmp$(len(ctmp$)-6,7)
    if fnnum(invoice$)=fnnum(credited_invoice$) then 
      credit_invoice$="T"+art03.ar_inv_nbr$
      break
    fi
  wend
wend
return
rem ' -----------------------------------------------------------------
rem ' entry_close
rem ' -----------------------------------------------------------------

entry_close:
if are01 then close(are01,err=*next);are01=0
if are11 then close(are11,err=*next);are11=0
return
rem ' -----------------------------------------------------------------
rem ' entry_open
rem ' -----------------------------------------------------------------

entry_open:
open_tries=0
if are01=0 then are01=unt;open(are01,err=open_err)fpath$+"ARE-01"; open_tries=0
if are11=0 then are11=unt;open(are11,err=open_err)fpath$+"ARE-11"; open_tries=0
return

open_err:
wait 2
open_tries=open_tries+1
if open_tries<2 then retry
i=msgbox("A system update is running, please hit retry after a brief wait to access the invoice you want to view",5+48,"File In Use")
if i=4 then open_tries=0; retry
exitto pgm_exit
rem ' -----------------------------------------------------------------
rem ' User Defined Function: fnStripNumFormat
rem ' -----------------------------------------------------------------

def fnStripNumFormat$(currency$)

    if firm_id$ = "02" then 
        xdecSeparator$ = "'"
    else
        xdecSeparator$ = "."
    fi
    xdecSeparatorFound = 0
    rawMoney$ = ""
    if cvs(currency$,3) = "" then
            rawMoney$ = "0"
    else
            for x = 1 to len(currency$)
                if currency$(x,1) = xdecSeparator$ and !xdecSeparatorFound then
                    rawMoney$ = rawMoney$ + "."
                else
                    isNumeric = 0
                    xTmp = num(currency$(x,1),err = * next); isNumeric = 1
                    if isNumeric then
                        rawMoney$ = rawMoney$ + currency$(x,1)
                    fi
                fi
           next x
    fi
    return rawMoney$
fnend
rem ' -----------------------------------------------------------------
rem ' fnaondate
rem ' -----------------------------------------------------------------

def fnaondate$(ymd$)
y=1900+asc(ymd$(1))-32,m=asc(ymd$(2))-32,d=asc(ymd$(3))-32
if m<1 or d<1 then d$="Unknown" else d$=date(jul(y,m,d):"%Mz/%Dz/%Y")
return d$
fnend
rem ' -----------------------------------------------------------------
rem ' fnaonjul
rem ' -----------------------------------------------------------------
def fnaonjul(ymd$)
  y=1900+asc(ymd$(1))-32,m=asc(ymd$(2))-32,d=asc(ymd$(3))-32
  IF m<1 OR d<1 THEN LET jd=0 ELSE LET jd=JUL(y,m,d)
  return jd
fnend
rem ' -----------------------------------------------------------------
rem ' fndate
rem ' -----------------------------------------------------------------

def fndate$(julian)
  d$=chr(asc(date(julian:"%Yp"))+32)+chr(asc(date(julian:"%Mp"))+32)+
: chr(asc(date(julian:"%Dp"))+32)
  return d$
fnend
rem ' -----------------------------------------------------------------
rem ' fnnum
rem ' -----------------------------------------------------------------

fnnum:
DEF fnnum(tempnum$)
  nn$=""
  ng=1
  if pos("-"=tempnum$) then ng=-1
  while len(tempnum$)
  if pos(tempnum$(1,1)=".0123456789") then nn$=nn$+tempnum$(1,1)
  tempnum$=tempnum$(2)
  wend
  RETURN NUM(nn$,ERR=*next)*ng
  RETURN 0
FNEND
rem ' -----------------------------------------------------------------
rem ' fnobscure_cc
rem ' -----------------------------------------------------------------
DEF fnobscure_cc$(temp_cc$)
IF LEN(temp_cc$)=16 THEN
  temp_cc$=STR(temp_cc$:"XXXX XXXX XXXX XXXX")
  temp_cc$(1,15)="**** **** ****" 
ELSE
  IF LEN(temp_cc$)=15 THEN
    temp_cc$=STR(temp_cc$:"XXXX XXXXXX XXXXX")
    temp_cc$(1,11)="**** ******"
  ELSE 
    IF LEN(temp_cc$)=13 THEN 
      temp_cc$=STR(temp_cc$:"XXXX XXX XXX XXX")
      temp_cc$(1,12)="******* ***"
    fi
  fi  
fi
RETURN temp_cc$
FNEND
rem ' -----------------------------------------------------------------
rem ' process_credit_cards
rem ' -----------------------------------------------------------------

process_credit_cards:

REM ' Attempt to Process Credit Card Transaction

rem ' is this a split payment (two cards)?
oneCard = 0
twoCards = 0
card1Succeeded = 0
card2Succeeded = 0 

if splitPaymentSet = 0 then
    oneCard = 1
else
    twoCards = 1
    notificationFrom$ = "customer-service@basis.cloud"
    notificationTo$ = "kw5121151@gmail.com"
    notificationSubject$ = "Split Payment Used to pay invoices"
    notificationMsg$ = firm$ + cust$ + user_code$ + " used the split payment to pay invoices."
    call "sendEmail.src",notificationFrom$, notificationTo$, "", "", notificationSubject$, notificationMsg$, ""
fi
    
rem ' process card 1, their should always be a card 1
unique$=date(0:"%Yd%Mz%Dz%Hz%mz%sz") + cust$ + "B"

rem ' credit card authorization
dim ccCallStr$:"CARDNUMBER:C(16*=10),EXPDATE:C(6*=10),AMOUNT:C(12*=10),NAME:C(40*=10),UNIQUEID:C(20*=10),CVV2:C(4*=10),CCTYPE:C(1*=10),CCSTREET:C(30*=10),CCZIP:C(5*=10),COMMENT1:C(128*=10)"

ccCallStr.CARDNUMBER$=cc$
ccCallStr.EXPDATE$=cc_date$(1,2)+cc_date$(4,2)
ccCallStr.AMOUNT$=str(amount1)
ccCallStr.NAME$=CVS(win_invoice.name$,3)
ccCallStr.UNIQUEID$=unique$
ccCallStr.CVV2$=verification_args.CVV2$
ccCallStr.CCTYPE$=cc_type$
ccCallStr.CCSTREET$=verification_args.address$
ccCallStr.CCZIP$=verification_args.zip$

rem ' manipulate the list of invoices
xPaylist$=paylist$
xInvoices$=""
while len(xPaylist$)
    ppos = pos($0A$=xPaylist$)
    xInvoices$=xInvoices$+xPaylist$(1,ppos-1)+"-"
    xPaylist$=xPayList$(ppos+1)
wend
xInvoices$=xInvoices$(1,len(xInvoices$)-1)
ccCallStr.COMMENT1$=firm$+cust$+"/"+xInvoices$

rem ' debug
rem ' xresp = msgbox(ccCallStr$, 0, "debug")

call "ec_creditCardProcessing.bbj", ccCallStr$

rem ' debug
rem ' xresp = msgbox("card 1 approval status: " + str(ccCallStr.is_approved), 0, "debug")

if ccCallStr.is_approved then
    rem ' card 1 accepted 
    card1Succeeded = 1
else
    rem ' card 1 rejected
    card1Succeeded = 0
fi

if twoCards then
    
    rem ' process card 2
    wait 1
    unique2$=date(0:"%Yd%Mz%Dz%Hz%mz%sz") + cust$ + "B"
    
    dim ccCallStr2$:"CARDNUMBER:C(16*=10),EXPDATE:C(6*=10),AMOUNT:C(12*=10),NAME:C(40*=10),UNIQUEID:C(20*=10),CVV2:C(4*=10),CCTYPE:C(1*=10),CCSTREET:C(30*=10),CCZIP:C(5*=10),COMMENT1:C(128*=10)"

    ccCallStr2.CARDNUMBER$=cc_2$
    ccCallStr2.EXPDATE$=cc_date_2$(1,2)+cc_date_2$(4,2)
    ccCallStr2.AMOUNT$=str(amount2)
    ccCallStr2.NAME$=CVS(win_invoice.name2$,3)
    ccCallStr2.UNIQUEID$=unique2$
    ccCallStr2.CVV2$=verification_args.CVV2_2$
    ccCallStr2.CCTYPE$=cc_type_2$
    ccCallStr2.CCSTREET$=verification_args.address_2$
    ccCallStr2.CCZIP$=verification_args.zip_2$
    ccCallStr2.COMMENT1$=firm$+cust$+"/"+xInvoices$

    rem ' debug
    rem ' xresp = msgbox(ccCallStr2$, 0, "debug")

    call "ec_creditCardProcessing.bbj", ccCallStr2$
    
    rem ' xresp = msgbox("card 2 approval status: " + str(ccCallStr2.is_approved), 0, "debug")
    
    if ccCallStr2.is_approved then
        rem ' card 2 accepted 
        card2Succeeded = 1
    else
        rem ' card 2 rejected
        card2Succeeded = 0
    fi
fi

failureMessage$ = ""
partialFailureMessage$ = ""
partialFailure = 0

rem ' xresp = msgbox(" oneCard " + str(oneCard) + " card1Succeeded " + str(card1Succeeded) + " twoCard " + str(twoCard) + " card2Succeeded " + str(card2Succeeded),0, "debug") 

if oneCard and card1Succeeded then
    rem ' fully paid by one card
    failed = 0
    PaymentAmount = amount1
else
    if oneCard and !card1Succeed then
        rem ' the card was declined, nothing paid
        failed = 1
        failureMessage$=ccCallStr.message$
        xMsg$ = "The transaction was declined. "
        xMsg$ = xMsg$ + "The credit card processor reported the card declined with this message: " + failureMessage$
        reply = msgbox(xMsg$, 0, "Transaction Declined")
    else
        if twoCards and card1Succeeded and card2Succeeded then
            rem ' both cards accecpted, fully paid
            failed = 0
            PaymentAmount = amount1 + amount2
        else
            if (twoCards and card1Succeeded and !card2Succeed) or (twoCards and card2Succeeded and !card1Succeeded) then
                rem ' two cards, one card accepted and one card declined
                rem ' process paymnet partially paid, balance will be on account
                failed = 0
                msgAmount1$ = cvs(win_invoice.amount$,3)
                msgAmount2$ = cvs(win_invoice.amount2$,3)
                msgAmt1 = amount1
                msgAmt2 = amount2
                xRemBal = (msgAmt1 + msgAmt2)
                if !card1Succeeded then
                    partialFailureMessage$ = ccCallStr.message$
                    xMsg$ = "Card 1 (" + msgAmount1$ + ") was declined and Card 2 (" + msgAmount2$ + ") was apporved. Your payment of " + msgAmount2$ + " was applied to the invoice(s)."
                    xMsg$ = xMsg$ + "The credit card processor reported the card declined with this message: " + partialFailureMessage$
                    reply = msgbox(xMsg$, 0, "Partially Paid")
                    
                    xMsgFrom$ = "customer-service@basis.cloud"
                    xMsgTo$ = "customer-service@basis.cloud"
                    xMsgCC$ = ""
                    xMsgBcc$ = "kurt.e.williams@comcast.net"
                    xMsgSubject$ = "FYI - One card in split payment was declined."
                    xEMsg$ = firm$ + cust$ + user_code$ + " attempted to pay on invoice(s) " + xInvoices$
                    xEMsg$ = xEMsg$ + " with a credit card split payment. " + $0A$ + $0A$
                    xEMsg$ = xEMsg$ + xMsg$ 
                    rem ' debug
                    rem ' xMsgTo$ = "kw5121151@gmail.com"
                    call "sendEmail.src",xMsgFrom$, xMsgTo$, xMsgCc$, xMsgBcc$, xMsgSubject$, xEMsg$, ""
                    PaymentAmount = msgAmt2
                else
                    partialFailureMessage$ = ccCallStr2.message$
                    xMsg$ = "Card 1 (" + msgAmount1$ + ") was approved and Card 2 (" + msgAmount2$ + ") was declined. Your payment of " + msgAmount1$ + " was applied to the invoice(s)."
                    xMsg$ = xMsg$ + "The credit card processor reported the card declined with this message: " + partialFailureMessage$
                    reply = msgbox(xMsg$, 0, "Partially Paid")

                    xMsgFrom$ = "customer-service@basis.cloud"
                    xMsgTo$ = "customer-service@basis.cloud"
                    xMsgCC$ = ""
                    xMsgBcc$ = "kurt.e.williams@comcast.net"
                    xMsgSubject$ = "FYI - One card in split payment was declined."
                    xEMsg$ = firm$ + cust$ + user_code$ + " attempted to pay on invoices(s) " + xInvoices$
                    xEMsg$ = xEMsg$ + " with a credit card split payment. " + $0A$ + $0A$
                    xEMsg$ = xEMsg$ + xMsg$ 
                    rem ' debug
                    rem ' xMsgTo$ = "kw5121151@gmail.com"
                    call "sendEmail.src",xMsgFrom$, xMsgTo$, xMsgCc$, xMsgBcc$, xMsgSubject$, xEMsg$, ""
                    PaymentAmount = msgAmt1
                fi
            else
                rem ' both cards declined, nothing paid
                failed = 1
                failureMessage$ = "Card 1: " + ccCallStr.message$ + " - Card 2: " + ccCallStr2.message$ 
                xMsg$ = "Both credit card transactions were declined. "
                xMsg$ = xMsg$ + "The credit card processor reported the card declines with this message: " + failureMessage$
                reply = msgbox(xMsg$, 0, "Transaction Declined")
            fi
        fi
    fi
fi





return
rem ' -----------------------------------------------------------------
rem ' read_art01
rem ' -----------------------------------------------------------------

read_art01:

if readdir=-1 and invoice$="" then invoice$="9999999"
art01k$=firm$+"  "+cust$
invlist$=""
max=100
count=0
balance=0
inv_tot=0
detail$=""
temp$=cvs(ctrl(gb__sysgui,type_list_id,1),7)
gosub entry_open
read (art01,key=art01k$+invoice$,dom=*next)
while 1
  if count > max then break
  read record(art01,dir=readdir,end=*break)art01$
  if pos(art01k$=art01$)<>1 then
    if readdir<0 and count=0 then continue else if invoice$<>art01.ar_inv_nbr$ then break
  fi
  k$=firm$+"  "+cust$+art01.ar_inv_nbr$+"000"
  readrecord(art03,key=k$,dom=*continue)art03$
  inv_jul=fnaonjul(art01.invoice_date$)
  pmt=0  
  
  if today_jul-inv_jul>365 and invoice$="9999999" then break
  if readdir=-1 and (temp$="BOTH" or invoice$=art01.ar_inv_nbr$) then
    invlist$=invlist$+art01.ar_inv_nbr$+$0a$
    count = count + 1
    continue
  fi
  read(art11,key=art01$(1,17),dom=*next)
  while 2
    read record(art11,end=*break)art11$
    if pos(art01$(1,17)=art11$)<>1 then break
    if art11.AR_TRAN_CODE$="C" then
      pmt=pmt+art11.trans_amt
      
      if canadian_invoice then
           payment_convert = art11.trans_amt
           gosub convert_payments
           art11.trans_amt = payment_convert
      endif

      detail$=detail$+str(art11.trans_amt:mask$)+"  "+currency$+" "
      detail$=detail$+fnaondate$(art11.trans_date$)+"  "+art11.REF_CHK_NBR$+$0a$
    fi
  wend
  inv_tot=art01.invoice_amt
  balance=inv_tot+pmt
  pmt=0
  read(are11,key=firm$,dom=*next)
  while balance
    read record(are11,end=*break)are11$
    if firm$<>are11.firm_id$ then break
    if cust$<>are11.customer_nbr$ or art01.ar_inv_nbr$<>are11.ar_inv_nbr$ then continue
    pmt=pmt+are11.apply_amt*-1
    
    if canadian_invoice then
         payment_convert = are11.apply_amt
         gosub convert_payments
         are11.apply_amt = payment_convert
    endif

    detail$=detail$+str(are11.apply_amt*-1:mask$)+"  "+"  "+currency$+" "
    detail$=detail$+fnaondate$(are11.receipt_date$)+"  "+are11.AR_check_NBR$+$0a$
  wend
  balance=balance+pmt   
  if readdir=1 then break
  if temp$="PAID" and balance=0 then 
    invlist$=invlist$+art01.ar_inv_nbr$+$0a$
    count = count + 1
  endif
  if temp$="UNPAID" and balance then 
        invlist$=invlist$+art01.ar_inv_nbr$+$0a$
        count = count + 1
        rem ' disabled this code 3/3/2016 per Sharon will reenable soon
        if cvs(art03.ar_po_number$,1+2+4) = "INCENTIVE" then
                window!.getControl(apply_SAM_Rebate_id).setVisible(1)
        endif
  endif
wend
readdir=1
if stayopen=0 then gosub entry_close
stayopen=0
return
rem ' -----------------------------------------------------------------
rem ' read_ecm02
rem ' -----------------------------------------------------------------

read_ecm02:
yr$=date(0:"%Y")
mo$=date(0:"%Mz")
credit_card_list$=""
cc_number_list$=""
READ (ecm02,KEY=firm$+cust$+user_code$,DOM=*next)
while 1
  READ RECORD (ecm02,END=*break)ecm02$
  IF ecm02.firm_id$<>firm$ OR ecm02.customer_nbr$<>cust$ then break
  if ecm02.user_code$<>user_code$ THEN continue
  if ecm02.cc_expires_yr$<yr$ then continue
  if ecm02.cc_expires_yr$=yr$ and ecm02.cc_expires_mo$<mo$ then continue
  ccu$="",cce$=CVS(ecm02.credit_card_num$,3)
  CALL "BCC.11",ccu$,cce$
  IF cce$="" THEN ccu$=cce$
  credit_card_list$=credit_card_list$+fnobscure_cc$(ccu$)+" "+ecm02.cc_expires_mo$+" "+ecm02.cc_expires_yr$+$0A$
  cc_number_list$=cc_number_list$+CVS(ecm02.cc_type$,7)+ecm02.cc_expires_mo$+ecm02.cc_expires_yr$+ecm02.cc_name$+ccu$+$0a$
wend
win_invoice.credit_card_list$=credit_card_list$ + $ff$ + str(-1)
ctl_id=num(fattr(win_invoice$,"credit_card_list","ID"))
if credit_card_list$="" then 
  print (gb__sysgui)'context'(gb__win.invoices),'disable'(ctl_id)
else
  print (gb__sysgui)'context'(gb__win.invoices),'enable'(ctl_id)
fi

return
rem ' -----------------------------------------------------------------
rem ' show_invoice
rem ' -----------------------------------------------------------------

show_invoice:

emlusercount = 0

temp$=ctrl(gb__sysgui,list_id,1)
if len(temp$)<7 then return
invoice$=temp$(1,7)
k$=firm$+"  "+cust$+invoice$+"000"
readrecord(art03,key=k$)art03$

if canadian_customer then gosub is_canadian_invoice

if canadian_invoice then gosub convert_art03

rec$="Invoice: "+invoice$+fill(8)+"Date: "+fnaondate$(art03.invoice_date$)+$0a$
readrecord(arm10,key=art03.firm_id$+"F"+art03.slspsn_code$,dom=*next)arm10f$
rec$=rec$+"PO: "+art03.AR_PO_NUMBER$+fill(10)+"Sls: "+cvs(arm10f.SLSPSN_NAME$,3)+$0a$
dim x$(25)
read(arm10,key=art03.firm_id$+"A"+art03.terms_code$,dom=*next)x$(1)
dim x1$(25)
read(arm10,key=art03.firm_id$+"I"+art03.disc_code$,dom=*next)x1$(1)
rec$=rec$+"Terms: "+x$(6,17)+"Discount: "+cvs(x1$(6),3)+$0a$
rec$=rec$+fill(45,"_")+$0a$
rec$=rec$+"Ln  Description     Qty UnitPrice  Extension"+$0a$
rec$=rec$+fill(45,"_")+$0a$
m$="###,###.00-"
if art03.invoice_type$="V" then rec$=rec$+fill(4)+"* * V O I D * *"+$0a$;goto show_invoice_end
read(art13,key=art03$(1,17),dom=*next)
while 1
  readrecord(art13,end=*break)art13$
  if pos(art03$(1,17)=art13$)=0 then break

  if canadian_invoice gosub convert_art13
  
  x$(1)=art13.item_number$
  rec$=rec$+art13.line_number$+" "+x$(1,16)
  rec$=rec$+str(art13.qty_ordered:"###")+str(art13.unit_price:m$)+str(art13.ext_price:m$)+$0a$
  if cvs(art13.order_memo$,3)<>"" then rec$=rec$+fill(4)+art13.order_memo$+$0a$
  readrecord(art73,key=art13$(1,20),dom=*continue)art73$
  rec$=rec$+fill(4)+"Type: "+art73.type_of_sale$+"  Users:"+str(art73.users:"#####")

  emlusercount = emlusercount + art73.users

  rec$=rec$+cvs(art73.lic_property1$,3)+str(art73.users2:"#####")+art73.lic_property2$+$0a$

  emlusercount = emlusercount + art73.users2

  read(art83,key=art73$(1,20),dom=*next)
  emailSerialNbr$ = ""
  while 2
    readrecord(art83,end=*break)art83$
    if pos(art73$(1,20)=art83$)<>1 then break
    temp$=" Activated"
    if art83.action$="D" then temp$=" Deactivated"
    if art83.action$="M" then temp$=" Modified"
    rec$=rec$+fill(4)+art83.serial_nbr$+temp$+$0a$
    emailSerialNbr$ = art83.serial_nbr$
  wend
wend
rec$=rec$+$0a$+fill(25)+"Subtotal:"+str(art03.total_sales:m$)+$0a$
rec$=rec$+fill(25)+" Freight:"+str(art03.freight_amt:m$)+$0a$
rec$=rec$+fill(25)+"     Tax:"+str(art03.tax_amount:m$)+$0a$

if currency$ <> "" then
    rec$=rec$+fill(24)+currency$+ " Total:"+str(art03.total_sales+art03.freight_amt+art03.tax_amount:m$)+$0a$
else
    rec$=rec$+fill(25)+"   Total:"+str(art03.total_sales+art03.freight_amt+art03.tax_amount:m$)+$0a$
fi

show_invoice_end:
gosub read_art01

if canadian_invoice then
    gosub convert_balance_invTotal
    win_invoice.inv_tot$=str(inv_tot:mask$) + " CAD"
    win_invoice.bal_due$=str(balance:mask$) + " CAD"
else
    win_invoice.inv_tot$=str(inv_tot:mask$)
    win_invoice.bal_due$=str(balance:mask$)
fi

win_invoice.invoice$=rec$
if detail$<>"" then detail$=detail$+$FF$+"0"
win_invoice.pmts$=detail$
win_invoice.pmt_due_dt$=fnaondate$(art01.due_date$)

win_invoice$=fngb__put_fields$(win_id_invoice$,win_invoice$,"inv_tot,invoice,pmts,pmt_due_dt,bal_due")
print(gb__sysgui)'focus'(list_id),'disable'(credit_btn_id)

if balance<=0 or (pos("SAM RENEW"=cvs(art03.AR_PO_NUMBER$,7))=0 and pos("DVK RENEW"=cvs(art03.AR_PO_NUMBER$,7))=0 and pos("RNT RENEW"=cvs(art03.AR_PO_NUMBER$,7))=0) then return

gosub credit_memo_check
if credit_invoice$="" then print(gb__sysgui)'enable'(credit_btn_id) 
return
rem ' -----------------------------------------------------------------
rem ' translate_mbox
rem ' -----------------------------------------------------------------

translate_mbox:
if pos(lang$="EN,DE,FR,IT,ES")=0 then lang$="EN"
dim param$:"mbid:c(4),lang:c(2*=0),text1:c(1*=0),text2:c(1*=0)"
param.lang$=lang$
j1=pos($0a$=junk$)
if j1 then param.mbid$=junk$(1,j1-1),junk$=junk$(j1+1)
j1=pos($0a$=junk$)
if j1 then param.text1$=junk$(1,j1-1),junk$=junk$(j1+1)
j1=pos($0a$=junk$)
if j1 then param.text2$=junk$(1,j1-1),junk$=junk$(j1+1)
call "ec_translate.bbj",param$
i=MSGBOX(param.text2$,mb_mode,param.text1$)

return
rem ' -----------------------------------------------------------------
rem ' verify_credit_card
rem ' -----------------------------------------------------------------

verify_credit_card:

Rem 'pass credit card number, return 0 or 1

valid=0
l=LEN(cc$)

IF l=0 OR l>16 THEN GOTO cc_done

IF cc$(1,1)<>"2" AND cc$(1,1)<>"3" AND cc$(1,1)<>"4" AND cc$(1,1)<>"5" THEN GOTO cc_done; REM ' not Amex (3), Visa (4), or MasterCard (2 and 5)

IF cc$(1,1)="3" AND (l<>15 or cc_type$<>"A") THEN GOTO cc_done; REM ' Invalid Amex
IF cc$(1,1)="4" AND l<>16 AND l<>13 THEN GOTO cc_done; REM ' Invalid Visa
IF cc$(1,1)="4" AND cc_type$<>"V" THEN GOTO cc_done
IF (cc$(1,1)="2" or cc$(1,1)="5") AND (l<>16 or cc_type$<>"M") THEN GOTO cc_done; REM ' Invalid MasterCard

rem ' validate using the Luhn Formula
LET sum=NUM(cc$(l,1),ERR=cc_done)
FOR c=l-1 TO 1 STEP -1
  LET digit=NUM(cc$(c,1),ERR=cc_done)
  IF MOD(l-c,2)=1 THEN 
    double=digit*2
    sum=sum+INT(double/10)+MOD(double,10) 
  ELSE 
    sum=sum+digit
  fi
NEXT c
LET valid=(MOD(sum,10)=0)

rem if info(3,2)="thines" then valid=1
cc_done:
return

rem ' ---------------------------------------------------------------
rem ' Win=101 invoices (Window) WIN_CLOSE (X)
rem ' ---------------------------------------------------------------

W101_C0_WIN_CLOSE:
goto pgm_exit
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 invoices Ctl=100 apply_sam_btn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C100_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' clear the selected invoice list (Pay_list)
payList! = window!.getListBox("Pay_list")
payList!.removeAllItems()
total! = window!.getEditBox("total")
total!.setText("")

rem ' redoad the invoice list
readdir=-1
invoice$=""
stayopen=0
gosub read_art01
invoiceList! = cast(BBjListBox, window!.getControl(invoice_list_id))
invoiceList!.removeAllItems()
itemsFound = 0
while len(invlist$) > 0
    p=pos($0A$=invlist$)
    if p = 0 then break
    itemsFound = 1
    invitem$ = invlist$(1,p-1)
    invlist$ = invlist$(p+1)
    invoiceList!.addItem(invitem$)
wend
if itemsFound then
    invoiceList!.select(0)
fi
gosub show_invoice

rem ' get the list of invoices
invoices! = invoiceList!.getAllItems()
invoicesExpanded! = BBjAPI().makeVector()

rem ' hide the main invoices window
sr_x = window!.getScreenX()
sr_y = window!.getScreenY()
rem ' account for the title bar
sr_y = sr_y - 30
rem ' account for the border
sr_x = sr_x - 10
window!.setVisible(0)

windowSAM!.setLocation(sr_x,sr_y) 
windowSAM!.setVisible(1)
windowSAM!.focus()
windowSAM!.raise()

calcRebateLabel! = windowSAM!.getStaticText("calcRebateLabel")
calcRebateProgress! = windowSAM!.getProgressBar("calcRebateProgress")
calcRebateLabel!.setVisible(1)
calcRebateProgress!.setVisible(1)

calcRebateProgress!.setMinimum(0)
calcRebateProgress!.setMaximum(invoices!.size())
calcRebateProgress!.setValue(0)

samRebateCrdMemo! = windowSAM!.getEditBox("samRebateCrdMemo")
samRebateCrdAmt! = windowSAM!.getEditBox("samRebateCrdAmt")
samRebateCrdMemo!.setText("")
samRebateCrdAmt!.setText("")

amtApplied! = windowSAM!.getEditBox("amtApplied")
remainingCredit! = windowSAM!.getEditBox("remainingCredit")
amtApplied!.setText("")
remainingCredit!.setText("")

invoiceGrid!.clearGrid()
invoiceGrid!.setMaxRows(invoices!.size() - 1); rem ' one less because of the Credit memo
invoiceGrid!.setNumRows(invoices!.size() - 1)

rem ' evaluate the invoices
item = 0, newitem = 0
while item < invoices!.size()
    item$ = cast(BBjString, invoices!.getItem(item))
    print item$
    openInvoice! = new OpenInvoice(firm$, cust$, item$)
    if openInvoice!.isSAMRebate() then
        samRebateCrdMemo!.setText(openInvoice!.getInvoiceNumber())
        samRebateCrdAmt!.setText(str(openInvoice!.getInvoiceBalance():"-###,##0.00"))
        runningbal = openInvoice!.getInvoiceBalance()
        invoicesExpanded!.insertItem(newItem, openInvoice!)
        newItem = newItem + 1
    else
        rem ' the invoice is not a SAM rebate, it must have a balance > 0 and not be paired with a credit memo already
        if openInvoice!.getInvoiceBalance() > 0 then
            rem ' is it already paired with a credit memo
            xrefInvoice$ = openInvoice!.getInvoiceNumber()
            xrefFound = 0
            read record(xref, key = xrefInvoice$, dom=*next)xref$; xrefFound = 1
            if !xrefFound then
                invoicesExpanded!.insertItem(newItem, openInvoice!)
                newItem = newItem + 1
            fi
        fi
    fi
    item = item + 1
    calcRebateProgress!.setValue(item)
wend

calcRebateLabel!.setVisible(0)
calcRebateProgress!.setVisible(0)

item = 0, row = 0, amtApplied = 0, checkableRows$ = ""
while item < invoicesExpanded!.size()
    openInvoice! = cast(OpenInvoice, invoicesExpanded!.getItem(item))
    if !(openInvoice!.isSAMRebate()) then
        invoiceGrid!.setCellText(row, 0, openInvoice!.getInvoiceNumber())
        invoiceGrid!.setCellText(row, 1, str(openInvoice!.getInvoiceBalance():"-###,##0.00"))
        if openInvoice!.getEligibleRebateAmount() > 0  then
            invoiceGrid!.setCellText(row, 2, str(openInvoice!.getEligibleRebateAmount():"-###,##0.00"))
            thisapply = openInvoice!.getEligibleRebateAmount()
            if abs(runningbal) >= thisapply then
                rem ' take it all on this one
                runningbal = runningbal + thisapply
            else
                rem ' not enough left to take it all
                thisapply = abs(runningbal)
                runningbal = 0
            fi
            amtApplied = amtApplied + thisapply
            invoiceGrid!.setCellText(row, 4, str(thisapply:"-###,##0.00"))
            invoiceGrid!.setCellStyle(row, 3, invoiceGrid!.GRID_STYLE_CHECKED)
            checkableRows$ = checkableRows$ + str(row:"##0") + "/" 
        else
            invoiceGrid!.setCellText(row, 2, str(openInvoice!.getEligibleRebateAmount():"-###,##0.00"))
            invoiceGrid!.setCellStyle(row, 3, GRID_STYLE_TEXT)
            invoiceGrid!.setCellText(row, 4, str(0:"-###,##0.00"))
        fi
        row = row + 1
    fi
    item = item + 1
wend

samRebateCrdMemo!.setEditable(0)
samRebateCrdAmt!.setEditable(0)

applyBtn! = windowSAM!.getButton("applyBtn")
if amtApplied = 0 then
   applyBtn!.setEnabled(0)
else
   applyBtn!.setEnabled(1)
fi

amtApplied!.setText(str(amtApplied:"-###,##0.00"))
remainingCredit!.setText(str(runningbal:"-###,##0.00"))
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 invoices Ctl=114 Amount2 (Edit) LOST_FOCUS (f0)
rem ' ---------------------------------------------------------------

W101_C114_LOST_FOCUS:
rem ' Control lost focus
rem ' gb__event! = cast(BBjLostFocusEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub calcPaymentSplit
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 invoices Ctl=116 Amount (Edit) LOST_FOCUS (f0)
rem ' ---------------------------------------------------------------

W101_C116_LOST_FOCUS:
rem ' Control lost focus
rem ' gb__event! = cast(BBjLostFocusEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub calcPaymentSplit
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 invoices Ctl=150 invoice_list (List Box) LIST_CLICK (l0)
rem ' ---------------------------------------------------------------

W101_C150_LIST_CLICK:
rem ' Click in list box
list_id=invoice_list_id
gosub show_invoice
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 invoices Ctl=200 add (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C200_PUSH_BUTTON:
rem ' Push button operated

rem ' block if split payment panel is open
if splitPaymentSet then return

tmpinv$=CTRL(gb__sysgui,invoice_list_id,1)
temp=LEN(tmpinv$)
IF temp<>7 then return
invoice$=tmpinv$(1,7)
gosub read_art01
if balance=0 then return
if balance>0 then
  gosub credit_memo_check
  if pos("E"=credit_invoice$) then  
    junk$="M50"+$0a$+invoice$+$0a$,mb_mode=0;gosub translate_mbox
    return
  fi
fi

rem ' is it a SAM Rebate credit memo
if balance < 0 then
    gosub check_for_SAM_rebate
    if isSAMRebate then
        srMsg$ = "This is a Growth Incentive Rebate Credit Memo. To Apply it please use the Apl GWI Reb button."
        srTitle$ = "Growth Incentive Rebate"
        resp = msgbox(srMsg$, 0, srTitle$)
        isSAMRebate = 0
        return
    fi
    isSAMRebate = 0
fi

paylist$=CTRL(gb__sysgui,pay_list_id,7)
if pos(invoice$=paylist$) then return
paylist$=paylist$+invoice$+$0a$
holdbalance=balance
while 1
  readrecord(xref,key=invoice$,dom=*break)invx$
  invoice$=invx.invoice2$
  gosub read_art01
  if balance and pos(invoice$=paylist$)=0 then 
    paylist$=paylist$+invoice$+$0a$
    tmpinv$=invoice$+$0a$+tmpinv$
    holdbalance=holdbalance+balance
  fi
  balance=holdbalance
  break
wend    
win_invoice.pay_list$=paylist$+$ff$+"0"
win_invoice$=fngb__get_fields$(win_id_invoice$,win_invoice$,"total,amount")
payment=0
payment=fnnum(win_invoice.total$,err=*next)
payment=payment+balance
win_invoice.total$=str(payment:mask$)
win_invoice.amount$=str(payment:mask$)
ilist$=CTRL(gb__sysgui,invoice_list_id,7)
tmpinv$=tmpinv$+$0a$
while 1
  p=pos($0a$=tmpinv$)
  if p=0 then break
  tmp$=tmpinv$(1,p-1)
  tmpinv$=tmpinv$(p+1)  
  p=pos(tmp$=ilist$)
  if p=1 then
    ilist$=ilist$(len(tmp$)+2)
  else
    if p>1 then ilist$=ilist$(1,p-1)+ilist$(p+len(tmp$)+1)
  fi
wend
win_invoice.invoice_list$=ilist$
win_invoice$=fngb__put_fields$(win_id_invoice$,win_invoice$,"total,invoice_list,pay_list,amount")
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 invoices Ctl=200 add (Push Button) LOST_FOCUS (f0)
rem ' ---------------------------------------------------------------

W101_C200_LOST_FOCUS:
rem ' Control lost focus
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 invoices Ctl=220 remove (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C220_PUSH_BUTTON:
rem ' Push button operated


rem ' block if split payment panel is open
if splitPaymentSet then return

tmpinv$=CTRL(gb__sysgui,pay_list_id,1)
temp=LEN(tmpinv$)
IF temp<>7 then return
invoice$=tmpinv$(1,7)
ilist$=CTRL(gb__sysgui,invoice_list_id,7)
if pos(invoice$=ilist$) then return
invx.invoice2$=""
readrecord(xref,key=invoice$,dom=*next)invx$
win_invoice$=fngb__get_fields$(win_id_invoice$,win_invoice$,"total,amount")
payment=0
payment=fnnum(win_invoice.total$,err=*next)
temppay$=CTRL(gb__sysgui,pay_list_id,7)
while invoice$<>""
  gosub read_art01
  invlist$=""
  while 1
    p=pos($0a$=ilist$)
    if p=0 then break
    if invoice$>ilist$(1,p-1) then invlist$=invlist$+invoice$+$0a$+ilist$;break
    invlist$=invlist$+ilist$(1,p)
    ilist$=ilist$(p+1)
  wend
  ilist$=invlist$
  payment=payment-balance  
  p=pos(invoice$=temppay$)
  if p=1 then
    temppay$=temppay$(len(invoice$)+2)
  else
    if p>1 then temppay$=temppay$(1,p-1)+temppay$(p+len(invoice$)+1)
  fi
  invoice$=cvs(invx.invoice2$,3)
  invx.invoice2$=""
wend
win_invoice.pay_list$=temppay$
win_invoice.total$=str(payment:mask$)
win_invoice.amount$=str(payment:mask$)
win_invoice.invoice_list$=invlist$+$ff$+"0"
win_invoice$=fngb__put_fields$(win_id_invoice$,win_invoice$,"total,invoice_list,pay_list,amount")
list_id=invoice_list_id
gosub show_invoice
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 invoices Ctl=240 next (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C240_PUSH_BUTTON:
rem ' Push button operated
win_invoice$=fngb__get_fields$(win_id_invoice$,win_invoice$,"total,amount,amount2")
payment=0
payment=fnnum(win_invoice.total$,err=*next)
paylist$=CTRL(gb__sysgui,pay_list_id,7)

rem ' the amount of the credit card approvals
PaymentAmount = 0 

rem ' reserve for use in prorating payments
totalofInvSelected = payment
listOfInvNbrSelected$ = paylist$

if paylist$="" then return
if payment<=0 or firm$="02" then PRINT (gb__sysgui)'SETCURSOR'(3),'disable'(0);goto skip_cc

ccAmount1! = Cast(BBjEditBox, BBjAPI().getSysGui().getWindow("invoices").getControl("Amount"))
amount1 = num(fnStripNumFormat$(ccAmount1!.getText()))
if amount1 = 0 then
    ccAmount1!.focus()
    return
fi

if splitPaymentSet then
    ccAmount2! = Cast(BBjEditBox, BBjAPI().getSysGui().getWindow("invoices").getControl("Amount2"))
    amount2 = num(fnStripNumFormat$(ccAmount2!.getText()))
    if amount2 = 0 then
        ccAmount2!.focus()
        return
    fi
fi

    
win_invoice$=fngb__get_fields$(win_id_invoice$,win_invoice$,"number,name,cc_type,expiry_month,expiry_year,amount,number2,name2,cc_type_2,expiry_month_2,expiry_year_2,amount2,email_addr")
temp$=CVS(win_invoice.number$,3)
cc$ = temp$
cc_2$ = ""; if splitPaymentSet then cc_2$=CVS(win_invoice.number2$,3)

rem ' card entered?
IF cc$="" THEN junk$="M30"+$0a$,mb_mode=0;gosub translate_mbox; RETURN
if splitPaymentSet and cc_2$="" THEN junk$="M62"+$0a$,mb_mode=0;gosub translate_mbox; RETURN

rem ' ensure card type selected
cc_type_id=num(fattr(win_invoice$,"cc_type","ID"))
temp$=ctrl(gb__sysgui,cc_type_id,1)
if temp$ = "" then junk$="M23"+$0a$,mb_mode=0;gosub translate_mbox; RETURN
cc_type$ = temp$(1,1)
if splitPaymentSet then
    cc_type_2_id=num(fattr(win_invoice$,"cc_type_2","ID"))
    temp2$=ctrl(gb__sysgui,cc_type_2_id,1)
    if temp2$ = "" then junk$="M61"+$0a$,mb_mode=0;gosub translate_mbox; RETURN
    cc_type_2$ = temp2$(1,1)
fi

rem ' card validate based on type?
GOSUB Verify_Credit_Card
IF valid=0 THEN junk$="M31"+$0a$,mb_mode=0;gosub translate_mbox; RETURN
if splitPaymentSet then
    cc_hold$ = cc$
    cc_type_hold$ = cc_type$
    cc$ = cc_2$
    cc_type$ = cc_type_2$
    GOSUB Verify_Credit_Card
    IF valid=0 THEN junk$="M63"+$0a$,mb_mode=0;gosub translate_mbox; RETURN
    cc$ = cc_hold$
    cc_type$ = cc_type_hold$
fi

rem ' verify expiration dates
cc_mo_id=num(fattr(win_invoice$,"expiry_month","ID"))
cc_month$=ctrl(gb__sysgui,cc_mo_id,1)
if cc_month$ = "" then junk$="M27"+$0a$,mb_mode=0;gosub translate_mbox; return
cc_month=dec(ctrl(gb__sysgui,cc_mo_id,2))+1
cc_yr_id=num(fattr(win_invoice$,"expiry_year","ID"))
cc_year$=ctrl(gb__sysgui,cc_yr_id,1)
if cc_year$ = "" then junk$="M28"+$0a$,mb_mode=0;gosub translate_mbox; return
cc_date$=str(cc_month:"00")+"/"+cc_year$(3,2)
if splitPaymentSet then
    cc_mo_id_2=num(fattr(win_invoice$,"expiry_month_2","ID"))
    cc_month_2$=ctrl(gb__sysgui,cc_mo_id_2,1)
    if cc_month_2$ = "" then junk$="M64"+$0a$,mb_mode=0;gosub translate_mbox; return
    cc_month_2=dec(ctrl(gb__sysgui,cc_mo_id_2,2))+1
    cc_yr_id_2=num(fattr(win_invoice$,"expiry_year_2","ID"))
    cc_year_2$=ctrl(gb__sysgui,cc_yr_id_2,1)
    if cc_year_2$ = "" then junk$="M65"+$0a$,mb_mode=0;gosub translate_mbox; return
    cc_date_2$=str(cc_month_2:"00")+"/"+cc_year_2$(3,2)
fi

rem ' verify intent
gosub entry_open
junk$="M52"+$0a$+cvs(str(amount1:mask$),3)+$0a$+win_invoice.number$+$0a$;mb_mode=36;gosub translate_mbox
if i<>6 then gosub entry_close;return
if splitPaymentSet
    junk$="M52"+$0a$+cvs(str(amount2:mask$),3)+$0a$+win_invoice.number2$+$0a$;mb_mode=36;gosub translate_mbox
    if i<>6 then gosub entry_close;return
fi

rem ' PRINT (gb__sysgui)'SETCURSOR'(3),'disable'(0)
PRINT (gb__sysgui)'SETCURSOR'(3),'hide'(0)

rem ' get the verification data
dim verification_args$:"LANG:C(2*=10),ADDRESS:C(30*=10),ZIP:C(5*=10),CVV2:C(4*=10),STATUS:N(1*=10),CARD2:N(1*=10),ADDRESS_2:C(30*=10),ZIP_2:C(5*=10),CVV2_2:C(4*=10),CALLERSCONTEXT:N(5*=10)"
verification_args.lang$=lang$
verification_args.address$=arm01.addr_line_1$
verification_args.zip$=arm01.zip_code$
if splitPaymentSet then
    verification_args.card2 = 1
    verification_args.address_2$=arm01.addr_line_1$
    verification_args.zip_2$=arm01.zip_code$
fi
verification_args.callersContext=gb__win.invoices
call "ec_CreditCardVer.bbj",verification_args$
print(gb__sysgui)'context'(gb__win.invoices),'show'(0),
if verification_args.status = 0 then 
    PRINT (gb__sysgui)'SETCURSOR'(0),'enable'(0)
    gosub entry_close
    return
fi

rem ' xresp = msgbox("process credit cards is next",0,"debug")

gosub process_credit_cards

rem ' get a to email address
email$=cvs(win_invoice.email_addr$,3)
if email$="" or pos("@"=email$)=0 then
   READ RECORD(ecm01,KEY=firm$+cust$+user_code$,dom=*endif)ecm01$
   email$=CVS(ecm01.e_mail$,3)
fi
read(tmm03,key=firm$+cust$,dom=*next)
while 1
  read record(tmm03,end=*break)tmm03$
  if pos(firm$+cust$=tmm03$)<>1 then break
  em$=cvs(tmm03.e_mail$,3)
  if em$="" or pos("@"=em$)=0 then continue
  if tmm03.ap_contact$="Y" and pos(em$=email$)=0 then email$=email$+","+em$;break
wend

rem ' handle failed credit card
IF failed THEN 
  PRINT (gb__sysgui)'SETCURSOR'(0),'enable'(0)
  rem ' junk$="M32"+$0a$,mb_mode=48
  rem ' gosub translate_mbox
  rem ' if msg$<>"" then 
  rem ' i=MSGBOX(failureMessage$,0,"Transaction Declined")
  rem ' fi
  if pos("@"=email$) then
    
    rem ' get the sales person email address
    readrecord(arm10,key=firm$+"F"+arm02.slspsn_code$,dom=*next)arm10f$
    ccaddr$=cvs(arm10f.e_mail$,3)
    
    to$=email$
    from$="customer-service@basis.cloud"
    if cvs(ccaddr$,3) = "" then
        ccaddr$ = "BASIS Customer Service <customer-service@basis.cloud>"
    else
        ccaddr$=ccaddr$ + ", BASIS Customer Service <customer-service@basis.cloud>"
    fi
    bcc$="kurt.e.williams@comcast.net"
    rem ' debug
    rem ' to$="kw5121151@gmail.com"
    rem ' from$="customer-service@basis.cloud"
    rem ' ccaddr$ = ""
    rem ' bcc$ = ""
    subject$="Problem with Credit Card Payment ("+STR(cust$)+")"
    msgtxt$="The credit card processor has declined the transaction(s)."
    msgtxt$ = msgtxt$ + " Processor Reason: " + failureMessage$
    call "sendEmail.src", from$, to$, ccaddr$, bcc$, subject$, msgtxt$, ""
  fi
  gosub entry_close
  return
fi

if pos("@"=email$) then
  
  arm10f.e_mail$="customer-service@basis.cloud"
  to$=email$
  from$="customer-service@basis.cloud"
  subject$="Thank You for your payment."
  msg$="Payment has been posted to your account for the following invoice(s):" + $0A$
  plist$=paylist$
  while 1
    p=pos($0a$=plist$)
    if p=0 then break
    invnbr$=cvs(plist$(1,p-1),3)
    plist$=plist$(p+1)
    if len(invnbr$)=7 then
      readrecord(art03,key=firm$+"  "+cust$+invnbr$+"000",dom=*endif)art03$
      msg$=msg$+"    "+invnbr$+" dated "+fnaondate$(art03.invoice_date$) + $0A$
      readrecord(arm10,key=firm$+"F"+art03.slspsn_code$,dom=*next)arm10f$    
    fi
  wend
  msg$=msg$+"    Total amount: "+str(PaymentAmount:mask$) + $0A$ + $0A$
  msg$=msg$+"Please contact Customer Service if you have any questions." + $0A$ + $0A$
  msg$=msg$+"BASIS International Ltd. Customer Service Credit Control" + $0A$
  msg$=msg$+"customer-service@basis.cloud" + $0A$
  msg$=msg$+"1.505.938.6121 (US)" + $0A$ + "+1.505.338.4188 (International)" + $0A$
  msgtxt$=msg$
  ccaddr$=cvs(arm10f.e_mail$,3)
  bcc$="kw5121151@gmail.com"
  rem ' debug
  rem ' to$ = "kw5121151@gmail.com"
  rem ' from$="customer-service@basis.cloud"
  rem ' ccaddr$ = ""
  rem ' bcc$=""
  call "sendEmail.src", from$, to$, ccaddr$, bcc$, subject$, msgtxt$, ""
fi

skip_cc:



if firm$="02" then payment=0

rem ' credit card short pay
if PaymentAmount < payment then 
    partialPayment = 1 
else 
    partialPayment = 0 
fi 

gosub apply_payment
gosub clear_window
gosub entry_close
PRINT (gb__sysgui)'SETCURSOR'(0),'enable'(0)
if complete then junk$="M53"+$0a$,mb_mode=0;gosub translate_mbox
list_id=invoice_list_id
gosub show_invoice
return
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 invoices Ctl=250 exit_btn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C250_PUSH_BUTTON:
rem ' Push button operated
goto pgm_exit
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 invoices Ctl=300 print_btn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C300_PUSH_BUTTON:
rem ' Push button operated
k$=firm$+"  "+cust$+invoice$+"000"
readrecord(art03,key=k$,dom=*next)art03$
if pos(k$=art03$)<>1 then return
win_invoice$=fngb__get_fields$(win_id_invoice$,win_invoice$,"email_addr")
email$=cvs(win_invoice.email_addr$,3)
msg$=""
if email$="" or pos("@"=email$)=0 then 
  junk$="M54"+$0a$,mb_mode=0;gosub translate_mbox
  return
fi
call "ec_open::job_queue"
job_queue.firm_id$=firm$
job_queue.customer_nbr$=cust$
job_queue.e_mail$=email$
job_queue.job$="EMAIL_INV"
job_queue.job_date$=art03.ar_inv_nbr$
writerecord(job_queue)job_queue$
close(job_queue)
junk$="M55"+$0a$,mb_mode=0;gosub translate_mbox
win_invoice.email_addr$=""
win_invoice$=fngb__put_fields$(win_id_invoice$,win_invoice$,"email_addr")
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 invoices Ctl=580 Pay_list (List Box) LIST_CLICK (l0)
rem ' ---------------------------------------------------------------

W101_C580_LIST_CLICK:
rem ' Click in list box
list_id=pay_list_id
gosub show_invoice
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 invoices Ctl=589 Credit Card List (List Button) LIST_SELECT (N2:19)
rem ' ---------------------------------------------------------------

W101_C589_LIST_SELECT:
rem ' Notify Event - List Button Control - List Selection
win_invoice$=fngb__get_screen$(win_id_invoice$,win_invoice$)
cc_list$=win_invoice.credit_card_list$
temp=POS($FF$=cc_list$)
IF temp=0 THEN RETURN; REM ' no selection
cc_count=NUM(cc_list$(temp+1))
cc$=""
temp$=cc_number_list$
for c=0 to cc_count
  p=pos($0a$=temp$)
  cc$=temp$(1,p-1)
  temp$=temp$(p+1)
next c
cc_type$=cc$(1,1)
cc_date$=cc$(2,6)
cc_name$=cc$(8,30)
cc$=cc$(38)
win_invoice.name$=cvs(cc_name$,3)
win_invoice.number$=fnobscure_cc$(cvs(cc$,3))
exp_mo$=win_invoice.expiry_month$
exp_yr$=win_invoice.expiry_year$
p=pos(cc_date$(3)=exp_yr$)
if p then
  p=(p-1)/5
  p1=pos($FF$=exp_yr$)
  if p1 then exp_yr$=exp_yr$(1,p1-1)
  exp_yr$=exp_yr$+$ff$+str(p)
fi
win_invoice.expiry_year$=exp_yr$
y=fnnum(cc_date$(3))
m=fnnum(cc_date$(1,2))
m$=""
if y and m then m$=date(jul(y,m,1):"%Ml")
c=1
temp$=exp_mo$
while 1
  p=pos($0a$=temp$)
  if p=0 then break
  if pos(m$=temp$)=1 then break
  temp$=temp$(p+1),c=c+1
wend
p1=pos($FF$=exp_mo$)
if p1 then exp_mo$=exp_mo$(1,p1-1)
exp_mo$=exp_mo$+$ff$+str(c-1)
win_invoice.expiry_month$=exp_mo$
type$=win_invoice.cc_type$
c=1
temp$=type$
while 1
  p=pos($0a$=temp$)
  if p=0 then break
  if pos(cc_type$=temp$)=1 then break
  temp$=temp$(p+1),c=c+1
wend
p1=pos($FF$=type$)
if p1 then type$=type$(1,p1-1)
type$=type$+$ff$+str(c-1)
win_invoice.cc_type$=type$
win_invoice$=fngb__put_fields$(win_id_invoice$,win_invoice$,"expiry_month,expiry_year,name,number,cc_type")
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 invoices Ctl=609 display (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C609_PUSH_BUTTON:
rem ' Push button operated
win_invoice$=fngb__get_fields$(win_id_invoice$,win_invoice$,"start_invoice")
temp=fnnum(cvs(win_invoice.start_invoice$,3))
if temp=0 then invoice$="";goto reset_list
invoice$=str(temp:"0000000")
k$=firm$+"  "+cust$+invoice$+"000"
found=0
readrecord(art03,key=k$,dom=*next)art03$;found=1
if found=0 then
  i=MSGBOX("Invoice "+invoice$+" Not Found",0,"")
  win_invoice.start_invoice$=""
  win_invoice$=fngb__put_fields$(win_id_invoice$,win_invoice$,"start_invoice")
  return
fi
temp$=CTRL(gb__sysgui,invoice_list_id,7)
p=pos(invoice$=temp$)
if p then
  idx=int(p/8)
  p1=pos($ff$=temp$)
  if p1 then invlist$=temp$(1,p1)+str(idx) else invlist$=temp$+$ff$+str(idx)
  goto display_done
fi
reset_list:
readdir=-1

rem ' hide the apply SAM Rebate button
window!.getControl(apply_SAM_Rebate_id).setVisible(0)

gosub read_art01
if invlist$<>"" then invlist$=invlist$+$ff$+"0"
display_done:
win_invoice.invoice_list$=invlist$
win_invoice$=fngb__put_fields$(win_id_invoice$,win_invoice$,"invoice_list")
list_id=invoice_list_id
gosub show_invoice
print(gb__sysgui)'focus'(invoice_list_id)
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 invoices Ctl=610 credit_btn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C610_PUSH_BUTTON:
k$=firm$+"  "+cust$+invoice$+"000"
readrecord(art03,key=k$,dom=*next)art03$
if pos(k$=art03$)<>1 then return
if balance<=0 or (pos("SAM RENEW"=cvs(art03.AR_PO_NUMBER$,7))=0 and pos("DVK RENEW"=cvs(art03.AR_PO_NUMBER$,7))=0 and pos("RNT RENEW"=cvs(art03.AR_PO_NUMBER$,7))=0) then return

rem ' store these for later use in looking up the salesperson email address
bufFirmId$ = art03.firm_id$
bufSalesPsn$ = art03.slspsn_code$

rem ' check for previous credit memo
gosub credit_memo_check
if credit_invoice$<>"" then return

junk$="M51"+$0a$+invoice$+$0a$,mb_mode=36;gosub translate_mbox
if i<>6 then return
print(gb__sysgui)'disable'(credit_btn_id),'setcursor'(3)
call "BCS.02",firm$,cust$,invoice$,msg$
PRINT (gb__sysgui)'SETCURSOR'(0)
if pos("ERROR"=cvs(msg$,7)) then return
junk$="M50"+$0a$+invoice$+$0a$,mb_mode=0;gosub translate_mbox
order$="??"
if len(msg$)>6 then order$=msg$(len(msg$)-6,7)

ccaddr$=""
readrecord(arm10,key=bufFirmId$+"F"+bufSalesPsn$,dom=*next)arm10f$;ccaddr$=cvs(arm10f.e_mail$,3)
to$="customer-service@basis.cloud"
from$="customer-service@basis.cloud"
if pos("SAM RENEW"=cvs(art03.AR_PO_NUMBER$,7)) then
    subject$="SAM Renew invoice "+invoice$+" credited"
else
    if pos("DVK RENEW"=cvs(art03.AR_PO_NUMBER$,7)) then
        subject$="DVK Renew invoice "+invoice$+" credited"
    else
        if pos("RNT RENEW"=cvs(art03.AR_PO_NUMBER$,7))
            subject$="RNT Renew invoice "+invoice$+" credited"
        else
            subject$="SAM Renew invoice "+invoice$+" credited"
        fi
    fi
fi

msgtxt$=invoice$+" was credited by cust# "+cvs(firm$+cust$+user_code$,3)+ " " + cvs(arm01.cust_name$,3) + " - order #"+order$ + " serial # " + cvs(emailSerialNbr$,3) + " user count: " + str(emlusercount)
bcc$="kurt.e.williams@comcast.net"
call "sendEmail.src", from$, to$, ccaddr$, bcc$, subject$, msgtxt$, ""
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 invoices Ctl=612 splitCCBtn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C612_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

take_down_split_payment:

rem ' prevent the opening of the split payment panel is the payment amount is less than 100
payment=0
paymentToSplit$ = BBjAPI().getSysGui().getWindow("invoices").getControl("total").getText()
payment=fnnum(paymentToSplit$,err=*next) 
if payment < 100 then 
    resp = msgbox("To split the payment to two credit cards the total payment must be $100.00 or greater.", 0, "Below Minimum Payment")
    return
fi

splitCCBtn! = cast(BBjButton, BBjAPI().getSysGui().getWindow("invoices").getControl("splitCCBtn"))
currentText$ = splitCCBtn!.getText()
if currentText$ = "Split CC Pymt" then
    splitPaymentSet = 1
    splitCCBtn!.setText("Canx Split")
    
    paymentToSplit$ = BBjAPI().getSysGui().getWindow("invoices").getControl("total").getText() 
    paymentToSplit = num(fnStripNumFormat$(paymentToSplit$))
    
    BBjAPI().getSysGui().getWindow("invoices").getControl("print_btn").setVisible(0) 
    BBjAPI().getSysGui().getWindow("invoices").getControl("email_addr").setVisible(0)    
    BBjAPI().getSysGui().getWindow("invoices").getControl("email_txt").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("invoice").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("credit_btn").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("pmt_due_dt").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("pmt_due_lbl").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("bal_due").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("pmts").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("inv_tot").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("bal_due_lbl").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Pmts_lbl").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("inv_tot_lbl").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("inv_grp").setVisible(0)
    
    BBjAPI().getSysGui().getWindow("invoices").getControl("credit_card_grp_2").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("cc_number_lbl_2").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Number2").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("cc_name_lbl_2").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Name2").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("type_lbl_2").setVisible(1)  
    BBjAPI().getSysGui().getWindow("invoices").getControl("cc_type_2").setVisible(1)  
    BBjAPI().getSysGui().getWindow("invoices").getControl("expire_lbl_2").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Expiry Month 2").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Expiry Year 2").setVisible(1)
    
    BBjAPI().getSysGui().getWindow("invoices").getControl("amount_lbl").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Amount").setVisible(1)
    rem ' cast(BBjEditBox, BBjAPI().getSysGui().getWindow("invoices").getControl("Amount")).setEditable(1)
    ccAmt1 = round(paymentToSplit/2,2), ccAmt1$ = str(ccAmt1:mask$)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Amount").setText(ccAmt1$)

    BBjAPI().getSysGui().getWindow("invoices").getControl("amount_lbl_2").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Amount2").setVisible(1)
    rem ' cast(BBjEditBox, BBjAPI().getSysGui().getWindow("invoices").getControl("Amount2")).setEditable(1)
    ccAmt2 = paymentToSplit - ccAmt1, ccAmt2$ = str(ccAmt2:mask$)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Amount2").setText(ccAmt2$)
    rem ' cast(BBjEditBox, BBjAPI().getSysGui().getWindow("invoices").getControl("Amount2")).setEditable(0)
         
    rem ' BBjAPI().getSysGui().getWindow("invoices").getControl("splitCCBtn").setLocation(480, 460)
    rem ' BBjAPI().getSysGui().getWindow("invoices").getControl("next").setLocation(580, 460)
    rem ' BBjAPI().getSysGui().getWindow("invoices").getControl("credit_card_grp").setSize(180, 300)
    BBjAPI().getSysGui().getWindow("invoices").getControl("credit_card_grp_2").setSize(180, 300)
    
else
    splitCCBtn!.setText("Split CC Pymt")
    splitPaymentSet = 0

    rem ' BBjAPI().getSysGui().getWindow("invoices").getControl("credit_card_grp").setSize(180, 255)
    BBjAPI().getSysGui().getWindow("invoices").getControl("credit_card_grp_2").setSize(180, 255)
    rem ' BBjAPI().getSysGui().getWindow("invoices").getControl("splitCCBtn").setLocation(590, 415)
    rem ' BBjAPI().getSysGui().getWindow("invoices").getControl("next").setLocation(680, 415)
    
    BBjAPI().getSysGui().getWindow("invoices").getControl("credit_card_grp_2").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("cc_number_lbl_2").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Number2").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("cc_name_lbl_2").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Name2").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("type_lbl_2").setVisible(0)  
    BBjAPI().getSysGui().getWindow("invoices").getControl("cc_type_2").setVisible(0)  
    BBjAPI().getSysGui().getWindow("invoices").getControl("expire_lbl_2").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Expiry Month 2").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Expiry Year 2").setVisible(0)
    
    rem ' BBjAPI().getSysGui().getWindow("invoices").getControl("amount_lbl").setVisible(0)
    rem ' BBjAPI().getSysGui().getWindow("invoices").getControl("Amount").setVisible(0)
    rem ' cast(BBjEditBox, BBjAPI().getSysGui().getWindow("invoices").getControl("Amount")).setEditable(0)
    paytot$ = BBjAPI().getSysGui().getWindow("invoices").getControl("total").getText()
    paytot = num(fnStripNumFormat$(paytot$))
    BBjAPI().getSysGui().getWindow("invoices").getControl("Amount").setText(CVS(STR(paytot:mask$),3+64))

    BBjAPI().getSysGui().getWindow("invoices").getControl("amount_lbl_2").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Amount2").setVisible(0)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Amount2").setText("")

    BBjAPI().getSysGui().getWindow("invoices").getControl("print_btn").setVisible(1)    
    BBjAPI().getSysGui().getWindow("invoices").getControl("email_addr").setVisible(1)    
    BBjAPI().getSysGui().getWindow("invoices").getControl("email_txt").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("invoice").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("credit_btn").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("pmt_due_dt").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("pmt_due_lbl").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("bal_due").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("pmts").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("inv_tot").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("bal_due_lbl").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("Pmts_lbl").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("inv_tot_lbl").setVisible(1)
    BBjAPI().getSysGui().getWindow("invoices").getControl("inv_grp").setVisible(1)

fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=102 samRebate Ctl=103 srCancelBtn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W102_C103_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

windowSAM!.setVisible(0)
window!.setVisible(1)
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=102 samRebate Ctl=106 invoiceGrid (Grid) GRID_CLICK_CURR (N15:107)
rem ' ---------------------------------------------------------------

W102_C106_GRID_CLICK_CURR:
rem ' Notify Event - Grid - Grid Mouse Down/Up on current cell
rem ' gb__event! = cast(BBjGridSelectColumnEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()
rem ' isSelected! = gb__event!.isOnSelectedCell()
rem ' gridHeader! = gb__event!.getGridHeader()
rem ' 0=UP 1 = DOWN
rem ' down = gb__event!.isDown()

gridCellEvent! = cast(BBjGridCellEvent , bbjapi().getLastEvent())
row = gridCellEvent!.getRow()
col = gridCellEvent!.getColumn()
if col = 3 then
    rem ' is it a checkable row
    search$ = str(row:"##0") + "/"
    if pos(search$ = checkableRows$) <> 0 then
        checked = invoiceGrid!.getCellState(row, col)
        if checked then
            invoiceGrid!.setCellStyle(row, 3, invoiceGrid!.GRID_STYLE_UNCHECKED)
            gosub removeInvoiceFromTotal
        else
            invoiceGrid!.setCellStyle(row, 3, invoiceGrid!.GRID_STYLE_CHECKED)
            gosub addInvoiceToTotal
        endif
    endif
endif

return

removeInvoiceFromTotal:
    rem ' get the amounts
    amtApplied! = windowSAM!.getEditBox("amtApplied")
    amtApplied$ = amtApplied!.getText()
    while pos("," = amtapplied$) > 0
        p = pos("," = amtApplied$)
        amtApplied$ = amtApplied$(1,p-1) + amtApplied$(p+1)
    wend
    amtApplied = num(amtApplied$)

    remainingCredit! = windowSAM!.getEditBox("remainingCredit")
    remainingCredit$ = remainingCredit!.getText()
    while pos("," = remainingCredit$) > 0
        p = pos("," = remainingCredit$)
        remainingCredit$ = remainingCredit$(1,p-1) + remainingCredit$(p+1)
    wend
    remainingCredit = num(remainingCredit$)

    amountChanging$ = invoiceGrid!.getCellText(row, 4)
    while pos("," = amountChanging$) > 0
        p = pos("," = amountChanging$)
        amountChanging$ = amountChanging$(1,p-1) + amountChanging$(p+1)
    wend
    amountChanging = num(amountChanging$)

    rem ' recalculate the new amounts
    amtApplied = amtApplied - amountChanging
    remainingCredit = remainingCredit - amountChanging

    rem ' reset the user interface
    invoiceGrid!.setCellText(row, 4, str(0:"-###,##0.00"))
    amtApplied!.setText(str(amtApplied:"-###,##0.00"))
    remainingCredit!.setText(str(remainingCredit:"-###,##0.00"))

    rem ' if amtApplied = 0 then disable the Apply Credit button
    if amtApplied = 0 then
       applyBtn!.setEnabled(0)
    else
        applyBtn!.setEnabled(1)
    fi

return
    
addInvoiceToTotal:
    rem ' get the amounts
    amtApplied! = windowSAM!.getEditBox("amtApplied")
    amtApplied$ = amtApplied!.getText()
    while pos("," = amtapplied$) > 0
        p = pos("," = amtApplied$)
        amtApplied$ = amtApplied$(1,p-1) + amtApplied$(p+1)
    wend
    amtApplied = num(amtApplied$)

    remainingCredit! = windowSAM!.getEditBox("remainingCredit")
    remainingCredit$ = remainingCredit!.getText()
    while pos("," = remainingCredit$) > 0
        p = pos("," = remainingCredit$)
        remainingCredit$ = remainingCredit$(1,p-1) + remainingCredit$(p+1)
    wend
    remainingCredit = num(remainingCredit$)

    amountChanging$ = invoiceGrid!.getCellText(row, 2)
    while pos("," = amountChanging$) > 0
        p = pos("," = amountChanging$)
        amountChanging$ = amountChanging$(1,p-1) + amountChanging$(p+1)
    wend
    amountChanging = num(amountChanging$)

    rem ' recalculate the new amounts
    rem ' is there enough credit left to handle this change
    if (remainingCredit + amountChanging) <= 0 then
        amtApplied = amtApplied + amountChanging
        remainingCredit = remainingCredit + amountChanging
    else
        amtApplied = amtApplied + (remainingCredit * (-1))
        amountChanging = remainingCredit * (-1)
        remainingCredit = 0
    endif

    rem ' reset the user interface
    invoiceGrid!.setCellText(row, 4, str(amountChanging:"-###,##0.00"))
    amtApplied!.setText(str(amtApplied:"-###,##0.00"))
    remainingCredit!.setText(str(remainingCredit:"-###,##0.00"))

    rem ' if amtApplied = 0 then disable the Apply Credit button
    if amtApplied = 0 then
       applyBtn!.setEnabled(0)
    else
        applyBtn!.setEnabled(1)
    fi

return
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=102 samRebate Ctl=112 applyBtn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W102_C112_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

seterr 0 

rem ' confirm user wants to apply full or partial credit memo to the invoice specified.
msg$ = "Please confirm that you want to apply the Growth Incentive Rebate funds to the invoices as shown."
resp = msgbox(msg$, 1 + 32, "Confirm")
if resp <> 1 then return

rem ' open the files
gosub entry_open

rem ' write the cash reeipts header record
dim are01$:fattr(are01$)
are01.firm_id$=firm$
are01.customer_nbr$=cust$
are01.receipt_date$=fndate$(today_jul)
are01.cash_or_chk$="C"

if firm$ = "01" then are01.cash_rec_cd$ = "WF " else are01.cash_rec_cd$ = "   "
rem ' BSE cash_rec_cd is blank, BAS is WF for Wells Fargo

are01.ar_check_nbr$="BC"+date(today_jul:"%M/%D")
are01.ar_check_nbr$="GWI Reb"
are01.RESERVED_STR_3$=fill(4)
are01.payment_amt=0
are01$=field(are01$)
writerecord(are01,key=are01$(1,25))are01$

rem ' write the details
rem ' write the tolal credit
dim are11$:fattr(are11$)
are11.firm_id$=firm$
are11.customer_nbr$=cust$
are11.receipt_date$=are01.receipt_date$

if firm$ = "01" then are11.cash_rec_cd$ = "WF " else are11.cash_rec_cd$ = "   "
rem ' BSE cash_rec_cd is blank, BAS is WF for Wells Fargo

are11.ar_check_nbr$=are01.ar_check_nbr$
are11.ar_inv_nbr$=samRebateCrdMemo!.getText()
rem ' are11.apply_amt=amtApplied*(-1)
are11.apply_amt=0
readrecord(are11,key=are11$(1,32),dom=*next)are11$
are11.apply_amt = are11.apply_amt + (amtApplied * (-1))
are11$=field(are11$)
writerecord(are11,key=are11$(1,32))are11$

rem ' now write the invoices credited
for row = 0  to invoiceGrid!.getNumRows() -1
    applyInvoice$ = ""
    applyAmount = 0
    if cvs(invoiceGrid!.getCellText(row, 4),7) <> "0.00" and cvs(invoiceGrid!.getCellText(row, 4),7) <> "" then
        applyInvoice$ = invoiceGrid!.getCellText(row, 0)
        applyAmount$ = invoiceGrid!.getCellText(row, 4), applyAmt$ = ""
        rem ' remove any commas
        for loc = 1 to len(applyAmount$)
            if applyAmount$(loc,1) <> "," then
                applyAmt$ = applyAmt$ + applyAmount$(loc,1)
            endif
        next loc
        applyAmount = num(applyAmt$)
        dim are11$:fattr(are11$)
        are11.firm_id$=firm$
        are11.customer_nbr$=cust$
        are11.receipt_date$=are01.receipt_date$
        
        if firm$ = "01" then are11.cash_rec_cd$ = "WF " else are11.cash_rec_cd$ = "   "
        rem ' BSE cash_rec_cd is blank, BAS is WF for Wells Fargo
        
        are11.ar_check_nbr$=are01.ar_check_nbr$
        are11.ar_inv_nbr$=applyInvoice$
        are11.apply_amt=applyAmount
        are11$=field(are11$)
        writerecord(are11,key=are11$(1,32))are11$
    fi
next row    

msg$ = "The Credit Memo has been applied as specified"
resp = msgbox(msg$, 64, "Credit Memo Applied")

rem ' close the files
gosub entry_close

rem ' redoad the invoice list
total!.setText("")
readdir=-1
invoice$=""
stayopen=0
gosub read_art01
invoiceList!.removeAllItems()
itemsFound = 0
while len(invlist$) > 0
    p=pos($0A$=invlist$)
    if p = 0 then break
    itemsFound = 1
    invitem$ = invlist$(1,p-1)
    invlist$ = invlist$(p+1)
    invoiceList!.addItem(invitem$)
wend
if itemsFound then
    invoiceList!.select(0)
endif
gosub show_invoice

windowSAM!.setVisible(0)
window!.setVisible(1)
window!.focus()
window!.raise()
RETURN


rem gb_std.cod - Put your standard subroutines/functions/etc. here.

END
