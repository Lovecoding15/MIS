rem glm - Bank Reconciliation, Detail Listing
rem Program glr_bankmaster v8.0.0 19Jun2006 (glm_rf)
rem Created by adx_progconv.bbx v1.0.3 (06/19/2006 05:53:33)

rem  +-----------------------------------------+
rem  | AddonSoftware Version 8.0.0 - 01Oct2006 |
rem  |  Copyright BASIS International Ltd.  All Rights Reserved.
rem  |          All Rights Reserved            |
rem  +-----------------------------------------+

    setesc std_error
    seterr std_error

	use ::sys/prog/bao_encryptor.bbj::Encryptor

rem --- Call/Enter

    enter gl_account$
    
rem --- Get Translator Object

    use ::bbtranslator.bbj::BBTranslator
    declare BBTranslator Translate!
    rdTransSpaceKey$=stbl("+PROPS_NAME")+"_"+stbl("+USER_LOCALE")+"_BBTranslator"
    Translate!=cast(BBTranslator,BBjAPI().getGroupNamespace().getValue(rdTransSpaceKey$,err=*next))
    if Translate!=null()
        Translate!=BBTranslator.getInstance(stbl("+PROPS_NAME"),stbl("+USER_LOCALE"),null(),stbl("+PROPS_PATH"))
        BBjAPI().getGroupNamespace().setValue(rdTransSpaceKey$,Translate!)
    endif

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Document initializations

    OutVect!=bbjAPI().getSysGui().makeVector()
    HdrVect!=bbjAPI().getSysGui().makeVector()
    BrkVect!=bbjAPI().getSysGui().makeVector()
    TotVect!=bbjAPI().getSysGui().makeVector()
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- set rd_alias_id$, if needed, for DocOut Settings

    if rd_alias_id$=""
        rd_alias_id$=pgm(-2)
        rd_alias_id$=rd_alias_id$(max(pos("/"="/"+rd_alias_id$,-1),pos("\"="\"+rd_alias_id$,-1)))
        rd_alias_id$=rd_alias_id$(1,pos("."=rd_alias_id$+".")-1)
    endif
	rd_alias_id$=cvs(rd_alias_id$,4)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

rem --- Open/Lock files

    files=7,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="glm-01",ids$[1]="GLM_ACCT"
    files$[2]="glm-05",ids$[2]="GLM_BANKMASTER"
    files$[3]="glt-05",ids$[3]="GLT_BANKCHECKS"
    files$[4]="glt-15",ids$[4]="GLT_BANKOTHER"
    files$[5]="adc_bankacctcode",ids$[5]="ADC_BANKACCTCODE"
    files$[6]="gls_params",ids$[6]="GLS_PARAMS"
    files$[7]="glt-06",ids$[7]="GLT_TRANSDETAIL"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:                                   ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    glm01_dev=channels[1]
    glm05_dev=channels[2]
    glt05_dev=channels[3]
    glt15_dev=channels[4]
    adcBankAcctCode_dev=channels[5]
    gls01_dev=channels[6]
    glt06_dev=channels[7]

	
rem --- Dimension string templates

    dim glm01a$:templates$[1],glm05a$:templates$[2],
:       glt05a$:templates$[3],glt15a$:templates$[4],adcBankAcctCode$:templates$[5],
:       gls01a$:templates$[6],glt06a$:templates$[7]


rem --- Retrieve parameter records

    call stbl("+DIR_PGM")+"adc_getmask.aon","GL_ACCOUNT","","","",m0$,0,acctlen
    call stbl("+DIR_PGM")+"adc_getmask.aon","","GL","A","",m1$,0,0
    m9$="####0"
    m0=len(m0$)
    m1=len(m1$)
    m9=len(m4$)
    headings=7
    width=120

rem --- Set up Encryptor
	encryptor! = new Encryptor()
	config_id$ = "BANK_ACCT_AUTH"
	encryptor!.setConfiguration(config_id$)

rem --- Initializations

    dim headings$[headings],h$(width)
    dim o[5]
    dim bar$(width+2,"-")
    headings$[0]=cvs(sysinfo.firm_name$,2)
    headings$[1]=cvs(sysinfo.task_desc$,2)
    more=1
    page=0
    l9=59
    l=l9+1
    number=0
    pbufwidth=123
    checkhead=0
    otherhead=0
    clock$=""
    when$=sysinfo.system_date$
    checkopen=0
    otheropen=0
    checkpaid=0
    otherpaid=0
    opencheck=0
    openother=0
    paidcheck=0
    paidother=0

rem --- Calculate print positions

    o[0]=1
    o[1]=o[0]+9
    o[2]=o[1]+7
    o[3]=o[2]+12
    o[5]=width-m9-2
    o[4]=o[5]-m1-1

rem --- Load GL Account (glm-01) and Bank Master (glm-05) records

    glm01a.firm_id$=firm_id$
    glm01a.gl_account$=gl_account$
    glm05a.firm_id$=firm_id$
    glm05a.gl_account$=gl_account$
    glm01_key$=glm01a.firm_id$+glm01a.gl_account$
    glm05_key$=glm05a.firm_id$+glm05a.gl_account$
    find record (glm01_dev,key=glm01_key$,dom=*next) glm01a$
    find record (glm05_dev,key=glm05_key$,dom=*next) glm05a$
    find record (adcBankAcctCode_dev,key=firm_id$+glm05a.bnk_acct_cd$,dom=*next)adcBankAcctCode$
    bank_last_4$=encryptor!.decryptData(cvs(adcBankAcctCode.bnk_acct_no$,2))
    if len(bank_last_4$)>=4
        bank_last_4$=bank_last_4$(len(bank_last_4$)-3,4)
    else
        bank_last_4$=""
    endif

rem --- Build remaining headings

    headings$[3]=Translate!.getTranslation("AON_BANK_NAME:_")+cvs(adcBankAcctCode.bank_name$,2)
    headings$[4]=Translate!.getTranslation("AON_ACCOUNT_NUMBER")+Translate!.getTranslation("AON_ENDING")+": "+bank_last_4$
    headings$[5]=Translate!.getTranslation("AON_ACCOUNT_NAME:_")+cvs(adcBankAcctCode.acct_desc$,2)
    headings$[6]=Translate!.getTranslation("AON_GL_ACCOUNT:_")+fnmask$(glm01a.gl_account$(1,acctlen),m0$)
    headings$[7]=Translate!.getTranslation("AON_DESCRIPTION:_")+cvs(glm01a.gl_acct_desc$,2)

    columns=5
    dim columns$[5,10]
    columns$[0,0]=Translate!.getTranslation("AON_TRANSACTION"),columns$[0,1]="C",columns$[0,2]="20"
    columns$[1,0]=Translate!.getTranslation("AON_TYPE"),columns$[1,1]="C",columns$[1,2]="5"
    columns$[2,0]=Translate!.getTranslation("AON_DATE"),columns$[2,1]="C",columns$[2,2]="10"
    columns$[3,0]=Translate!.getTranslation("AON_DESCRIPTION"),columns$[3,1]="C",columns$[3,2]="30"
    columns$[4,0]=Translate!.getTranslation("AON_AMOUNT"),columns$[4,1]="N",columns$[4,2]=str(len(m1$)),columns$[4,3]=m1$,columns$[4,10]="T"
    columns$[5,0]=Translate!.getTranslation("AON_PAID"),columns$[5,1]="C",columns$[5,2]="5"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Does the user only want to print outstanding items?

    msg_id$="GL_PRT_OUT"
    gosub disp_message
    if msg_opt$="Y" print_outstanding=1 else print_outstanding=0
    
    if print_outstanding headings$[1]=headings$[1]+Translate!.getTranslation("AON__(OUTSTANDING_ITEMS_ONLY)")

rem --- Open printer, start progress meter and position files

    call pgmdir$+"adc_progress.aon","NC","","","","",0,glt05_dev,1,meter_num,status
    read (glt05_dev,key=glm05_key$,dom=*next)

rem --- This section prints the checks. Get the next check transaction (glt-05) record.

    while more
          k$=key(glt05_dev,end=*break)
          if pos(glm05_key$=k$)<>1 break
          read record (glt05_dev) glt05a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,status

          rem --- If we're printing only outstanding items, is this one outstanding?

          if print_outstanding and glt05a.paid_code$<>"O" continue

          rem --- Skip future transactions

          if glt05a.bnk_chk_date$>glm05a.curstm_date$ continue

          rem --- Print this check transaction (glt-05) record

          if glt05a.paid_code$<>"O" checkpaid=checkpaid+glt05a.check_amount,paidcheck=paidcheck+1
:                              else checkopen=checkopen+glt05a.check_amount,opencheck=opencheck+1
          endif
          if checkhead=0
            gosub check_heading
            
            checkhead=1
          endif
          
          OutVect!.addItem(glt05a.check_no$)
          OutVect!.addItem(glt05a.check_type$)
          OutVect!.addItem(fndate$(glt05a.bnk_chk_date$))
          OutVect!.addItem(glt05a.description$)
          OutVect!.addItem(str(glt05a.check_amount))
          OutVect!.addItem(glt05a.paid_code$)
          
          l=l+1

          rem --- Loop back for next check transaction record

    wend

rem --- Print message if there weren't any checks to print

    if opencheck+paidcheck goto other_transactions
    if checkhead=0
       gosub check_heading
    endif
    xwk=fnblank(3)
    OutVect!.addItem(Translate!.getTranslation("AON_NO_CHECK_TRANSACTIONS_FOUND"))
    xwk=fnblank(2)
    l=l+1

other_transactions: rem --- Print any other transactions

rem --- Position file

    gosub other_heading
    read (glt15_dev,key=glm05_key$,dom=*next)

rem --- This section prints the other transactions. 
rem --- Get the next other transaction (glt-15) record.

    while more
          k$=key(glt15_dev,end=*break)
          if pos(glm05_key$=k$)<>1 break
          read record (glt15_dev) glt15a$
          call pgmdir$+"adc_progress.aon","S","","","","",0,0,1,0,status

          rem --- If we're printing only outstanding items, is this one outstanding?

          if print_outstanding and glt15a.posted_code$<>"O" continue

          rem --- Skip future transactions

          if glt15a.trns_date$>glm05a.curstm_date$ continue

          rem --- Print this other transaction (glt-15) record

          if glt15a.posted_code$<>"O" otherpaid=otherpaid+glt15a.trans_amt,paidother=paidother+1
:                                else otheropen=otheropen+glt15a.trans_amt,openother=openother+1
          endif
          if otherhead=0
             gosub other_heading
             otherhead=1
          endif
          
          rem --- Append Cash Receipt Code CASH_REC_CD to the end of the Description
          cash_rec_cd$=cvs(glt15a.cash_rec_cd$,3)
          if cash_rec_cd$<>"" then
              descLen=len(glt15a.description$)
              descEnd=len(cvs(glt15a.description$,2))
              if descEnd>descLen-(3+len(cash_rec_cd$)) then descEnd=descLen-(3+len(cash_rec_cd$))
              glt15a.description$(descEnd+1)=" ("+cash_rec_cd$+")"
          endif

          OutVect!.addItem(glt15a.trans_no$)
          OutVect!.addItem(glt15a.trans_type$)
          OutVect!.addItem(fndate$(glt15a.trns_date$))
          OutVect!.addItem(glt15a.description$)
          OutVect!.addItem(str(glt15a.trans_amt))
          OutVect!.addItem(glt15a.posted_code$)
          
          l=l+1

          rem --- Loop back for next transaction record

    wend

rem --- Print message if there weren't any other transactions to print

    if openother+paidother goto balance
    if otherhead=0
       gosub other_heading
    endif
    xwk=fnblank(3)
    OutVect!.addItem(Translate!.getTranslation("AON_NO_OTHER_TRANSACTIONS_FOUND"))
    xwk=fnblank(2)
    l=l+1

balance: rem --- Print the balance information

    balance=glm05a.cur_stmt_amt-checkopen+otheropen
    gosub balance_heading
    xwk=fnblank(3)
    OutVect!.addItem(Translate!.getTranslation("AON_CURRENT")+" "+Translate!.getTranslation("AON_STATEMENT_BALANCE:_"))
    OutVect!.addItem(str(glm05a.cur_stmt_amt))
    xwk=fnblank(1)

    xwk=fnblank(3)
    OutVect!.addItem(Translate!.getTranslation("AON_CHECKS_OUTSTANDING:_")+str(opencheck:m9$)+Translate!.getTranslation("AON__ITEMS"))
    OutVect!.addItem(str(checkopen))
    xwk=fnblank(1)

    xwk=fnblank(3)
    OutVect!.addItem(Translate!.getTranslation("AON_DEP_OTH_TRANS_OUTSTANDING:_")+str(openother:m9$)+Translate!.getTranslation("AON__ITEMS"))
    OutVect!.addItem(str(otheropen))
    xwk=fnblank(1)

    TotVect!.addItem(str(OutVect!.size()/(columns+1)))

    xwk=fnblank(3)
    OutVect!.addItem(Translate!.getTranslation("AON_RECONCILIATION_BALANCE:_"))
    OutVect!.addItem(str(balance))
    xwk=fnblank(1)

    xwk=fnblank(columns+1);rem blank line

    xwk=fnblank(3)
    OutVect!.addItem(Translate!.getTranslation("AON_GL_BALANCE_AS_OF_")+fndate$(glm05a.curstm_date$))
    OutVect!.addItem(str(glm05a.book_balance))
    xwk=fnblank(1)

    difference=glm05a.book_balance-balance
    if difference>0 message$=Translate!.getTranslation("AON_SHORT")
    if difference<0 message$=Translate!.getTranslation("AON_OVER")
    if difference<>0
        xwk=fnblank(3)
        OutVect!.addItem(Translate!.getTranslation("AON_THIS_ACCOUNT_IS_")+message$+Translate!.getTranslation("AON__BY_"))
        OutVect!.addItem(str(difference))
        xwk=fnblank(1)
    endif
    if print_outstanding=0

        xwk=fnblank(columns+1);rem blank line

        xwk=fnblank(3)
        OutVect!.addItem(Translate!.getTranslation("AON_PAID_CHECKS:_")+str(paidcheck:m9$)+Translate!.getTranslation("AON__ITEMS"))
        OutVect!.addItem(str(checkpaid))
        xwk=fnblank(1)

        xwk=fnblank(3)
        OutVect!.addItem(Translate!.getTranslation("AON_PAID_DEP_OTH_TRANSACTIONS:_")+str(paidother:m9$)+Translate!.getTranslation("AON__ITEMS"))
        OutVect!.addItem(str(otherpaid))
        xwk=fnblank(1)
    endif
    
    gosub calc_inflows_and_outflows
    
    if inflows <>0 or outflows<>0 then

        xwk=fnblank(columns+1);rem blank line

        xwk=fnblank(3)
        OutVect!.addItem(Translate!.getTranslation("AON_CASH_INFLOWS:_"))
        OutVect!.addItem(str(inflows))
        xwk=fnblank(1)

        xwk=fnblank(3)
        OutVect!.addItem(Translate!.getTranslation("AON_CASH_OUTFLOWS:_"))
        OutVect!.addItem(str(outflows))
        xwk=fnblank(1)
        
        xwk=fnblank(3)
        OutVect!.addItem(Translate!.getTranslation("AON_CASH_INC_DEC:_"))
        OutVect!.addItem(str(cash_inc_dec))
        xwk=fnblank(1)
    
    endif
    

rem --- All Done

    goto std_exit

check_heading: rem --- Check transaction subheading

    OutVect!.addItem(Translate!.getTranslation("AON_CHECKS:"))
    xwk=fnblank(5)
    checkhead=1
return;rem not using pbuf$ anymore. cah Jul08

    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(1)=bar$
    pbuf$(o[1],8)=Translate!.getTranslation("AON__CHECKS_")
    OutVect!.addItem(pbuf$)
    dim pbuf$(pbufwidth)
    pbuf$(o[0])=Translate!.getTranslation("AON_NUMBER")
    pbuf$(o[1])=Translate!.getTranslation("AON_TYPE")
    pbuf$(o[2])=Translate!.getTranslation("AON_CHECK_DATE")
    pbuf$(o[3])=Translate!.getTranslation("AON_DESCRIPTION")
    pbuf$(o[4]+m1-6)=Translate!.getTranslation("AON_AMOUNT")
    pbuf$(o[5])=Translate!.getTranslation("AON_PAID?")
    OutVect!.addItem(pbuf$)
    dim pbuf$(pbufwidth)
    pbuf$(1)=bar$
    OutVect!.addItem(pbuf$)
    checkhead=1
    l=l+4
    return

other_heading: rem --- Other transaction subheading

    OutVect!.addItem(Translate!.getTranslation("AON_DEPOSITS")+"/"+Translate!.getTranslation("AON_OTHER_TRANSACTIONS:"))
    xwk=fnblank(5)
    otherhead=1
return;rem not using pbuf$ anymore. cah Jul08

    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(1)=bar$
    pbuf$(o[1],20)=Translate!.getTranslation("AON__OTHER_TRANSACTIONS_")
    OutVect!.addItem(pbuf$)
    dim pbuf$(pbufwidth)
    pbuf$(o[0])=Translate!.getTranslation("AON_NUMBER")
    pbuf$(o[1])=Translate!.getTranslation("AON_TYPE")
    pbuf$(o[2])=Translate!.getTranslation("AON_TRANS_DATE")
    pbuf$(o[3])=Translate!.getTranslation("AON_DESCRIPTION")
    pbuf$(o[4]+m1-6)=Translate!.getTranslation("AON_AMOUNT")
    pbuf$(o[5])=Translate!.getTranslation("AON_PAID?")
    OutVect!.addItem(pbuf$)
    dim pbuf$(pbufwidth)
    pbuf$(1)=bar$
    OutVect!.addItem(pbuf$)
    otherhead=1
    l=l+4
    return

balance_heading: rem --- Account balance subheading

    OutVect!.addItem(Translate!.getTranslation("AON_BALANCE_INFORMATION:"))
    xwk=fnblank(5)
return;rem not using pbuf$ anymore. cah Jul08

    OutVect!.addItem("")
    dim pbuf$(pbufwidth)
    pbuf$(1)=bar$
    pbuf$(o[1],21)=Translate!.getTranslation("AON__BALANCE_INFORMATION_")
    OutVect!.addItem(pbuf$)
    dim pbuf$(pbufwidth)
    pbuf$(o[4]+m1-6)=Translate!.getTranslation("AON_AMOUNT")
    pbuf$(o[5])=Translate!.getTranslation("AON_ITEMS")
    OutVect!.addItem(pbuf$)
    dim pbuf$(pbufwidth)
    pbuf$(1)=bar$
    OutVect!.addItem(pbuf$)
    return

calc_inflows_and_outflows: rem --- calculate cash inflows and outflows for the statement period and then differnce

    inflows=0
    outflows=0

    rem --- get the Prior and Current Statement Dates
    stmtdate$=glm05a.curstm_date$
    priordate$=glm05a.pri_end_date$
	
    if len(stmtdate$) = 8 and len(priordate$) = 8 then

        rem --- Find G/L Record"
        rem dim glt06a$:user_tpl.glt06_tpl$
        rem dim gls01a$:user_tpl.gls01_tpl$
        rem glt06_dev=user_tpl.glt06_dev
        rem gls01_dev=user_tpl.gls01_dev
        readrecord(gls01_dev,key=firm_id$+"GL00")gls01a$
        
        call stbl("+DIR_PGM")+"adc_fiscalperyr.aon",firm_id$,stmtdate$,stmtperiod$,stmtyear$,table_chans$[all],status
	if !status then 
	
	    stmtperiod=num(stmtperiod$)
	    stmtperiod$=str(stmtperiod:"00")
	    stmtyear=num(stmtyear$)
	    if gls01a.gl_yr_closed$="Y" currentgl=num(gls01a.current_year$) else currentgl=num(gls01a.current_year$)-1; rem "GL year end closed?
	    priorgl=currentgl-1
	    nextgl=currentgl+1
		
       	    call stbl("+DIR_PGM")+"adc_fiscalperyr.aon",firm_id$,priordate$,priordateperiod$,priordateyear$,table_chans$[all],status
	    if !status then 
	
		priordateperiod=num(priordateperiod$)
		priordateperiod$=str(priordateperiod:"00")
		priordateyear=num(priordateyear$)
		if gls01a.gl_yr_closed$="Y" prior_currentgl=num(gls01a.current_year$) else prior_currentgl=num(gls01a.current_year$)-1; rem "GL year end closed?
		prior_priorgl=prior_currentgl-1
		prior_nextgl=prior_currentgl+1

		rem --- Initialize displayColumns! object
		if displayColumns!=null() then
		    use ::glo_DisplayColumns.aon::DisplayColumns
    		    displayColumns!=new DisplayColumns(firm_id$)
		endif
		r1$=firm_id$+glm05a.gl_account$
		if priordateyear=prior_priorgl s1$=r1$+displayColumns!.getYear("2"); rem "Use prior yea1r actual
		if priordateyear=prior_currentgl s1$=r1$+displayColumns!.getYear("0"); rem "Use current year actual
		if priordateyear=prior_nextgl s1$=r1$+displayColumns!.getYear("4"); rem "Use next year actual
		if s1$<>"" then 
		    rem --- accumulate transactions in the statment period"
		    call stbl("+DIR_PGM")+"adc_daydates.aon",priordate$,followingday$,1
		    d1$=r1$+priordateyear$+priordateperiod$+followingday$
		    readrecord (glt06_dev,key=d1$,dom=*next)
		    while 1
		        k$=key(glt06_dev,END=*break)
		        if pos(r1$=k$)<>1 then break
		        if k$(19,8)>stmtdate$ then break
		        dim glt06a$:fattr(glt06a$)
		        read record (glt06_dev,key=k$)glt06a$
rem				if glt06a.reference_02$="APPLY     " then escape
				
				

			If glt06a.reference_02$="APPLY     " then continue
			
			if glt06a.trans_amt > 0 then
			    inflows=inflows+glt06a.trans_amt
			else	
			    outflows=outflows+glt06a.trans_amt		
			endif
		    wend
		    cash_inc_dec = inflows+outflows
		endif
	    endif
	endif
    endif
    return

rem --- Functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask
:      else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
alpha_mask:
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value
   
    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include disp_message.src

disp_message:rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
return
	
rem #endinclude disp_message.src

rem #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem #endinclude std_error.src

rem #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5)),
:                                   str(err),rd_err_text$,rd_err_act$

std_missing_params_exit:
    
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape
    
std_missing_params_release:

    status=999
    if pgm(-1)<>pgm(-2) exit 
    release

rem #endinclude std_missing_params.src

rem #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status
    rd_called$="YES"
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next

    exit

rem #endinclude std_end.src

    end
