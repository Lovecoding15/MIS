0001 REM <oem_keyorlic.bbx>
0010 SETERR EXIT
0020 BEGIN
0030 DIM OEM$:"serial_num:c(9),tran:c(4),date:c(8),item_num:c(8),rev_level:c(5
0030:),prod_type:c(1),sale_type:c(1),active_flag:c(1),temp_lic_flag:c(1),lic_a
0030:uth:c(13),memo:c(20),float_flag:c(1),tran_type:c(3),available:c(26*),cur_
0030:user:n(4*),new_user:n(4*),lic_count:n(1*),num1:n(1*),num2:n(1*)"
0040 LET STAT=14,KEY$="",AUTHNUM$="",LIC$="",ARGNUM=1,ARG$="",AON$=STBL("AON")
0050 LET FHOME$=STBL("FLEXHOME"),ADATA$=AON$+"ADATA/"
0052 LET DEBUGLOG$=ADATA$+"oshdebug.log"; LET A=SCALL("echo START > "+DEBUGLOG$)
0053 LET DEBUG=UNT; OPEN (DEBUG)DEBUGLOG$
0060 GETARGV: 
0070 LET ARG$=ARGV(ARGNUM,ERR=ENDARG)
0080 SWITCH ARGNUM
0090 CASE 1; LET OEM.SERIAL_NUM$=CVS(ARG$,4); WRITE (DEBUG)"1."+OEM.SERIAL_NUM
0090:$; BREAK
0100 CASE 2; IF LEN(ARG$)=8 THEN LET OEM.DATE$=ARG$(5,4)+ARG$(1,4) FI ; WRITE 
0100:(DEBUG)"2."+OEM.DATE$; BREAK
0110 CASE 3; LET OEM.ITEM_NUM$=ARG$; WRITE (DEBUG)"3."+OEM.ITEM_NUM$; BREAK
0120 CASE 4; SETERR ENDSWITCH; LET CUSROK=0,OEM.CUR_USER=NUM(ARG$),CUSROK=1; W
0120:RITE (DEBUG)"4."+STR(OEM.CUR_USER); BREAK
0130 CASE 5; SETERR ENDSWITCH; LET NUSROK=0,OEM.NEW_USER=NUM(ARG$),NUSROK=1; W
0130:RITE (DEBUG)"5."+STR(OEM.NEW_USER); BREAK
0140 CASE 6; LET OEM.PROD_TYPE$=CVS(ARG$,4); WRITE (DEBUG)"6."+OEM.PROD_TYPE$;
0140: BREAK
0150 CASE 7; LET OEM.REV_LEVEL$=ARG$; WRITE (DEBUG)"7."+OEM.REV_LEVEL$; BREAK
0160 CASE 8; LET OEM.SALE_TYPE$=CVS(ARG$,4); WRITE (DEBUG)"8."+OEM.SALE_TYPE$;
0160: BREAK
0170 ENDSWITCH: 
0180 CASE DEFAULT; BREAK
0190 SWEND
0200 SETERR EXIT
0210 LET ARGNUM=ARGNUM+1
0220 GOTO GETARGV
0230 ENDARG: 
0240 REM Verify data - status codes:
0250 REM 	" 1 - invalid call arguments - user, date
0260 REM 	" 2 - invalid rev level
0270 REM 	" 6 - error reading or writing our database
0280 REM 	"14 - ??
0290 REM 	"15 - invalid port
0300 REM 	"16 - error generating key or license 
0310 REM IF INFO(3,2)="thines" THEN ESCAPE
0320 REM Check input is valid
0322 SETTRACE (DEBUG)
0330 IF ARGNUM<7 THEN GOTO EXIT
0340 LET STAT=1,SN_IN$=OEM.SERIAL_NUM$; IF CUSROK=0 OR NUSROK=0 THEN GOTO EXIT
0350 IF OEM.CUR_USER=0 AND OEM.NEW_USER=0 THEN GOTO EXIT
0360 IF OEM.CUR_USER<0 OR OEM.NEW_USER<0 OR OEM.NEW_USER>1024 THEN GOTO EXIT
0370 IF POS(OEM.PROD_TYPE$="NDUPRH")=0 THEN GOTO EXIT
0380 LET DT$=""; FOR R=1 TO LEN(OEM.DATE$); IF POS(OEM.DATE$(R,1)="0123456789"
0380:) THEN LET DT$=DT$+OEM.DATE$(R,1) FI ; NEXT R
0390 LET OEM.DATE$=DT$; IF LEN(DT$)<>8 THEN GOTO EXIT
0400 LET YR$=DATE(0:"%Y"),YR=NUM(YR$); IF NUM(DT$(1,4))<YR-1 OR NUM(DT$(1,4))>
0400:YR THEN GOTO EXIT
0410 IF NUM(DT$(5,2))<1 OR NUM(DT$(5,2))>12 THEN GOTO EXIT
0420 IF NUM(DT$(7,2))<1 OR NUM(DT$(7,2))>31 THEN GOTO EXIT
0430 LET TTYPE$=""; IF OEM.CUR_USER=0 AND OEM.NEW_USER>0 THEN LET TTYPE$="NEW"
0440 IF OEM.CUR_USER>0 AND OEM.NEW_USER>0 AND OEM.CUR_USER>=OEM.NEW_USER THEN 
0440:LET TTYPE$="UPD"
0450 IF OEM.CUR_USER>0 AND OEM.CUR_USER<OEM.NEW_USER THEN LET TTYPE$="ADD"
0460 IF OEM.NEW_USER=0 THEN LET OEM.ACTIVE_FLAG$="N",TTYPE$="XXX" ELSE LET OEM
0460:.ACTIVE_FLAG$="Y"
0470 IF TTYPE$="" THEN GOTO EXIT
0480 IF TTYPE$<>"NEW" THEN IF LEN(CVS(OEM.SERIAL_NUM$,3))<>9 THEN GOTO EXIT
0490 LET STAT=15; IF POS(TTYPE$="NEWUPD") AND OEM.ITEM_NUM$(5,1)="4" THEN GOTO
0490: EXIT
0500 LET REVLVL$=""; FOR R=1 TO LEN(OEM.REV_LEVEL$); IF POS(OEM.REV_LEVEL$(R,1
0500:)=".0123456789") THEN LET REVLVL$=REVLVL$+OEM.REV_LEVEL$(R,1) FI ; NEXT R
0510 IF LEN(REVLVL$)<4 THEN LET REVLVL$=REVLVL$+"0"; GOTO 0510
0520 LET OEM.REV_LEVEL$=REVLVL$,REV_NUM=NUM(REVLVL$)
0530 REM Check for valid port and rev
0540 LET K$="",FIRM$="01",CSM03=UNT; OPEN (CSM03)ADATA$+"CSM-03"
0550 READ (CSM03,KEY=FIRM$,DOM=READ_CSM03)
0560 READ_CSM03: READ (CSM03,END=END_CSM03)C0$,C1$,C2$
0570 IF C0$(1,2)<>FIRM$ THEN GOTO END_CSM03
0580 IF OEM.ITEM_NUM$(1,4)=C2$(1,4) THEN LET K$=K$+C0$
0590 GOTO READ_CSM03; REM Find all matching ports, save keys. at this time, we
0590: only have one oslevel per port, but this could change. 12/3/1999
0600 END_CSM03: CLOSE (CSM03); IF K$="" THEN GOTO EXIT
0610 GOTO OPEN_OEM; REM skip checking rev for port -revs they sell may not be 
0610:the same a the ones we sell
0620 LET STAT=2,CSM13=UNT,FOUND=0; OPEN (CSM13)ADATA$+"CSM-13"
0630 LET CSM04=UNT; OPEN (CSM04)ADATA$+"CSM-04"
0640 REM Look in os/rev xref for revs linked to ports, then check revs for any
0640: match 
0650 POSITION_CSM13: 
0660 IF K$="" THEN GOTO END_CSM13 ELSE LET K1$=K$(1,2)+"C"+K$(3,3),K$=K$(6)
0670 READ (CSM13,KEY=K1$,DOM=READ_CSM13)
0680 READ_CSM13: READ (CSM13,END=POSITION_CSM13)C0$,C1$; IF C0$(1,6)<>K1$ THEN
0680: GOTO POSITION_CSM13
0690 READ (CSM04,KEY=C0$(1,2)+C1$(1,3),DOM=READ_CSM13)*,D$; IF POS(CVS(OEM.REV
0690:_LEVEL$,2)=D$)=0 THEN GOTO READ_CSM13 ELSE LET FOUND=1
0700 END_CSM13: CLOSE (CSM13); CLOSE (CSM04); IF FOUND=0 THEN GOTO EXIT
0710 OPEN_OEM: LET OEM=UNT; OPEN (OEM)ADATA$+"oem_sn_trans.dat"
0720 LET ODBC=POS("146"=OEM.ITEM_NUM$)
0730 REM Determine whether we need a key or a license
0740 LET FLEX=1,FLEXREV=2.1; IF ODBC=1 THEN LET FLEXREV=2
0750 IF OEM.ITEM_NUM$(5,1)<>"5" AND ODBC<>1 THEN LET FLEX=0
0760 IF FLEX AND REV_NUM<FLEXREV THEN LET FLEX=0
0770 IF POS(OEM.SERIAL_NUM$(1,3)="BODPRO",3) THEN GOSUB CHECK_BASIS; IF SKIPIT
0770: THEN GOTO REPEAT_EXCH
0780 LET TRAN=0,STAT=1
0790 IF EXCHANGE THEN GOTO NEXT_TRAN
0800 GOSUB FIND_PRV
0810 IF TRAN=0 THEN GOTO NEXT_TRAN
0820 IF TTYPE$="NEW" THEN GOTO EXIT
0830 IF PRV.ACTIVE_FLAG$="N" THEN GOTO EXIT
0840 IF PRV.ITEM_NUM$=OEM.ITEM_NUM$ AND PRV.REV_LEVEL$=OEM.REV_LEVEL$ AND PRV.
0840:CUR_USER=OEM.CUR_USER AND PRV.NEW_USER=OEM.NEW_USER THEN GOTO USE_PRV
0850 IF PRV.NEW_USER<>OEM.CUR_USER THEN GOTO EXIT
0860 IF PRV.ITEM_NUM$(1,2)<>OEM.ITEM_NUM$(1,2) THEN GOTO EXIT
0870 NEXT_TRAN: 
0880 LET OEM.TRAN$=STR(TRAN+1:"0000"),OEM.MEMO$=FILL(20)
0890 IF TTYPE$="XXX" THEN GOTO CHECK_XXX
0900 IF EXCHANGE=0 AND TRAN=0 THEN GOSUB SN_CANCEL
0910 IF FLEX=0 THEN GOTO ACTKEY
0920 LET FLOAT$="Y"; IF OEM.NEW_USER<2 AND (OEM.ITEM_NUM$(1,4)="1066" OR ODBC=
0920:1) THEN LET FLOAT$="N"
0930 LET OEM.FLOAT_FLAG$=FLOAT$
0940 CALL FHOME$+"bin/genlicauth.bbx",OEM.SERIAL_NUM$,FLOAT$,"",AUTHNUM$
0950 LET OEM.LIC_AUTH$=AUTHNUM$,STAT=16; GOSUB TEMP_LICENSE
0960 GOTO WRITE_OEM_TRAN
0970 ACTKEY: 
0980 LET REVSN$="REV "+OEM.REV_LEVEL$,TYPE$="STD",PORT$=OEM.ITEM_NUM$(1,5)
0990 IF PORT$(5,1)<>"5" THEN LET PORT$=PORT$(1,4)
1000 REM Use 60 only-we only have 60&365 day demos right now-DEC 1999
1010 IF OEM.PROD_TYPE$="U" THEN LET TYPE$="D60"
1020 IF OEM.PROD_TYPE$="D" THEN LET TYPE$="D60"
1030 LET CURRENTDIR$=DIR(""); CHDIR AON$+"bas"; LET KEYPATH$=""
1032 rem - KEYPATH$ not used by SYGENKEY as of 2/15/01- th
1040 CALL AON$+"bas/SYGENKEY",TYPE$,OEM.SERIAL_NUM$,OEM.NEW_USER,PORT$,REVS
1040:N$,KEYPATH$,KEY$
1050 CHDIR CURRENTDIR$
1060 IF POS("ERROR"=CVS(KEY$,4)) THEN GOTO EXIT
1070 LET OEM.LIC_AUTH$=KEY$
1080 GOTO WRITE_OEM_TRAN
1090 CHECK_XXX: 
1100 LET STAT=1; IF TRAN=0 THEN GOTO EXIT
1110 IF OEM.CUR_USER=1 AND POS(OEM.ITEM_NUM$(1,5)="1066514670",5) THEN GOTO WR
1110:ITE_OEM_TRAN
1120 IF LEN(NEWDT$)<>8 THEN GOTO EXIT
1130 LET Y1=NUM(NEWDT$(1,4)),M1=NUM(NEWDT$(5,2)),D1=NUM(NEWDT$(7,2))
1140 IF Y1<1999 THEN GOTO EXIT
1150 LET JTODAY=JUL(0,0,0),JNEWDT=JUL(Y1,M1,D1,ERR=EXIT)
1160 IF JTODAY-JNEWDT>90 THEN GOTO EXIT
1170 WRITE_OEM_TRAN: 
1180 LET OEM.TEMP_LIC_FLAG$="N",OEM.TRAN_TYPE$=TTYPE$,OEM.AVAILABLE$=FILL(26)
1190 LET OEM.NUM1=0,OEM.NUM2=0,OEM.LIC_COUNT=0,STAT=6
1200 WRITE RECORD (OEM)OEM$
1210 LET STAT=0; GOTO EXIT
1220 FIND_PRV: 
1230 LET NEWDT$=""
1240 DIM PRV$:FATTR(OEM$)
1250 READ (OEM,KEY=OEM.SERIAL_NUM$,DOM=OEM_KEY)
1260 OEM_KEY: 
1270 LET K$=KEY(OEM,END=END_KEY); IF K$(1,9)<>OEM.SERIAL_NUM$ THEN GOTO END_KE
1270:Y
1280 READ RECORD (OEM,KEY=K$)PRV$; LET TRAN=NUM(PRV.TRAN$); IF PRV.TRAN_TYPE$=
1280:"NEW" THEN LET NEWDT$=PRV.DATE$
1285 IF POS("DEV"=PRV.ITEM_NUM$) THEN LET STAT=1; EXITTO EXIT
1290 GOTO OEM_KEY
1300 END_KEY: RETURN
1310 SN_CANCEL: 
1320 IF TTYPE$="NEW" THEN GOSUB NEW_SERIALNUM; LET OEM.SERIAL_NUM$=NEWSN$; RET
1320:URN
1330 LET OLDSN$=OEM.SERIAL_NUM$,SN_CANCEL=UNT; OPEN (SN_CANCEL)ADATA$+"oem_sn
1330:_cancel.dat"
1340 DIM OLD$:"sn_old:c(9),sn_occurs:n(3*),times_updated:n(3*),appeal:c(1)"
1350 READ RECORD (SN_CANCEL,KEY=OLDSN$,DOM=CHECK_OLD)OLD$
1360 CHECK_OLD: IF OLD.SN_OLD$<>OLDSN$ THEN EXITTO EXIT
1370 IF OLD.SN_OCCURS=0 THEN EXITTO EXIT; REM Not a valid serial number
1380 IF OLD.TIMES_UPDATED>=OLD.SN_OCCURS THEN EXITTO ITS_CANCELED
1390 LET OLD.TIMES_UPDATED=OLD.TIMES_UPDATED+1
1400 WRITE RECORD (SN_CANCEL)OLD$
1410 LET OEM.MEMO$="Cancel "+OLDSN$
1420 GOSUB NEW_SERIALNUM; LET OEM.SERIAL_NUM$=NEWSN$
1430 WRITE_XREF: 
1440 GOSUB FIND_XREF
1450 LET SN_XREF.SN_OLD$=OLDSN$,SN_XREF.SEQ$=STR(SEQ:"000"),SN_XREF.SN_NEW$=NE
1450:WSN$
1460 WRITE RECORD (XREF)SN_XREF$
1470 RETURN
1480 NEW_SERIALNUM: 
1490 LET OEMID$="OSH"
1500 LET NUMCHAN=UNT,K$=OEMID$; OPEN (NUMCHAN)ADATA$+"oemnumbers.dat"
1510 NEXT_SN: LET NEWSN$=""
1520 EXTRACT RECORD (NUMCHAN,KEY=K$,DOM=NEW_SERIAL_END)NUMREC$
1530 IF LEN(NUMREC$)<14 THEN GOTO NEW_SERIAL_END
1540 LET NEWSN$=OEMID$+NUMREC$(4,6),NXT=NUM(NUMREC$(4,6))+1,NUMREC$(4,6)=STR(N
1540:XT:"000000"); IF NXT>399999 THEN LET STAT=14; EXITTO EXIT
1550 WRITE RECORD (NUMCHAN,KEY=K$)NUMREC$
1560 END_NUMFILE: 
1570 READ (OEM,KEY=NEWSN$+"0001",DOM=NEW_SERIAL_END); GOTO NEXT_SN
1580 LET STAT=14; EXITTO EXIT
1590 NEW_SERIAL_END: CLOSE (NUMCHAN)
1600 RETURN
1610 FIND_XREF: 
1620 DIM SN_XREF$:"sn_old:c(9),seq:c(3),sn_new:c(9)"
1630 LET SEQ=1,XREF=UNT; OPEN (XREF)ADATA$+"oem_sn_xref.dat"
1640 READ (XREF,KEY=OLDSN$,DOM=XREF_KEY)
1650 XREF_KEY: LET KX$=KEY(XREF,END=ENDXREF); IF KX$(1,9)<>OLDSN$ THEN GOTO EN
1650:DXREF
1660 LET SEQ=SEQ+1; READ RECORD (XREF,KEY=KX$)SN_XREF$; GOTO XREF_KEY
1670 ENDXREF: RETURN
1680 CHECK_BASIS: 
1690 IF TTYPE$="XXX" THEN LET STAT=1; EXITTO EXIT
1700 LET SKIPIT=1,SNM01=UNT; OPEN (SNM01)ADATA$+"SNM-01"
1710 LET K$=OEM.SERIAL_NUM$+FILL(20-LEN(OEM.SERIAL_NUM$))
1720 DIM SNM01$:"SERIAL_NBR:C(20*),SERIAL_DESC:C(60*),PRODUCT:C(3),PLATFORM:C(
1720:3),OS_LEVEL:C(3),PRODUCT_REV:C(3),LICENSE_TYPE:C(3),MEDIA_TYPE:C(3*),ACTI
1720:VE_FLAG:C(1),ORIG_SALE:C(3),CUSTOMER_NBR:C(6),PORT_ID:C(5),FIRM_ID:C(2),D
1720:EALER_STR:C(18*),COMMENT:C(60*),USERS:N(5*),DEALER_NUM_1:N(1*),DEALER_NUM
1720:_2:N(1*)"
1730 READ RECORD (SNM01,KEY=K$,DOM=CHECK_BASIS_END)SNM01$
1740 IF SNM01.ACTIVE_FLAG$="N" OR SNM01.CUSTOMER_NBR$<>"001081" THEN GOTO CHEC
1740:K_BASIS_END
1750 IF SNM01.USERS<>OEM.CUR_USER THEN GOTO CHECK_BASIS_END
1760 IF POS(SNM01.LICENSE_TYPE$="D1YD60",3) THEN GOTO CHECK_BASIS_END
1770 GOSUB NEW_SERIALNUM; IF NEWSN$="" OR POS("ERR"=NEWSN$) THEN GOTO CHECK_BA
1770:SIS_END
1780 LET SKIPIT=0,EXCHANGE=1,TEMP_FLAG$="N"
1790 LET OLDSN$=OEM.SERIAL_NUM$,OEM.SERIAL_NUM$=NEWSN$
1800 IF CVS(SNM01.LICENSE_TYPE$,2)="ROO" THEN LET OEM.SALE_TYPE$="R"
1810 LET SNM01.ACTIVE_FLAG$="N",SNM01.COMMENT$="Exchanged for "+NEWSN$+" "+DAT
1810:E(0)
1820 WRITE RECORD (SNM01,KEY=SNM01$(1,20))SNM01$
1830 GOSUB WRITE_XREF
1840 CHECK_BASIS_END: CLOSE (SNM01)
1850 RETURN
1860 TEMP_LICENSE: 
1870 LET U=OEM.NEW_USER; IF OEM.FLOAT_FLAG$="N" THEN LET U=0
1880 LET PROD$="D60",SNFILE$=FHOME$+"lic/"+CVS(OEM.SERIAL_NUM$,2)+".lic"
1890 IF ODBC=1 THEN LET PROD$="ODBCD60" ELSE IF OEM.ITEM_NUM$(1,2)="12" THEN L
1890:ET PROD$="DSD60"
1900 CALL FHOME$+"bin/genflexlic.bbx",PROD$,OEM.REV_LEVEL$,OEM.SERIAL_NUM$,U,"
1900:",LIC$
1910 ERASE SNFILE$,ERR=CHECK_LIC
1920 CHECK_LIC: 
1930 IF CVS(LIC$,3)="" OR POS("ERROR"=CVS(LIC$,4)) THEN EXITTO EXIT
1940 LET P=POS($09$=LIC$); IF P THEN LET LIC$(P,1)=" "; GOTO CHECK_LIC
1950 RETURN
1960 USE_PRV: 
1970 LET OEM.NEW_USER=PRV.NEW_USER,OEM.FLOAT_FLAG$=PRV.FLOAT_FLAG$,OEM.REV_LEV
1970:EL$=PRV.REV_LEVEL$,OEM.ITEM_NUM$=PRV.ITEM_NUM$,KEY$=CVS(PRV.LIC_AUTH$,2)
1980 LET ODBC=POS("146"=OEM.ITEM_NUM$),FLEX=0; IF LEN(KEY$)=10 THEN LET FLEX=1
1990 IF FLEX THEN LET AUTHNUM$=KEY$,KEY$="",STAT=16; GOSUB TEMP_LICENSE
2000 LET STAT=0; GOTO EXIT
2010 REPEAT_EXCH: 
2020 DIM SN_XREF$:"sn_old:c(9),seq:c(3),sn_new:c(9)"
2030 LET K$=OEM.SERIAL_NUM$,FOUND=0,XREF=UNT; OPEN (XREF)ADATA$+"oem_sn_xref.
2030:dat"
2040 READ (XREF,KEY=K$,DOM=NXR)
2050 NXR: READ RECORD (XREF,END=ENDX)SN_XREF$
2060 IF SN_XREF.SN_OLD$=K$ THEN LET FOUND=1,K$=SN_XREF.SN_NEW$
2070 ENDX: IF FOUND=0 THEN GOTO EXIT
2080 DIM HOLDOEM$:FATTR(OEM$)
2090 LET AUTHNUM$="",KEY$=""; READ (OEM,KEY=K$,DOM=RP1)
2100 RP1: READ RECORD (OEM,END=RP2)HOLDOEM$
2110 IF K$<>HOLDOEM.SERIAL_NUM$ THEN GOTO RP2
2120 LET OEM$=FIELD(HOLDOEM$)
2130 LET AUTHNUM$=CVS(HOLDOEM.LIC_AUTH$,2); GOTO RP1
2140 RP2: IF AUTHNUM$="" THEN LET STAT=6; GOTO EXIT
2150 IF FLEX THEN LET STAT=16; GOSUB TEMP_LICENSE ELSE LET KEY$=AUTHNUM$,AUTHN
2150:UM$=""
2160 LET STAT=0; GOTO EXIT
2170 ITS_CANCELED: REM check to see if we should return the last transaction d
2170:ata
2180 GOSUB FIND_XREF; IF SEQ=1 THEN GOTO E_MSG
2190 LET TRAN=0,OEM.SERIAL_NUM$=SN_XREF.SN_NEW$; GOSUB FIND_PRV; IF TRAN=0 THE
2190:N GOTO E_MSG
2200 IF PRV.ACTIVE_FLAG$="N" THEN GOTO E_MSG
2210 IF PRV.DATE$=OEM.DATE$ AND PRV.ITEM_NUM$=OEM.ITEM_NUM$ AND PRV.REV_LEVEL$
2210:=OEM.REV_LEVEL$ AND PRV.CUR_USER=OEM.CUR_USER AND PRV.NEW_USER=OEM.NEW_US
2210:ER AND PRV.PROD_TYPE$=OEM.PROD_TYPE$ AND PRV.SALE_TYPE$=OEM.SALE_TYPE$ TH
2210:EN GOTO USE_PRV
2220 E_MSG: LET SUBJ$=OLDSN$,TO$="osas-cust",FROM$="mikey@basis.cloud",CC$=""
2230 LET MSG$="Unable to complete requested transaction. Contact your BASIS ac
2230:count manager for duplication reconciliation."
2240 IF OLD.APPEAL$="Y" THEN LET MSG$="This license is no longer available for
2240: upgrade. Contact your BASIS sales manager for assistance."
2250 LET EMSG$="To: "+TO$+$0A$+"From: "+FROM$+$0A$
2260 IF CC$<>"" THEN LET EMSG$=EMSG$+"Cc: "+CC$+$0A$
2270 LET EMSG$=EMSG$+"Subject: "+SUBJ$+$0A$+$0A$+MSG$
2280 LET EMFILE$=AON$+"tmp/"+NEWSN$+"email.txt"
2290 ERASE EMFILE$,ERR=OPEN_EMFILE
2300 OPEN_EMFILE: STRING EMFILE$
2310 LET EMCHAN=UNT; OPEN (EMCHAN)EMFILE$
2320 WRITE RECORD (EMCHAN)EMSG$
2330 CLOSE (EMCHAN)
2340 REM LET A=SCALL("/usr/lib/sendmail -t < "+EMFILE$)
2350 ERASE EMFILE$,ERR=EXIT
2360 GOTO EXIT
9000 REM 9000
9010 EXIT: 
9015 SETERR EXIT2
9020 PRINT STAT
9030 PRINT CVS(OEM.SERIAL_NUM$,2)
9040 IF STAT THEN PRINT "" ELSE PRINT KEY$
9050 IF STAT THEN PRINT "" ELSE PRINT AUTHNUM$
9060 IF STAT THEN PRINT "" ELSE PRINT LIC$
9070 SETERR EXIT2
9090 LET LOGENTRY$=$22$+"Stat:"+STR(STAT)+" SN in:"+SN_IN$+" SN out:"+OEM.SERI
9090:AL_NUM$+" "+KEY$+" "+AUTHNUM$+" "+DATE(0)+" "+OEM.ITEM_NUM$+" "+OEM.REV_L
9090:EVEL$+" Ptype:"+OEM.PROD_TYPE$+" Stype:"+OEM.SALE_TYPE$+" Cuser:"+STR(OEM
9090:.CUR_USER)+" Nuser:"+STR(OEM.NEW_USER)+" "+OEM.DATE$+$22$
9100 LET A=SCALL("echo "+LOGENTRY$+" >> "+ADATA$+"oem_keyorlic.log")
9110 EXIT2: 
9115 ENDTRACE
9120 RELEASE
