[Program]
Creation Date=2006-01-11
Creation Time=14:59:55
Event Set=LEGACY
Generator Program=gb_func
Last Build Date=2022-05-26
Last Build Time=15:17:19
Precision=99
Program Name=extSpptInterface
Remarks=Yes
Resource File=extSpptInterface.arc
Show Forms=All

[EOJ]
rem ' close files

close(emc01, err=*next)

close(snm01, err=*next)
close(snm02, err=*next)

close(amr01, err=*next)
close(arm02, err=*next)
close(arm10f, err=*next)
close(arm10l, err=*next)

close(csm01, err=*next)
close(csm02, err=*next)
close(csm03, err=*next)
close(csm04, err=*next)
close(csm05, err=*next)

close(snmel, err=*next)
close(snmeu, err=*next)

close(smc01, err=*next)

close(logextract, err=*next)
close(sn_license, err=*next)
close(sn_host, err=*next)
close(license_reset, err=*next)

close(are83, err=*next)
close(snt01, err=*next)

release

[Init]
rem ' get all the controls in object varilables


ourAPI! = BBjAPI()
ourSysGui! = ourAPI!.getSysGui()
ourSystemMetrics!=ourSysGui!.getSystemMetrics()
scrDimension!=ourSystemMetrics!.getScreenSize()

rem ' login window
loginWindow! = ourSysGui!.getWindow("loginWindow")

userNameLabel! = cast(BBjStaticText, loginWindow!.getControl("userNameLabel"))
userName! = cast(BBjEditBox, loginWindow!.getControl("userName"))
passwordLabel! = cast(BBjStaticText, loginWindow!.getControl("passwordLabel"))
password! = cast(BBjEditBox, loginWindow!.getControl("password"))
exitButton! = cast(BBjButton, loginWindow!.getControl("exitButton"))
loginButton! = cast(BBjButton, loginWindow!.getControl("loginButton"))

rem ' main window
mainWindow! = ourSysGui!.getWindow("mainWindow")

snLabel! = cast(BBjStaticText, mainWindow!.getControl("snLabel"))
serialNumber! = cast(BBjEditBox, mainWindow!.getControl("serialNumber"))
serialNumber!.focus()
ThisCTX = ourSysGui!.getContext()
custNameLabel! = cast(BBjStaticText, mainWindow!.getControl("custNameLabel"))
customerName! = cast(BBjEditBox, mainWindow!.getControl("customerName"))
searchButton! = cast(BBjButton, mainWindow!.getControl("searchButton"))

productLabel! = cast(BBjStaticText, mainWindow!.getControl("productLabel"))
platformLabel! = cast(BBjStaticText, mainWindow!.getControl("platformLabel"))
oslevelLabel! = cast(BBjStaticText, mainWindow!.getControl("oslevelLabel"))
revisionLabel! = cast(BBjStaticText, mainWindow!.getControl("revisionLabel"))
licenseTypeLabel! = cast(BBjStaticText, mainWindow!.getControl("licenseTypeLabel"))

product! = cast(BBjEditBox, mainWindow!.getControl("product"))
platform! = cast(BBjEditBox, mainWindow!.getControl("platform"))
oslevel! = cast(BBjEditBox, mainWindow!.getControl("oslevel"))
revision! = cast(BBjEditBox, mainWindow!.getControl("revision"))
licenseType! = cast(BBjEditBox, mainWindow!.getControl("licenseType"))

productDescription! = cast(BBjStaticText, mainWindow!.getControl("productDescription"))
platformDescription! = cast(BBjStaticText, mainWindow!.getControl("platformDescription"))
oslevelDescription! = cast(BBjStaticText, mainWindow!.getControl("osLevelDescription"))
revisionDescription! = cast(BBjStaticText, mainWindow!.getControl("revisionDescription"))
licenseTypeDescription! = cast(BBjStaticText, mainWindow!.getControl("licenseTypeDescription"))

euCompanyLabel! = cast(BBjStaticText, mainWindow!.getControl("euCompanyLabel"))
euContactLabel! = cast(BBjStaticText, mainWindow!.getControl("euContactLabel"))
ecCompany! = cast(BBjEditBox, mainWindow!.getControl("euCompany"))
ecContact! = cast(BBjEditBox, mainWindow!.getControl("euContact"))

greenColor! = ourSysGui!.makeColor(ourSysGui!.GREEN)
redColor! = ourSysGui!.makeColor(ourSysGui!.RED)
whiteColor! = ourSysGui!.makeColor(ourSysGui!.WHITE)

customerTypeLabel! = cast(BBjStaticText, mainWindow!.getControl("customerTypeLabel"))
salesPersonLabel! = cast(BBjStaticText, mainWindow!.getControl("salesPersonLabel"))
customerType! = cast(BBjEditBox, mainWindow!.getControl("customerType"))
salesPerson! = cast(BBjEditBox, mainWindow!.getControl("salesPerson"))

userCountLabel! = cast(BBjStaticText, mainWindow!.getControl("userCountLabel"))
userCount! = cast(BBjEditBox, mainWindow!.getControl("userCount"))

samStatusLabel! = cast(BBjStaticText, mainWindow!.getControl("samStatusLabel"))
samStatus! = cast(BBjEditBox, mainWindow!.getControl("samStatus"))

availableSupporLabel! = cast(BBjStaticText, mainWindow!.getControl("availableSupportLabel"))
availableSupport! = cast(BBjEditBox, mainWindow!.getControl("availableSupport"))
availSpptPlus! = cast(BBjButton, mainwindow!.getControl("availSpptPlus"))
availSpptMinus! = cast(BBjButton, mainwindow!.getControl("availSpptMinus"))

rem ' hostIDLabel! = cast(BBjStaticText, mainWindow!.getControl("hostIDLabel"))
hostNameLabel! = cast(BBjStaticText, mainWindow!.getControl("hostNameLabel"))
authorizationLabel! = cast(BBjStaticText, mainWindow!.getControl("authorizationLabel"))
licenseHistoryLabel! = cast(BBjStaticText, mainWindow!.getControl("licenseHistoryLabel"))
hostID! = cast(BBjEditBox, mainWindow!.getControl("hostID"))
hostName! = cast(BBjEditBox, mainWindow!.getControl("hostName"))
authorization! = cast(BBjEditBox, mainWindow!.getControl("authorization"))
licenseHistory! = cast(BBjCEdit, mainWindow!.getControl("licenseHistory"))

virtualLicenseLabel!  = cast(BBjStaticText, mainWindow!.getControl("virtualLicenseLabel"))
virtualLicense! = cast(BBjEditBox, mainWindow!.getControl("virtualLicense"))

sendLicenseGroup!  = cast(BBjGroupBox, mainWindow!.getControl("sendLicenseGroup"))
emailAddressLabel!  = cast(BBjStaticText, mainWindow!.getControl("emailAddressLabel"))
emailAddress! = cast(BBjEditBox, mainWindow!.getControl("emailAddress"))
trlSelect! = cast(BBjRadioButton, mainWindow!.getControl("trlSelect"))
sendLicenseButton! = cast(BBjButton, mainWindow!.getControl("sendLicenseButton"))
generateLicenseButton! = cast(BBjButton, mainWindow!.getControl("generateLicenseButton"))

rem ' vendor feature window
vendorFeatures! = ourSysGui!.getWindow("vendorFeatures")
closeBtn! = cast(BBjButton, vendorFeatures!.getControl("closeBtn"))
vendorFeaturesGrid! =  cast(BBjStandardGrid, vendorFeatures!.getControl("vendorFeaturesGrid"))
vfSerialNbr! =  cast(BBjEditBox, vendorFeatures!.getControl("vfSerialNbr"))

rem ' full hostid window
fullHostid! = ourSysGui!.getWindow("fullHostid")

rem ' open the files
gosub openFiles

rem ' get the URL for the DB
gosub buildOurDbUrl

rem ' build a list of reset reasons
gosub buildResetReasonList

rem ' were we invoked with a username and password on the command line?
rem ' if argc = 3 then
rem '     centerWindows = 0
rem '     xUID$ = argv(1)
rem '     xPwd$ = argv(2)
rem '     if len(xUID$) = 10 then xUID$ = xUID$(3)
rem '     userName!.setText(xUID$)
rem '     password!.setText(xPwd$)
rem '     gosub loginHit
rem ' fi

rem ' this is the launch from b-commcerce which has been disabled'
rem ' if loginSuccess = 0 and info(3,6) = "5" then
rem '     rem ' BUI only
rem '     centerWindows = 0
rem '     xUID$ = ""
rem '     xPwd$ = ""
rem '     xUID$ = clientenv("packet", err=*next)
rem '     if xUID$ <> "" then
rem '         namespace! = BBjAPI().getGlobalNamespace()
rem '         if namespace! <> null() then
rem '             xPwd! = Cast(BBjString, namespace!.getValue("SupportInterface" + xUID$, err=*next))
rem '             if xPwd! <> null() then xPwd$ = xPwd!
rem '         fi
rem '     fi
rem '     if len(xUID$) > 0 and len(xPwd$) > 0 then
rem '         if len(xUID$) = 10 then xUID$ = xUID$(3)
rem '         userName!.setText(xUID$)
rem '         password!.setText(xPwd$)
rem '         gosub loginHit
rem '     fi
rem ' fi

rem ' get the login
rem ' ourWindow! = loginWindow!
rem ' if centerWindows then gosub centerWindow
call "loginAddon60.src", thisCTX, xUID$, xPwrd$, loginSuccess
if loginSuccess then 
    gosub showMainWindow
else
    goto gb__eoj
fi


[Event Win=100 ID=1 Code=B <PUSH_BUTTON> (W100_C1_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub loginHit

[Event Win=100 ID=2 Code=B <PUSH_BUTTON> (W100_C2_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

goto gb__eoj

[Event Win=101 ID=0 Code=X <WIN_CLOSE> (W101_C0_WIN_CLOSE)]
rem ' Window Closed
rem ' gb__event! = cast(BBjCloseEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__window! = gb__event!.getControl()

goto gb__eoj

[Event Win=101 ID=1 Code=B <PUSH_BUTTON> (W101_C1_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

findSerialNumber:

serialNumber$ = cvs(serialNumber!.getText(), 4); rem ' force upper case
serialNumber$ = serialNumber$ + fill(20," ")
serialNumber$ = serialNumber$(1,20)

rem ' read the serial number record
while 1
    gosub clearForm

    dim snm01$:fattr(snm01$)
    found = 0
    read record(snm01, key = serialNumber$, dom = *next)snm01$; found = 1

    if !found then
        gotKey = 0
        nextSN$ = key(snm01, end=*next); gotKey = 1
        if !gotKey then 
            nextSN$ = ""
            gosub nextSNMessage
            break
        else
            serialNumber$ = nextSN$
            gosub nextSNMessage
            continue
        fi
    fi

    rem ' read the customer record
    read record(arm01, key = snm01.firm_id$ + snm01.customer_nbr$)arm01$

    gosub gatherSNData
    gosub showSNData
    
    break

wend

[Event Win=101 ID=147 Code=B <PUSH_BUTTON> (W101_C147_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

sendLicense = 1
gosub generateLicense

[Event Win=101 ID=148 Code=B <PUSH_BUTTON> (W101_C148_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

sendLicense = 0

sendLicense = 1

gosub generateLicense

[Event Win=101 ID=149 Code=B <PUSH_BUTTON> (W101_C149_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

if cvs(serialNumber$,3) <> "" then
    changeAmt = 1
    gosub adjustTheSupprtIncidentBalance
fi

[Event Win=101 ID=150 Code=B <PUSH_BUTTON> (W101_C150_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

if cvs(serialNumber$,3) <> "" then
    changeAmt = -1
    gosub adjustTheSupprtIncidentBalance
fi

[Event Win=101 ID=151 Code=B <PUSH_BUTTON> (W101_C151_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

if len(serialNumber$) = 20 then
    gosub showVendorFeatures
fi

[Event Win=101 ID=152 Code=B <PUSH_BUTTON> (W101_C152_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

if len(serialNumber$) = 20 then
    gosub showFullHostId
fi

[Event Win=101 ID=153 Code=B <PUSH_BUTTON> (W101_C153_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()


gosub showLicRegistrations

[Event Win=101 ID=154 Code=B <PUSH_BUTTON> (W101_C154_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()


gosub showLogFailures

[Event Win=101 ID=155 Code=B <PUSH_BUTTON> (W101_C155_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' confirn they want to remove the BLS block

msgtxt$ = "Removing " + cvs(serialNumber$,3) + " from the return to BLM Block File will allow this license to be registered with the BLM after it was previously registerd with the BLS. Do you wish to continue?"
resp = msgbox(msgtxt$, 4 + 32 + 256, "Confirm the Removal of the Block")
if resp = 6 then
    call "ec_open::SNM01_BLS"
    remove (snm01_bls, key = serialNumber$)
    
    rem ' write a comment to the snm04 table
    xComment$ = "Return to BLM Block removed by " + xUID$ + " " + date(0:"%Y%Mz%Dz")
    gosub write_comment
    
    resp = msgbox(cvs(serialNumber$,3) + " has been removed for the BLM Block File. It may now be registered with the BLM.", 0, "No Longer Limited to the BLS")

    gosub enable_disable_removeBLSBlkBtn    

    close(snm01_bls,err=*next)
fi

[Event Win=102 ID=0 Code=X <WIN_CLOSE> (W102_C0_WIN_CLOSE)]
rem ' Window Closed
rem ' gb__event! = cast(BBjCloseEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__window! = gb__event!.getControl()

gosub showMainFromVendorFeatures

[Event Win=102 ID=100 Code=B <PUSH_BUTTON> (W102_C100_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub showMainFromVendorFeatures

[Event Win=110 ID=103 Code=B <PUSH_BUTTON> (W110_C103_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

mainWindow!.setVisible(1)
fullHostid!.setVisible(0)

fullHostid!.getControl("HostidToken").setText("")
fullHostid!.getControl("hostidHash").setText("")
fullHostid!.getControl("fullHostidText").setText("")

hostIdLookup! = null()

[Event Win=112 ID=100 Code=B <PUSH_BUTTON> (W112_C100_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

regFailures!.setVisible(0)
mainWindow!.setVisible(1)

[Event Win=113 ID=100 Code=B <PUSH_BUTTON> (W113_C100_PUSH_BUTTON)]
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

licRegistrations!.setVisible(0)
mainWindow!.setVisible(1)


[Function (adjustTheSupprtIncidentBalance)]
rem ' -----------------------------------------------------------------
rem ' adjustTheSupprtIncidentBalance
rem ' -----------------------------------------------------------------

adjustTheSupprtIncidentBalance:

rem ' changeAmt = -1 or 1

if changeAmt = 0 then return
if abs(changeAmt) <> 1 then return

rem ' extract the record

found = 0   
extract record(snm01, key = serialNumber$, err = *next)snm01$; found = 1
if !found then
    xresp = msgbox("An error " + str(err) + " occurred attempting to extract the serial number record. " + errmes(-1), 0, "Error on Extract")
    return
else
    if changeAmt = -1 and snm01.avail_support <= 0 then
        xresp = msgbox("Available Support balance can not be less than zero.",0,"Zero Balance")
        read record(snm01, key = serialNumber$, err = *next)snm01$
        return
    fi
    if changeAmt < 0 then 
        msgtxt$ = "decrease the available support incidents by 1."
    else 
        msgtxt$ = "increase the available support incidents by 1."
    fi
    msgtxt$ = "Please confirm that you want to " + msgtxt$
    xresp = msgbox(msgtxt$, 4, "Confirm")
    if xresp = 6 then
        snm01.avail_support = snm01.avail_support + changeAmt
        snm01$ = field(snm01$)
        write record(snm01)snm01$
        gosub findSerialNumber
    else
        rem ' clear the extract
        read record(snm01, key = serialNumber$, err = *next)snm01$
    fi

return

[Function (buildOurDbUrl)]
rem ' -----------------------------------------------------------------
rem ' buildOurDbUrl
rem ' -----------------------------------------------------------------

buildOurDbUrl:

DECLARE StringBuffer sqlBuilder!

rem ' locate the properties file
props=unt
open(props)"ec_sql.properties"
props$=fid(props), props$=props$(9)
close(props)

file! = new java.io.File(props$)
fis! = new java.io.FileInputStream(file!)
bis! = new java.io.BufferedInputStream(fis!)
props! = new java.util.Properties()
props!.load(bis!)

sqlBuilder!= new StringBuffer(props!.getProperty("sqlURL.urlprefix") + props!.getProperty("sqlURL.server")+":")
sqlBuilder!.append(props!.getProperty("sqlURL.port")+"?database=")
sqlBuilder!.append(props!.getProperty("sqlURL.database")+"&user="+props!.getProperty("sqlURL.user")+"&password=")
sqlBuilder!.append(props!.getProperty("sqlURL.password"))
ourDbUrl$ = sqlBuilder!.toString()

rem ' xresp = msgbox(ourDbUrl$,0,"debug")

return

[Function (buildResetReasonList)]
rem ' -----------------------------------------------------------------
rem ' buildResetReasonList
rem ' -----------------------------------------------------------------

buildResetReasonList:

rem ' get reset reasons & close file - no need to keep it open

call "ec_open::reset_reason"

reset_reason_list$ = "Select a reason for reset:" + $0a$
reset_code_list$ = "??"

while 1
  read record(reset_reason, err=*break)reset_reason$
  reset_reason_list$ = reset_reason_list$ +cvs(reset_reason.reason$,3) + $0a$
  reset_code_list$ = reset_code_list$ + reset_reason.reset_code$
wend

close(reset_reason,err=*next)
reset_reason_list$ = reset_reason_list$ + $ff$ + "0"

return

[Function (centerWindow)]
rem ' -----------------------------------------------------------------
rem ' centerWindow
rem ' -----------------------------------------------------------------

centerWindow:

width = scrDimension!.width
height = scrDimension!.height
winWidth = ourWindow!.getWidth()
winHeight = ourWindow!.getHeight()

x = int((width-winWidth)/2)
y = int((height-winHeight)/2)

ourWindow!.setLocation(x,y)

return

[Function (clearForm)]
rem ' -----------------------------------------------------------------
rem ' clearForm
rem ' -----------------------------------------------------------------

clearForm:

serialNumber!.setText("")
serialNumber!.setBackColor(whiteColor!)
customerName!.setText("")
customerName!.setBackColor(whiteColor!)

product!.setText("")
platform!.setText("")
oslevel!.setText("")
revision!.setText("")
licenseType!.setText("")

productDescription!.setText("")
platformDescription!.setText("")
oslevelDescription!.setText("")
revisionDescription!.setText("")
licenseTypeDescription!.setText("")

ecCompany!.setText("")
ecContact!.setText("")

customerType!.setText("")
salesPerson!.setText("")

userCount!.setText("")

samStatus!.setText("")
samStatus!.setBackColor(whiteColor!)

availableSupport!.setText("")

hostID!.setText("")
hostName!.setText("")
authorization!.setText("")
licenseHistory!.setText("")

virtualLicense!.setText("")

sendLicenseButton!.setEnabled(1)
generateLicenseButton!.setEnabled(1)
trlSelect!.setSelected(0)
emailAddress!.setText("")


return

[Function (countLicenseFailures)]
rem ' -----------------------------------------------------------------
rem ' countLicenseFailures
rem ' -----------------------------------------------------------------

countLicenseFailures:

call "ec_open::SN_LIC_REG_ERR"
rem ' xresp = msgbox("|" + sn$ + "|",0,"debug")
rem ' xresp = msgbox("|" + cvs(sn$,3) + "|",0,"debug")

read record(sn_lic_reg_err, key=cvs(serialNumber$,3),dom=*next)sn_lic_reg_err$
failCount = 0
while 1
    read record(sn_lic_reg_err,end=*break)sn_lic_reg_err$
    if pos(cvs(serialNumber$,3)=sn_lic_reg_err$) <> 1 then break
    failCount = failCount + 1
wend
close(sn_lic_reg_err,err=*next)

return

[Function (enable_disable_removeBLSBlkBtn)]
rem ' -----------------------------------------------------------------
rem ' enable_disable_removeBLSBlkBtn
rem ' -----------------------------------------------------------------

enable_disable_removeBLSBlkBtn:

rem ' enable or disable the removeBLSBLkBtn:

call "ec_open::SNM01_BLS"
temp1! = cast(BBjButton, BBjAPI().getSysGui().getWindow(gb__win.mainWindow).getControl("removeBLSBlkBtn"))

found = 0
read record(snm01_bls, key=serialNumber$,dom=*next)snm01_bls$; found = 1
if found then
    temp1!.setEnabled(1)
else
    temp1!.setEnabled(0)
fi
close(snm01_bls,err=*next)

rem ' white listed?
call "ec_open::SN_BLMBLS_WHTLST"
temp1! = cast(BBjStaticText, BBjAPI().getSysGui().getWindow(gb__win.mainWindow).getControl("whiteListMsg"))
found = 0
read record(sn_blmbls_whtlst, key = sn$, dom=*next)sn_blmbls_whtlst$; found = 1
if found then
    temp1!.setVisible(1)
else
    temp1!.setVisible(0)
fi
close(sn_blmbls_whtlst, err=*next)

return

[Function (gatherSNData)]
rem ' -----------------------------------------------------------------
rem ' gatherSNData
rem ' -----------------------------------------------------------------

gatherSNData:

rem ' get user counts
dim snm02$:fattr(snm02$)
read record(snm02, key = snm01.serial_nbr$, dom=*next)snm02$

rem ' get additional customer data
dim arm02$:fattr(arm02$)
dim arm10f$:fattr(arm10f$)
dim arm10l$:fattr(arm10l$)
read record(arm02, key = snm01.firm_id$ + arm01.customer_nbr$ + "  ", dom=*next)arm02$
if cvs(arm02.slspsn_code$,3) <> "" then
    read record(arm10f, key = snm01.firm_id$ + "F" + arm02.slspsn_code$, dom=*next)arm10f$
fi
if cvs(arm02.cust_type$,3) <> "" then
    read record(arm10l, key = snm01.firm_id$ + "L" + arm02.cust_type$, dom=*next)arm10l$
fi

rem ' get product description
dim csm01$:fattr(csm01$)
read record(csm01, key = snm01.firm_id$ + snm01.product$, dom=*next)csm01$

rem ' get platform description
dim csm02$:fattr(csm02$)
read record(csm02, key = snm01.firm_id$ + snm01.platform$, dom=*next)csm02$

rem ' get the os level description
dim csm03$:fattr(csm03$)
read record(csm03, key = snm01.firm_id$ + snm01.os_level$, dom=*next)csm03$

rem ' get revision description
dim csm04$:fattr(csm04$)
read record(csm04, key = snm01.firm_id$ + snm01.product_rev$, dom=*next)csm04$

rem ' get the license type description
dim csm05$:fattr(csm05$)
read record(csm05, key = snm01.firm_id$ + snm01.license_type$, dom=*next)csm05$

rem ' get any eu data
dim snmel$:fattr(snmel$)
dim snmeu$:fattr(snmeu$)
read record(snmel, key = snm01.serial_nbr$, dom=*next)snmel$
if cvs(snmel.end_user_nbr$,3) <> "" then
    read record(snmeu, key = snmel.end_user_nbr$, dom=*next)snmeu$
fi

rem ' get SAM data
dim smc01$:fattr(smc01$)
if cvs(snm01.contract$,3) <> "" then
    read record(smc01, key = snm01.contract$,dom=*next)smc01$
fi

gosub getLicenseData

return

[Function (generateLicense)]
rem ' -----------------------------------------------------------------
rem ' generateLicense
rem ' -----------------------------------------------------------------

generateLicense:

trl = trlSelect!.isSelected()
serialNbr$ = cvs(serialNumber!.getText(), 3) + fill(20, " ")
serialNbr$ = serialNbr$(1,20)
email$ = cvs(emailAddress!.getText(), 3)
auth$ = cvs(authorization!.getText(), 3)

host$ = cvs(hostID!.getText(), 3)
hostToken$ = host$
gosub lookupFullHostid
host$ = hostFull$

hostname$ = cvs(hostName!.getText(), 3)

while 1
    if len(auth$) <> 10 then 
        i = msgbox("Invalid authorization number", 0, "Auth Number")
        break
    fi

    rem ' not sure what this means or does
    if auth$ = "TEMPORARY*" then host$ = "1234567890ab"

    if email$ = "" and sendlicense then
        i = msgbox("Email address required", 0, "Email Address")
        break
    fi

    if pos("@" = email$) = 0 and sendLicense then 
        i = msgbox("A valid email address is required", 0, "Email Address")
        break
    fi

    if sendLicense then
        while 1
            p = pos(";" = email$)
            if p then 
                email$ = email$(1, p - 1) + "," + email$(p +1)
            else
                break
            fi
        wend
    fi

    msg$="Host id: " + host$ + $0a$
    msg$ = msg$ + "Authorization: " + auth$ + $0a$
    msg$ = msg$ + "Host name: " + hostname$
    if trl then 
        msg$ = msg$ + $0a$ + "Generate TRL License"
    fi
    if sendlicense then 
        msg$ = "Email to: " + email$ + $0a$ + msg$
    fi
    rem ' i = msgbox(msg$, 4 + 32 + 256, "Generate license")
    if i = 7 then break

    rem ' strip any lf from the host id
    while 1
        p = pos($0a$ = host$)
        if p = 0 then break
        if p = 1 then 
            host$ = host$(2)
            continue
        fi
        host$ = host$(1,p - 1) + host$(p + 1)
    wend

    if trl then 
        lic$="GEN TAMPER RESISTANT LICENSE" 
    else 
        lic$=""
    fi

    rem ' by pass this option
    goto bypass_point

    call stbl("FLEXHOME") + "bin/flexlic.bbx", auth$, serialNbr$ , host$, lic$
    if lic$ = "" then 
        lic$="Error - no license generated"
    fi
    i = msgbox(lic$, 0, "License result")
    if pos("ERROR" = cvs(lic$,4)) or sendlicense = 0 then 
        gosub getLicenseData
        gosub showSNData
        break
    fi
    bypass_point:
    
    rem ' send the license
    to$ = "license@basis.cloud"
    from$ = "customer-service@basis.cloud"
    cc$ = ""
    bcc$ = ""
    subject$ = "License"
    msgtxt$ = "Company          : " + cvs(arm01.cust_name$, 3) + $0a$
    msgtxt$ = msgtxt$ + "Last Name        : " + $0a$    
    msgtxt$ = msgtxt$ + "First Name       : " + $0a$
    msgtxt$ = msgtxt$ + "Phone Number     : " + $0a$
    msgtxt$ = msgtxt$ + "Fax Number       : " + $0a$
    msgtxt$ = msgtxt$ + "Email Address    : " + email$ + $0a$
    msgtxt$ = msgtxt$ + "Host Name        : " + hostname$ + $0a$
    msgtxt$ = msgtxt$ + "Host ID          : " + host$ + $0a$
    msgtxt$ = msgtxt$ + "Serial Number    : " + cvs(snm01.serial_nbr$, 3) + $0a$
    msgtxt$ = msgtxt$ + "License Auth Num : " + auth$ + $0a$
    msgtxt$ = msgtxt$ + "License Delivery : " + "Email" + $0a$
    msgtxt$ = msgtxt$ + "AutoResponderForceCheck: false" + $0A$
    if trl then 
        msgtxt$ = msgtxt$  + "UseTRL: true" + $0A$
    fi
    if isBLSLicense then
        msgtxt$ = msgtxt$+"bls: both"+$0A$
    fi
    
    resp = msgbox(msgtxt$,1,"License Parameters")
    if resp = 1 then

      file$ = ""
      call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msgtxt$, file$
  
      i = msgbox("License request sent to the autoresponder.", 0, "Message Sent")
  
      gosub getLicenseData
      gosub showSNData
    fi

    break
wend

return

[Function (getLicenseData)]
rem ' -----------------------------------------------------------------
rem ' getLicenseData
rem ' -----------------------------------------------------------------

getLicenseData:

temp_item$=""
lbox$=""
l_hostid$=""
l_hostname$=""
l_auth$=""
newest_hostid$=""
sn$ = serialNumber$

ichan=logextract
dim tmpl$:fattr(logextract$)
gosub build_temp_item

ichan=sn_license
dim tmpl$:fattr(sn_license$)
gosub build_temp_item

ichan=license_reset
lrx$=cvs(fattr(license_reset$),4)
p=pos("RESET_DATE"=lrx$)
if p then lrx$=lrx$(1,p-1)+lrx$(p+6)
p=pos("RESET_TIME"=lrx$)
if p then lrx$=lrx$(1,p-1)+lrx$(p+6)
resets=0
dim tmpl$:lrx$
gosub build_temp_item

if len(temp_item$) < 50 then temp_item$ = ""
temp_item$ = ssort(temp_item$,50)
holddate$=""
fill$=fill(65,"_")

while len(temp_item$)
    xtemp_item$ = temp_item$(len(temp_item$)-49)
    temp_item$ = temp_item$(1, len(temp_item$)-50)
    
    date$ = xtemp_item$(1,8)
    time$ = fnFormatTime$(xtemp_item$(9,6))

    ichan = num(xtemp_item$(15,2))
    k$ = cvs(xtemp_item$(17,34),2)
    rem ' temp_item$ = temp_item$(51)

    if holddate$=date$ then 
        lbox$ = lbox$+$0a$ 
    else 
        lbox$ = lbox$ + fill$ + $0a$ + date$(5,2) + "/" + date$(7,2) + "/" + date$(1,4) + $0a$
        holddate$ = date$
    fi

    switch ichan
        case logextract; dim tmpl$:fattr(logextract$); break
        case sn_license; dim tmpl$:fattr(sn_license$); break
        case license_reset; dim tmpl$:lrx$; break
    swend

    read record(ichan,key=k$)tmpl$

    lbox$=lbox$+"  "

    switch ichan
        case logextract
            lbox$ = lbox$ + "License Request Received at " + time$ + $0a$
            x$ = cvs(tmpl.firstname$ + tmpl.lastname$,35)
            y$ = cvs(tmpl.company$,3)
            if x$ <> "" and y$ <> "" then let x$ = x$ + "/"
            if x$ + y$ <> "" then lbox$=lbox$+"        From: " + x$ + y$ + $0a$
            if cvs(tmpl.email$,2) <> "" then let lbox$ = lbox$+"       Email: " + tmpl.email$ + $0a$
            if cvs(tmpl.fax$,2) <> "" then let lbox$ = lbox$+"         Fax: " + tmpl.fax$+$0a$
            if cvs(tmpl.hostname$,2)<>"" then 
               lbox$ = lbox$ + "    HostName: " + tmpl.hostname$ + $0a$
               lbox$ = lbox$ + "      HostId: " + tmpl.hostid$ + $0a$
               lbox$ = lbox$ + "      Auth #: " + tmpl.authnum$ + $0a$
            fi
        break

        case sn_license
            dim sn_host$:fattr(sn_host$)
            readrecord(sn_host, key =   tmpl$(1,26),    dom=*next)sn_host$
            l_hostid$ = tmpl.hostid$
            if newest_hostid$ = "" then newest_hostid$ = l_hostid$
            xx$=""
            if cvs(sn_host.hostid1$,3) <> "" then
                xx$ = $0a$
                l_hostid$ = cvs(sn_host.hostname1$,3) + " " + cvs(sn_host.hostid1$,3) + "," + $0a$
                l_hostid$ = l_hostid$ + cvs(sn_host.hostname2$,3) + " " + cvs(sn_host.hostid2$,3) + ","
                l_hostid$ = l_hostid$ + $0a$ + cvs(sn_host.hostname3$,3) + " " + cvs(sn_host.hostid3$,3)
            fi
            lbox$ = lbox$ + "License Generated at " + time$ + $0a$
            lbox$ = lbox$ + "      HostId: " + xx$ + l_hostid$ + $0a$
            lbox$ = lbox$ + "      Auth #: " + tmpl.authnum$ + fill(12) + "Revision: " + tmpl.prod_rev$ + $0a$
            l_auth$ = tmpl.authnum$
            lbox$ = lbox$ + "       Users: " + str(tmpl.users:"###0") + fill(15)+"LicenseType: " + tmpl.prod_type$+$0a$
            if cvs(tmpl.expire$,2) <> "" then lbox$ = lbox$ + "     Expires: " + tmpl.expire$ + $0a$
        break

        case license_reset
            xx$=""
            p=pos(tmpl.reset_code$ = reset_code_list$)
            if p>2 then 
                p1 = pos($0a$ = reset_reason_list$, 1, int(p/2))
                if p1 then 
                    xx$ = " ("+reset_reason_list$(p1+1)
                    p = pos($0a$=xx$)
                    if p then xx$ = xx$(1,p-1) + ")"
                fi
            fi
            lbox$ = lbox$ + "License Status Reset by " + tmpl.reset_by$ + " at " + time$ + " " + xx$ + $0a$
        break
    swend
wend

s$="" 

gosub licenseStatus

if license_status >= 0 then 
    s$ = $0a$ + "Current License Status: " + str(license_status)
    if snm01.active_flag$ = "Y" then 
        if license_status then  
            s$ = s$ + " (Licensed)" 
        else 
            s$=s$+" (Ready for licensing)"
        fi
    fi
    s$ = s$ + $0a$ + "Resets for this License: " + str(resets) + $0a$ + fill$ + $0a$
fi
rem ' lbox$ = s$ + lbox$+$0a$

rem ' check for a licenes file on the server
x$ = stbl("FLEXHOME") + "lic/" +cvs(sn$,3) + ".lic"
l$ = ""
sz=0
lchan=unt
found = 0
open(lchan, err = *next)x$; found = 1
if found = 0 then
    x$ = stbl("FLEXHOME") + "lic_old/" + cvs(sn$,3) + ".lic"
    found = 0
    open(lchan, err = *next)x$; found = 1
fi

if found then
    fin$ = fin(lchan); sz=dec(fin$(1,4))
    read record (lchan,siz = sz, err =*next)l$
    close (lchan, err = *next)
    if sz <> 0 then 
        pipe = unt
        open(pipe)"| ls -l " + x$
        read(pipe,end = *next)temp$
        close(pipe, err = *next)
        p = pos(str(sz) = temp$), l = len(str(sz))
        if p then temp$ = cvs(temp$(p+l),3)
        rem ' lbox$ = s$ + fill(65,"=") + $0a$ + "License file from our server:" + $0a$ + temp$ + $0a$ + $0a$ + l$ + $0a$ + lbox$
        lbox$ = s$ + $0a$ + "License file from our server:" + $0a$ + temp$ + $0a$ + $0a$ + l$ + $0a$ + lbox$
    fi
else
    lbox$ = s$ + lbox$+$0a$
fi

return

build_temp_item: 

    read (ichan, key = cvs(sn$,2), dom=*next)

    while 1
      let k$ = key(ichan, end=*break)
      if pos(cvs(sn$,2) = k$) <> 1 then break

      read record(ichan, key = k$)tmpl$
      
      if ichan = license_reset then 
        if tmpl.reset_to$="0" then 
            resets=resets+1 
        else
            continue
        fi
      fi

      time$ = pad(tmpl.time$, 6)
      p = pos(":"=time$)
      if p then 
        time$ = time$(1,p-1) + time$(p+1) + " "
      fi

      if ichan = logextract then
        if cvs(tmpl.hostname$,3) <> "" then l_hostname$ = tmpl.hostname$
      fi

      let x$ = pad(k$,34)
      temp_item$ = temp_item$ + tmpl.date$ + time$ + str(ichan:"00") + x$
    wend
return

def fnFormatTime$(inTime$)
    if cvs(inTime$,3) = "" then
        retval$="No Time"
    else
        if len(inTime$) < 0 then
            retval$ = intime$
        else
            retval$ = intime$(1,2) + ":" + intime$(3,2) + ":"+intime$(5,2)
        fi
    fi
    return retval$
fnend

[Function (licenseStatus)]
rem ' -----------------------------------------------------------------
rem ' licenseStatus
rem ' -----------------------------------------------------------------

licenseStatus:

    license_status = -1
    license_status_channel = 0

    read (are83, key = "", dom = *next)

    while 1
        k$ = key(are83, end = *break)
        read record(are83, key = k$)are83$
        if cvs(sn$,2) <> cvs(are83.serial_nbr$,2) or are83.snhist_flag$ = "Y" or len(cvs(are83.auth_code$,3)) <> 10 then continue
        if are83.action$ = "D" then license_status = -1; continue

        license_status = are83.license_cnt
        license_status_channel = are83
        license_status_key$ = k$
        l_auth$ = are83.auth_code$
    wend

    if license_status < 0 then
        read (snt01, key = cvs(sn$,2), err =*next)
        
        while 1
            k$ = key(snt01, end = *break)
            read record(snt01, key=k$)snt01$
            if pos(cvs(sn$,2) = snt01.serial_nbr$) <> 1 then break

            if len(cvs(snt01.auth_code$,3)) <> 10 continue

            if snt01.action$ <> "D" then
                license_status = snt01.license_cnt
                license_status_channel=snt01
                license_status_key$ = k$
                l_auth$ = snt01.auth_code$
            fi
        wend
    fi
return

[Function (loginError)]
rem ' -----------------------------------------------------------------
rem ' loginError
rem ' -----------------------------------------------------------------

loginError:

trash = msgBox("Login Failed", 16, "Problem")

return

[Function (loginHit)]
rem ' -----------------------------------------------------------------
rem ' loginHit
rem ' -----------------------------------------------------------------

loginHit:

rem ' no longer used, was used when we used the bcomm username and password, changed to EM username and password 9/17/2020
return

uName$  = cvs(userName!.getText(),3)
pWord$ = cvs(password!.getText(),3)

firm_id$ = "01"
cust_num$ = ""
user_code$ = ""

rem ' Format is FFCCCCCCUU
rem ' FF is a 2-digit Firm ID (usually 01 or 02)
rem ' CCCCCC is a 1-6 digit customer number, typically 4 digits
rem ' UU is an optional 1- or 2-letter user code

loginSuccess = 0

while 1
    temp$ = uName$
    x = LEN(temp$)
    if x < 3 OR x > 10 THEN 
        gosub loginError
        break
    fi

rem ' find firm id if there
    x$ = temp$(1,2)
    if pos(x$ = "0102", 2) and x > 5 then 
        temp$ = temp$(3)
        firm_id$ = x$
        x = x - 2 
    else 
        x$ = ""
    fi

    for  n = x - 1 to x 
        if pos(temp$(n,1) = "0123456789") = 0 then 
            user_code$ = user_code$ + temp$(n,1)
            temp$(n,1) = " "
        fi
    next n

    user_code$ = pad(user_code$,2)
    temp$ = cvs(temp$,3)
    cust_num$ = str(num(temp$):"000000",err=*next)

    rem ;' check for BSG
    if cust_num$(1,2) = "02" then firm_id$ = "02"
    
    rem ' debug check
    rem ' trash = msgbox("(" + firm_id$ + "-" + cust_num$ + "-" + user_code$ + ") " + pWord$, 0 , "debug")

    rem ' limited to basis and descore users
    if cust_num$ <> "007514" and cust_num$ <> "001022" then
        gosub loginError
        break
    fi

    rem '  get customer EC record
    found = 0
    read record (ecm01, key=firm_id$ + cust_num$ + user_code$, dom = *next, err = *next)ecm01$; found = 1
    if !found then
        gosub loginError
        break
    fi

    if cvs(ecm01.password$, 3) <> cvs(pWord$,3) then
        firm_id$ = "", cust_num$ = "", user_code$ = ""
        gosub loginError
        break
    fi

    rem ' trap short password
    if len(cvs(ecm01.password$,3)) < 10 THEN 
        firm_id$ = "",cust_num$ = "",user_code$ = ""
        gosub loginError
        break
    fi

    loginSuccess = 1
    break

wend

if loginSuccess then gosub showMainWindow

return

[Function (lookupFullHostid)]
rem ' -----------------------------------------------------------------
rem ' lookupFullHostid
rem ' -----------------------------------------------------------------

lookupFullHostid:

hostIdType! = new HostIdConstants()
HostidData! = new HostId(hostIdType!.TOKEN(), hostToken$)
if HostidData!.exists() then
    hostFull$ = HostidData!.getHostidFull()
    isBLSLicense = HostidData!.isNewHostid(hostFull$)
else
    hostFull$ = hostToken$
    isBLSLicense = 0
fi

return

[Function (nextSNMessage)]
rem ' -----------------------------------------------------------------
rem ' nextSNMessage
rem ' -----------------------------------------------------------------

nextSNMessage:

displaySN$ = cvs(nextSN$ ,3)
if displaySN$ = "" then
    msg$ = "The data entered is higher than the last serial number in the table."
else
    msg$ = displaySN$ + " is the next serial number in the table."
fi

trash = msgbox(msg$, 64, "SN Not Found")

return

[Function (openFiles)]
rem ' -----------------------------------------------------------------
rem ' openFiles
rem ' -----------------------------------------------------------------

openFiles:

call "ec_open::ECM01"

call "ec_open::SNM01"
call "ec_open::SNM02"

call "ec_open::ARM01"
call "ec_open::ARM02"
call "ec_open::ARM10F"
call "ec_open::ARM10L"

call "ec_open::CSM01"
call "ec_open::CSM02"
call "ec_open::CSM03"
call "ec_open::CSM04"
call "ec_open::CSM05"

call "ec_open::SNMEL"
call "ec_open::SNMEU"

call "ec_open::SMC01"

call "ec_open::LOGEXTRACT"
call "ec_open::SN_LICENSE"
call "ec_open::SN_HOST"
call "ec_open::LICENSE_RESET"

call "ec_open::ARE83"
call "ec_open::SNT01"
call "ec_open::SNT04"

return

[Function (showFullHostId)]
rem ' -----------------------------------------------------------------
rem ' showFullHostId
rem ' -----------------------------------------------------------------

showFullHostId:

mainWindow!.setVisible(0)
fullHostid!.setVisible(1)

hostidToken! = cast(BBjEditBox, mainWindow!.getControl("hostID"))
hostidToken$ = hostidToken!.getText()
hostidToken$ = cvs(hostidToken$,16)

hostIdType! = new HostIdConstants()
hostIdLookup! = new HostId(hostIdType!.TOKEN(), hostidToken$)
if hostIdLookup!.exists() then
    fullHostid!.getControl("HostidToken").setText(hostIdLookup!.getHostidToken())
    fullHostid!.getControl("hostidHash").setText(hostIdLookup!.getHostidHash())
    fullHostid!.getControl("fullHostidText").setText(hostIdLookup!.getHostidFull())
else
    fullHostid!.getControl("HostidToken").setText("")
    fullHostid!.getControl("hostidHash").setText("")
    fullHostid!.getControl("fullHostidText").setText("")
    resp = msgbox(hostidToken$ + "is not in the HostId cross reference table.", 0, "Not Found")
fi

return

[Function (showLicRegistration)]
rem ' -----------------------------------------------------------------
rem ' showLicRegistrations
rem ' -----------------------------------------------------------------

showLicRegistrations:

rem ' load the licRegistrataion form if needed
if gb__win.licRegistrations=-1 then 
    gb__context = fngb__window("113")
    win_id_licRegistrations$=fngb__win_id$(gb__win.licRegistrations)
    dim win_licRegistrations$:fngb__template$(win_id_licRegistrations$)
fi

mainWindow!.setVisible(0)

rem ' lic Registrations
licRegistrations! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow("licRegistrations"))
licRegistrationsGrid! =  cast(BBjStandardGrid, licRegistrations!.getControl("licRegistrationsGrid"))
licRegistrationsGrid!.clearText()
licRegistrationsGrid!.setSelectedCell(0,0)
licRegistrationsGrid!.setColumnAlignment(4, GRID_ALIGN_LEFT)
licRegistrationsGrid!.setColumnAlignment(5, GRID_ALIGN_LEFT)
licRegistrations!.setVisible(1)

licRSN$ = cvs(serialNumber$,3)

sql$ = "SELECT * FROM SN_LICENSE "
sql$ = sql$ + "WHERE serial_num = '" + licRSN$ + "' "
sql$ = sql$ + " ORDER BY DATE desc, TIME desc "
  
rem ' xresp = msgbox(sql$,0,"debug")
  
rem ' set wait cursor'
licRegistrations!.setCursor(3)

searchResults! = BBjAPI().createSQLRecordSet(ourDbUrl$,"",sql$)

if searchResults!.isEmpty() then
    resp = msgbox("The search did not find any license registrations for the serial number.", 0, "No Matches")
    searchResults!.close()
    
    rem ' unset wait cursor'
    licRegistrations!.setCursor(0)

else
      
    licRegistrationsGridLoad! = BBjAPI().makeVector()

    rowCount = 0

    searchResults!.first()

    while 1
        searchLine! = searchResults!.getCurrentRecordData()
    
        regDate$ = searchLine!.getFieldValue("DATE")
        regDate$ = date(num(regDate$):"%Y-%Mz-%Dz")
        regTime$ = searchLine!.getFieldValue("TIME")
        if len(regTime$) >= 6 then regTime$ = regTime$(1,2) + ":" + regTime$(3,2) + ":" + regTime$(5,2)
        
        licRegistrationsGridLoad!.addItem(regDate$)
        licRegistrationsGridLoad!.addItem(regTime$)
    
        prodType$ = searchLine!.getFieldValue("PROD_TYPE")
        licRegistrationsGridLoad!.addItem(prodType$)
    
        prodRev$ = searchLine!.getFieldValue("PROD_REV")
        licRegistrationsGridLoad!.addItem(prodRev$)
        
        LR_Hostid$ = searchLine!.getFieldValue("HOSTID")
        licRegistrationsGridLoad!.addItem(LR_Hostid$)
        
        LR_Auth$ = searchLine!.getFieldValue("AUTHNUM")
        licRegistrationsGridLoad!.addItem(LR_Auth$)
        
        LR_EXPIRE$ = searchLine!.getFieldValue("EXPIRE")
        licRegistrationsGridLoad!.addItem(LR_Expire$)

        users1$ = cvs(searchLine!.getFieldValue("USERS"),3)
        users2$ = cvs(searchLine!.getFieldValue("USERS2"),3)
        
        users1 = 0
        users1 = num(users1$,err=*next)
        users2 = 0
        users2 = num(users2$,err=*next)
        users = users1 + users2
        licRegistrationsGridLoad!.addItem(str(users))

        rowCount = rowCount + 1
        searchResults!.next(err=*break)
    wend
    searchResults!.close()

    licRegistrationsGrid!.setNumRows(rowcount)
    licRegistrationsGrid!.setCellText(licRegistrationsGridLoad!)
    
    rem ' unset wait cursor'
    licRegistrations!.setCursor(0)
        
fi

subject$ = "License Registrations in extSpptInterface"
msgtxt$ = "License Registration in extSpptInterface accessed by " +  xUID$ + ", " + cvs(serialNumber$,3)
call "sendEmail.src", "mis@basis.cloud", "kurt.e.williams@comcast.net", "", "", subject$, msgtxt$, ""

return

[Function (showLogFailures)]
rem ' -----------------------------------------------------------------
rem ' showLogFailures
rem ' -----------------------------------------------------------------

showLogFailures:

rem ' load the licFailures form if needed
if gb__win.regFailures=-1 then 
    gb__context = fngb__window("112")
    win_id_regFailures$=fngb__win_id$(gb__win.regFailures)
    dim win_regFailures$:fngb__template$(win_id_regFailures$)
fi

mainWindow!.setVisible(0)

rem ' lic Failures
regFailures! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow("regFailures"))
regFailuresGrid! =  cast(BBjStandardGrid, regFailures!.getControl("regFailuresGrid"))
regFailuresGrid!.clearText()
regFailuresGrid!.setSelectedCell(0,0)
regFailuresGrid!.setColumnAlignment(2, GRID_ALIGN_LEFT)
regFailures!.setVisible(1)

logfSN$ = cvs(serialNumber$,3)

sql$ = "SELECT * FROM SN_LIC_REG_ERR "
sql$ = sql$ + "WHERE serial_nbr = '" + logfSN$ + "' "
sql$ = sql$ + " ORDER BY REG_TIME desc "
  
rem ' xresp = msgbox(sql$,0,"debug")
  
rem ' set wait cursor'
regFailures!.setCursor(3)

searchResults! = BBjAPI().createSQLRecordSet(ourDbUrl$,"",sql$)

if searchResults!.isEmpty() then
    resp = msgbox("The search did not find any license failures for the serial number.", 0, "No Matches")
    searchResults!.close()
    
    rem ' unset wait cursor'
    regFailures!.setCursor(0)

else
      
    regFailuresGridLoad! = BBjAPI().makeVector()

    rowCount = 0

    searchResults!.first()

    while 1
        searchLine! = searchResults!.getCurrentRecordData()
    
        reg_time$ = searchLine!.getFieldValue("REG_TIME")
        regDate$ = reg_time$(1,8)
        regDate$ = regDate$(1,4) + "-" + regDate$(5,2) + "-" + regDate$(7,2)
        regTime$ = reg_time$(9,6)
        regTime$ = regTime$(1,2) + ":" + regTime$(3,2) + ":" + regTime$(5,2)
        
        regFailuresGridLoad!.addItem(regDate$)
        regFailuresGridLoad!.addItem(regTime$)
    
        problemDesc$ = searchLine!.getFieldValue("PROB_MSG")
        regFailuresGridLoad!.addItem(cvs(problemDesc$,3))
    
        rowCount = rowCount + 1
        searchResults!.next(err=*break)
    wend
    searchResults!.close()

    regFailuresGrid!.setNumRows(rowcount)
    regFailuresGrid!.setCellText(regFailuresGridLoad!)
    
    rem ' unset wait cursor'
    regFailures!.setCursor(0)
        
fi

subject$ = "Registration Failures in extSpptInterface"
msgtxt$ = "Registration Failures  in extSpptInterface accessed by " +  xUID$ + ", " + cvs(serialNumber$,3)
call "sendEmail.src", "mis@basis.cloud", "kurt.e.williams@comcast.net", "", "", subject$, msgtxt$, ""

return

[Function (showMainFromVendorFeatures)]
rem ' -----------------------------------------------------------------
rem ' showMainFromVendorFeatures
rem ' -----------------------------------------------------------------

showMainFromVendorFeatures:

vendorFeatures!.setVisible(0)
mainWindow!.setVisible(1)

return

[Function (showMainWindow)]
rem ' -----------------------------------------------------------------
rem ' showMainWindow
rem ' -----------------------------------------------------------------

showMainWindow:

loginWindow!.setVisible(0)
ourWindow! = mainWindow!
if centerWindows then gosub centerWindow

rem ' 9/17 the app is only used in house now
rem ' if cust_num$ <> "007514" then
rem '     availSpptPlus!.setVisible(0)
rem '     availSpptMinus!.setVisible(0)
rem '     availableSupport!.setSize(200, 25)
rem ' fi

mainWindow!.setVisible(1)
serialNumber!.focus()

return

[Function (showSNData)]
rem ' -----------------------------------------------------------------
rem ' showSNData
rem ' -----------------------------------------------------------------

showSNData:

serialNumber!.setText(cvs(serialNumber$,3))
if snm01.active_flag$ = "N" then
    serialNumber!.setBackColor(redColor!)
    sendLicenseButton!.setEnabled(0)
    generateLicenseButton!.setEnabled(0)
fi

customerName!.setText(arm01.customer_nbr$ + " " + arm01.cust_name$)
if arm02.cred_hold$ = "Y" then
    customerName!.setBackColor(redColor!)
fi

product!.setText(snm01.product$)
platform!.setText(snm01.platform$)
oslevel!.setText(snm01.os_level$)
revision!.setText(snm01.product_rev$)
licenseType!.setText(snm01.license_type$)

productDescription!.setText(csm01.description$)
platformDescription!.setText(csm02.description$)
oslevelDescription!.setText(csm03.description$)
revisionDescription!.setText(csm04.description$)
licenseTypeDescription!.setText(csm05.description$)

if snm01.media_type$ = "VIR" then
    virtualLicense!.setText("Yes")
else
    virtualLicense!.setText("No")
fi

ecCompany!.setText(snmeu.company_name$)
ecContact!.setText(snmeu.contact$)

customerType!.setText(arm02.cust_type$ + " " + arm10l.code_desc$)
salesPerson!.setText(arm02.slspsn_code$ + " " + arm10f.slspsn_name$)

totalUsers$ = "Total users: " + str(snm01.users)
if cvs(snm02.lic_property1$,3) <> "" then
    totalUsers$ = totalUsers$ + ", " + cvs(snm02.lic_property1$,3) + ": " + str(snm02.users1)
fi
if cvs(snm02.lic_property2$,3) <> "" then
    totalUsers$ = totalUsers$ + ", " + cvs(snm02.lic_property2$,3) + ": " + str(snm02.users2)
fi
if cvs(snm02.lic_property3$,3) <> "" then
    totalUsers$ = totalUsers$ + ", " + cvs(snm02.lic_property3$,3) + ": " + str(snm02.users3)
fi
userCount!.setText(totalUsers$)

samRedFlag = 0
today$ = date(0:"%Y%Mz%Dz")
if cvs(smc01.contract$,3) = "" then
    samStatus$ = "No SAM"
    samRedFlag = 1
else
    if smc01.expire_on_dt$ >= today$ then
        samStatus$ = "Expires: " + smc01.expire_on_dt$
    else
        samStatus$ = "Expired: " + smc01.expire_on_dt$
        samRedFlag = 1
    fi
    if smc01.sam_active$="N" then
        samStatus$ = "Inactive, " + samStatus$
        samRedFlag = 1
    fi
fi
samStatus!.setText(samStatus$)
if samRedFlag then
    samStatus!.setBackColor(redColor!)
fi

availSupport$ = "Incidents: " + str(snm01.avail_support)
if cvs(snm01.avail_expire$, 3) <> "" then
    if snm01.avail_expire$ >= today$ then
        availSupport$ = availSupport$ + " Expire: " + snm01.avail_expire$
    else
        availSupport$ = availSupport$ + " EXPIRED: " + snm01.avail_expire$
    fi
fi
availableSupport!.setText(availSupport$)

hostID!.setText(newest_hostid$)
hostName!.setText(l_hostname$)
authorization!.setText(l_auth$)
licenseHistory!.setText(lbox$)

rem ' set licFailures button text with failure count
gosub countLicenseFailures
temp1! = cast(BBjButton, BBjAPI().getSysGui().getWindow(gb__win.mainWindow).getControl("licFailuresBtn"))
temp1!.setText(str(failCount) + " License Failures")

rem ' set the removedBLSBlkBtn status
gosub enable_disable_removeBLSBlkBtn

return

[Function (showVendorFeatures)]
rem ' -----------------------------------------------------------------
rem ' showVendorFeatures
rem ' -----------------------------------------------------------------

showVendorFeatures:

mainWindow!.setVisible(0)
vendorFeatures!.setVisible(1)

vfSerialNbr!.setText(cvs(serialNumber$,3))

vendorFeaturesGrid!.clearText()
vendorFeaturesGrid!.setSelectedCell(0,0)
vendorFeaturesGrid!.setColumnHeaderCellAlignment(0, vendorFeaturesGrid!.GRID_ALIGN_LEFT)
vendorFeaturesGrid!.setColumnAlignment(0,vendorFeaturesGrid!.GRID_ALIGN_LEFT)

featureGridItems! = BBjAPI().makeVector()
looping = 1, featureCnt = 0
read record(snt04, key = cvs(serialNumber$,3), dom=*next)snt04$
while looping
    read record(snt04, end=*break)snt04$
    if pos(cvs(serialNumber$,3) = snt04$) <> 1 then break
    featureCnt = featureCnt + 1
    featureGridItems!.addItem(cvs(snt04.feature$,3))
    featureGridItems!.addItem(snt04.feature_rev$)
    featureGridItems!.addItem(snt04.prod_code$)
    expireDate$ = cvs(snt04.expire_on_dt$,3)
    if len(expireDate$) = 8 then expireDate$ = expireDate$(1,4) + "-" + expireDate$(5,2) + "-" + expireDate$(7,2)  
    featureGridItems!.addItem(expireDate$)
    featureGridItems!.addItem(snt04.users$)
wend

if featureCnt > 0 then
    vendorFeaturesGrid!.setCellText(featureGridItems!)
fi

subject$ = "Vendor Features in extSpptInterface"
msgtxt$ = "Vendor Features in extSpptInterface accessed by " +  xUID$ + ", " + cvs(serialNumber$,3)
call "sendEmail.src", "mis@basis.cloud", "kurt.e.williams@comcast.net", "", "", subject$, msgtxt$, ""

return

[Function (useAndDeclare)]
rem ' -----------------------------------------------------------------
rem ' useAndDeclare
rem ' -----------------------------------------------------------------

useAndDeclare:

use java.awt.Dimension

use ::HostId.src::HostId
use ::HostId.src::HostIdConstants

declare BBjAPI ourAPI!
declare BBjSysGui ourSysGui!
declare BBjSystemMetrics ourSystemMetrics!
declare Dimension scrDimension!
declare BBjWindow ourWindow!

declare BBjWindow loginWindow!
declare BBjStaticText userNameLabel!
declare BBjEditBox userName!
declare BBjStaticText passwordLabel!
declare BBjEditBox password!
declare BBjButton exitButton!
declare BBjButton loginButton!

declare BBjWindow mainWindow!
declare BBjStaticText snLabel!
declare BBjEditBox serialNumber!
declare BBjStaticText custNameLabel!
declare BBjEditBox customerName!
declare BBjButton searchButton!

declare BBjStaticText productLabel!
declare BBjStaticText platformLabel!
declare BBjStaticText oslevelLabel!
declare BBjStaticText revisionLabel!
declare BBjStaticText licenseTypeLabel!

declare BBjEditBox product!
declare BBjEditBox platform!
declare BBjEditBox oslevel!
declare BBjEditBox revision!
declare BBjEditBox licenseType!

declare BBjStaticText productDescription!
declare BBjStaticText platformDescription!
declare BBjStaticText oslevelDescription!
declare BBjStaticText revisionDescription!
declare BBjStaticText licenseTypeDescription!

declare BBjStaticText euCompanyLabel!
declare BBjStaticText euContactLabel!
declare BBjEditBox ecCompany!
declare BBjEditBox ecContact!

declare BBjColor greenColor!
declare BBjColor redColor!
declare BBjColor whiteColor!

declare BBjStaticText customerTypeLabel!
declare BBjStaticText salesPersonLabel!
declare BBjEditBox customerType!
declare BBjEditBox salesPerson!

declare BBjStaticText userCountLabel!
declare BBjEditBox userCount!

declare BBjStaticText samStatusLabel!
declare BBjEditBox samStatus!

declare BBjStaticText availableSupporLabel!
declare BBjEditBox availableSupport!

rem declare BBjStaticText hostIDLabel!
declare BBjStaticText hostNameLabel!
declare BBjStaticText authorizationLabel!
declare BBjStaticText licenseHistoryLabel!
declare BBjEditBox hostID!
declare BBjEditBox hostName!
declare BBjEditBox authorization!
declare BBjCEdit licenseHistory!

declare BBjStaticText virtualLicenseLabel!
declare BBjEditBox virtualLicense!

declare BBjGroupBox sendLicenseGroup!
declare BBjStaticText emailAddressLabel!
declare BBjEditBox emailAddress!
declare BBjRadioButton trlSelect!
declare BBjButton sendLicenseButton!
declare BBjButton generateLicenseButton!

declare BBjWindow vendorFeatures!
declare BBjButton closeBtn!
declare BBjStandardGrid vendorFeaturesGrid!
declare BBjEditBox vfSerialNbr!

declare BBjWindow fullHostid!

declare HostId hostIdLookup!

return

[Function (write_comment)]
rem ' -----------------------------------------------------------------
rem ' write_comment
rem ' -----------------------------------------------------------------

write_comment:

seq = 1
call "ec_open::SNM04"

read record(snm04, key = cvs(serialNumber$,3), dom=*next)snm04$

while seq < 100
    read record(snm04, end=*break)snm04$
    if snm04.serial_nbr$=serialNumber$ then 
        seq = NUM(snm04.comments_seq$) + 1
        continue
    fi
    snm04.serial_nbr$=serialNumber$
    snm04.comments_seq$ = str(seq:"00"),seq=100
    snm04.cmt_line$=xComment$
    snm04$=field(snm04$)
    write record (snm04,key = snm04$(1,22))snm04$
wend


return

