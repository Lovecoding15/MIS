   rem ' Program Name: extSpptInterface.src
   rem ' Resource File: extSpptInterface.arc
   rem ' Generated by GUIBuilder 4.0 (May 26, 2022 at 15:18:55)
   rem ' Portions Copyright (C) 1997-2022 BASIS International Ltd.  All rights reserved.

   seterr gb__no_arg
   enter gb__arg$; gb__args=-1,gb__args=pos($0a$=fattr(gb__arg$,$$),1,0)
gb__no_arg:
   seterr 0

   precision 99
   gb__show_forms=2; rem ' Create all forms at the beginning

   rem ' gb_ini.cod - GUIBuilder generated programs: Initialization
   rem ' Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
   rem
   rem ' ***** I N I T I A L I Z A T I O N *****
   rem ' The first part of the initialization section ensures that the
   rem ' environment will support the requirements of the generated 
   rem ' program.  These requirements are:
   rem '     1.  The interpreter supports GUI
   rem '     2.  The interpreter is Visual PRO/5 2.0 or above
   rem '     3.  A SYSGUI device is defined in config.bbx
   rem

   rem ' 1. Make sure the interpreter in use supports GUI
   if info(6,0)="" then
:     print 'cs',;
:     print "This interpreter does not support GUI.";
:     print "Press any key to continue.",;
:     read record(0,siz=1);
:     stop
   rem

   rem ' 2. Make sure the interpreter in use is Visual PRO/5 2.0 or above
   if sys<"LEVEL 5" or (cvs(sys,3)="LEVEL 5" and cvs(rev,3)<"REV 2.0") then
:     input(0,err=gb__eoj)
:      	'ask'("",4,"Requires at least Visual PRO/5 Rev. 2.0.  "+
:      	"This program will now terminate.","&Terminate:Y"+$0a$),
:      	'ee',gb__temp$,'be',;
:     goto gb__eoj
   rem

   seterr gb__err; setesc gb__esc

   rem ' 3. Check config.bbx for SYSGUI and SYSPRINT devices
   gb__alias=0,gb__sysgui$="",gb__sysprint$=""
   dim gb__tsk$:"type:u(1),opens:u(1),name:c(1*=0),dname:c(1*=0),pname:c(1*=0),modes:c(1*=0)"

gb__check_tsk:
   gb__tsk$=tsk(gb__alias,err=gb__done_with_tsk)

   if gb__sysgui$="" and cvs(gb__tsk.pname$,7)="SYSGUI" then
:     gb__sysgui$=gb__tsk.name$

   if gb__sysprint$="" and cvs(gb__tsk.pname$,7)="SYSPRINT" then
:     gb__sysprint$=gb__tsk.name$

   if gb__sysgui$="" or gb__sysprint$="" then
:     gb__alias=gb__alias+1;
:     goto gb__check_tsk

gb__done_with_tsk:
   if gb__sysgui$="" then
:     gb__sysgui$="not defined in config.bbx";
:     goto gb__cannot_open_sysgui

   rem ' Open SYSGUI device
   gb__sysgui=unt; open (gb__sysgui,err=gb__cannot_open_sysgui)gb__sysgui$
   goto gb__opened_sysgui

gb__cannot_open_sysgui:
   gb__err$="Unable to open the SYSGUI device (alias "+gb__sysgui$+
:    ") in program "+pgm(-2)+".  Visual PRO/5 cannot maintain a graphical "+
:    "user interface without this device.  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"SYSGUI error")
   goto gb__eoj

gb__opened_sysgui:
   dim gb__sysgui_fin$:tmpl(gb__sysgui,ind=0)
   gb__sysgui_fin$=fin(gb__sysgui)

   rem ' splash screen, if any, can go here
   rem ' splash=gb__sysgui_fin.available_context
   rem ' print (gb__sysgui)'context'(splash),'window'(0,0,500,400,$$,$01000000$),'image'(0,0,500,400,"mysplash.gif")

   dim gb__event$:tmpl(gb__sysgui)
   gb__event=len(gb__event$)

   rem ' Open the resource file (try both .arc and .brc if necessary)
   gb__resource$="extSpptInterface.arc"
   if pos("ec.bbj"= pgm(-2)) then gosub prep_routine
   gb__handle=resopen(gb__resource$,err=gb__resource_fallback);
:  goto gb__opened_resource

gb__resource_fallback:
   gb__temp=pos(".brc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"arc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

   gb__temp=pos(".arc"=cvs(gb__resource$,8),-1)
   if gb__temp=len(gb__resource$)-3 then
:     gb__resource$=gb__resource$(1,gb__temp)+"brc";
:     gb__handle=resopen(gb__resource$,err=gb__cannot_open_resource);
:     goto gb__opened_resource

gb__cannot_open_resource:
   gb__err$="Unable to open resource file extSpptInterface.arc"+
:    " in program "+pgm(-2)+".  This program will now terminate."
   gb__temp=msgbox(gb__err$,16,"Resource file error")
   goto gb__eoj

   rem ' ------------------------------------------------------------------------
   rem ' Functions to manipulate screens and data
   rem ' ------------------------------------------------------------------------

   rem ' Get data from screen into template record
   def fngb__get_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put data from template record to screen
   def fngb__put_screen$(xx__win_id$,gb__rec$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=fattr(xx__rec$,"")
      gb__controls=pos($0a$=gb__control_list$,1,0)
      if gb__controls=0 then
:        return xx__rec$
      for gb__control=1 to gb__controls
         gb__temp=pos($0a$=gb__control_list$)
         gb__ctl_name$=gb__control_list$(1,gb__temp-1)
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Get fields from screen into template record
   def fngb__get_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 14; rem ' HScroll
            case 15; rem ' VScroll
            case 103; rem ' Tool button
               field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,gb__ctl_id,2))
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 field xx__rec$,gb__ctl_name$=dec(ctrl(gb__sysgui,-gb__ctl_id))
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,1)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=ctrl(gb__sysgui,gb__ctl_id,2),gb__sel$=""
               while len(gb__temp$)
                  gb__sel$=gb__sel$+$ff$+str(dec(gb__temp$(1,2))),gb__temp$=gb__temp$(3)
               wend
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)+gb__sel$
               gb__temp$="",gb__sel$=""
               break
            case 22; rem ' Custom Edit
               field xx__rec$,gb__ctl_name$=ctrl(gb__sysgui,gb__ctl_id,7)
               break
            case 106; rem ' Tab Control -- get selected tab
               field xx__rec$,gb__ctl_name$=dec(sendmsg(gb__sysgui,gb__ctl_id,29,0,""))
               break
            case default; rem ' all others C(1)?
               rem ' field xx__rec$,gb__ctl_name$=""
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Put fields from template record to screen
   def fngb__put_fields$(xx__win_id$,gb__rec$,xx__control_list$)
      gb__current_context=dec(ctrl(gb__sysgui))
      xx__context=fngb__context(xx__win_id$)
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(xx__context)
      dim xx__rec$:fngb__template$(xx__win_id$)
      if len(gb__rec$) then
:        xx__rec$=gb__rec$
      gb__control_list$=xx__control_list$+","
      gb__controls=pos(","=gb__control_list$,1,0)
      for gb__control=1 to gb__controls
         gb__temp=pos(","=gb__control_list$)
         gb__ctl_name$=cvs(gb__control_list$(1,gb__temp-1),7)
         if gb__ctl_name$="" then
:           continue
         gb__control_list$=gb__control_list$(gb__temp+1)
         gb__ctl_id=num(fattr(xx__rec$,gb__ctl_name$,"ID"))
         gb__ctl_type=num(fattr(xx__rec$,gb__ctl_name$,"TYPE"))
         switch gb__ctl_type
            case 12; rem ' Radio button
            case 13; rem ' Check box
            case 103; rem ' Tool button
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               if gb__temp then
:                 print (gb__sysgui)'check'(gb__ctl_id)
:              else
:                 print (gb__sysgui)'uncheck'(gb__ctl_id)
               break
            case 100; rem ' Menu item
            case 101; rem ' Checkable menu item
               if gb__ctl_id then
:                 gb__temp=num(field(xx__rec$,gb__ctl_name$));
:                 if gb__temp then
:                    print (gb__sysgui)'check'(-gb__ctl_id)
:                 else
:                    print (gb__sysgui)'uncheck'(-gb__ctl_id)
               break
            case 14; rem ' HScroll
            case 15; rem ' VScroll
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               print (gb__sysgui)'scrollpos'(gb__ctl_id,gb__temp)
               break
            case 16; rem ' EDIT
            case 17; rem ' TEXT
            case 20; rem ' List Edit
            case 102; rem ' STATBAR
            case 104; rem ' INPUTE
            case 105; rem ' INPUTN
            case 114; rem ' INPUTD
               gb__temp$=field(xx__rec$,gb__ctl_name$)
               print (gb__sysgui)'title'(gb__ctl_id,gb__temp$)
               break
            case 18; rem ' List Box
            case 19; rem ' List Button
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($ff$=gb__temp$),gb__sel$=""
               if gb__temp then
:                 gb__sel$=gb__temp$(gb__temp+1)+$ff$,gb__temp$=gb__temp$(1,gb__temp-1)
               print (gb__sysgui)'listsuspend'(gb__ctl_id),'listclr'(gb__ctl_id)
               if pos($0a$=gb__temp$,1,0) then
:                 print (gb__sysgui)'listadd'(gb__ctl_id,0,pos($0a$=gb__temp$,1,0)),gb__temp$;
:                 gb__temp=pos($ff$=gb__sel$);
:                 while gb__temp;
:                    gb__sel=num(gb__sel$(1,gb__temp-1)),gb__sel$=gb__sel$(gb__temp+1);
:                    print (gb__sysgui)'listmsel'(gb__ctl_id,gb__sel);
:                    gb__temp=pos($ff$=gb__sel$);
:                 wend
               print (gb__sysgui)'listresume'(gb__ctl_id)
               break
            case 22; rem ' Custom Edit
               gb__temp$=field(xx__rec$,gb__ctl_name$),gb__temp=pos($0a$=gb__temp$,1,0)
               print (gb__sysgui)'txclr'(gb__ctl_id)
               if gb__temp then
:                 print (gb__sysgui)'txadd'(gb__ctl_id,0,gb__temp),gb__temp$
               break
            case 106; rem ' Tab Control -- change selected tab
               gb__temp=num(field(xx__rec$,gb__ctl_name$))
               gb__temp$=sendmsg(gb__sysgui,gb__ctl_id,34,gb__temp,"")
               break
            case default; rem ' all others C(1)?
               rem ' gb__temp$=field(xx__rec$,gb__ctl_name$)
               break
         swend
      next gb__control
      if xx__context<>gb__current_context then
:        print (gb__sysgui)'context'(gb__current_context)
      return xx__rec$
   fnend


   rem ' Set focus to specified Window ID
   def fngb__focus_win_id(xx__win_id$)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui,err=gb__focus_win_id)'context'(xx__context),'focus'(0),'raise',
      return xx__context
   gb__focus_win_id:
      xx__form=fngb__form(xx__win_id$)
      print (gb__sysgui)'context'(xx__context),
:                       'resource'(len(gb__resource$[xx__form])),gb__resource$[xx__form],
      return xx__context
   fnend


   rem ' Get form number given Window ID
   def fngb__form(xx__win_id$)
       gb__form=-1,xx__form_id$=xx__win_id$
       xx__form=pos("."=xx__form_id$)
       if xx__form then
:         xx__form_id$=xx__form_id$(1,xx__form-1)
       for xx__form=1 to gb__forms
           if gb__form.id$[xx__form]=xx__form_id$ then
:             gb__form=xx__form;
:             break
       next xx__form
       return gb__form
   fnend


   rem ' Set focus to specified Window ID + Control ID
   def fngb__focus_ctl_id(xx__win_id$,xx__ctl_id)
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Set focus to specified Window ID + Control Name
   def fngb__focus_ctl_name(xx__win_id$,xx__ctl_name$)
      dim xx__rec$:fngb__template$(xx__win_id$)
      xx__ctl_id=num(fattr(xx__rec$,xx__ctl_name$,"ID"))
      xx__context=fngb__context(xx__win_id$)
      if xx__context>=0 then
:        print (gb__sysgui)'context'(xx__context),'focus'(0),'raise',
:                          'focus'(xx__ctl_id),
      return xx__context
   fnend


   rem ' Get Window ID given Context
   def fngb__win_id$(xx__context)
       xx__win_id$=""
       for xx__window=1 to gb__windows
           if gb__window.context[xx__window]=xx__context then
:             xx__win_id$=gb__window.win_id$[xx__window];
:             break
       next xx__window
       return xx__win_id$
   fnend


   rem ' Get Context given Window ID
   def fngb__context(xx__win_id$)
      gb__window=-1,gb__context=-1
      for xx__window=1 to gb__windows
          if gb__window.win_id$[xx__window]=xx__win_id$ then
:            gb__window=xx__window,gb__context=gb__window.context[gb__window];
:            break
      next xx__window
      if gb__context>=0 or gb__window<0 then
:        return gb__context
      return fngb__window(xx__win_id$)
   fnend


   rem ' Get Window Information given Window ID
   def fngb__win_info$(xx__win_id$)
      dim gb__win_info$(0)
      xx__context=fngb__context(xx__win_id$)
      if xx__context<0 then
:        return gb__win_info$
      dim gb__win_info$:"class:u(1),type:u(1),hidden:u(1),disabled:u(1),"
:                      +"context:u(2),eventmask:u(4),flags:u(4),focus:u(2),"
:                      +"x:i(2),y:i(2),w:u(2),h:u(2),title:c(16*=)"
      gb__win_info$=ctrl(gb__sysgui,0,4,xx__context)
:                  +ctrl(gb__sysgui,0,8,xx__context)
:                  +bin(xx__context,2)
:                  +sendmsg(gb__sysgui,0,21,0,"",xx__context)
:                  +sendmsg(gb__sysgui,0,22,0,"",xx__context)
:                  +ctrl(gb__sysgui,0,2,xx__context)
:                  +ctrl(gb__sysgui,0,0,xx__context)
:                  +ctrl(gb__sysgui,0,1,xx__context)
      return gb__win_info$
   fnend

gb__opened_resource:

   rem ==================== End of gb_ini.cod ====================

rem ' Instantiate form(s)

gb__forms = 6
dim gb__form_context[gb__forms],gb__resource$[gb__forms],gb__form$:"id[6]:c(4*=10)"

gb__windows=6; rem ' includes child windows, if any
gb__win_id$ = "101"

dim gb__win$:"MAINWINDOW:I(2),LOGINWINDOW:I(2),VENDORFEATURES:I(2),FULLHOSTID:I(2),REGFAILURES:I(2),LICREGISTRATIONS:I(2)"

gb__win.MAINWINDOW=-1
gb__win.LOGINWINDOW=-1
gb__win.VENDORFEATURES=-1
gb__win.FULLHOSTID=-1
gb__win.REGFAILURES=-1
gb__win.LICREGISTRATIONS=-1

dim gb__window$:"win_id[6]:c(8*=10),win_name[6]:c(16*=10),context[6]:n(4*=10)"
gb__window.win_id$[1]="101",gb__window.win_name$[1]="MAINWINDOW",gb__window.context[1]=-1,gb__form.id$[1]="101"
gb__window.win_id$[2]="100",gb__window.win_name$[2]="LOGINWINDOW",gb__window.context[2]=-1,gb__form.id$[2]="100"
gb__window.win_id$[3]="102",gb__window.win_name$[3]="VENDORFEATURES",gb__window.context[3]=-1,gb__form.id$[3]="102"
gb__window.win_id$[4]="110",gb__window.win_name$[4]="FULLHOSTID",gb__window.context[4]=-1,gb__form.id$[4]="110"
gb__window.win_id$[5]="112",gb__window.win_name$[5]="REGFAILURES",gb__window.context[5]=-1,gb__form.id$[5]="112"
gb__window.win_id$[6]="113",gb__window.win_name$[6]="LICREGISTRATIONS",gb__window.context[6]=-1,gb__form.id$[6]="113"

gb__context = fngb__window("101"); rem ' mainWindow
gb__context = fngb__window("100"); rem ' loginWindow
gb__context = fngb__window("102"); rem ' vendorFeatures
gb__context = fngb__window("110"); rem ' fullHostid
gb__context = fngb__window("112"); rem ' regFailures
gb__context = fngb__window("113"); rem ' licRegistrations

rem ' Instantiate the form corresponding to a given window

   def fngb__window(xx__win_id$)
      gb__window = 0
      for xx__window=1 to gb__windows
         if gb__window.win_id$[xx__window]=xx__win_id$ then
:           gb__window = xx__window;
:           break
      next xx__window
      if gb__window = 0 then 
:        return -1
      if gb__window.context[gb__window] >= 0 then
:        return gb__window.context[gb__window]

      switch fngb__form(xx__win_id$)

         case 1; rem ' Load Form ID 101 (MAINWINDOW)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[1]=gb__sysgui_fin.available_context
         gb__resource$[1]=resget(gb__handle,1,101)
         print (gb__sysgui)'context'(gb__form_context[1]),'resource'(len(gb__resource$[1])),gb__resource$[1]
         gb__win.MAINWINDOW=gb__form_context[1]
         gb__window.context[1]=gb__win.MAINWINDOW
         break

         case 2; rem ' Load Form ID 100 (LOGINWINDOW)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[2]=gb__sysgui_fin.available_context
         gb__resource$[2]=resget(gb__handle,1,100)
         print (gb__sysgui)'context'(gb__form_context[2]),'resource'(len(gb__resource$[2])),gb__resource$[2]
         gb__win.LOGINWINDOW=gb__form_context[2]
         gb__window.context[2]=gb__win.LOGINWINDOW
         break

         case 3; rem ' Load Form ID 102 (VENDORFEATURES)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[3]=gb__sysgui_fin.available_context
         gb__resource$[3]=resget(gb__handle,1,102)
         print (gb__sysgui)'context'(gb__form_context[3]),'resource'(len(gb__resource$[3])),gb__resource$[3]
         gb__win.VENDORFEATURES=gb__form_context[3]
         gb__window.context[3]=gb__win.VENDORFEATURES
         break

         case 4; rem ' Load Form ID 110 (FULLHOSTID)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[4]=gb__sysgui_fin.available_context
         gb__resource$[4]=resget(gb__handle,1,110)
         print (gb__sysgui)'context'(gb__form_context[4]),'resource'(len(gb__resource$[4])),gb__resource$[4]
         gb__win.FULLHOSTID=gb__form_context[4]
         gb__window.context[4]=gb__win.FULLHOSTID
         break

         case 5; rem ' Load Form ID 112 (REGFAILURES)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[5]=gb__sysgui_fin.available_context
         gb__resource$[5]=resget(gb__handle,1,112)
         print (gb__sysgui)'context'(gb__form_context[5]),'resource'(len(gb__resource$[5])),gb__resource$[5]
         gb__win.REGFAILURES=gb__form_context[5]
         gb__window.context[5]=gb__win.REGFAILURES
         break

         case 6; rem ' Load Form ID 113 (LICREGISTRATIONS)
         gb__sysgui_fin$=fin(gb__sysgui)
         gb__form_context[6]=gb__sysgui_fin.available_context
         gb__resource$[6]=resget(gb__handle,1,113)
         print (gb__sysgui)'context'(gb__form_context[6]),'resource'(len(gb__resource$[6])),gb__resource$[6]
         gb__win.LICREGISTRATIONS=gb__form_context[6]
         gb__window.context[6]=gb__win.LICREGISTRATIONS
         break
      swend

      return gb__window.context[gb__window]
   fnend

rem ' Get template for controls on a given window

   def fngb__template$(xx__win_id$)
      if xx__win_id$="101" then return "SEARCHBUTTON:C(1*=0):ID=1 TYPE=11 X=200 Y=10 W=90 H=25:,SNLABEL:C(64*=0):ID=101 TYPE=17 X=10 Y=15 W=80 H=20:,SERIALNUMBER:C(64*=0):ID=102 TYPE=16 X=90 Y=10 W=90 H=25:,CUSTNAMELABEL:C(64*=0):ID=103 TYPE=17 X=10 Y=45 W=80 H=20:,CUSTOMERNAME:C(64*=0):ID=104 TYPE=16 X=90 Y=40 W=200 H=25:,PLATFORM:C(64*=0):ID=106 TYPE=16 X=90 Y=130 W=40 H=25:,PRODUCTLABEL:C(64*=0):ID=110 TYPE=17 X=10 Y=105 W=80 H=20:,PRODUCT:C(64*=0):ID=105 TYPE=16 X=90 Y=100 W=40 H=25:,OSLEVEL:C(64*=0):ID=107 TYPE=16 X=90 Y=160 W=40 H=25:,PLATFORMLABEL:C(64*=0):ID=111 TYPE=17 X=10 Y=135 W=80 H=20:,OSLEVELLABEL:C(64*=0):ID=112 TYPE=17 X=10 Y=165 W=80 H=20:,REVISIONLABEL:C(64*=0):ID=113 TYPE=17 X=10 Y=195 W=80 H=20:,LICENSETYPELABEL:C(64*=0):ID=114 TYPE=17 X=10 Y=225 W=80 H=20:,REVISION:C(64*=0):ID=108 TYPE=16 X=90 Y=190 W=40 H=25:,LICENSETYPE:C(64*=0):ID=109 TYPE=16 X=90 Y=220 W=40 H=25:,PRODUCTDESCRIPTION:C(64*=0):ID=115 TYPE=17 X=140 Y=105 W=150 H=20:,PLATFORMDESCRIPTION:C(64*=0):ID=116 TYPE=17 X=140 Y=135 W=150 H=20:,OSLEVELDESCRIPTION:C(64*=0):ID=117 TYPE=17 X=140 Y=165 W=150 H=20:,REVISIONDESCRIPTION:C(64*=0):ID=118 TYPE=17 X=140 Y=195 W=150 H=20:,LICENSETYPEDESCRIPTION:C(64*=0):ID=119 TYPE=17 X=140 Y=225 W=150 H=20:,EUCOMPANYLABEL:C(64*=0):ID=100 TYPE=17 X=300 Y=15 W=70 H=20:,EUCONTACTLABEL:C(64*=0):ID=120 TYPE=17 X=300 Y=45 W=70 H=20:,EUCOMPANY:C(64*=0):ID=121 TYPE=16 X=380 Y=10 W=200 H=25:,EUCONTACT:C(64*=0):ID=122 TYPE=16 X=380 Y=40 W=200 H=25:,CUSTOMERTYPELABEL:C(64*=0):ID=123 TYPE=17 X=10 Y=75 W=80 H=20:,SALESPERSONLABEL:C(64*=0):ID=124 TYPE=17 X=300 Y=75 W=70 H=20:,CUSTOMERTYPE:C(64*=0):ID=125 TYPE=16 X=90 Y=70 W=200 H=25:,SALESPERSON:C(64*=0):ID=126 TYPE=16 X=380 Y=70 W=200 H=25:,USERCOUNTLABEL:C(64*=0):ID=127 TYPE=17 X=300 Y=105 W=70 H=20:,USERCOUNT:C(64*=0):ID=128 TYPE=16 X=380 Y=100 W=200 H=25:,SAMSTATUSLABEL:C(64*=0):ID=129 TYPE=17 X=300 Y=135 W=70 H=20:,SAMSTATUS:C(64*=0):ID=130 TYPE=16 X=380 Y=130 W=200 H=25:,AVAILABLESUPPORTLABEL:C(64*=0):ID=131 TYPE=17 X=300 Y=165 W=70 H=20:,AVAILABLESUPPORT:C(64*=0):ID=132 TYPE=16 X=380 Y=160 W=125 H=25:,HOSTID:C(64*=0):ID=134 TYPE=16 X=380 Y=190 W=200 H=25:,HOSTNAMELABEL:C(64*=0):ID=135 TYPE=17 X=300 Y=225 W=70 H=20:,HOSTNAME:C(64*=0):ID=136 TYPE=16 X=380 Y=220 W=200 H=25:,AUTHORIZATIONLABEL:C(64*=0):ID=137 TYPE=17 X=300 Y=255 W=70 H=20:,AUTHORIZATION:C(64*=0):ID=138 TYPE=16 X=380 Y=250 W=200 H=25:,LICENSEHISTORY:C(64*=0):ID=139 TYPE=22 X=10 Y=340 W=570 H=200:,LICENSEHISTORYLABEL:C(64*=0):ID=140 TYPE=17 X=10 Y=315 W=80 H=20:,VIRTUALLICENSELABEL:C(64*=0):ID=141 TYPE=17 X=10 Y=255 W=80 H=20:,VIRTUALLICENSE:C(64*=0):ID=142 TYPE=16 X=90 Y=250 W=40 H=25:,EMAILADDRESSLABEL:C(64*=0):ID=144 TYPE=17 X=20 Y=585 W=60 H=20:,EMAILADDRESS:C(64*=0):ID=145 TYPE=16 X=90 Y=580 W=200 H=25:,TRLSELECT:N(1*=0):ID=146 TYPE=12 X=300 Y=580 W=60 H=25:,SENDLICENSEBUTTON:C(1*=0):ID=147 TYPE=11 X=360 Y=580 W=100 H=25:,SENDLICENSEGROUP:C(1*=0):ID=143 TYPE=21 X=10 Y=550 W=570 H=70:,GENERATELICENSEBUTTON:C(1*=0):ID=148 TYPE=11 X=470 Y=580 W=100 H=25:,AVAILSPPTPLUS:C(1*=0):ID=149 TYPE=11 X=515 Y=160 W=30 H=25:,AVAILSPPTMINUS:C(1*=0):ID=150 TYPE=11 X=550 Y=160 W=30 H=25:,VENDORFEATURESBTN:C(1*=0):ID=151 TYPE=11 X=380 Y=280 W=200 H=25:,FULLHOSTIDBTN:C(1*=0):ID=152 TYPE=11 X=300 Y=190 W=70 H=25:,LICREGISTRATIONSBTN:C(1*=0):ID=153 TYPE=11 X=235 Y=280 W=140 H=25:,LICFAILURESBTN:C(1*=0):ID=154 TYPE=11 X=235 Y=310 W=140 H=25:,REMOVEBLSBLKBTN:C(1*=0):ID=155 TYPE=11 X=380 Y=310 W=200 H=25:,WHITELISTMSG:C(64*=0):ID=156 TYPE=17 X=10 Y=290 W=120 H=20:"
      if xx__win_id$="100" then return "USERNAMELABEL:C(64*=0):ID=104 TYPE=17 X=10 Y=15 W=70 H=20:,USERNAME:C(64*=0):ID=102 TYPE=16 X=90 Y=10 W=80 H=25:,PASSWORDLABEL:C(64*=0):ID=105 TYPE=17 X=10 Y=45 W=70 H=20:,PASSWORD:C(64*=0):ID=103 TYPE=16 X=90 Y=40 W=80 H=25:,LOGINBUTTON:C(1*=0):ID=1 TYPE=11 X=90 Y=70 W=80 H=25:,EXITBUTTON:C(1*=0):ID=2 TYPE=11 X=10 Y=70 W=80 H=25:"
      if xx__win_id$="102" then return "VENDORFEATURESGRID:C(1*=0):ID=101 TYPE=107 X=20 Y=50 W=550 H=500:,CLOSEBTN:C(1*=0):ID=100 TYPE=11 X=480 Y=565 W=90 H=25:,VFSERIALNBR:C(64*=0):ID=105 TYPE=16 X=105 Y=15 W=110 H=25:,STATIC_TEXT106:C(64*=0):ID=106 TYPE=17 X=20 Y=20 W=75 H=20:"
      if xx__win_id$="110" then return "FULLHOSTIDTEXT:C(64*=0):ID=101 TYPE=22 X=20 Y=160 W=460 H=200:,FULLHOSTIDLBL:C(64*=0):ID=102 TYPE=17 X=20 Y=140 W=90 H=20:,EXITFHBUTTON:C(1*=0):ID=103 TYPE=11 X=390 Y=370 W=90 H=20:,HOSTIDTOKEN:C(64*=0):ID=100 TYPE=16 X=20 Y=40 W=460 H=25:,HOSTIDTOKENLABEL:C(64*=0):ID=104 TYPE=17 X=20 Y=20 W=90 H=20:,HOSTIDHASHLABEL:C(64*=0):ID=105 TYPE=17 X=20 Y=80 W=90 H=20:,HOSTIDHASH:C(64*=0):ID=106 TYPE=16 X=20 Y=100 W=460 H=25:"
      if xx__win_id$="112" then return "REGFAILURESGRID:C(1*=0):ID=101 TYPE=107 X=10 Y=10 W=780 H=440:,FAILUREEXITBTN:C(1*=0):ID=100 TYPE=11 X=700 Y=465 W=90 H=25:"
      if xx__win_id$="113" then return "LICREGISTRATIONSGRID:C(1*=0):ID=101 TYPE=107 X=10 Y=10 W=780 H=445:,LICREGISTRATIONSEXITBUTTON:C(1*=0):ID=100 TYPE=11 X=700 Y=465 W=90 H=25:"
      return ""
   fnend

rem ' get all the controls in object varilables


ourAPI! = BBjAPI()
ourSysGui! = ourAPI!.getSysGui()
ourSystemMetrics!=ourSysGui!.getSystemMetrics()
scrDimension!=ourSystemMetrics!.getScreenSize()

rem ' login window
loginWindow! = ourSysGui!.getWindow("loginWindow")

userNameLabel! = cast(BBjStaticText, loginWindow!.getControl("userNameLabel"))
userName! = cast(BBjEditBox, loginWindow!.getControl("userName"))
passwordLabel! = cast(BBjStaticText, loginWindow!.getControl("passwordLabel"))
password! = cast(BBjEditBox, loginWindow!.getControl("password"))
exitButton! = cast(BBjButton, loginWindow!.getControl("exitButton"))
loginButton! = cast(BBjButton, loginWindow!.getControl("loginButton"))

rem ' main window
mainWindow! = ourSysGui!.getWindow("mainWindow")

snLabel! = cast(BBjStaticText, mainWindow!.getControl("snLabel"))
serialNumber! = cast(BBjEditBox, mainWindow!.getControl("serialNumber"))
serialNumber!.focus()
ThisCTX = ourSysGui!.getContext()
custNameLabel! = cast(BBjStaticText, mainWindow!.getControl("custNameLabel"))
customerName! = cast(BBjEditBox, mainWindow!.getControl("customerName"))
searchButton! = cast(BBjButton, mainWindow!.getControl("searchButton"))

productLabel! = cast(BBjStaticText, mainWindow!.getControl("productLabel"))
platformLabel! = cast(BBjStaticText, mainWindow!.getControl("platformLabel"))
oslevelLabel! = cast(BBjStaticText, mainWindow!.getControl("oslevelLabel"))
revisionLabel! = cast(BBjStaticText, mainWindow!.getControl("revisionLabel"))
licenseTypeLabel! = cast(BBjStaticText, mainWindow!.getControl("licenseTypeLabel"))

product! = cast(BBjEditBox, mainWindow!.getControl("product"))
platform! = cast(BBjEditBox, mainWindow!.getControl("platform"))
oslevel! = cast(BBjEditBox, mainWindow!.getControl("oslevel"))
revision! = cast(BBjEditBox, mainWindow!.getControl("revision"))
licenseType! = cast(BBjEditBox, mainWindow!.getControl("licenseType"))

productDescription! = cast(BBjStaticText, mainWindow!.getControl("productDescription"))
platformDescription! = cast(BBjStaticText, mainWindow!.getControl("platformDescription"))
oslevelDescription! = cast(BBjStaticText, mainWindow!.getControl("osLevelDescription"))
revisionDescription! = cast(BBjStaticText, mainWindow!.getControl("revisionDescription"))
licenseTypeDescription! = cast(BBjStaticText, mainWindow!.getControl("licenseTypeDescription"))

euCompanyLabel! = cast(BBjStaticText, mainWindow!.getControl("euCompanyLabel"))
euContactLabel! = cast(BBjStaticText, mainWindow!.getControl("euContactLabel"))
ecCompany! = cast(BBjEditBox, mainWindow!.getControl("euCompany"))
ecContact! = cast(BBjEditBox, mainWindow!.getControl("euContact"))

greenColor! = ourSysGui!.makeColor(ourSysGui!.GREEN)
redColor! = ourSysGui!.makeColor(ourSysGui!.RED)
whiteColor! = ourSysGui!.makeColor(ourSysGui!.WHITE)

customerTypeLabel! = cast(BBjStaticText, mainWindow!.getControl("customerTypeLabel"))
salesPersonLabel! = cast(BBjStaticText, mainWindow!.getControl("salesPersonLabel"))
customerType! = cast(BBjEditBox, mainWindow!.getControl("customerType"))
salesPerson! = cast(BBjEditBox, mainWindow!.getControl("salesPerson"))

userCountLabel! = cast(BBjStaticText, mainWindow!.getControl("userCountLabel"))
userCount! = cast(BBjEditBox, mainWindow!.getControl("userCount"))

samStatusLabel! = cast(BBjStaticText, mainWindow!.getControl("samStatusLabel"))
samStatus! = cast(BBjEditBox, mainWindow!.getControl("samStatus"))

availableSupporLabel! = cast(BBjStaticText, mainWindow!.getControl("availableSupportLabel"))
availableSupport! = cast(BBjEditBox, mainWindow!.getControl("availableSupport"))
availSpptPlus! = cast(BBjButton, mainwindow!.getControl("availSpptPlus"))
availSpptMinus! = cast(BBjButton, mainwindow!.getControl("availSpptMinus"))

rem ' hostIDLabel! = cast(BBjStaticText, mainWindow!.getControl("hostIDLabel"))
hostNameLabel! = cast(BBjStaticText, mainWindow!.getControl("hostNameLabel"))
authorizationLabel! = cast(BBjStaticText, mainWindow!.getControl("authorizationLabel"))
licenseHistoryLabel! = cast(BBjStaticText, mainWindow!.getControl("licenseHistoryLabel"))
hostID! = cast(BBjEditBox, mainWindow!.getControl("hostID"))
hostName! = cast(BBjEditBox, mainWindow!.getControl("hostName"))
authorization! = cast(BBjEditBox, mainWindow!.getControl("authorization"))
licenseHistory! = cast(BBjCEdit, mainWindow!.getControl("licenseHistory"))

virtualLicenseLabel!  = cast(BBjStaticText, mainWindow!.getControl("virtualLicenseLabel"))
virtualLicense! = cast(BBjEditBox, mainWindow!.getControl("virtualLicense"))

sendLicenseGroup!  = cast(BBjGroupBox, mainWindow!.getControl("sendLicenseGroup"))
emailAddressLabel!  = cast(BBjStaticText, mainWindow!.getControl("emailAddressLabel"))
emailAddress! = cast(BBjEditBox, mainWindow!.getControl("emailAddress"))
trlSelect! = cast(BBjRadioButton, mainWindow!.getControl("trlSelect"))
sendLicenseButton! = cast(BBjButton, mainWindow!.getControl("sendLicenseButton"))
generateLicenseButton! = cast(BBjButton, mainWindow!.getControl("generateLicenseButton"))

rem ' vendor feature window
vendorFeatures! = ourSysGui!.getWindow("vendorFeatures")
closeBtn! = cast(BBjButton, vendorFeatures!.getControl("closeBtn"))
vendorFeaturesGrid! =  cast(BBjStandardGrid, vendorFeatures!.getControl("vendorFeaturesGrid"))
vfSerialNbr! =  cast(BBjEditBox, vendorFeatures!.getControl("vfSerialNbr"))

rem ' full hostid window
fullHostid! = ourSysGui!.getWindow("fullHostid")

rem ' open the files
gosub openFiles

rem ' get the URL for the DB
gosub buildOurDbUrl

rem ' build a list of reset reasons
gosub buildResetReasonList

rem ' were we invoked with a username and password on the command line?
rem ' if argc = 3 then
rem '     centerWindows = 0
rem '     xUID$ = argv(1)
rem '     xPwd$ = argv(2)
rem '     if len(xUID$) = 10 then xUID$ = xUID$(3)
rem '     userName!.setText(xUID$)
rem '     password!.setText(xPwd$)
rem '     gosub loginHit
rem ' fi

rem ' this is the launch from b-commcerce which has been disabled'
rem ' if loginSuccess = 0 and info(3,6) = "5" then
rem '     rem ' BUI only
rem '     centerWindows = 0
rem '     xUID$ = ""
rem '     xPwd$ = ""
rem '     xUID$ = clientenv("packet", err=*next)
rem '     if xUID$ <> "" then
rem '         namespace! = BBjAPI().getGlobalNamespace()
rem '         if namespace! <> null() then
rem '             xPwd! = Cast(BBjString, namespace!.getValue("SupportInterface" + xUID$, err=*next))
rem '             if xPwd! <> null() then xPwd$ = xPwd!
rem '         fi
rem '     fi
rem '     if len(xUID$) > 0 and len(xPwd$) > 0 then
rem '         if len(xUID$) = 10 then xUID$ = xUID$(3)
rem '         userName!.setText(xUID$)
rem '         password!.setText(xPwd$)
rem '         gosub loginHit
rem '     fi
rem ' fi

rem ' get the login
rem ' ourWindow! = loginWindow!
rem ' if centerWindows then gosub centerWindow
call "loginAddon60.src", thisCTX, xUID$, xPwrd$, loginSuccess
if loginSuccess then 
    gosub showMainWindow
else
    goto gb__eoj
fi
rem ' ---------------------------------------------------------------
rem ' Event Loop
rem ' ---------------------------------------------------------------

dim gb__closed[gb__windows]; rem ' track window status
dim gb__generic$:noticetpl(0,0); rem ' generic notice template
gb__eoj=0
goto gb__event

rem ' Load gb__notice$ string only if we're handling the event

gb__notice:
   gb__generic$=notice(gb__sysgui,gb__event.x%)
   dim gb__notice$:noticetpl(gb__generic.objtype%,gb__event.flags%)
   gb__notice$=gb__generic$
return

gb__event: repeat
   read record (gb__sysgui,siz=gb__event,err=gb__event_loop_end)gb__event$

   rem ' Get Window ID or Popup ID
   gb__win_id$=$$,gb__popup_id=gb__event.x*(gb__event.code$="P")
   if gb__popup_id=0 then gb__win_id$=fngb__win_id$(gb__event.context)

   rem ' Track whether event was handled
   gb__event_handled=0

   rem ' Handle events for Window ID 101 (mainWindow)
   while gb__win_id$="101"
      if gb__event.code$="X" then
:        gosub W101_C0_WIN_CLOSE;
:        gb__closed[1]=1;
:        gb__event_handled=1;
:        break
      if gb__event.id=1 and gb__event.code$="B" then
:        gosub W101_C1_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=147 and gb__event.code$="B" then
:        gosub W101_C147_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=148 and gb__event.code$="B" then
:        gosub W101_C148_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=149 and gb__event.code$="B" then
:        gosub W101_C149_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=150 and gb__event.code$="B" then
:        gosub W101_C150_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=151 and gb__event.code$="B" then
:        gosub W101_C151_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=152 and gb__event.code$="B" then
:        gosub W101_C152_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=153 and gb__event.code$="B" then
:        gosub W101_C153_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=154 and gb__event.code$="B" then
:        gosub W101_C154_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=155 and gb__event.code$="B" then
:        gosub W101_C155_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      break; rem ' Catch unhandled events
   wend; rem ' End of Window ID 101


   rem ' Handle events for Window ID 100 (loginWindow)
   while gb__win_id$="100"
      if gb__event.id=1 and gb__event.code$="B" then
:        gosub W100_C1_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      if gb__event.id=2 and gb__event.code$="B" then
:        gosub W100_C2_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      break; rem ' Catch unhandled events
   wend; rem ' End of Window ID 100


   rem ' Handle events for Window ID 102 (vendorFeatures)
   while gb__win_id$="102"
      if gb__event.code$="X" then
:        gosub W102_C0_WIN_CLOSE;
:        gb__closed[3]=1;
:        gb__event_handled=1;
:        break
      if gb__event.id=100 and gb__event.code$="B" then
:        gosub W102_C100_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      break; rem ' Catch unhandled events
   wend; rem ' End of Window ID 102


   rem ' Handle events for Window ID 110 (fullHostid)
   while gb__win_id$="110"
      if gb__event.id=103 and gb__event.code$="B" then
:        gosub W110_C103_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      break; rem ' Catch unhandled events
   wend; rem ' End of Window ID 110


   rem ' Handle events for Window ID 112 (regFailures)
   while gb__win_id$="112"
      if gb__event.id=100 and gb__event.code$="B" then
:        gosub W112_C100_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      break; rem ' Catch unhandled events
   wend; rem ' End of Window ID 112


   rem ' Handle events for Window ID 113 (licRegistrations)
   while gb__win_id$="113"
      if gb__event.id=100 and gb__event.code$="B" then
:        gosub W113_C100_PUSH_BUTTON;
:        gb__event_handled=1;
:        break
      break; rem ' Catch unhandled events
   wend; rem ' End of Window ID 113

   rem ' We're done when all windows have been closed.
   rem ' Developer can terminate event loop by setting
   rem ' gb__eoj=1 in any event handler.

   if !(gb__eoj) then
:     gb__eoj=1;
:     for gb__window=1 to gb__windows;
:        gb__eoj=(gb__eoj and gb__closed[gb__window]);
:     next gb__window

until gb__eoj

gb__event_loop_end: rem ' -------------------------------------

rem ' close files

close(emc01, err=*next)

close(snm01, err=*next)
close(snm02, err=*next)

close(amr01, err=*next)
close(arm02, err=*next)
close(arm10f, err=*next)
close(arm10l, err=*next)

close(csm01, err=*next)
close(csm02, err=*next)
close(csm03, err=*next)
close(csm04, err=*next)
close(csm05, err=*next)

close(snmel, err=*next)
close(snmeu, err=*next)

close(smc01, err=*next)

close(logextract, err=*next)
close(sn_license, err=*next)
close(sn_host, err=*next)
close(license_reset, err=*next)

close(are83, err=*next)
close(snt01, err=*next)

release
rem gb_eoj.cod - GUIBuilder generated programs: End of Job
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** P R O G R A M   E X I T **************************************
rem
gb__eoj:
   if gb__forms and gb__sysgui then
:     for gb__temp=1 to gb__forms;
:        print (gb__sysgui)'context'(gb__form_context[gb__temp]),'destroy'(0);
:     next gb__temp

   if gb__sysgui then
:     close (gb__sysgui)

   resclose (gb__handle,err=gb__eoj_final)

gb__eoj_final:

   if tcb(13) then
:     exit
:  else
:     release

rem gb_err.cod - GUIBuilder generated programs: Error handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E R R O R   H A N D L E R ************************************
rem
gb__err:
   
   rem ' terminate on Network Lost Errors
   if err = 71 or err = 72 then goto gb__eoj

   gb__temp=msgbox(errmes(-1)+" ("+str(err)+")"+
:      " occurred at line "+str(tcb(5))+
:      " in program "+pgm(-2),5+48,"Error handler")

   if gb__temp=4 then
:     retry
:  else
:     goto gb__eoj

rem gb_esc.cod - GUIBuilder generated programs: Escape handler
rem Copyright (C) 1998-2009 BASIS International Ltd.  All rights reserved.
rem
rem ***** E S C A P E   H A N D L E R ***********************************
rem
gb__esc:
   
   rem ' terminate program when ESCAPE detected.
   goto gb__eoj
   
   gb__temp=msgbox("An ESCAPE has been detected.  Do you want to end this "+
:     "program?",4+32+256,"ESCAPE handler")
   if gb__temp=7 then
:     return
:  else
:     goto gb__eoj

rem ' -----------------------------------------------------------------
rem ' adjustTheSupprtIncidentBalance
rem ' -----------------------------------------------------------------

adjustTheSupprtIncidentBalance:

rem ' changeAmt = -1 or 1

if changeAmt = 0 then return
if abs(changeAmt) <> 1 then return

rem ' extract the record

found = 0   
extract record(snm01, key = serialNumber$, err = *next)snm01$; found = 1
if !found then
    xresp = msgbox("An error " + str(err) + " occurred attempting to extract the serial number record. " + errmes(-1), 0, "Error on Extract")
    return
else
    if changeAmt = -1 and snm01.avail_support <= 0 then
        xresp = msgbox("Available Support balance can not be less than zero.",0,"Zero Balance")
        read record(snm01, key = serialNumber$, err = *next)snm01$
        return
    fi
    if changeAmt < 0 then 
        msgtxt$ = "decrease the available support incidents by 1."
    else 
        msgtxt$ = "increase the available support incidents by 1."
    fi
    msgtxt$ = "Please confirm that you want to " + msgtxt$
    xresp = msgbox(msgtxt$, 4, "Confirm")
    if xresp = 6 then
        snm01.avail_support = snm01.avail_support + changeAmt
        snm01$ = field(snm01$)
        write record(snm01)snm01$
        gosub findSerialNumber
    else
        rem ' clear the extract
        read record(snm01, key = serialNumber$, err = *next)snm01$
    fi

return
rem ' -----------------------------------------------------------------
rem ' buildOurDbUrl
rem ' -----------------------------------------------------------------

buildOurDbUrl:

DECLARE StringBuffer sqlBuilder!

rem ' locate the properties file
props=unt
open(props)"ec_sql.properties"
props$=fid(props), props$=props$(9)
close(props)

file! = new java.io.File(props$)
fis! = new java.io.FileInputStream(file!)
bis! = new java.io.BufferedInputStream(fis!)
props! = new java.util.Properties()
props!.load(bis!)

sqlBuilder!= new StringBuffer(props!.getProperty("sqlURL.urlprefix") + props!.getProperty("sqlURL.server")+":")
sqlBuilder!.append(props!.getProperty("sqlURL.port")+"?database=")
sqlBuilder!.append(props!.getProperty("sqlURL.database")+"&user="+props!.getProperty("sqlURL.user")+"&password=")
sqlBuilder!.append(props!.getProperty("sqlURL.password"))
ourDbUrl$ = sqlBuilder!.toString()

rem ' xresp = msgbox(ourDbUrl$,0,"debug")

return
rem ' -----------------------------------------------------------------
rem ' buildResetReasonList
rem ' -----------------------------------------------------------------

buildResetReasonList:

rem ' get reset reasons & close file - no need to keep it open

call "ec_open::reset_reason"

reset_reason_list$ = "Select a reason for reset:" + $0a$
reset_code_list$ = "??"

while 1
  read record(reset_reason, err=*break)reset_reason$
  reset_reason_list$ = reset_reason_list$ +cvs(reset_reason.reason$,3) + $0a$
  reset_code_list$ = reset_code_list$ + reset_reason.reset_code$
wend

close(reset_reason,err=*next)
reset_reason_list$ = reset_reason_list$ + $ff$ + "0"

return
rem ' -----------------------------------------------------------------
rem ' centerWindow
rem ' -----------------------------------------------------------------

centerWindow:

width = scrDimension!.width
height = scrDimension!.height
winWidth = ourWindow!.getWidth()
winHeight = ourWindow!.getHeight()

x = int((width-winWidth)/2)
y = int((height-winHeight)/2)

ourWindow!.setLocation(x,y)

return
rem ' -----------------------------------------------------------------
rem ' clearForm
rem ' -----------------------------------------------------------------

clearForm:

serialNumber!.setText("")
serialNumber!.setBackColor(whiteColor!)
customerName!.setText("")
customerName!.setBackColor(whiteColor!)

product!.setText("")
platform!.setText("")
oslevel!.setText("")
revision!.setText("")
licenseType!.setText("")

productDescription!.setText("")
platformDescription!.setText("")
oslevelDescription!.setText("")
revisionDescription!.setText("")
licenseTypeDescription!.setText("")

ecCompany!.setText("")
ecContact!.setText("")

customerType!.setText("")
salesPerson!.setText("")

userCount!.setText("")

samStatus!.setText("")
samStatus!.setBackColor(whiteColor!)

availableSupport!.setText("")

hostID!.setText("")
hostName!.setText("")
authorization!.setText("")
licenseHistory!.setText("")

virtualLicense!.setText("")

sendLicenseButton!.setEnabled(1)
generateLicenseButton!.setEnabled(1)
trlSelect!.setSelected(0)
emailAddress!.setText("")


return
rem ' -----------------------------------------------------------------
rem ' countLicenseFailures
rem ' -----------------------------------------------------------------

countLicenseFailures:

call "ec_open::SN_LIC_REG_ERR"
rem ' xresp = msgbox("|" + sn$ + "|",0,"debug")
rem ' xresp = msgbox("|" + cvs(sn$,3) + "|",0,"debug")

read record(sn_lic_reg_err, key=cvs(serialNumber$,3),dom=*next)sn_lic_reg_err$
failCount = 0
while 1
    read record(sn_lic_reg_err,end=*break)sn_lic_reg_err$
    if pos(cvs(serialNumber$,3)=sn_lic_reg_err$) <> 1 then break
    failCount = failCount + 1
wend
close(sn_lic_reg_err,err=*next)

return
rem ' -----------------------------------------------------------------
rem ' enable_disable_removeBLSBlkBtn
rem ' -----------------------------------------------------------------

enable_disable_removeBLSBlkBtn:

rem ' enable or disable the removeBLSBLkBtn:

call "ec_open::SNM01_BLS"
temp1! = cast(BBjButton, BBjAPI().getSysGui().getWindow(gb__win.mainWindow).getControl("removeBLSBlkBtn"))

found = 0
read record(snm01_bls, key=serialNumber$,dom=*next)snm01_bls$; found = 1
if found then
    temp1!.setEnabled(1)
else
    temp1!.setEnabled(0)
fi
close(snm01_bls,err=*next)

rem ' white listed?
call "ec_open::SN_BLMBLS_WHTLST"
temp1! = cast(BBjStaticText, BBjAPI().getSysGui().getWindow(gb__win.mainWindow).getControl("whiteListMsg"))
found = 0
read record(sn_blmbls_whtlst, key = sn$, dom=*next)sn_blmbls_whtlst$; found = 1
if found then
    temp1!.setVisible(1)
else
    temp1!.setVisible(0)
fi
close(sn_blmbls_whtlst, err=*next)

return
rem ' -----------------------------------------------------------------
rem ' gatherSNData
rem ' -----------------------------------------------------------------

gatherSNData:

rem ' get user counts
dim snm02$:fattr(snm02$)
read record(snm02, key = snm01.serial_nbr$, dom=*next)snm02$

rem ' get additional customer data
dim arm02$:fattr(arm02$)
dim arm10f$:fattr(arm10f$)
dim arm10l$:fattr(arm10l$)
read record(arm02, key = snm01.firm_id$ + arm01.customer_nbr$ + "  ", dom=*next)arm02$
if cvs(arm02.slspsn_code$,3) <> "" then
    read record(arm10f, key = snm01.firm_id$ + "F" + arm02.slspsn_code$, dom=*next)arm10f$
fi
if cvs(arm02.cust_type$,3) <> "" then
    read record(arm10l, key = snm01.firm_id$ + "L" + arm02.cust_type$, dom=*next)arm10l$
fi

rem ' get product description
dim csm01$:fattr(csm01$)
read record(csm01, key = snm01.firm_id$ + snm01.product$, dom=*next)csm01$

rem ' get platform description
dim csm02$:fattr(csm02$)
read record(csm02, key = snm01.firm_id$ + snm01.platform$, dom=*next)csm02$

rem ' get the os level description
dim csm03$:fattr(csm03$)
read record(csm03, key = snm01.firm_id$ + snm01.os_level$, dom=*next)csm03$

rem ' get revision description
dim csm04$:fattr(csm04$)
read record(csm04, key = snm01.firm_id$ + snm01.product_rev$, dom=*next)csm04$

rem ' get the license type description
dim csm05$:fattr(csm05$)
read record(csm05, key = snm01.firm_id$ + snm01.license_type$, dom=*next)csm05$

rem ' get any eu data
dim snmel$:fattr(snmel$)
dim snmeu$:fattr(snmeu$)
read record(snmel, key = snm01.serial_nbr$, dom=*next)snmel$
if cvs(snmel.end_user_nbr$,3) <> "" then
    read record(snmeu, key = snmel.end_user_nbr$, dom=*next)snmeu$
fi

rem ' get SAM data
dim smc01$:fattr(smc01$)
if cvs(snm01.contract$,3) <> "" then
    read record(smc01, key = snm01.contract$,dom=*next)smc01$
fi

gosub getLicenseData

return
rem ' -----------------------------------------------------------------
rem ' generateLicense
rem ' -----------------------------------------------------------------

generateLicense:

trl = trlSelect!.isSelected()
serialNbr$ = cvs(serialNumber!.getText(), 3) + fill(20, " ")
serialNbr$ = serialNbr$(1,20)
email$ = cvs(emailAddress!.getText(), 3)
auth$ = cvs(authorization!.getText(), 3)

host$ = cvs(hostID!.getText(), 3)
hostToken$ = host$
gosub lookupFullHostid
host$ = hostFull$

hostname$ = cvs(hostName!.getText(), 3)

while 1
    if len(auth$) <> 10 then 
        i = msgbox("Invalid authorization number", 0, "Auth Number")
        break
    fi

    rem ' not sure what this means or does
    if auth$ = "TEMPORARY*" then host$ = "1234567890ab"

    if email$ = "" and sendlicense then
        i = msgbox("Email address required", 0, "Email Address")
        break
    fi

    if pos("@" = email$) = 0 and sendLicense then 
        i = msgbox("A valid email address is required", 0, "Email Address")
        break
    fi

    if sendLicense then
        while 1
            p = pos(";" = email$)
            if p then 
                email$ = email$(1, p - 1) + "," + email$(p +1)
            else
                break
            fi
        wend
    fi

    msg$="Host id: " + host$ + $0a$
    msg$ = msg$ + "Authorization: " + auth$ + $0a$
    msg$ = msg$ + "Host name: " + hostname$
    if trl then 
        msg$ = msg$ + $0a$ + "Generate TRL License"
    fi
    if sendlicense then 
        msg$ = "Email to: " + email$ + $0a$ + msg$
    fi
    rem ' i = msgbox(msg$, 4 + 32 + 256, "Generate license")
    if i = 7 then break

    rem ' strip any lf from the host id
    while 1
        p = pos($0a$ = host$)
        if p = 0 then break
        if p = 1 then 
            host$ = host$(2)
            continue
        fi
        host$ = host$(1,p - 1) + host$(p + 1)
    wend

    if trl then 
        lic$="GEN TAMPER RESISTANT LICENSE" 
    else 
        lic$=""
    fi

    rem ' by pass this option
    goto bypass_point

    call stbl("FLEXHOME") + "bin/flexlic.bbx", auth$, serialNbr$ , host$, lic$
    if lic$ = "" then 
        lic$="Error - no license generated"
    fi
    i = msgbox(lic$, 0, "License result")
    if pos("ERROR" = cvs(lic$,4)) or sendlicense = 0 then 
        gosub getLicenseData
        gosub showSNData
        break
    fi
    bypass_point:
    
    rem ' send the license
    to$ = "license@basis.cloud"
    from$ = "customer-service@basis.cloud"
    cc$ = ""
    bcc$ = ""
    subject$ = "License"
    msgtxt$ = "Company          : " + cvs(arm01.cust_name$, 3) + $0a$
    msgtxt$ = msgtxt$ + "Last Name        : " + $0a$    
    msgtxt$ = msgtxt$ + "First Name       : " + $0a$
    msgtxt$ = msgtxt$ + "Phone Number     : " + $0a$
    msgtxt$ = msgtxt$ + "Fax Number       : " + $0a$
    msgtxt$ = msgtxt$ + "Email Address    : " + email$ + $0a$
    msgtxt$ = msgtxt$ + "Host Name        : " + hostname$ + $0a$
    msgtxt$ = msgtxt$ + "Host ID          : " + host$ + $0a$
    msgtxt$ = msgtxt$ + "Serial Number    : " + cvs(snm01.serial_nbr$, 3) + $0a$
    msgtxt$ = msgtxt$ + "License Auth Num : " + auth$ + $0a$
    msgtxt$ = msgtxt$ + "License Delivery : " + "Email" + $0a$
    msgtxt$ = msgtxt$ + "AutoResponderForceCheck: false" + $0A$
    if trl then 
        msgtxt$ = msgtxt$  + "UseTRL: true" + $0A$
    fi
    if isBLSLicense then
        msgtxt$ = msgtxt$+"bls: both"+$0A$
    fi
    
    resp = msgbox(msgtxt$,1,"License Parameters")
    if resp = 1 then

      file$ = ""
      call "sendEmail.src", from$, to$, cc$, bcc$, subject$, msgtxt$, file$
  
      i = msgbox("License request sent to the autoresponder.", 0, "Message Sent")
  
      gosub getLicenseData
      gosub showSNData
    fi

    break
wend

return
rem ' -----------------------------------------------------------------
rem ' getLicenseData
rem ' -----------------------------------------------------------------

getLicenseData:

temp_item$=""
lbox$=""
l_hostid$=""
l_hostname$=""
l_auth$=""
newest_hostid$=""
sn$ = serialNumber$

ichan=logextract
dim tmpl$:fattr(logextract$)
gosub build_temp_item

ichan=sn_license
dim tmpl$:fattr(sn_license$)
gosub build_temp_item

ichan=license_reset
lrx$=cvs(fattr(license_reset$),4)
p=pos("RESET_DATE"=lrx$)
if p then lrx$=lrx$(1,p-1)+lrx$(p+6)
p=pos("RESET_TIME"=lrx$)
if p then lrx$=lrx$(1,p-1)+lrx$(p+6)
resets=0
dim tmpl$:lrx$
gosub build_temp_item

if len(temp_item$) < 50 then temp_item$ = ""
temp_item$ = ssort(temp_item$,50)
holddate$=""
fill$=fill(65,"_")

while len(temp_item$)
    xtemp_item$ = temp_item$(len(temp_item$)-49)
    temp_item$ = temp_item$(1, len(temp_item$)-50)
    
    date$ = xtemp_item$(1,8)
    time$ = fnFormatTime$(xtemp_item$(9,6))

    ichan = num(xtemp_item$(15,2))
    k$ = cvs(xtemp_item$(17,34),2)
    rem ' temp_item$ = temp_item$(51)

    if holddate$=date$ then 
        lbox$ = lbox$+$0a$ 
    else 
        lbox$ = lbox$ + fill$ + $0a$ + date$(5,2) + "/" + date$(7,2) + "/" + date$(1,4) + $0a$
        holddate$ = date$
    fi

    switch ichan
        case logextract; dim tmpl$:fattr(logextract$); break
        case sn_license; dim tmpl$:fattr(sn_license$); break
        case license_reset; dim tmpl$:lrx$; break
    swend

    read record(ichan,key=k$)tmpl$

    lbox$=lbox$+"  "

    switch ichan
        case logextract
            lbox$ = lbox$ + "License Request Received at " + time$ + $0a$
            x$ = cvs(tmpl.firstname$ + tmpl.lastname$,35)
            y$ = cvs(tmpl.company$,3)
            if x$ <> "" and y$ <> "" then let x$ = x$ + "/"
            if x$ + y$ <> "" then lbox$=lbox$+"        From: " + x$ + y$ + $0a$
            if cvs(tmpl.email$,2) <> "" then let lbox$ = lbox$+"       Email: " + tmpl.email$ + $0a$
            if cvs(tmpl.fax$,2) <> "" then let lbox$ = lbox$+"         Fax: " + tmpl.fax$+$0a$
            if cvs(tmpl.hostname$,2)<>"" then 
               lbox$ = lbox$ + "    HostName: " + tmpl.hostname$ + $0a$
               lbox$ = lbox$ + "      HostId: " + tmpl.hostid$ + $0a$
               lbox$ = lbox$ + "      Auth #: " + tmpl.authnum$ + $0a$
            fi
        break

        case sn_license
            dim sn_host$:fattr(sn_host$)
            readrecord(sn_host, key =   tmpl$(1,26),    dom=*next)sn_host$
            l_hostid$ = tmpl.hostid$
            if newest_hostid$ = "" then newest_hostid$ = l_hostid$
            xx$=""
            if cvs(sn_host.hostid1$,3) <> "" then
                xx$ = $0a$
                l_hostid$ = cvs(sn_host.hostname1$,3) + " " + cvs(sn_host.hostid1$,3) + "," + $0a$
                l_hostid$ = l_hostid$ + cvs(sn_host.hostname2$,3) + " " + cvs(sn_host.hostid2$,3) + ","
                l_hostid$ = l_hostid$ + $0a$ + cvs(sn_host.hostname3$,3) + " " + cvs(sn_host.hostid3$,3)
            fi
            lbox$ = lbox$ + "License Generated at " + time$ + $0a$
            lbox$ = lbox$ + "      HostId: " + xx$ + l_hostid$ + $0a$
            lbox$ = lbox$ + "      Auth #: " + tmpl.authnum$ + fill(12) + "Revision: " + tmpl.prod_rev$ + $0a$
            l_auth$ = tmpl.authnum$
            lbox$ = lbox$ + "       Users: " + str(tmpl.users:"###0") + fill(15)+"LicenseType: " + tmpl.prod_type$+$0a$
            if cvs(tmpl.expire$,2) <> "" then lbox$ = lbox$ + "     Expires: " + tmpl.expire$ + $0a$
        break

        case license_reset
            xx$=""
            p=pos(tmpl.reset_code$ = reset_code_list$)
            if p>2 then 
                p1 = pos($0a$ = reset_reason_list$, 1, int(p/2))
                if p1 then 
                    xx$ = " ("+reset_reason_list$(p1+1)
                    p = pos($0a$=xx$)
                    if p then xx$ = xx$(1,p-1) + ")"
                fi
            fi
            lbox$ = lbox$ + "License Status Reset by " + tmpl.reset_by$ + " at " + time$ + " " + xx$ + $0a$
        break
    swend
wend

s$="" 

gosub licenseStatus

if license_status >= 0 then 
    s$ = $0a$ + "Current License Status: " + str(license_status)
    if snm01.active_flag$ = "Y" then 
        if license_status then  
            s$ = s$ + " (Licensed)" 
        else 
            s$=s$+" (Ready for licensing)"
        fi
    fi
    s$ = s$ + $0a$ + "Resets for this License: " + str(resets) + $0a$ + fill$ + $0a$
fi
rem ' lbox$ = s$ + lbox$+$0a$

rem ' check for a licenes file on the server
x$ = stbl("FLEXHOME") + "lic/" +cvs(sn$,3) + ".lic"
l$ = ""
sz=0
lchan=unt
found = 0
open(lchan, err = *next)x$; found = 1
if found = 0 then
    x$ = stbl("FLEXHOME") + "lic_old/" + cvs(sn$,3) + ".lic"
    found = 0
    open(lchan, err = *next)x$; found = 1
fi

if found then
    fin$ = fin(lchan); sz=dec(fin$(1,4))
    read record (lchan,siz = sz, err =*next)l$
    close (lchan, err = *next)
    if sz <> 0 then 
        pipe = unt
        open(pipe)"| ls -l " + x$
        read(pipe,end = *next)temp$
        close(pipe, err = *next)
        p = pos(str(sz) = temp$), l = len(str(sz))
        if p then temp$ = cvs(temp$(p+l),3)
        rem ' lbox$ = s$ + fill(65,"=") + $0a$ + "License file from our server:" + $0a$ + temp$ + $0a$ + $0a$ + l$ + $0a$ + lbox$
        lbox$ = s$ + $0a$ + "License file from our server:" + $0a$ + temp$ + $0a$ + $0a$ + l$ + $0a$ + lbox$
    fi
else
    lbox$ = s$ + lbox$+$0a$
fi

return

build_temp_item: 

    read (ichan, key = cvs(sn$,2), dom=*next)

    while 1
      let k$ = key(ichan, end=*break)
      if pos(cvs(sn$,2) = k$) <> 1 then break

      read record(ichan, key = k$)tmpl$
      
      if ichan = license_reset then 
        if tmpl.reset_to$="0" then 
            resets=resets+1 
        else
            continue
        fi
      fi

      time$ = pad(tmpl.time$, 6)
      p = pos(":"=time$)
      if p then 
        time$ = time$(1,p-1) + time$(p+1) + " "
      fi

      if ichan = logextract then
        if cvs(tmpl.hostname$,3) <> "" then l_hostname$ = tmpl.hostname$
      fi

      let x$ = pad(k$,34)
      temp_item$ = temp_item$ + tmpl.date$ + time$ + str(ichan:"00") + x$
    wend
return

def fnFormatTime$(inTime$)
    if cvs(inTime$,3) = "" then
        retval$="No Time"
    else
        if len(inTime$) < 0 then
            retval$ = intime$
        else
            retval$ = intime$(1,2) + ":" + intime$(3,2) + ":"+intime$(5,2)
        fi
    fi
    return retval$
fnend
rem ' -----------------------------------------------------------------
rem ' licenseStatus
rem ' -----------------------------------------------------------------

licenseStatus:

    license_status = -1
    license_status_channel = 0

    read (are83, key = "", dom = *next)

    while 1
        k$ = key(are83, end = *break)
        read record(are83, key = k$)are83$
        if cvs(sn$,2) <> cvs(are83.serial_nbr$,2) or are83.snhist_flag$ = "Y" or len(cvs(are83.auth_code$,3)) <> 10 then continue
        if are83.action$ = "D" then license_status = -1; continue

        license_status = are83.license_cnt
        license_status_channel = are83
        license_status_key$ = k$
        l_auth$ = are83.auth_code$
    wend

    if license_status < 0 then
        read (snt01, key = cvs(sn$,2), err =*next)
        
        while 1
            k$ = key(snt01, end = *break)
            read record(snt01, key=k$)snt01$
            if pos(cvs(sn$,2) = snt01.serial_nbr$) <> 1 then break

            if len(cvs(snt01.auth_code$,3)) <> 10 continue

            if snt01.action$ <> "D" then
                license_status = snt01.license_cnt
                license_status_channel=snt01
                license_status_key$ = k$
                l_auth$ = snt01.auth_code$
            fi
        wend
    fi
return
rem ' -----------------------------------------------------------------
rem ' loginError
rem ' -----------------------------------------------------------------

loginError:

trash = msgBox("Login Failed", 16, "Problem")

return
rem ' -----------------------------------------------------------------
rem ' loginHit
rem ' -----------------------------------------------------------------

loginHit:

rem ' no longer used, was used when we used the bcomm username and password, changed to EM username and password 9/17/2020
return

uName$  = cvs(userName!.getText(),3)
pWord$ = cvs(password!.getText(),3)

firm_id$ = "01"
cust_num$ = ""
user_code$ = ""

rem ' Format is FFCCCCCCUU
rem ' FF is a 2-digit Firm ID (usually 01 or 02)
rem ' CCCCCC is a 1-6 digit customer number, typically 4 digits
rem ' UU is an optional 1- or 2-letter user code

loginSuccess = 0

while 1
    temp$ = uName$
    x = LEN(temp$)
    if x < 3 OR x > 10 THEN 
        gosub loginError
        break
    fi

rem ' find firm id if there
    x$ = temp$(1,2)
    if pos(x$ = "0102", 2) and x > 5 then 
        temp$ = temp$(3)
        firm_id$ = x$
        x = x - 2 
    else 
        x$ = ""
    fi

    for  n = x - 1 to x 
        if pos(temp$(n,1) = "0123456789") = 0 then 
            user_code$ = user_code$ + temp$(n,1)
            temp$(n,1) = " "
        fi
    next n

    user_code$ = pad(user_code$,2)
    temp$ = cvs(temp$,3)
    cust_num$ = str(num(temp$):"000000",err=*next)

    rem ;' check for BSG
    if cust_num$(1,2) = "02" then firm_id$ = "02"
    
    rem ' debug check
    rem ' trash = msgbox("(" + firm_id$ + "-" + cust_num$ + "-" + user_code$ + ") " + pWord$, 0 , "debug")

    rem ' limited to basis and descore users
    if cust_num$ <> "007514" and cust_num$ <> "001022" then
        gosub loginError
        break
    fi

    rem '  get customer EC record
    found = 0
    read record (ecm01, key=firm_id$ + cust_num$ + user_code$, dom = *next, err = *next)ecm01$; found = 1
    if !found then
        gosub loginError
        break
    fi

    if cvs(ecm01.password$, 3) <> cvs(pWord$,3) then
        firm_id$ = "", cust_num$ = "", user_code$ = ""
        gosub loginError
        break
    fi

    rem ' trap short password
    if len(cvs(ecm01.password$,3)) < 10 THEN 
        firm_id$ = "",cust_num$ = "",user_code$ = ""
        gosub loginError
        break
    fi

    loginSuccess = 1
    break

wend

if loginSuccess then gosub showMainWindow

return
rem ' -----------------------------------------------------------------
rem ' lookupFullHostid
rem ' -----------------------------------------------------------------

lookupFullHostid:

hostIdType! = new HostIdConstants()
HostidData! = new HostId(hostIdType!.TOKEN(), hostToken$)
if HostidData!.exists() then
    hostFull$ = HostidData!.getHostidFull()
    isBLSLicense = HostidData!.isNewHostid(hostFull$)
else
    hostFull$ = hostToken$
    isBLSLicense = 0
fi

return
rem ' -----------------------------------------------------------------
rem ' nextSNMessage
rem ' -----------------------------------------------------------------

nextSNMessage:

displaySN$ = cvs(nextSN$ ,3)
if displaySN$ = "" then
    msg$ = "The data entered is higher than the last serial number in the table."
else
    msg$ = displaySN$ + " is the next serial number in the table."
fi

trash = msgbox(msg$, 64, "SN Not Found")

return
rem ' -----------------------------------------------------------------
rem ' openFiles
rem ' -----------------------------------------------------------------

openFiles:

call "ec_open::ECM01"

call "ec_open::SNM01"
call "ec_open::SNM02"

call "ec_open::ARM01"
call "ec_open::ARM02"
call "ec_open::ARM10F"
call "ec_open::ARM10L"

call "ec_open::CSM01"
call "ec_open::CSM02"
call "ec_open::CSM03"
call "ec_open::CSM04"
call "ec_open::CSM05"

call "ec_open::SNMEL"
call "ec_open::SNMEU"

call "ec_open::SMC01"

call "ec_open::LOGEXTRACT"
call "ec_open::SN_LICENSE"
call "ec_open::SN_HOST"
call "ec_open::LICENSE_RESET"

call "ec_open::ARE83"
call "ec_open::SNT01"
call "ec_open::SNT04"

return
rem ' -----------------------------------------------------------------
rem ' showFullHostId
rem ' -----------------------------------------------------------------

showFullHostId:

mainWindow!.setVisible(0)
fullHostid!.setVisible(1)

hostidToken! = cast(BBjEditBox, mainWindow!.getControl("hostID"))
hostidToken$ = hostidToken!.getText()
hostidToken$ = cvs(hostidToken$,16)

hostIdType! = new HostIdConstants()
hostIdLookup! = new HostId(hostIdType!.TOKEN(), hostidToken$)
if hostIdLookup!.exists() then
    fullHostid!.getControl("HostidToken").setText(hostIdLookup!.getHostidToken())
    fullHostid!.getControl("hostidHash").setText(hostIdLookup!.getHostidHash())
    fullHostid!.getControl("fullHostidText").setText(hostIdLookup!.getHostidFull())
else
    fullHostid!.getControl("HostidToken").setText("")
    fullHostid!.getControl("hostidHash").setText("")
    fullHostid!.getControl("fullHostidText").setText("")
    resp = msgbox(hostidToken$ + "is not in the HostId cross reference table.", 0, "Not Found")
fi

return
rem ' -----------------------------------------------------------------
rem ' showLicRegistrations
rem ' -----------------------------------------------------------------

showLicRegistrations:

rem ' load the licRegistrataion form if needed
if gb__win.licRegistrations=-1 then 
    gb__context = fngb__window("113")
    win_id_licRegistrations$=fngb__win_id$(gb__win.licRegistrations)
    dim win_licRegistrations$:fngb__template$(win_id_licRegistrations$)
fi

mainWindow!.setVisible(0)

rem ' lic Registrations
licRegistrations! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow("licRegistrations"))
licRegistrationsGrid! =  cast(BBjStandardGrid, licRegistrations!.getControl("licRegistrationsGrid"))
licRegistrationsGrid!.clearText()
licRegistrationsGrid!.setSelectedCell(0,0)
licRegistrationsGrid!.setColumnAlignment(4, GRID_ALIGN_LEFT)
licRegistrationsGrid!.setColumnAlignment(5, GRID_ALIGN_LEFT)
licRegistrations!.setVisible(1)

licRSN$ = cvs(serialNumber$,3)

sql$ = "SELECT * FROM SN_LICENSE "
sql$ = sql$ + "WHERE serial_num = '" + licRSN$ + "' "
sql$ = sql$ + " ORDER BY DATE desc, TIME desc "
  
rem ' xresp = msgbox(sql$,0,"debug")
  
rem ' set wait cursor'
licRegistrations!.setCursor(3)

searchResults! = BBjAPI().createSQLRecordSet(ourDbUrl$,"",sql$)

if searchResults!.isEmpty() then
    resp = msgbox("The search did not find any license registrations for the serial number.", 0, "No Matches")
    searchResults!.close()
    
    rem ' unset wait cursor'
    licRegistrations!.setCursor(0)

else
      
    licRegistrationsGridLoad! = BBjAPI().makeVector()

    rowCount = 0

    searchResults!.first()

    while 1
        searchLine! = searchResults!.getCurrentRecordData()
    
        regDate$ = searchLine!.getFieldValue("DATE")
        regDate$ = date(num(regDate$):"%Y-%Mz-%Dz")
        regTime$ = searchLine!.getFieldValue("TIME")
        if len(regTime$) >= 6 then regTime$ = regTime$(1,2) + ":" + regTime$(3,2) + ":" + regTime$(5,2)
        
        licRegistrationsGridLoad!.addItem(regDate$)
        licRegistrationsGridLoad!.addItem(regTime$)
    
        prodType$ = searchLine!.getFieldValue("PROD_TYPE")
        licRegistrationsGridLoad!.addItem(prodType$)
    
        prodRev$ = searchLine!.getFieldValue("PROD_REV")
        licRegistrationsGridLoad!.addItem(prodRev$)
        
        LR_Hostid$ = searchLine!.getFieldValue("HOSTID")
        licRegistrationsGridLoad!.addItem(LR_Hostid$)
        
        LR_Auth$ = searchLine!.getFieldValue("AUTHNUM")
        licRegistrationsGridLoad!.addItem(LR_Auth$)
        
        LR_EXPIRE$ = searchLine!.getFieldValue("EXPIRE")
        licRegistrationsGridLoad!.addItem(LR_Expire$)

        users1$ = cvs(searchLine!.getFieldValue("USERS"),3)
        users2$ = cvs(searchLine!.getFieldValue("USERS2"),3)
        
        users1 = 0
        users1 = num(users1$,err=*next)
        users2 = 0
        users2 = num(users2$,err=*next)
        users = users1 + users2
        licRegistrationsGridLoad!.addItem(str(users))

        rowCount = rowCount + 1
        searchResults!.next(err=*break)
    wend
    searchResults!.close()

    licRegistrationsGrid!.setNumRows(rowcount)
    licRegistrationsGrid!.setCellText(licRegistrationsGridLoad!)
    
    rem ' unset wait cursor'
    licRegistrations!.setCursor(0)
        
fi

subject$ = "License Registrations in extSpptInterface"
msgtxt$ = "License Registration in extSpptInterface accessed by " +  xUID$ + ", " + cvs(serialNumber$,3)
call "sendEmail.src", "mis@basis.cloud", "kurt.e.williams@comcast.net", "", "", subject$, msgtxt$, ""

return
rem ' -----------------------------------------------------------------
rem ' showLogFailures
rem ' -----------------------------------------------------------------

showLogFailures:

rem ' load the licFailures form if needed
if gb__win.regFailures=-1 then 
    gb__context = fngb__window("112")
    win_id_regFailures$=fngb__win_id$(gb__win.regFailures)
    dim win_regFailures$:fngb__template$(win_id_regFailures$)
fi

mainWindow!.setVisible(0)

rem ' lic Failures
regFailures! = cast(BBjTopLevelWindow, BBjAPI().getSysGui().getWindow("regFailures"))
regFailuresGrid! =  cast(BBjStandardGrid, regFailures!.getControl("regFailuresGrid"))
regFailuresGrid!.clearText()
regFailuresGrid!.setSelectedCell(0,0)
regFailuresGrid!.setColumnAlignment(2, GRID_ALIGN_LEFT)
regFailures!.setVisible(1)

logfSN$ = cvs(serialNumber$,3)

sql$ = "SELECT * FROM SN_LIC_REG_ERR "
sql$ = sql$ + "WHERE serial_nbr = '" + logfSN$ + "' "
sql$ = sql$ + " ORDER BY REG_TIME desc "
  
rem ' xresp = msgbox(sql$,0,"debug")
  
rem ' set wait cursor'
regFailures!.setCursor(3)

searchResults! = BBjAPI().createSQLRecordSet(ourDbUrl$,"",sql$)

if searchResults!.isEmpty() then
    resp = msgbox("The search did not find any license failures for the serial number.", 0, "No Matches")
    searchResults!.close()
    
    rem ' unset wait cursor'
    regFailures!.setCursor(0)

else
      
    regFailuresGridLoad! = BBjAPI().makeVector()

    rowCount = 0

    searchResults!.first()

    while 1
        searchLine! = searchResults!.getCurrentRecordData()
    
        reg_time$ = searchLine!.getFieldValue("REG_TIME")
        regDate$ = reg_time$(1,8)
        regDate$ = regDate$(1,4) + "-" + regDate$(5,2) + "-" + regDate$(7,2)
        regTime$ = reg_time$(9,6)
        regTime$ = regTime$(1,2) + ":" + regTime$(3,2) + ":" + regTime$(5,2)
        
        regFailuresGridLoad!.addItem(regDate$)
        regFailuresGridLoad!.addItem(regTime$)
    
        problemDesc$ = searchLine!.getFieldValue("PROB_MSG")
        regFailuresGridLoad!.addItem(cvs(problemDesc$,3))
    
        rowCount = rowCount + 1
        searchResults!.next(err=*break)
    wend
    searchResults!.close()

    regFailuresGrid!.setNumRows(rowcount)
    regFailuresGrid!.setCellText(regFailuresGridLoad!)
    
    rem ' unset wait cursor'
    regFailures!.setCursor(0)
        
fi

subject$ = "Registration Failures in extSpptInterface"
msgtxt$ = "Registration Failures  in extSpptInterface accessed by " +  xUID$ + ", " + cvs(serialNumber$,3)
call "sendEmail.src", "mis@basis.cloud", "kurt.e.williams@comcast.net", "", "", subject$, msgtxt$, ""

return
rem ' -----------------------------------------------------------------
rem ' showMainFromVendorFeatures
rem ' -----------------------------------------------------------------

showMainFromVendorFeatures:

vendorFeatures!.setVisible(0)
mainWindow!.setVisible(1)

return
rem ' -----------------------------------------------------------------
rem ' showMainWindow
rem ' -----------------------------------------------------------------

showMainWindow:

loginWindow!.setVisible(0)
ourWindow! = mainWindow!
if centerWindows then gosub centerWindow

rem ' 9/17 the app is only used in house now
rem ' if cust_num$ <> "007514" then
rem '     availSpptPlus!.setVisible(0)
rem '     availSpptMinus!.setVisible(0)
rem '     availableSupport!.setSize(200, 25)
rem ' fi

mainWindow!.setVisible(1)
serialNumber!.focus()

return
rem ' -----------------------------------------------------------------
rem ' showSNData
rem ' -----------------------------------------------------------------

showSNData:

serialNumber!.setText(cvs(serialNumber$,3))
if snm01.active_flag$ = "N" then
    serialNumber!.setBackColor(redColor!)
    sendLicenseButton!.setEnabled(0)
    generateLicenseButton!.setEnabled(0)
fi

customerName!.setText(arm01.customer_nbr$ + " " + arm01.cust_name$)
if arm02.cred_hold$ = "Y" then
    customerName!.setBackColor(redColor!)
fi

product!.setText(snm01.product$)
platform!.setText(snm01.platform$)
oslevel!.setText(snm01.os_level$)
revision!.setText(snm01.product_rev$)
licenseType!.setText(snm01.license_type$)

productDescription!.setText(csm01.description$)
platformDescription!.setText(csm02.description$)
oslevelDescription!.setText(csm03.description$)
revisionDescription!.setText(csm04.description$)
licenseTypeDescription!.setText(csm05.description$)

if snm01.media_type$ = "VIR" then
    virtualLicense!.setText("Yes")
else
    virtualLicense!.setText("No")
fi

ecCompany!.setText(snmeu.company_name$)
ecContact!.setText(snmeu.contact$)

customerType!.setText(arm02.cust_type$ + " " + arm10l.code_desc$)
salesPerson!.setText(arm02.slspsn_code$ + " " + arm10f.slspsn_name$)

totalUsers$ = "Total users: " + str(snm01.users)
if cvs(snm02.lic_property1$,3) <> "" then
    totalUsers$ = totalUsers$ + ", " + cvs(snm02.lic_property1$,3) + ": " + str(snm02.users1)
fi
if cvs(snm02.lic_property2$,3) <> "" then
    totalUsers$ = totalUsers$ + ", " + cvs(snm02.lic_property2$,3) + ": " + str(snm02.users2)
fi
if cvs(snm02.lic_property3$,3) <> "" then
    totalUsers$ = totalUsers$ + ", " + cvs(snm02.lic_property3$,3) + ": " + str(snm02.users3)
fi
userCount!.setText(totalUsers$)

samRedFlag = 0
today$ = date(0:"%Y%Mz%Dz")
if cvs(smc01.contract$,3) = "" then
    samStatus$ = "No SAM"
    samRedFlag = 1
else
    if smc01.expire_on_dt$ >= today$ then
        samStatus$ = "Expires: " + smc01.expire_on_dt$
    else
        samStatus$ = "Expired: " + smc01.expire_on_dt$
        samRedFlag = 1
    fi
    if smc01.sam_active$="N" then
        samStatus$ = "Inactive, " + samStatus$
        samRedFlag = 1
    fi
fi
samStatus!.setText(samStatus$)
if samRedFlag then
    samStatus!.setBackColor(redColor!)
fi

availSupport$ = "Incidents: " + str(snm01.avail_support)
if cvs(snm01.avail_expire$, 3) <> "" then
    if snm01.avail_expire$ >= today$ then
        availSupport$ = availSupport$ + " Expire: " + snm01.avail_expire$
    else
        availSupport$ = availSupport$ + " EXPIRED: " + snm01.avail_expire$
    fi
fi
availableSupport!.setText(availSupport$)

hostID!.setText(newest_hostid$)
hostName!.setText(l_hostname$)
authorization!.setText(l_auth$)
licenseHistory!.setText(lbox$)

rem ' set licFailures button text with failure count
gosub countLicenseFailures
temp1! = cast(BBjButton, BBjAPI().getSysGui().getWindow(gb__win.mainWindow).getControl("licFailuresBtn"))
temp1!.setText(str(failCount) + " License Failures")

rem ' set the removedBLSBlkBtn status
gosub enable_disable_removeBLSBlkBtn

return
rem ' -----------------------------------------------------------------
rem ' showVendorFeatures
rem ' -----------------------------------------------------------------

showVendorFeatures:

mainWindow!.setVisible(0)
vendorFeatures!.setVisible(1)

vfSerialNbr!.setText(cvs(serialNumber$,3))

vendorFeaturesGrid!.clearText()
vendorFeaturesGrid!.setSelectedCell(0,0)
vendorFeaturesGrid!.setColumnHeaderCellAlignment(0, vendorFeaturesGrid!.GRID_ALIGN_LEFT)
vendorFeaturesGrid!.setColumnAlignment(0,vendorFeaturesGrid!.GRID_ALIGN_LEFT)

featureGridItems! = BBjAPI().makeVector()
looping = 1, featureCnt = 0
read record(snt04, key = cvs(serialNumber$,3), dom=*next)snt04$
while looping
    read record(snt04, end=*break)snt04$
    if pos(cvs(serialNumber$,3) = snt04$) <> 1 then break
    featureCnt = featureCnt + 1
    featureGridItems!.addItem(cvs(snt04.feature$,3))
    featureGridItems!.addItem(snt04.feature_rev$)
    featureGridItems!.addItem(snt04.prod_code$)
    expireDate$ = cvs(snt04.expire_on_dt$,3)
    if len(expireDate$) = 8 then expireDate$ = expireDate$(1,4) + "-" + expireDate$(5,2) + "-" + expireDate$(7,2)  
    featureGridItems!.addItem(expireDate$)
    featureGridItems!.addItem(snt04.users$)
wend

if featureCnt > 0 then
    vendorFeaturesGrid!.setCellText(featureGridItems!)
fi

subject$ = "Vendor Features in extSpptInterface"
msgtxt$ = "Vendor Features in extSpptInterface accessed by " +  xUID$ + ", " + cvs(serialNumber$,3)
call "sendEmail.src", "mis@basis.cloud", "kurt.e.williams@comcast.net", "", "", subject$, msgtxt$, ""

return
rem ' -----------------------------------------------------------------
rem ' useAndDeclare
rem ' -----------------------------------------------------------------

useAndDeclare:

use java.awt.Dimension

use ::HostId.src::HostId
use ::HostId.src::HostIdConstants

declare BBjAPI ourAPI!
declare BBjSysGui ourSysGui!
declare BBjSystemMetrics ourSystemMetrics!
declare Dimension scrDimension!
declare BBjWindow ourWindow!

declare BBjWindow loginWindow!
declare BBjStaticText userNameLabel!
declare BBjEditBox userName!
declare BBjStaticText passwordLabel!
declare BBjEditBox password!
declare BBjButton exitButton!
declare BBjButton loginButton!

declare BBjWindow mainWindow!
declare BBjStaticText snLabel!
declare BBjEditBox serialNumber!
declare BBjStaticText custNameLabel!
declare BBjEditBox customerName!
declare BBjButton searchButton!

declare BBjStaticText productLabel!
declare BBjStaticText platformLabel!
declare BBjStaticText oslevelLabel!
declare BBjStaticText revisionLabel!
declare BBjStaticText licenseTypeLabel!

declare BBjEditBox product!
declare BBjEditBox platform!
declare BBjEditBox oslevel!
declare BBjEditBox revision!
declare BBjEditBox licenseType!

declare BBjStaticText productDescription!
declare BBjStaticText platformDescription!
declare BBjStaticText oslevelDescription!
declare BBjStaticText revisionDescription!
declare BBjStaticText licenseTypeDescription!

declare BBjStaticText euCompanyLabel!
declare BBjStaticText euContactLabel!
declare BBjEditBox ecCompany!
declare BBjEditBox ecContact!

declare BBjColor greenColor!
declare BBjColor redColor!
declare BBjColor whiteColor!

declare BBjStaticText customerTypeLabel!
declare BBjStaticText salesPersonLabel!
declare BBjEditBox customerType!
declare BBjEditBox salesPerson!

declare BBjStaticText userCountLabel!
declare BBjEditBox userCount!

declare BBjStaticText samStatusLabel!
declare BBjEditBox samStatus!

declare BBjStaticText availableSupporLabel!
declare BBjEditBox availableSupport!

rem declare BBjStaticText hostIDLabel!
declare BBjStaticText hostNameLabel!
declare BBjStaticText authorizationLabel!
declare BBjStaticText licenseHistoryLabel!
declare BBjEditBox hostID!
declare BBjEditBox hostName!
declare BBjEditBox authorization!
declare BBjCEdit licenseHistory!

declare BBjStaticText virtualLicenseLabel!
declare BBjEditBox virtualLicense!

declare BBjGroupBox sendLicenseGroup!
declare BBjStaticText emailAddressLabel!
declare BBjEditBox emailAddress!
declare BBjRadioButton trlSelect!
declare BBjButton sendLicenseButton!
declare BBjButton generateLicenseButton!

declare BBjWindow vendorFeatures!
declare BBjButton closeBtn!
declare BBjStandardGrid vendorFeaturesGrid!
declare BBjEditBox vfSerialNbr!

declare BBjWindow fullHostid!

declare HostId hostIdLookup!

return
rem ' -----------------------------------------------------------------
rem ' write_comment
rem ' -----------------------------------------------------------------

write_comment:

seq = 1
call "ec_open::SNM04"

read record(snm04, key = cvs(serialNumber$,3), dom=*next)snm04$

while seq < 100
    read record(snm04, end=*break)snm04$
    if snm04.serial_nbr$=serialNumber$ then 
        seq = NUM(snm04.comments_seq$) + 1
        continue
    fi
    snm04.serial_nbr$=serialNumber$
    snm04.comments_seq$ = str(seq:"00"),seq=100
    snm04.cmt_line$=xComment$
    snm04$=field(snm04$)
    write record (snm04,key = snm04$(1,22))snm04$
wend


return

rem ' ---------------------------------------------------------------
rem ' Win=100 loginWindow Ctl=1 loginButton (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W100_C1_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub loginHit
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=100 loginWindow Ctl=2 exitButton (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W100_C2_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

goto gb__eoj
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 mainWindow (Window) WIN_CLOSE (X)
rem ' ---------------------------------------------------------------

W101_C0_WIN_CLOSE:
rem ' Window Closed
rem ' gb__event! = cast(BBjCloseEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__window! = gb__event!.getControl()

goto gb__eoj
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 mainWindow Ctl=1 searchButton (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C1_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

findSerialNumber:

serialNumber$ = cvs(serialNumber!.getText(), 4); rem ' force upper case
serialNumber$ = serialNumber$ + fill(20," ")
serialNumber$ = serialNumber$(1,20)

rem ' read the serial number record
while 1
    gosub clearForm

    dim snm01$:fattr(snm01$)
    found = 0
    read record(snm01, key = serialNumber$, dom = *next)snm01$; found = 1

    if !found then
        gotKey = 0
        nextSN$ = key(snm01, end=*next); gotKey = 1
        if !gotKey then 
            nextSN$ = ""
            gosub nextSNMessage
            break
        else
            serialNumber$ = nextSN$
            gosub nextSNMessage
            continue
        fi
    fi

    rem ' read the customer record
    read record(arm01, key = snm01.firm_id$ + snm01.customer_nbr$)arm01$

    gosub gatherSNData
    gosub showSNData
    
    break

wend
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 mainWindow Ctl=147 sendLicenseButton (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C147_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

sendLicense = 1
gosub generateLicense
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 mainWindow Ctl=148 generateLicenseButton (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C148_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

sendLicense = 0

sendLicense = 1

gosub generateLicense
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 mainWindow Ctl=149 availSpptPlus (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C149_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

if cvs(serialNumber$,3) <> "" then
    changeAmt = 1
    gosub adjustTheSupprtIncidentBalance
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 mainWindow Ctl=150 availSpptMinus (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C150_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

if cvs(serialNumber$,3) <> "" then
    changeAmt = -1
    gosub adjustTheSupprtIncidentBalance
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 mainWindow Ctl=151 vendorFeaturesBtn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C151_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

if len(serialNumber$) = 20 then
    gosub showVendorFeatures
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 mainWindow Ctl=152 fullHostIdBtn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C152_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

if len(serialNumber$) = 20 then
    gosub showFullHostId
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 mainWindow Ctl=153 licRegistrationsBtn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C153_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()


gosub showLicRegistrations
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 mainWindow Ctl=154 licFailuresBtn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C154_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()


gosub showLogFailures
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=101 mainWindow Ctl=155 removeBLSBlkBtn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W101_C155_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

rem ' confirn they want to remove the BLS block

msgtxt$ = "Removing " + cvs(serialNumber$,3) + " from the return to BLM Block File will allow this license to be registered with the BLM after it was previously registerd with the BLS. Do you wish to continue?"
resp = msgbox(msgtxt$, 4 + 32 + 256, "Confirm the Removal of the Block")
if resp = 6 then
    call "ec_open::SNM01_BLS"
    remove (snm01_bls, key = serialNumber$)
    
    rem ' write a comment to the snm04 table
    xComment$ = "Return to BLM Block removed by " + xUID$ + " " + date(0:"%Y%Mz%Dz")
    gosub write_comment
    
    resp = msgbox(cvs(serialNumber$,3) + " has been removed for the BLM Block File. It may now be registered with the BLM.", 0, "No Longer Limited to the BLS")

    gosub enable_disable_removeBLSBlkBtn    

    close(snm01_bls,err=*next)
fi
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=102 vendorFeatures (Window) WIN_CLOSE (X)
rem ' ---------------------------------------------------------------

W102_C0_WIN_CLOSE:
rem ' Window Closed
rem ' gb__event! = cast(BBjCloseEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__window! = gb__event!.getControl()

gosub showMainFromVendorFeatures
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=102 vendorFeatures Ctl=100 closeBtn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W102_C100_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

gosub showMainFromVendorFeatures
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=110 fullHostid Ctl=103 exitFHButton (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W110_C103_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

mainWindow!.setVisible(1)
fullHostid!.setVisible(0)

fullHostid!.getControl("HostidToken").setText("")
fullHostid!.getControl("hostidHash").setText("")
fullHostid!.getControl("fullHostidText").setText("")

hostIdLookup! = null()
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=112 regFailures Ctl=100 failureExitBtn (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W112_C100_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

regFailures!.setVisible(0)
mainWindow!.setVisible(1)
RETURN

rem ' ---------------------------------------------------------------
rem ' Win=113 licRegistrations Ctl=100 licRegistrationsExitButton (Push Button) PUSH_BUTTON (B)
rem ' ---------------------------------------------------------------

W113_C100_PUSH_BUTTON:
rem ' Button was pushed
rem ' gb__event! = cast(BBjButtonPushEvent,bbjapi().getSysGui().getLastEvent())
rem ' gb__control! = gb__event!.getControl()

licRegistrations!.setVisible(0)
mainWindow!.setVisible(1)
RETURN


rem gb_std.cod - Put your standard subroutines/functions/etc. here.

END
