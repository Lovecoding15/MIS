0010 REM "SAR - Generic Sales Analysis Report"
0020 REM "Program SAR.AC"
0022 REM "+-----------------------------------------------------------+"
0024 REM "| ADD+ON Software, Inc. Advantage/V Version 6.0.0 - 15May96 |"
0026 REM "|      Copyright (c) 1996 Open Systems Holdings Corp.       |"
0028 REM "|                  All Rights Reserved                      |"
0030 REM "+-----------------------------------------------------------+"
0040 REM 
0080 SETERR 9000
0090 SETESC 9000
0100 REM " --- Open/Lock Files"
0110 CALL "SYC.GA",7,1,"","",STATUS
0120 IF STATUS THEN GOTO 9900
0200 REM " --- IOLIST's"
0210 SAM00A: IOLIST X0$,Q[ALL],C[ALL],S[ALL]
0220 SAW00A: IOLIST A0$,QNTY[ALL],COST[ALL],SALES[ALL]
0250 DESCCHANA: IOLIST X$[ALL]
0400 REM " --- Parameters"
0410 GOSUB GET_SORT_PARAMETERS
0420 DIM WPOS[NMBR]; REM "Key positions of segments in 'sorted' Work file
0430 LET WPOS[0]=3
0440 FOR X=1 TO NMBR
0445 LET WPOS[X]=2+KPOS[X]+SORT_SIZE-FLDLEN[0]
0450 NEXT X
0460 LET LEVEL=POS(LEVEL$=LEVELS$)
0470 IF POS(SEQ$="AD")=0 THEN GOTO 0500
0475 IF LEVEL>1 THEN LET WPOS[1]=WPOS[0]
0480 IF LEVEL>2 THEN LET WPOS[2]=WPOS[1]+FLDLEN[1]
0485 IF LEVEL>3 THEN LET WPOS[3]=WPOS[2]+FLDLEN[2]
0490 IF LEVEL>1 THEN LET WPOS[0]=WPOS[LEVEL-1]+FLDLEN[LEVEL-1]; REM "Key position of Sort Amount in 'sorted' Work file
0500 REM " --- Initializations"
0510 DIM A0$(SORT_SIZE+KEYLEN-2),C[12],Q[12],S[12],COST[3],QNTY[3],SALES[3]
0520 LET PERIOD=NUM(PERIOD$),PRIYEAR$=FNYEAR_YY21$(FNYY_YEAR(YEAR$)-1)
0530 LET MTD$=PERIODS$[PERIOD]+" "+FNYY21_YY$(YEAR$),PRIMTD$=PERIODS$[PERIOD]+" "+FNYY21_YY$(PRIYEAR$)
0540 CALL "SYC.RM",M1$,M1,12,15
0550 CALL "SYC.RM",M2$,M2,5,12
0560 LET M4$="-##0.00%",M4=LEN(M4$)
0570 LET WIDTH=132,PAGE=0,L9=59,L=L9+1,WHEN$=F0$(7,3),CLOCK$="",HEADINGS=5
0580 DIM HEADINGS$[HEADINGS]
0590 LET HEADINGS$[0]=F4$,HEADINGS$[1]=F5$+" For "+MTD$
0600 REM " --- Print positions"
0610 DIM O[9],NEWLINE[SEGMENTS]
0620 LET O[1]=0,O[2]=O[1]+3,O[3]=O[2]+3,O[4]=O[3]+3
0625 LET O[9]=WIDTH-M4,O[8]=O[9]-1-M1,O[7]=O[8]-1-M1,O[6]=O[7]-1-M1,O[5]=O[6]-1-M2
0630 IF POS("M"=MYP$) THEN LET DETAIL=LEN(MTD$)+1 ELSE LET DETAIL=4
0635 LET SUM_FLDLEN=0
0640 FOR X=1 TO SEGMENTS
0645 IF LITERALS$[X]="" THEN GOTO 0665
0650 IF LITERALS$[X]="Item" THEN LET DESCLEN=IV_DESC[1]+IV_DESC[2]+IV_DESC[3] ELSE LET DESCLEN=DESCLEN[X]
0655 IF O[X]+MAX(INLEN[X],LEN(OMASKS$[X]))+1+DESCLEN+2>O[5]-DETAIL THEN LET NEWLINE[X]=1; REM "Line feed after segment description?
0660 LET SUM_FLDLEN=SUM_FLDLEN+FLDLEN[X]
0665 NEXT X
0700 REM " --- Count Number Of Detail Lines"
0710 LET LINES=0
0720 IF POS("M"=MYP$) THEN LET LINES=LINES+1
0730 IF POS("Y"=MYP$) THEN LET LINES=LINES+1
0740 IF POS("P"=MYP$) THEN LET LINES=LINES*2
0800 REM " --- Report headings"
0805 DIM H1$(WIDTH),H2$(WIDTH),X1$[LEVEL],X2$[LEVEL]
0810 LET H=0,LITERALS$=""
0815 FOR X=1 TO LEVEL
0820 IF LITERALS$[X]="" THEN GOTO 0845
0825 LET H=H+1,LITERALS$=LITERALS$+"/"+LITERALS$[X]
0830 LET X1$[H]="From "+LITERALS$[X]+": ",X2$[H]="  To "+LITERALS$[X]+": "
0835 IF BEGSEGS$[X]="" THEN LET X1$[H]=X1$[H]+"First" ELSE LET X1$[H]=X1$[H]+BEGSEGS$[X]
0840 IF ENDSEGS$[X]="" THEN LET X2$[H]=X2$[H]+"Last" ELSE LET X2$[H]=X2$[H]+ENDSEGS$[X]
0845 NEXT X
0850 DIM H[H]
0855 IF H=1 THEN LET H[1]=MIN(FNCX(X1$[1],WIDTH/2),FNCX(X2$[1],WIDTH/2))
0860 IF H=2 THEN LET H[1]=1,H[2]=WIDTH-MAX(LEN(X1$[2]),LEN(X2$[2]))
0865 IF H=3 THEN LET H[1]=1,H[2]=MIN(FNCX(X1$[2],WIDTH/2),FNCX(X2$[2],WIDTH/2)),H[3]=WIDTH-MAX(LEN(X1$[3]),LEN(X2$[3]))
0870 IF H=4 THEN LET H[1]=1,H[2]=MIN(FNCX(X1$[2],WIDTH/3),FNCX(X2$[2],WIDTH/3)),H[3]=MIN(FNCX(X1$[3],2*WIDTH/3),FNCX(X2$[3],2*WIDTH/3)),H[4]=WIDTH-MAX(LEN(X1$[4]),LEN(X2$[4]))
0875 FOR X=1 TO H
0880 LET H1$(H[X])=X1$[X],H2$(H[X])=X2$[X]
0885 NEXT X
0890 LET LITERALS$=LITERALS$(2),HEADINGS$[3]=H1$,HEADINGS$[4]=H2$
0900 REM " --- Set Sales Anaylsis Year"
0910 CALL "SYC.NB","Processing",2+SUM_FLDLEN,COLUMN
0920 LET SAYEAR$=YEAR$,YR=0,T0$=""
0940 REM " --- Position Sort File Pointer"
0960 READ (SAM_DEV,KEY=N0$+SAYEAR$,DOM=1000)
1000 REM " --- Build Report Work File"
1010 LET SAM_K$=KEY(SAM_DEV,END=1700)
1020 IF POS(N0$+SAYEAR$=SAM_K$)<>1 THEN GOTO 1700
1030 READ (SAM_DEV)
1040 LET X=1; REM "Begin loop
1050 REM " --- Validate Segment Begin"
1060 IF BEGSEGS$[X]="" THEN GOTO 1100
1070 IF SAM_K$(KPOS[X],FLDLEN[X])>=BEGSEGS$[X] THEN GOTO 1100
1080 LET SAM_K$=SAM_K$(1,KPOS[X]-1)+BEGSEGS$[X]
1090 READ (SAM_DEV,KEY=SAM_K$,DOM=1600)
1095 GOTO 1020
1100 REM " --- Validate Segment End"
1110 IF ENDSEGS$[X]="" THEN GOTO 1150
1120 IF SAM_K$(KPOS[X],FLDLEN[X])<=ENDSEGS$[X] THEN GOTO 1150
1130 LET SAM_K$=SAM_K$(1,KPOS[X]-1)+$FF$
1140 READ (SAM_DEV,KEY=SAM_K$,DOM=1600)
1150 REM " --- Check Next Segment
1160 LET X=X+1
1170 IF X<=SEGMENTS THEN GOTO 1050; REM "End loop
1190 PRINT @(COLUMN,11),FNYY21_YY$(SAM_K$(3,2)),SAM_K$(KPOS[1],SUM_FLDLEN),
1200 REM " --- Detail Level Breadk?"
1220 IF T0$="" THEN GOTO 1400
1240 FOR X=1 TO LEVEL
1260 IF LITERALS$[X]<>"" AND SAM_K$(KPOS[X],FLDLEN[X])<>T0$(KPOS[X],FLDLEN[X]) THEN EXITTO 1300
1280 NEXT X
1290 GOTO 1500
1300 REM " --- Write Report Work File Record"
1320 WRITE (SAW00_DEV,KEY=A0$)IOL=SAW00A
1400 REM " --- Initialize New Report Work File Record"
1420 DIM A0$(SORT_SIZE+KEYLEN-2),COST[3],QNTY[3],SALES[3]
1440 LET T0$=SAM_K$(1,KPOS[LEVEL]+FLDLEN[LEVEL]-1)
1460 LET A0$(1,2)=N0$,A0$(3+SORT_SIZE)=T0$(KPOS[1])
1480 READ (SAW00_DEV,KEY=A0$,DOM=1500)IOL=SAW00A
1500 REM " --- Next Sales Analysis Record"
1510 LET SAM00_K$=SAM_K$
1520 IF ACTION>20 THEN GOSUB UN_XREF_KEY
1530 READ (SAM00_DEV,KEY=SAM00_K$,DOM=1600)IOL=SAM00A
1540 IF POS("M"=MYP$) THEN LET QNTY[YR]=QNTY[YR]+Q[PERIOD-1],COST[YR]=COST[YR]+C[PERIOD-1],SALES[YR]=SALES[YR]+S[PERIOD-1]
1550 IF POS("Y"=MYP$)=0 THEN GOTO 1600
1560 FOR P=0 TO PERIOD-1
1570 LET QNTY[YR+1]=QNTY[YR+1]+Q[P],COST[YR+1]=COST[YR+1]+C[P],SALES[YR+1]=SALES[YR+1]+S[P]
1580 NEXT P
1600 REM " --- Get Next Sort Record"
1610 GOTO 1000
1700 REM " --- Set Prior Sales Anaylsis Year"
1710 IF SAYEAR$=PRIYEAR$ THEN GOTO 1750
1720 IF POS("P"=MYP$)=0 THEN GOTO 1750
1730 LET SAYEAR$=PRIYEAR$,YR=2
1740 GOTO 0950
1750 REM " --- Write Last Report Work File Record"
1760 IF POS(" "<>A0$(3))=0 THEN GOTO 1900; REM "Empty report
1770 WRITE (SAW00_DEV,KEY=A0$)IOL=SAW00A
1800 REM " --- Sort Report Work File"
1805 IF POS(SEQ$="AD")=0 THEN GOTO 1900
1810 CALL "SYC.NB","   Sorting",2+SUM_FLDLEN,COLUMN
1815 PRINT @(COLUMN,11),FILL(2+SUM_FLDLEN),
1820 READ (SAW00_DEV,KEY="",DOM=1830)
1830 LET SAW00_K$=KEY(SAW00_DEV,END=1900)
1835 IF POS(" "<>SAW00_K$(3,SORT_SIZE)) THEN GOTO 1900
1840 READ (SAW00_DEV,KEY=SAW00_K$)IOL=SAW00A
1845 PRINT @(COLUMN,11),A0$(3+SORT_SIZE,SUM_FLDLEN),
1850 IF SEQ$="A" THEN IF SALES[SORT_KEY]>0 THEN LET A0$(3,SORT_SIZE)=STR(-SALES[SORT_KEY]:SORT_MASK$) ELSE LET A0$(3,SORT_SIZE)=STR(SORT_NUM+SALES[SORT_KEY]:SORT_MASK$)
1855 IF SEQ$="D" THEN IF SALES[SORT_KEY]<0 THEN LET A0$(3,SORT_SIZE)=STR(SALES[SORT_KEY]:SORT_MASK$) ELSE LET A0$(3,SORT_SIZE)=STR(SORT_NUM-SALES[SORT_KEY]:SORT_MASK$)
1860 IF LEVEL=1 THEN GOTO 1885
1865 LET A0$(WPOS[0],SORT_SIZE)=A0$(3,SORT_SIZE)
1870 FOR X=1 TO LEVEL
1875 LET A0$(WPOS[X],FLDLEN[X])=SAW00_K$(2+SORT_SIZE-FLDLEN[0]+KPOS[X],FLDLEN[X])
1880 NEXT X
1885 WRITE (SAW00_DEV,KEY=A0$)IOL=SAW00A
1890 REMOVE (SAW00_DEV,KEY=SAW00_K$)
1895 GOTO 1830
1900 REM " --- Position Report Work File Pointer"
1910 CALL "SYC.NB","  Printing",2+SUM_FLDLEN,COLUMN
1920 PRINT @(COLUMN,11),FILL(2+SUM_FLDLEN),
1950 DIM COST_TOT[3],QNTY_TOT[3],SALES_TOT[3],C[3],Q[3],S[3]
1960 LET DONE=0,SEG1_HEAD=0,SEG2_HEAD=0,T0$="",T1$="",T2$=""
1970 READ (SAW00_DEV,KEY="",DOM=1980)
2000 REM " --- Process Report Work File"
2010 LET SAW00_K$=KEY(SAW00_DEV,END=4000)
2020 READ (SAW00_DEV,KEY=SAW00_K$)IOL=SAW00A
2040 LET TMP$=""
2050 FOR X=1 TO LEVEL
2060 IF LITERALS$[X]<>"" THEN LET TMP$=TMP$+A0$(WPOS[X],FLDLEN[X])
2070 NEXT X
2080 PRINT @(COLUMN,11),TMP$,
2100 REM " --- Segment Breaks"
2120 IF A0$(WPOS[1],FLDLEN[1])<>T0$ THEN GOSUB 6000
2140 IF A0$(WPOS[2],FLDLEN[2])<>T1$ THEN GOSUB 6200
2160 IF A0$(WPOS[3],FLDLEN[3])<>T2$ THEN GOSUB 6400
2200 REM " --- Print Segment Subheadings"
2220 IF SEG1_HEAD THEN GOSUB 5200
2240 IF SEG2_HEAD THEN GOSUB 5400
2260 IF SEG3_HEAD THEN GOSUB 5600
2400 REM " --- Fourth Segment Detail"
2410 IF LEVEL<4 OR LITERALS$[4]="" THEN GOTO 2600
2420 LET SEG=4,SEG$=A0$(WPOS[SEG],FLDLEN[SEG])
2430 GOSUB GET_SEG_DESC
2435 IF L+LINES+NEWLINE[4]>L9 THEN GOSUB 5600
2440 PRINT (7)@(O[4]),SEGDESC$,
2450 IF NEWLINE[4] THEN PRINT (7)""; LET L=L+1
2460 LET C[ALL]=COST[ALL],Q[ALL]=QNTY[ALL],S[ALL]=SALES[ALL]
2470 GOSUB PRINT_DETAIL
2480 IF L+1>L9 THEN GOTO 2600
2490 PRINT (7)""; LET L=L+1
2600 REM " --- Accumulate Totals"
2620 LET QNTY_TOT[ALL]=QNTY_TOT[ALL]+QNTY[ALL],COST_TOT[ALL]=COST_TOT[ALL]+COST[ALL],SALES_TOT[ALL]=SALES_TOT[ALL]+SALES[ALL]
2640 IF LITERALS$[1]<>"" THEN LET QNTY_TOT1[ALL]=QNTY_TOT1[ALL]+QNTY[ALL],COST_TOT1[ALL]=COST_TOT1[ALL]+COST[ALL],SALES_TOT1[ALL]=SALES_TOT1[ALL]+SALES[ALL]
2660 IF LEVEL>1 AND LITERALS$[2]<>"" THEN LET QNTY_TOT2[ALL]=QNTY_TOT2[ALL]+QNTY[ALL],COST_TOT2[ALL]=COST_TOT2[ALL]+COST[ALL],SALES_TOT2[ALL]=SALES_TOT2[ALL]+SALES[ALL]
2680 IF LEVEL>2 AND LITERALS$[3]<>"" THEN LET QNTY_TOT3[ALL]=QNTY_TOT3[ALL]+QNTY[ALL],COST_TOT3[ALL]=COST_TOT3[ALL]+COST[ALL],SALES_TOT3[ALL]=SALES_TOT3[ALL]+SALES[ALL]
2900 REM " --- Get Next Report Work File Record"
2920 GOTO 2000
4000 REM " --- All done"
4010 LET DONE=1
4020 GOSUB 6000
4040 IF L+LINES>L9 THEN GOSUB 5000
4050 PRINT (7)@(O[1]),"Total for Report",
4060 LET C[ALL]=COST_TOT[ALL],Q[ALL]=QNTY_TOT[ALL],S[ALL]=SALES_TOT[ALL]
4070 GOSUB PRINT_DETAIL
4090 GOTO 9900
5000 REM " --- Report Heading"
5010 LET L=HEADINGS+1
5020 CALL "SYC.HA",7,HEADINGS$[ALL],HEADINGS,PAGE,WIDTH,WHEN$,CLOCK$,STATUS
5030 IF STATUS>0 THEN EXITTO 9900
5050 PRINT (7)@(O[1]),LITERALS$,@(O[5]+M2-6),"Units",@(O[6]+M1-6),"Sales",@(O[7]+M1-5),"Cost",@(O[8]+M1-13),"Gross Profit",@(O[9]+M4-7),"Percent"
5070 PRINT (7)""
5080 LET L=L+2,SEG1_HEAD=1,SEG2_HEAD=1,SEG3_HEAD=1
5090 RETURN 
5200 REM " --- First Segment Subheading"
5205 IF L+LINES+LEVEL>L9 THEN GOSUB 5000
5210 IF LITERALS$[1]="" THEN RETURN 
5220 IF SEG1_HEAD=0 THEN GOTO 5290
5240 PRINT (7)@(O[1]),SEG1_HEAD$,
5260 LET SEG1_HEAD=0
5280 IF LEVEL>1 THEN PRINT (7)""; LET L=L+1
5290 RETURN 
5400 REM " --- Second Segment Subheading"
5405 IF L+LINES+LEVEL-1>L9 THEN GOSUB 5200
5410 IF LEVEL<2 OR LITERALS$[2]="" THEN RETURN 
5420 IF SEG2_HEAD=0 THEN GOTO 5490
5440 PRINT (7)@(O[2]),SEG2_HEAD$,
5460 LET SEG2_HEAD=0
5480 IF LEVEL>2 THEN PRINT (7)""; LET L=L+1
5490 RETURN 
5600 REM " --- Third Segment Subheading"
5605 IF L+LINES+LEVEL-2>L9 THEN GOSUB 5400
5610 IF LEVEL<3 OR LITERALS$[3]="" THEN RETURN 
5620 IF SEG3_HEAD=0 THEN GOTO 5690
5640 PRINT (7)@(O[3]),SEG3_HEAD$,
5660 LET SEG3_HEAD=0
5680 IF LEVEL>3 THEN PRINT (7)""; LET L=L+1
5690 RETURN 
5800 REM " --- Print Detail Line"
5805 PRINT_DETAIL: 
5810 IF POS("M"=MYP$) THEN LET DETAIL$=MTD$,I=0; GOSUB 5880
5820 IF POS("Y"=MYP$) THEN LET DETAIL$="YTD",I=1; GOSUB 5880
5830 IF POS("P"=MYP$) AND POS("M"=MYP$) THEN LET DETAIL$=PRIMTD$,I=2; GOSUB 5880
5840 IF POS("P"=MYP$) AND POS("Y"=MYP$) THEN LET DETAIL$="Prior YTD",I=3; GOSUB 5880
5850 LET L=L+LINES
5860 GOTO 5890
5880 PRINT (7)@(O[5]-LEN(DETAIL$)-1),DETAIL$,@(O[5]),Q[I]:M2$,@(O[6]),S[I]:M1$,@(O[7]),C[I]:M1$,@(O[8]),S[I]-C[I]:M1$,@(O[9]),FNPERCENT_PROFIT(S[I],C[I]):M4$
5890 RETURN 
6000 REM " --- First Segment Break"
6005 IF LITERALS$[1]="" THEN RETURN 
6010 IF T0$="" THEN GOTO 6100
6020 GOSUB 6200
6030 IF LEVEL=1 THEN GOTO 6050
6035 IF L+LINES+NEWLINE[1]>L9 THEN GOSUB 5000
6040 PRINT (7)@(O[1]),"Total for ",T0$,
6050 IF LEVEL=1 AND NEWLINE[1] THEN PRINT (7)""; LET L=L+1
6060 LET C[ALL]=COST_TOT1[ALL],Q[ALL]=QNTY_TOT1[ALL],S[ALL]=SALES_TOT1[ALL]
6070 GOSUB PRINT_DETAIL
6080 IF L+1>L9 THEN GOTO 6100
6090 PRINT (7)""; LET L=L+1
6100 IF DONE THEN GOTO 6190
6110 DIM COST_TOT1[3],QNTY_TOT1[3],SALES_TOT1[3]
6120 LET T0$=A0$(WPOS[1],FLDLEN[1]),T1$="",T2$=""
6140 IF BREAK$="Y" THEN GOSUB 5000
6150 LET SEG$=T0$,SEG=1
6160 GOSUB GET_SEG_DESC
6170 LET SEG1_HEAD$=SEGDESC$,SEG1_HEAD=1
6190 RETURN 
6200 REM " --- Second Segment break"
6205 IF LEVEL<2 OR LITERALS$[2]="" THEN RETURN 
6210 IF T1$="" THEN GOTO 6300
6220 GOSUB 6400
6230 IF LEVEL=2 THEN GOTO 6250
6235 IF L+LINES+NEWLINE[2]>L9 THEN GOSUB 5200
6240 PRINT (7)@(O[2]),"Total for ",T1$,
6250 IF LEVEL=2 AND NEWLINE[2] THEN PRINT (7)""; LET L=L+1
6260 LET C[ALL]=COST_TOT2[ALL],Q[ALL]=QNTY_TOT2[ALL],S[ALL]=SALES_TOT2[ALL]
6270 GOSUB PRINT_DETAIL
6280 IF L+1>L9 THEN GOTO 6300
6290 PRINT (7)""; LET L=L+1
6300 IF DONE THEN GOTO 6390
6310 DIM COST_TOT2[3],QNTY_TOT2[3],SALES_TOT2[3]
6320 LET T1$=A0$(WPOS[2],FLDLEN[2]),T2$=""
6350 LET SEG$=T1$,SEG=2
6360 GOSUB GET_SEG_DESC
6370 LET SEG2_HEAD$=SEGDESC$,SEG2_HEAD=1
6390 RETURN 
6400 REM " --- Third Segment break"
6405 IF LEVEL<3 OR LITERALS$[3]="" THEN RETURN 
6410 IF T2$="" THEN GOTO 6500
6430 IF LEVEL=3 THEN GOTO 6450
6435 IF L+LINES+NEWLINE[3]>L9 THEN GOSUB 5400
6440 PRINT (7)@(O[3]),"Total for ",T2$,
6450 IF LEVEL=3 AND NEWLINE[3] THEN PRINT (7)""; LET L=L+1
6460 LET C[ALL]=COST_TOT3[ALL],Q[ALL]=QNTY_TOT3[ALL],S[ALL]=SALES_TOT3[ALL]
6470 GOSUB PRINT_DETAIL
6480 IF L+1>L9 THEN GOTO 6500
6490 PRINT (7)""; LET L=L+1
6500 IF DONE THEN GOTO 6590
6510 DIM COST_TOT3[3],QNTY_TOT3[3],SALES_TOT3[3]
6520 LET T2$=A0$(WPOS[3],FLDLEN[3])
6550 LET SEG$=T2$,SEG=3
6560 GOSUB GET_SEG_DESC
6570 LET SEG3_HEAD$=SEGDESC$,SEG3_HEAD=1
6590 RETURN 
6700 REM " --- Build Sales Analysis Key From Cross Reference Key"
6705 UN_XREF_KEY: 
6710 LET X_K$=SAM00_K$(KPOS[0],FLDLEN[0])
6720 FOR X=1 TO SEGMENTS
6740 LET X_K$=X_K$+SAM00_K$(KPOS[XREFS[X]],FLDLEN[XREFS[X]])
6760 NEXT X
6780 LET SAM00_K$(1)=X_K$
6790 RETURN 
6800 REM " --- Get Description For Segment Selection"
6805 GET_SEG_DESC: 
6810 DIM X$[DESCSTR[SEG]],X$[DESCSTR[SEG]](DESCPOS[SEG]+DESCLEN[SEG]),FLD$(INLEN[SEG])
6820 IF DESCCHAN[SEG]=0 THEN GOTO 6850
6830 LET X$[DESCSTR[SEG]](DESCPOS[SEG])="Unknown "+LITERALS$[SEG]
6840 READ (DESCCHAN[SEG],KEY=N0$+DESCREC$[SEG]+SEG$,DOM=6850)IOL=DESCCHANA
6850 LET DESC$=X$[DESCSTR[SEG]](DESCPOS[SEG],DESCLEN[SEG])
6860 LET FLD$(1)=SEG$
6870 IF TYPES$[SEG]="M" THEN LET FLD$=FNF$(FLD$(1,INLEN[SEG]),OMASKS$[SEG])
6875 IF LITERALS$[SEG]="Item" THEN LET DESC$=FNITEM$(X$[DESCSTR[SEG]](DESCPOS[SEG],DESCLEN[SEG]),IV_DESC[1],IV_DESC[2],IV_DESC[3]),FLD$=FLD$(1,INLEN[SEG])
6880 LET SEGDESC$=FLD$+"  "+DESC$
6890 RETURN 
6900 REM " --- Get Sort Parameters"
6905 GET_SORT_PARAMETERS: 
6910 LET SORT_SIZE=16,SORT_MASK$="-"+FILL(SORT_SIZE-1,"0"),M$=M1$
6920 LET X=POS("."=M$)
6930 IF X=0 THEN GOTO 6960
6940 IF POS("-"=M$)>X THEN LET X=X+1
6950 LET SORT_MASK$(SORT_SIZE-LEN(M$)+X,1)="."; REM "Place the decimal point
6960 LET SORT_NUM=NUM("1"+SORT_MASK$(2))+NUM(SORT_MASK$(1,SORT_SIZE-1)+"1"); REM "Maximum value that fits mask
6970 LET SORT_KEY=POS(MYP$(1,1)="MYP")-1
6980 IF MYP$(1,1)="P" THEN LET SORT_KEY=POS(MYP$(2,1)="MYP")+1
6990 RETURN 
8000 REM " --- Functions"
8070 DEF FNCX(Q$,Q)=INT(Q-LEN(Q$)/2)
8080 DEF FNP$(Q$)=CVS(Q$,2)
8090 DEF FNITEM$(Q$,Q1,Q2,Q3)=CVS(Q$(1,Q1)+" "+Q$(Q1+1,Q2)+" "+Q$(Q1+Q2+1,Q3),32)
8110 REM " --- FNYEAR_YY21$ Convert Numeric Year to 21st Century 2-Char Year"
8115 DEF FNYEAR_YY21$(Q)=FNYY_YY21$(STR(MOD(Q,100):"00"))
8120 REM " --- FNYY_YY21$ Convert 2-Char Year to 21st Century 2-Char Year"
8125 DEF FNYY_YY21$(Q1$)
8130 LET Q3$=" ABCDE56789ABCDEFGHIJ",Q1$(1,1)=Q3$(POS(Q1$(1,1)=" 0123456789ABCDEFGHIJ"))
8135 RETURN Q1$
8140 FNEND
8145 REM " --- FNYY21_YY$ Un-Convert 21st Century 2-Char Year to 2-Char Year"
8150 DEF FNYY21_YY$(Q1$)
8155 LET Q3$=" 01234567890123456789",Q1$(1,1)=Q3$(POS(Q1$(1,1)=" 0123456789ABCDEFGHIJ"))
8160 RETURN Q1$
8165 FNEND
8170 REM " --- FNYY_YEAR Convert 2-Char Year to 21st Century Numeric Year"
8175 DEF FNYY_YEAR(Q1$)
8180 LET Q=NUM(FNYY21_YY$(Q1$)); IF Q<50 THEN LET Q=Q+100
8185 RETURN Q
8190 FNEND
8200 REM " --- FNF$ AlphaNumeric Masking Function"
8210 DEF FNF$(Q1$,Q2$)
8220 IF Q2$="" THEN LET Q2$=FILL(LEN(Q1$),"0")
8230 RETURN STR(-NUM(Q1$,ERR=ALPHA_FNF):Q2$,ERR=ALPHA_FNF)
8240 ALPHA_FNF: 
8245 LET Q=1,Q0=0
8250 WHILE LEN(Q2$(Q))
8255 IF POS(Q2$(Q,1)="-()") THEN LET Q0=Q0+1 ELSE LET Q2$(Q,1)="X"
8260 LET Q=Q+1
8265 WEND
8270 IF LEN(Q1$)>LEN(Q2$)-Q0 THEN LET Q1$=Q1$(1,LEN(Q2$)-Q0)
8280 RETURN STR(Q1$:Q2$)
8290 FNEND
8300 REM " --- FNPERCENT_PROFIT Percent Profit Calculation"
8305 DEF FNPERCENT_PROFIT(Q1,Q2)
8310 LET Q9=999.99
8320 IF Q2=0 THEN IF Q1=0 THEN LET Q=0 ELSE LET Q=Q9
8330 IF Q2<>0 THEN LET Q=MAX(MIN((Q1-Q2)/Q2,Q9),-Q9)*100
8340 RETURN Q
8345 WEND
9000 REM " --- Standard Error Routine (15May95)"
9010 IF ERR=127 THEN GOTO 9300
9020 CALL "SYC.EA",ERR=9090,EXIT_CTRL,PGM(-2),ERR,TCB(5),E$,E1,E2
9030 IF E1=1 THEN GOTO 9100
9040 IF E1=3 THEN GOTO 9200
9080 PRINT @(0,E2),'CL','CURSOR'("ON"),E$,'LF'
9090 ESCAPE
9100 REM " --- Retry"
9190 RETRY
9200 REM " --- Return"
9290 GOTO 9900
9300 REM " --- Standard Escape Routine"
9310 CALL "SYC.ES",ERR=9350,PGM(-2),TCB(8),E$,E2,V3
9320 IF V3<>127 THEN GOTO 9390
9330 PRINT @(0,E2),'CL','CURSOR'("ON"),E$,'LF'
9350 ESCAPE
9390 RETURN 
9900 REM " --- Return To Menu"
9920 CALL "SYC.BB",STATUS
9940 RUN "SYS.AA"
9999 END
