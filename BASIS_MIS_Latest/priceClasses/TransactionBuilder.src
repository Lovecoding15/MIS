REM /**
REM  * TransactionBuilder.src
REM  * @author kwilliams
REM  * supplies methods which build up transactions for BASIS products
REM  */

use ::BasisPriceEngine.src::PriceEngine
use ::BasisPriceEngine.src::PriceElement
use ::CustomerDiscount.src::CustomerDiscount
use ::SerialNumber.src::SerialNumber

rem '-----------------------------------------------------------
rem ' a product value of BAS is a Basis Product License
rem '-----------------------------------------------------------

class public TransactionBuilder

    field private BBjNumber canadian! = 0
    field private PriceEngine pe!
    field private BBjNumber usingAltPriceTable! = 0
    field private BBjNumber usingInternetworx! = 0
    
    method public TransactionBuilder(BBjNumber doCanadian)
    
        #canadian!= doCanadian
        #usingAltPriceTable! = 0
        #usingInternetworx! = 0
        #pe!= new PriceEngine(#canadian!)
        
    methodend

    method public TransactionBuilder(BBjNumber doCanadian, BBjNumber doAltPriceTable)
    
        #canadian!= doCanadian
        #usingAltPriceTable! = doAltPriceTable
        #usingInternetworx! = 0
        #pe!= new PriceEngine(#canadian!)
        
    methodend

    method public TransactionBuilder(BBjNumber doCanadian, BBjNumber doAltPriceTable, BBjNumber doInternetworx)
    
        #canadian!= doCanadian
        #usingAltPriceTable! = doAltPriceTable
        #usingInternetworx! = doInternetworx!
        #pe!= new PriceEngine(#canadian!)
        
    methodend

    rem ' price new serial number without SAM
    method public BBjVector priceNewSerialNumberSplitSAM(SerialNumber sn!, BBjNumber samOnly)
    
        priceElements! = #priceNewSerialNumber(sn!)

        if !samOnly then
          rem ' remove any SAM Elements
          while 1
            foundone = 0
            if priceElements!.size() > 0 then
                for x = 0 to priceElements!.size() - 1
                    pe! = cast(PriceElement, priceElements!.getItem(x))
                    if pe!.getTypeOfSale() = "SM1" then 
                        priceElements!.removeItem(x)
                        foundone = 1
                        break
                    endif   
                next x
            endif
            if foundone = 0 then break
          wend
        else
          rem ' remove any non SAM elements
          while 1
            foundone = 0
            if priceElements!.size() > 0 then
                for x = 0 to priceElements!.size() - 1
                    pe! = cast(PriceElement, priceElements!.getItem(x))
                    if pe!.getTypeOfSale() <> "SM1" then 
                        priceElements!.removeItem(x)
                        foundone = 1
                        break
                    endif   
                next x
            endif
            if foundone = 0 then break
          wend
        endif
        
        methodret priceElements!
        
    methodend
    
    rem ' price new serial number
    method public BBjVector priceNewSerialNumber(SerialNumber sn!)
    
        rem ' returns a BBjVector containing PriceElements that make up the transction's prices
    
        if sn!.getProduct() = "BAS" then
            priceElements! = #priceNewBASSerialNumber(sn!)
        else
            if sn!.getProduct() = "PR5" or sn!.getProduct() = "DS5" then
                priceElements! = #priceNewPR5SerialNumber(sn!)
            else
                priceElements! = BBjAPI().makeVector()
            endif
        endif
    
        methodret priceElements!
        
    methodend
    
    method private BBjVector priceNewBASSerialNumber(SerialNumber sn!)
    
        priceElements! = BBjAPI().makeVector()
        typeOfSale$ = "NEW"

        newUserProps! = sn!.getNewUserProperties()
        newUserCounts! = sn!.getNewUserCounts()

        rem ' get a customer discount object
        cd! = new CustomerDiscount(sn!.getFirmId(), sn!.getCustomerNbr())
        
        if sn!.getProduct() = "BAS" and sn!.getLicenseType() = "STD" then
        
            rem ' the price tier used is based on the number of users (BSF + BEF)
            rem ' we use the override variable if there are more than one type of user
            override = #calculateTierOverride(newUserProps!, newUserCounts!)
            
            rem ' get the prices
            for i = 0 to newUserProps!.size() - 1
                userProp! = cast(BBjString, newUserProps!.getItem(i))
                userCount! = cast(BBjInt, newUserCounts!.getItem(i))

                rem ' a quantity one list price at the right tier level
                pel! = #pe!.getPriceElement()
                pel!.fill(sn!.getFirmId(), "B" + userProp!, typeOfSale$, 1, override, 0)
                pel! = #pe!.getPrice(pel!)
                qty1ListPrice = pel!.getListPrice()
                
                rem ' now calculate the price for the user type
                pel! = #pe!.getPriceElement()
                pel!.fill(sn!.getFirmId(), "B" + userProp!, typeOfSale$, userCount!, override, 0)
                pel! = #pe!.getPrice(pel!)
                pel! = cd!.calculateDiscount(pel!)
                priceElements!.addItem(pel!)
                
                rem ' TODO convert to use calcAnnualSAM()
                rem ' now calculate the price for the SAM on this user type
                pel! = #pe!.getPriceElement()
                pel!.fill(sn!.getFirmId(), "B" + userProp!, "SM1", userCount!, override, qty1ListPrice)
                pel! = #pe!.getPrice(pel!)
                pel! = cd!.calculateDiscount(pel!)
                priceElements!.addItem(pel!)
                
            next i 
        else
            if sn!.getProduct() = "BAS" and sn!.getLicenseType() = "RN1" then

                rem ' there are no user types in rental licenses they are all EF users
                
                rem ' we use the override variable
                override = #calculateTierOverride(newUserProps!, newUserCounts!)
                rem ' since this is a new sale and RN1 only has one type of user EF
                rem ' orverride equals the EF user count

                rem ' rental license no SAM
                pel! = #pe!.getPriceElement()
                pel!.fill(sn!.getFirmId(), "RN1", typeOfSale$, override, 0, 0)
                pel! = #pe!.getPrice(pel!)
                pel! = cd!.calculateDiscount(pel!)
                priceElements!.addItem(pel!)

            else
                if sn!.getProduct() = "BAS" and (sn!.getLicenseType() = "NFR" or sn!.getLicenseType() = "KIT") then
                    
                    rem ' all NFR and KIT users are EF users and are charged SAM only

                    rem ' we use the override variable
                    override = #calculateTierOverride(newUserProps!, newUserCounts!)
                    rem ' since this is a new sale and NFR and KIT only has one type of user EF
                    rem ' orverride equals the EF user count
                    usercount = override
                    
                    rem ' a quantity one list price at the right tier level
                    pel! = #pe!.getPriceElement()
                    pel!.fill(sn!.getFirmId(), "BEF", typeOfSale$, 1, override, 0)
                    pel! = #pe!.getPrice(pel!)
                    qty1ListPrice = pel!.getListPrice()
                    
                    rem ' TODO convert to use calcAnnualSAM()
                    rem ' now calculate the price for the SAM on this user type
                    pel! = #pe!.getPriceElement()
                    pel!.fill(sn!.getFirmId(), "BEF", "SM1", usercount, 0, qty1ListPrice)
                    pel! = #pe!.getPrice(pel!)
                    pel! = cd!.calculateDiscount(pel!)
                    priceElements!.addItem(pel!)
                
                endif
            endif
        endif
        
        methodret priceElements!

    methodend
    
    method private BBjVector priceNewPR5SerialNumber(SerialNumber sn!)
    
        priceElements! = BBjAPI().makeVector()
        typeOfSale$ = "NEW"

        if sn!.getProduct() = "PR5" or sn!.getProduct() = "DS5" then
 
            rem ' get a customer discount object
            cd! = new CustomerDiscount(sn!.getFirmId(), sn!.getCustomerNbr())
       
            rem ' get the prices
            rem ' a quantity one list price at the right tier level
            pel! = #pe!.getPriceElement()
            pel!.fill(sn!.getFirmId(), sn!.getProduct(), typeOfSale$, 1, sn!.getNewUsers(), 0)
            pel! = #pe!.getPrice(pel!)
            qty1ListPrice = pel!.getListPrice()

            rem ' now calculate the price for the user type
            pel! = #pe!.getPriceElement()
            pel!.fill(sn!.getFirmId(), sn!.getProduct(), typeOfSale$, sn!.getNewUsers(), 0, 0)
            pel! = #pe!.getPrice(pel!)
            pel! = cd!.calculateDiscount(pel!)
            priceElements!.addItem(pel!)
                
            rem ' TODO convert to use calcAnnualSAM()
            rem ' now calculate the price for the SAM
            pel! = #pe!.getPriceElement()
            pel!.fill(sn!.getFirmId(), sn!.getProduct(), "SM1", sn!.getNewUsers(), 0, qty1ListPrice)
            pel! = #pe!.getPrice(pel!)
            pel! = cd!.calculateDiscount(pel!)
            priceElements!.addItem(pel!)
        
        endif
        
        methodret priceElements!
        
    methodend

    method private BBjVector mergePriceElements(BBjVector priceElements1!, BBjVector PriceElemnts2!)
    
        priceElements! = BBjAPI().makeVector()
        
        if priceElements1! <> null() and priceElements1!.size() <> 1 then
            for x = 1 to priceElements1!.size() - 1
                priceElements!.addItem(priceElements1!.getItem(x))
            next x
        endif
        
        if priceElements2! <> null() and priceElements2!.size() <> 1 then
            for x = 1 to priceElements2!.size() - 1
                priceElements!.addItem(priceElements2!.getItem(x))
            next x
        endif

        methodret priceElements!
        
    methodend

    method public BBjVector calcAnnualKitRenew(SerialNumber sn!)
    
        rem ' returns a BBjVector containing PriceElements that make up the transactions prices
        
        priceElements! = BBjAPI().makeVector()
        
        rem ' get a customer discount object
        cd! = new CustomerDiscount(sn!.getFirmId(), sn!.getCustomerNbr())
                
        rem ' all kits are BAS
        if sn!.getProduct() = "BAS" and sn!.getSAMType() = "DV1" then
 
 	    rem ' the price tier used is based on the number of users (BSF + BEF)
            userProps! = sn!.getUserProperties()
            userCounts! = sn!.getUserCounts()
            override = #calculateTierOverride(userProps!, userCounts!)

            rem ' get the prices
            for i = 0 to userProps!.size() - 1
                userProp! = cast(BBjString, userProps!.getItem(i))
                userCount! = cast(BBjInt, userCounts!.getItem(i))

                rem ' a quantity one list price at the right tier level
                pel! = #pe!.getPriceElement()
                pel!.fill(sn!.getFirmId(), "B" + userProp!, "NEW", 1, override, 0)
                pel! = #pe!.getPrice(pel!)
                qty1ListPrice = pel!.getListPrice()

                rem ' now calculate the price for the KIT on this user type for the next year
                pel! = #pe!.getPriceElement()
                pel!.fill(sn!.getFirmId(), "B" + userProp!, "SM1", userCount!, override, qty1ListPrice)
                pel! = #pe!.getPrice(pel!)
                rem ' backup licenses are price at 50%
                if sn!.isBackupLicense() then
                    thisListPrice = pel!.getListPrice() * 0.50
                    pel!.setListPrice(thisListPrice)
                fi
	
        		rem ' License Type NFR is discountable, License Type KIT is not
        		if sn!.getLicenseType() = "KIT" then
        			pel!.setDiscountable(0)
        		else
        			pel!.setDiscountable(1)
        		fi

                pel! = cd!.calculateDiscount(pel!)
                priceElements!.addItem(pel!)
            next i
            
        endif
        
        methodret priceElements!
    
    methodend
        
    method public BBjVector calcAnnualSam(SerialNumber sn!)
    
        rem ' returns a BBjVector containing PriceElements that make up the transactions prices
        
        priceElements! = BBjAPI().makeVector()
        
        if sn!.getProduct() = "BAS" then
            priceElements! = #calcAnnualSamBASSerialNumbers(sn!)
        else
            if sn!.getProduct() = "PR5" or sn!.getProduct() = "DS5" or sn!.getProduct() = "ODB"  or sn!.getProduct() = "VP5" then
                priceElements! = #calcAnnualSamOthSerialNumber(sn!)
            else
                priceElements! = BBjAPI().makeVector()
            endif
        endif
        
        methodret priceElements!
    
    methodend
    
    method public BBjVector calcAnnualSamRenewal(BBjString firm!, BBjString customer!, BBjString product!, BBjString licenseType!, BBjString licProp1!, BBjNumber users1, BBjString licProp2!, BBjNumber users2)
    
        rem ' returns a BBjVector containing PriceElements that make up the transactions prices
        rem ' use when you don't have the serial number, but know the product, license type and users
        
        priceElements! = BBjAPI().makeVector()
        
        if product! = "BAS" then
            sn! = new SerialNumber(product!, "", "", "", licenseType!, firm!, customer!)
            if cvs(licProp1!, 3) <> "" then sn!.addNewUserPropsCounts(licProp1!, users1)
            if cvs(licProp2!, 3) <> "" then sn!.addNewUserPropsCounts(licProp2!, users2)
            
            priceElements! = #priceNewSerialNumberSplitSAM(sn!, 1)
        else
            if sn!.getProduct() = "PR5" or sn!.getProduct() = "DS5" or sn!.getProduct() = "ODB" then
              sn! = new SerialNumber(product!, "", "", "", "", firm!, customer!)
              sn!.setNewUsers(users1)
              priceElements! = #priceNewSerialNumberSplitSAM(sn!, 1)
            else
              priceElements! = BBjAPI().makeVector()
            endif
        endif
    
        methodret priceElements!
        
    methodend
     
    method private BBjVector calcAnnualSamBASSerialNumbers(SerialNumber sn!)
    
        rem ' TODO handle new users as well
        
        priceElements! = BBjAPI().makeVector()
        
        rem ' get a customer discount object
        cd! = new CustomerDiscount(sn!.getFirmId(), sn!.getCustomerNbr())
        
        if sn!.getProduct() = "BAS" and (sn!.getLicenseType() = "STD" or sn!.getLicenseType() = "NFR" or sn!.getLicenseType() = "KIT" or sn!.getLicenseType() = "EXP") then
        
            rem ' the price tier used is based on the number of users (BSF + BEF)
            userProps! = sn!.getUserProperties()
            userCounts! = sn!.getUserCounts()
            override = #calculateTierOverride(userProps!, userCounts!)

            rem ' get the prices
            for i = 0 to userProps!.size() - 1
                userProp! = cast(BBjString, userProps!.getItem(i))
                userCount! = cast(BBjInt, userCounts!.getItem(i))

                rem ' a quantity one list price at the right tier level
                pel! = #pe!.getPriceElement()
                pel!.fill(sn!.getFirmId(), "B" + userProp!, "NEW", 1, override, 0)
                pel! = #pe!.getPrice(pel!)
                qty1ListPrice = pel!.getListPrice()

                rem ' now calculate the price for the SAM on this user type for the next year
                pel! = #pe!.getPriceElement()
                pel!.fill(sn!.getFirmId(), "B" + userProp!, "SM1", userCount!, override, qty1ListPrice)
                pel! = #pe!.getPrice(pel!)
                rem ' backup licenses are price at 50%
                if sn!.isBackupLicense() then
                    thisListPrice = pel!.getListPrice() * 0.50
                    pel!.setListPrice(thisListPrice)
                fi
                pel! = cd!.calculateDiscount(pel!)
                priceElements!.addItem(pel!)
            next i
         
        endif
    
        methodret priceElements!

    methodend
    
    method private BBjVector calcAnnualSamOthSerialNumber(SerialNumber sn!)
    
        rem ' TODO handle new users as well
        
        priceElements! = BBjAPI().makeVector()
        
        rem ' get a customer discount object
        cd! = new CustomerDiscount(sn!.getFirmId(), sn!.getCustomerNbr())

        rem ' get the prices
        rem ' a quantity one list price at the right tier level
        typeOfSale$ = "NEW"
        pel! = #pe!.getPriceElement()
        pel!.fill(sn!.getFirmId(), sn!.getProduct(), typeOfSale$, 1, sn!.getUsers(), 0)
        pel! = #pe!.getPrice(pel!)
        qty1ListPrice = pel!.getListPrice()

        rem ' now calculate the price for the SAM
        pel! = #pe!.getPriceElement()
        pel!.fill(sn!.getFirmId(), sn!.getProduct(), "SM1", sn!.getUsers(), 0, qty1ListPrice)
        pel! = #pe!.getPrice(pel!)
        pel! = cd!.calculateDiscount(pel!)
        priceElements!.addItem(pel!)

        methodret priceElements!
        
    methodend
    
    method public BBjVector calcSamBuyback(SerialNumber sn!)
    
        rem ' returns a BBjVector containing PriceElements that make up the transction's prices
    
        if sn!.getProduct() = "BAS" then
            priceElements! = #calcSamBuybackBASSerialNumbers(sn!)
        else
            if sn!.getProduct() = "PR5" or sn!.getProduct() = "DS5" then
                priceElements! = #calcSamBuybackPR5SerialNumber(sn!)
            else
                priceElements! = BBjAPI().makeVector()
            endif
        endif
    
        methodret priceElements!
        
    methodend

    method private BBjVector calcSamBuybackBASSerialNumbers(SerialNumber sn!)
    
        priceElements! = BBjAPI().makeVector()
        typeOfSale$ = "NEW"

        rem ' get a customer discount object
        cd! = new CustomerDiscount(sn!.getFirmId(), sn!.getCustomerNbr())

        if sn!.getProduct() = "BAS" and sn!.getLicenseType() = "STD" then
        
            rem ' the price tier used is based on the number of users (BSF + BEF)
            rem ' we use the override variable if there are more than one type of user
            userProps! = sn!.getUserProperties()
            userCounts! = sn!.getUserCounts()
            override = #calculateTierOverride(userProps!, userCounts!)

            rem ' get the prices
            for i = 0 to userProps!.size() - 1
                userProp! = cast(BBjString, userProps!.getItem(i))
                userCount! = cast(BBjInt, userCounts!.getItem(i))

                rem ' a quantity one list price at the right tier level
                pel! = #pe!.getPriceElement()
                pel!.fill(sn!.getFirmId(), "B" + userProp!, "NEW", 1, override, 0)
                pel! = #pe!.getPrice(pel!)
                qty1ListPrice = pel!.getListPrice()

                rem ' TODO convert to use calcAnnualSAM()
                rem ' now calculate the price for the SAM on this user type for the next year
                pel! = #pe!.getPriceElement()
                pel!.fill(sn!.getFirmId(), "B" + userProp!, "SM1", userCount!, override, qty1ListPrice)
                pel! = #pe!.getPrice(pel!)
                pel! = cd!.calculateDiscount(pel!)
                priceElements!.addItem(pel!)
                
                annualSAM = pel!.getListPrice()
                dailySAM = annualSAM/365
                                
                rem ' now calculate the price for the RIF on this user type
                pel! = #pe!.getPriceElement()
                pel!.fill(sn!.getFirmId(), "B" + userProp!, "RIF", userCount!, override, qty1ListPrice)
                pel! = #pe!.getPrice(pel!)
                pel! = cd!.calculateDiscount(pel!)
                priceElements!.addItem(pel!)

                rem ' not calculated the SAM Buyback
                daysSAMExpired = sn!.daysSamExpired()
                samBuyback = dailySAM * daysSAMExpired
                pel! = #pe!.getPriceElement()
                pel!.fill(sn!.getFirmId(), "B" + userProp!, "SM1", userCount!, override, qty1ListPrice)
                pel!.setDiscountable(1)
                pel!.setPriceCalculated(1)
                pel!.setListPrice(samBuyback)
                pel! = cd!.calculateDiscount(pel!)
                priceElements!.addItem(pel!)
        
                rem ' TODO check for Max SAM Buyback here
                
            next i    
                      
        endif
                
        methodret priceElements!
        
    methodend
    
    method public BBjVector calcAnnualRental(SerialNumber sn!)
    
        rem ' returns a BBjVector containing PriceElements that make up the transactions prices
        rem ' Rentals are defined as BAS products only with only Extended users
        
        priceElements! = BBjAPI().makeVector()
        
        if sn!.getProduct() = "BAS" then

	    rem ' get a customer discount object
            cd! = new CustomerDiscount(sn!.getFirmId(), sn!.getCustomerNbr())
        
            if sn!.getProduct() = "BAS" and sn!.getLicenseType() = "RN1" then
        
	        rem ' the price tier used is based on the number of users (BSF + BEF)
	        userProps! = sn!.getUserProperties()
	        userCounts! = sn!.getUserCounts()
	        override = #calculateTierOverride(userProps!, userCounts!)

	        rem ' get the prices
	        UserCount! = 0
	        for i = 0 to userProps!.size() - 1
    	            UserCount! = UserCount! + cast(BBjInt, userCounts!.getItem(i))
                next i

                rem ' now calculate the price for the rental for the next year
                pel! = #pe!.getPriceElement()
                pel!.fill(sn!.getFirmId(), "RN1", "NEW", userCount!, override, 0)
                pel! = #pe!.getPrice(pel!)
                rem ' backup licenses are price at 50%
                if sn!.isBackupLicense() then
                    thisListPrice = pel!.getListPrice() * 0.50
                    pel!.setListPrice(thisListPrice)
                fi
                pel! = cd!.calculateDiscount(pel!)
                priceElements!.addItem(pel!)
            endif
      
        endif
    
        methodret priceElements!

    methodend
    
    method private BBjNumber calculateTierOverride(BBjVector userProps!, BBjVector userCounts!)
    
        rem ' the total of users on various user properties will be the price tier used
        override = 0
        if userProps!.size() > 0 then
            for i = 0 to userCounts!.size() - 1
                override = override + cast(BBjInt, userCounts!.getItem(i))
            next i
        endif
        
        methodret cast(BBjNumber, override)

    methodend
    
    method public BBjNumber sumDiscountedPrice(BBjVector priceElements!)
    
        discountedPrice! = 0
        if priceElements!.size() > 0 then
            for x = 0 to priceElements!.size() - 1
                pe! = cast(PriceElement, priceElements!.getItem(x))
                discountedPrice! = discountedPrice! + pe!.getDiscountedPrice()
            next x
        endif
        
        methodret discountedPrice!
    methodend
    
    method public BBjNumber sumListPrice(BBjVector priceElements!)
    
        listPrice! = 0
        if priceElements!.size() > 0 then
            for x = 0 to priceElements!.size() - 1
                pe! = cast(PriceElement, priceElements!.getItem(x))
                listPrice! = listPrice! + pe!.getListPrice()
            next x
        endif
        
        methodret listPrice!
    methodend
    
    rem ' getters and setters for members
    
    method public BBjNumber isCanadian()
        
        methodret #canadian!
        
    methodend
    
    method public void setCanadian(BBjNumber doCanadian)
        
        rem ' change the canadian status of the TransactionBuilder
        #canadian! = doCanadian
        #pe!= new PriceEngine(#canadian!, #usingAltPriceTable!)
        
    methodend
    
    method public BBjNumber isUsingAltPriceTable()
        
        methodret #usingAltPriceTable!
        
    methodend
    
    method public void setAltPriceTable(BBjNumber doAltPriceTable)

        rem ' change the alt price status of the TransactionBuilder
        #usingAltPriceTable! = doAltPriceTable
        #pe!= new PriceEngine(#canadian!,#usingAltPriceTable!)

    methodend
    
    method public void setInternetworx(BBjNumber doInternetworx)
    	
    	rem ' change the Internetworx status of the Transaction builder
    	rem ' internetworx is not canadian
    	#canadian! = 0
        #usingInternetworx! = doInternetworx
        #pe!= new PriceEngine(#canadian!, #usingAltPriceTable!, #usingInternetworx!)
    
    methodend
    
    method public BBjNumber isUsingInternetworx()

        methodret #usingInternetworx!

    methodend

classend
